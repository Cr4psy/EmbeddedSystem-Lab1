
DIP204_EXAMPLE2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006cf4  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008e00  80008e00  00009200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000744  80009000  80009000  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009744  80009744  00009b44  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80009748  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80009c54  0000a114  2**0
                  ALLOC
  9 .bss          00000160  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000d00  00000000  00000000  0000a148  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000177b  00000000  00000000  0000ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001d841  00000000  00000000  0000c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000050e1  00000000  00000000  00029e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d611  00000000  00000000  0002eee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001e6c  00000000  00000000  0003c4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003d62  00000000  00000000  0003e364  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00009c65  00000000  00000000  000420c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00844f41  00000000  00000000  0004bd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000f20  00000000  00000000  00890c70  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d4 bc 	sub	pc,pc,-11076

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f4 c0 	sub	pc,pc,-2880

Disassembly of section .text:

80002008 <main>:
80002008:	d4 31       	pushm	r0-r7,lr
8000200a:	20 3d       	sub	sp,12
UINT32 Ident;
UINT8 msg[8], mSize;

int main(void) {
	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
8000200c:	30 3a       	mov	r10,3
8000200e:	e0 6b 1b 00 	mov	r11,6912
80002012:	ea 1b 00 b7 	orh	r11,0xb7
80002016:	fe 7c 0c 00 	mov	r12,-62464
8000201a:	f0 1f 00 45 	mcall	8000212c <main+0x124>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
8000201e:	f0 1f 00 45 	mcall	80002130 <main+0x128>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002022:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002024:	f0 1f 00 44 	mcall	80002134 <main+0x12c>
	Enable_global_interrupt();
80002028:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
8000202a:	f0 1f 00 44 	mcall	80002138 <main+0x130>
	dip204_init(100,1);
8000202e:	30 1b       	mov	r11,1
80002030:	36 4c       	mov	r12,100
80002032:	f0 1f 00 43 	mcall	8000213c <main+0x134>
	dip204_clear_display();
80002036:	f0 1f 00 43 	mcall	80002140 <main+0x138>
	
	UINT16 Mask = 0; 
	UINT16 flt = 0;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
8000203a:	30 08       	mov	r8,0
8000203c:	ba 08       	st.h	sp[0x0],r8
8000203e:	ba 18       	st.h	sp[0x2],r8
80002040:	ba 28       	st.h	sp[0x4],r8
80002042:	ba 38       	st.h	sp[0x6],r8
80002044:	ba 48       	st.h	sp[0x8],r8
80002046:	ba 58       	st.h	sp[0xa],r8
	InitializeCAN(0, CAN_250kbps, Mask, Flt);
80002048:	1a 99       	mov	r9,sp
8000204a:	30 0a       	mov	r10,0
8000204c:	30 7b       	mov	r11,7
8000204e:	14 9c       	mov	r12,r10
80002050:	f0 1f 00 3d 	mcall	80002144 <main+0x13c>
	
	dip204_set_cursor_position(1,1);
80002054:	30 1b       	mov	r11,1
80002056:	16 9c       	mov	r12,r11
80002058:	f0 1f 00 3c 	mcall	80002148 <main+0x140>
	dip204_printf_string("ES1 CAN EXAMPLE");
8000205c:	4b cc       	lddpc	r12,8000214c <main+0x144>
8000205e:	f0 1f 00 3d 	mcall	80002150 <main+0x148>
	dip204_hide_cursor();
80002062:	f0 1f 00 3d 	mcall	80002154 <main+0x14c>

	while(1){
		//Clear memory contents
		ClearMessages(msg);
80002066:	4b d7       	lddpc	r7,80002158 <main+0x150>
		//Read any message available
		if(CANRxReady(0)){
80002068:	30 06       	mov	r6,0
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
8000206a:	4b d4       	lddpc	r4,8000215c <main+0x154>
8000206c:	4b d3       	lddpc	r3,80002160 <main+0x158>
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000206e:	e0 61 1b 00 	mov	r1,6912
80002072:	ea 11 00 b7 	orh	r1,0xb7
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
		{
			msg[0]=0;
80002076:	30 02       	mov	r2,0
			msg[1]=100;
80002078:	36 45       	mov	r5,100
			msg[2]=100;
			msg[3]=0;
			msg[4]=100;
			msg[5]=0x06;
8000207a:	30 60       	mov	r0,6
	dip204_printf_string("ES1 CAN EXAMPLE");
	dip204_hide_cursor();

	while(1){
		//Clear memory contents
		ClearMessages(msg);
8000207c:	0e 9c       	mov	r12,r7
8000207e:	f0 1f 00 3a 	mcall	80002164 <main+0x15c>
		//Read any message available
		if(CANRxReady(0)){
80002082:	0c 9c       	mov	r12,r6
80002084:	f0 1f 00 39 	mcall	80002168 <main+0x160>
80002088:	c2 40       	breq	800020d0 <main+0xc8>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
8000208a:	08 99       	mov	r9,r4
8000208c:	0e 9a       	mov	r10,r7
8000208e:	06 9b       	mov	r11,r3
80002090:	0c 9c       	mov	r12,r6
80002092:	f0 1f 00 37 	mcall	8000216c <main+0x164>
80002096:	c1 d0       	breq	800020d0 <main+0xc8>
			{	
				// Evk1100PrintDisplay prints 4 message values, the Identifier and the data size on the display
				dip204_clear_display();
80002098:	f0 1f 00 2a 	mcall	80002140 <main+0x138>
				Evk1100PrintDisp(&Ident, msg, &mSize );
8000209c:	08 9a       	mov	r10,r4
8000209e:	0e 9b       	mov	r11,r7
800020a0:	06 9c       	mov	r12,r3
800020a2:	f0 1f 00 34 	mcall	80002170 <main+0x168>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800020a6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800020aa:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800020ae:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800020b2:	14 38       	cp.w	r8,r10
800020b4:	e0 88 00 08 	brls	800020c4 <main+0xbc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800020b8:	12 38       	cp.w	r8,r9
800020ba:	fe 98 ff fa 	brls	800020ae <main+0xa6>
800020be:	12 3a       	cp.w	r10,r9
800020c0:	c3 23       	brcs	80002124 <main+0x11c>
800020c2:	cf 6b       	rjmp	800020ae <main+0xa6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800020c4:	12 38       	cp.w	r8,r9
800020c6:	e0 8b 00 2f 	brhi	80002124 <main+0x11c>
800020ca:	12 3a       	cp.w	r10,r9
800020cc:	c2 c3       	brcs	80002124 <main+0x11c>
800020ce:	cf 0b       	rjmp	800020ae <main+0xa6>
				delay_ms(1000);
				dip204_clear_display();
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
800020d0:	0c 9c       	mov	r12,r6
800020d2:	f0 1f 00 29 	mcall	80002174 <main+0x16c>
800020d6:	cd 30       	breq	8000207c <main+0x74>
		{
			msg[0]=0;
800020d8:	ae 82       	st.b	r7[0x0],r2
			msg[1]=100;
800020da:	ae 95       	st.b	r7[0x1],r5
			msg[2]=100;
800020dc:	ae a5       	st.b	r7[0x2],r5
			msg[3]=0;
800020de:	ae b2       	st.b	r7[0x3],r2
			msg[4]=100;
800020e0:	ae c5       	st.b	r7[0x4],r5
			msg[5]=0x06;
800020e2:	ae d0       	st.b	r7[0x5],r0
			msg[6]=0x07;
800020e4:	30 78       	mov	r8,7
800020e6:	ae e8       	st.b	r7[0x6],r8
			msg[7]=50;
800020e8:	33 28       	mov	r8,50
800020ea:	ae f8       	st.b	r7[0x7],r8
			// Channel, Identifier (max 0x1fffffff (29 bits)), Message, Number of bytes, R //or 0 (Remote frame or no remote frame).
			CANSendMsg( 0, 0x01, msg, 8, 0 );
800020ec:	0c 98       	mov	r8,r6
800020ee:	30 89       	mov	r9,8
800020f0:	0e 9a       	mov	r10,r7
800020f2:	30 1b       	mov	r11,1
800020f4:	0c 9c       	mov	r12,r6
800020f6:	f0 1f 00 21 	mcall	80002178 <main+0x170>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800020fa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800020fe:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002102:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002106:	14 38       	cp.w	r8,r10
80002108:	e0 88 00 08 	brls	80002118 <main+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000210c:	12 38       	cp.w	r8,r9
8000210e:	fe 98 ff fa 	brls	80002102 <main+0xfa>
80002112:	12 3a       	cp.w	r10,r9
80002114:	cb 43       	brcs	8000207c <main+0x74>
80002116:	cf 6b       	rjmp	80002102 <main+0xfa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002118:	12 38       	cp.w	r8,r9
8000211a:	fe 9b ff b1 	brhi	8000207c <main+0x74>
8000211e:	12 3a       	cp.w	r10,r9
80002120:	ca e3       	brcs	8000207c <main+0x74>
80002122:	cf 0b       	rjmp	80002102 <main+0xfa>
			{	
				// Evk1100PrintDisplay prints 4 message values, the Identifier and the data size on the display
				dip204_clear_display();
				Evk1100PrintDisp(&Ident, msg, &mSize );
				delay_ms(1000);
				dip204_clear_display();
80002124:	f0 1f 00 07 	mcall	80002140 <main+0x138>
80002128:	cd 4b       	rjmp	800020d0 <main+0xc8>
8000212a:	00 00       	add	r0,r0
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	28 90       	sub	r0,-119
80002130:	80 00       	ld.sh	r0,r0[0x0]
80002132:	2c 24       	sub	r4,-62
80002134:	80 00       	ld.sh	r0,r0[0x0]
80002136:	27 78       	sub	r8,119
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	2b 98       	sub	r8,-71
8000213c:	80 00       	ld.sh	r0,r0[0x0]
8000213e:	24 90       	sub	r0,73
80002140:	80 00       	ld.sh	r0,r0[0x0]
80002142:	24 34       	sub	r4,67
80002144:	80 00       	ld.sh	r0,r0[0x0]
80002146:	30 10       	mov	r0,1
80002148:	80 00       	ld.sh	r0,r0[0x0]
8000214a:	23 a8       	sub	r8,58
8000214c:	80 00       	ld.sh	r0,r0[0x0]
8000214e:	90 00       	ld.sh	r0,r8[0x0]
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	23 10       	sub	r0,49
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	24 04       	sub	r4,64
80002158:	00 00       	add	r0,r0
8000215a:	06 60       	and	r0,r3
8000215c:	00 00       	add	r0,r0
8000215e:	06 68       	and	r8,r3
80002160:	00 00       	add	r0,r0
80002162:	06 6c       	and	r12,r3
80002164:	80 00       	ld.sh	r0,r0[0x0]
80002166:	2b 84       	sub	r4,-72
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	2d 08       	sub	r8,-48
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	32 7c       	mov	r12,39
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	30 50       	mov	r0,5
80002174:	80 00       	ld.sh	r0,r0[0x0]
80002176:	2d 1c       	sub	r12,-47
80002178:	80 00       	ld.sh	r0,r0[0x0]
8000217a:	31 44       	mov	r4,20

8000217c <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000217c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002180:	49 18       	lddpc	r8,800021c4 <LED_On+0x48>
80002182:	70 09       	ld.w	r9,r8[0x0]
80002184:	f9 e9 10 09 	or	r9,r12,r9
80002188:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000218a:	58 0c       	cp.w	r12,0
8000218c:	5e 0c       	reteq	r12
8000218e:	48 f8       	lddpc	r8,800021c8 <LED_On+0x4c>
80002190:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002192:	18 9a       	mov	r10,r12
80002194:	5c 9a       	brev	r10
80002196:	f4 0a 12 00 	clz	r10,r10
8000219a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
8000219c:	f4 09 15 04 	lsl	r9,r10,0x4
800021a0:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800021a2:	70 09       	ld.w	r9,r8[0x0]
800021a4:	a9 69       	lsl	r9,0x8
800021a6:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800021aa:	70 1b       	ld.w	r11,r8[0x4]
800021ac:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800021b0:	70 1b       	ld.w	r11,r8[0x4]
800021b2:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800021b6:	70 1b       	ld.w	r11,r8[0x4]
800021b8:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800021ba:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800021be:	ce a1       	brne	80002192 <LED_On+0x16>
800021c0:	5e fc       	retal	r12
800021c2:	00 00       	add	r0,r0
800021c4:	00 00       	add	r0,r0
800021c6:	00 08       	add	r8,r0
800021c8:	80 00       	ld.sh	r0,r0[0x0]
800021ca:	90 10       	ld.sh	r0,r8[0x2]

800021cc <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800021cc:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800021d0:	49 28       	lddpc	r8,80002218 <LED_Off+0x4c>
800021d2:	70 09       	ld.w	r9,r8[0x0]
800021d4:	f8 0a 11 ff 	rsub	r10,r12,-1
800021d8:	f5 e9 00 09 	and	r9,r10,r9
800021dc:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800021de:	58 0c       	cp.w	r12,0
800021e0:	5e 0c       	reteq	r12
800021e2:	48 f8       	lddpc	r8,8000221c <LED_Off+0x50>
800021e4:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800021e6:	18 9a       	mov	r10,r12
800021e8:	5c 9a       	brev	r10
800021ea:	f4 0a 12 00 	clz	r10,r10
800021ee:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
800021f0:	f4 09 15 04 	lsl	r9,r10,0x4
800021f4:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800021f6:	70 09       	ld.w	r9,r8[0x0]
800021f8:	a9 69       	lsl	r9,0x8
800021fa:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800021fe:	70 1b       	ld.w	r11,r8[0x4]
80002200:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002204:	70 1b       	ld.w	r11,r8[0x4]
80002206:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000220a:	70 1b       	ld.w	r11,r8[0x4]
8000220c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000220e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002212:	ce a1       	brne	800021e6 <LED_Off+0x1a>
80002214:	5e fc       	retal	r12
80002216:	00 00       	add	r0,r0
80002218:	00 00       	add	r0,r0
8000221a:	00 08       	add	r8,r0
8000221c:	80 00       	ld.sh	r0,r0[0x0]
8000221e:	90 10       	ld.sh	r0,r8[0x2]

80002220 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002220:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002222:	30 2b       	mov	r11,2
80002224:	fe 7c 28 00 	mov	r12,-55296
80002228:	f0 1f 00 02 	mcall	80002230 <dip204_select+0x10>
}
8000222c:	d8 02       	popm	pc
8000222e:	00 00       	add	r0,r0
80002230:	80 00       	ld.sh	r0,r0[0x0]
80002232:	29 ce       	sub	lr,-100

80002234 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002234:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002238:	f8 c8 ff f8 	sub	r8,r12,-8
8000223c:	30 69       	mov	r9,6
8000223e:	f2 08 18 00 	cp.b	r8,r9
80002242:	e0 8b 00 0f 	brhi	80002260 <dip204_write_byte+0x2c>
80002246:	30 19       	mov	r9,1
80002248:	f2 08 09 48 	lsl	r8,r9,r8
8000224c:	e2 18 00 55 	andl	r8,0x55,COH
80002250:	c0 80       	breq	80002260 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002252:	18 9b       	mov	r11,r12
80002254:	fe 7c 28 00 	mov	r12,-55296
80002258:	f0 1f 00 0c 	mcall	80002288 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
8000225c:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002260:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002262:	f8 07 16 18 	lsr	r7,r12,0x18
80002266:	0e 9b       	mov	r11,r7
80002268:	e2 1b 00 f0 	andl	r11,0xf0,COH
8000226c:	fe 7c 28 00 	mov	r12,-55296
80002270:	f0 1f 00 06 	mcall	80002288 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002274:	ee 0b 15 04 	lsl	r11,r7,0x4
80002278:	e2 1b 00 f0 	andl	r11,0xf0,COH
8000227c:	fe 7c 28 00 	mov	r12,-55296
80002280:	f0 1f 00 02 	mcall	80002288 <dip204_write_byte+0x54>
80002284:	e3 cd 80 80 	ldm	sp++,r7,pc
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	2a fe       	sub	lr,-81

8000228c <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
8000228c:	eb cd 40 c0 	pushm	r6-r7,lr
80002290:	20 1d       	sub	sp,4
80002292:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002294:	fa c7 ff fc 	sub	r7,sp,-4
80002298:	30 08       	mov	r8,0
8000229a:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
8000229c:	30 0b       	mov	r11,0
8000229e:	fe 7c 28 00 	mov	r12,-55296
800022a2:	f0 1f 00 08 	mcall	800022c0 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
800022a6:	0e 9b       	mov	r11,r7
800022a8:	fe 7c 28 00 	mov	r12,-55296
800022ac:	f0 1f 00 06 	mcall	800022c4 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
800022b0:	1b b8       	ld.ub	r8,sp[0x3]
800022b2:	5c 98       	brev	r8
800022b4:	b9 88       	lsr	r8,0x18
800022b6:	ac 88       	st.b	r6[0x0],r8
}
800022b8:	2f fd       	sub	sp,-4
800022ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022be:	00 00       	add	r0,r0
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	2a fe       	sub	lr,-81
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	2b 22       	sub	r2,-78

800022c8 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
800022c8:	eb cd 40 c0 	pushm	r6-r7,lr
800022cc:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
800022ce:	fa c7 ff fc 	sub	r7,sp,-4
800022d2:	30 08       	mov	r8,0
800022d4:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
800022d6:	e0 6c 00 fc 	mov	r12,252
800022da:	f0 1f 00 07 	mcall	800022f4 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800022de:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
800022e0:	0e 9c       	mov	r12,r7
800022e2:	f0 1f 00 06 	mcall	800022f8 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800022e6:	1b b8       	ld.ub	r8,sp[0x3]
800022e8:	ec 08 18 00 	cp.b	r8,r6
800022ec:	cf a5       	brlt	800022e0 <dip204_wait_busy+0x18>
}
800022ee:	2f fd       	sub	sp,-4
800022f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	22 34       	sub	r4,35
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	22 8c       	sub	r12,40

800022fc <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800022fc:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800022fe:	30 2b       	mov	r11,2
80002300:	fe 7c 28 00 	mov	r12,-55296
80002304:	f0 1f 00 02 	mcall	8000230c <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002308:	d8 02       	popm	pc
8000230a:	00 00       	add	r0,r0
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	2a 1a       	sub	r10,-95

80002310 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002310:	d4 21       	pushm	r4-r7,lr
80002312:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002314:	fa ca ff d4 	sub	r10,sp,-44
80002318:	18 9b       	mov	r11,r12
8000231a:	1a 9c       	mov	r12,sp
8000231c:	f0 1f 00 1e 	mcall	80002394 <dip204_printf_string+0x84>
80002320:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002322:	31 38       	mov	r8,19
80002324:	f0 0c 18 00 	cp.b	r12,r8
80002328:	e0 8b 00 0e 	brhi	80002344 <dip204_printf_string+0x34>
8000232c:	30 0a       	mov	r10,0
8000232e:	31 49       	mov	r9,20
80002330:	fa c8 ff e8 	sub	r8,sp,-24
80002334:	18 08       	add	r8,r12
80002336:	f1 6a ff e8 	st.b	r8[-24],r10
8000233a:	2f fc       	sub	r12,-1
8000233c:	5c 5c       	castu.b	r12
8000233e:	f2 0c 18 00 	cp.b	r12,r9
80002342:	cf 71       	brne	80002330 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002344:	f0 1f 00 15 	mcall	80002398 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002348:	30 08       	mov	r8,0
8000234a:	1b 89       	ld.ub	r9,sp[0x0]
8000234c:	f0 09 18 00 	cp.b	r9,r8
80002350:	c1 e0       	breq	8000238c <dip204_printf_string+0x7c>
80002352:	30 06       	mov	r6,0
80002354:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002356:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
8000235a:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
8000235c:	08 9c       	mov	r12,r4
8000235e:	f0 1f 00 10 	mcall	8000239c <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002362:	fa c8 ff e8 	sub	r8,sp,-24
80002366:	f0 06 00 06 	add	r6,r8,r6
8000236a:	ed 3c ff e8 	ld.ub	r12,r6[-24]
8000236e:	f0 1f 00 0c 	mcall	8000239c <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002372:	2f f7       	sub	r7,-1
80002374:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002376:	f0 1f 00 0b 	mcall	800023a0 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
8000237a:	0e 96       	mov	r6,r7
8000237c:	fa c8 ff e8 	sub	r8,sp,-24
80002380:	0e 08       	add	r8,r7
80002382:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002386:	ea 08 18 00 	cp.b	r8,r5
8000238a:	ce 91       	brne	8000235c <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
8000238c:	f0 1f 00 06 	mcall	800023a4 <dip204_printf_string+0x94>
}
80002390:	2f ad       	sub	sp,-24
80002392:	d8 22       	popm	r4-r7,pc
80002394:	80 00       	ld.sh	r0,r0[0x0]
80002396:	35 94       	mov	r4,89
80002398:	80 00       	ld.sh	r0,r0[0x0]
8000239a:	22 20       	sub	r0,34
8000239c:	80 00       	ld.sh	r0,r0[0x0]
8000239e:	22 34       	sub	r4,35
800023a0:	80 00       	ld.sh	r0,r0[0x0]
800023a2:	22 c8       	sub	r8,44
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	22 fc       	sub	r12,47

800023a8 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
800023a8:	eb cd 40 c0 	pushm	r6-r7,lr
800023ac:	18 96       	mov	r6,r12
800023ae:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
800023b0:	f0 1f 00 11 	mcall	800023f4 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
800023b4:	31 48       	mov	r8,20
800023b6:	f0 06 18 00 	cp.b	r6,r8
800023ba:	5f 89       	srls	r9
800023bc:	30 48       	mov	r8,4
800023be:	f0 07 18 00 	cp.b	r7,r8
800023c2:	5f 88       	srls	r8
800023c4:	f3 e8 00 08 	and	r8,r9,r8
800023c8:	c0 31       	brne	800023ce <dip204_set_cursor_position+0x26>
800023ca:	30 06       	mov	r6,0
800023cc:	c0 68       	rjmp	800023d8 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
800023ce:	28 16       	sub	r6,-127
800023d0:	20 17       	sub	r7,1
800023d2:	a5 77       	lsl	r7,0x5
800023d4:	0e 06       	add	r6,r7
800023d6:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800023d8:	e0 6c 00 f8 	mov	r12,248
800023dc:	f0 1f 00 07 	mcall	800023f8 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
800023e0:	0c 9c       	mov	r12,r6
800023e2:	f0 1f 00 06 	mcall	800023f8 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
800023e6:	f0 1f 00 06 	mcall	800023fc <dip204_set_cursor_position+0x54>
  dip204_unselect();
800023ea:	f0 1f 00 06 	mcall	80002400 <dip204_set_cursor_position+0x58>
}
800023ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023f2:	00 00       	add	r0,r0
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	22 20       	sub	r0,34
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	22 34       	sub	r4,35
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	22 c8       	sub	r8,44
80002400:	80 00       	ld.sh	r0,r0[0x0]
80002402:	22 fc       	sub	r12,47

80002404 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002404:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002406:	f0 1f 00 08 	mcall	80002424 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000240a:	e0 6c 00 f8 	mov	r12,248
8000240e:	f0 1f 00 07 	mcall	80002428 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002412:	30 cc       	mov	r12,12
80002414:	f0 1f 00 05 	mcall	80002428 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002418:	f0 1f 00 05 	mcall	8000242c <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
8000241c:	f0 1f 00 05 	mcall	80002430 <dip204_hide_cursor+0x2c>
}
80002420:	d8 02       	popm	pc
80002422:	00 00       	add	r0,r0
80002424:	80 00       	ld.sh	r0,r0[0x0]
80002426:	22 20       	sub	r0,34
80002428:	80 00       	ld.sh	r0,r0[0x0]
8000242a:	22 34       	sub	r4,35
8000242c:	80 00       	ld.sh	r0,r0[0x0]
8000242e:	22 c8       	sub	r8,44
80002430:	80 00       	ld.sh	r0,r0[0x0]
80002432:	22 fc       	sub	r12,47

80002434 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002434:	d4 01       	pushm	lr
  dip204_select();
80002436:	f0 1f 00 13 	mcall	80002480 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000243a:	e0 6c 00 f8 	mov	r12,248
8000243e:	f0 1f 00 12 	mcall	80002484 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002442:	30 1c       	mov	r12,1
80002444:	f0 1f 00 10 	mcall	80002484 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002448:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000244c:	e0 69 bb 80 	mov	r9,48000
80002450:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002454:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002458:	14 38       	cp.w	r8,r10
8000245a:	e0 88 00 08 	brls	8000246a <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000245e:	12 38       	cp.w	r8,r9
80002460:	fe 98 ff fa 	brls	80002454 <dip204_clear_display+0x20>
80002464:	12 3a       	cp.w	r10,r9
80002466:	c0 73       	brcs	80002474 <dip204_clear_display+0x40>
80002468:	cf 6b       	rjmp	80002454 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000246a:	12 38       	cp.w	r8,r9
8000246c:	e0 8b 00 04 	brhi	80002474 <dip204_clear_display+0x40>
80002470:	12 3a       	cp.w	r10,r9
80002472:	cf 12       	brcc	80002454 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002474:	f0 1f 00 05 	mcall	80002488 <dip204_clear_display+0x54>
  dip204_unselect();
80002478:	f0 1f 00 05 	mcall	8000248c <dip204_clear_display+0x58>
}
8000247c:	d8 02       	popm	pc
8000247e:	00 00       	add	r0,r0
80002480:	80 00       	ld.sh	r0,r0[0x0]
80002482:	22 20       	sub	r0,34
80002484:	80 00       	ld.sh	r0,r0[0x0]
80002486:	22 34       	sub	r4,35
80002488:	80 00       	ld.sh	r0,r0[0x0]
8000248a:	22 c8       	sub	r8,44
8000248c:	80 00       	ld.sh	r0,r0[0x0]
8000248e:	22 fc       	sub	r12,47

80002490 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002490:	eb cd 40 80 	pushm	r7,lr
80002494:	20 4d       	sub	sp,16
80002496:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002498:	58 1c       	cp.w	r12,1
8000249a:	c3 01       	brne	800024fa <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
8000249c:	30 69       	mov	r9,6
8000249e:	4f a8       	lddpc	r8,80002684 <dip204_init+0x1f4>
800024a0:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
800024a2:	30 2b       	mov	r11,2
800024a4:	33 2c       	mov	r12,50
800024a6:	f0 1f 00 79 	mcall	80002688 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
800024aa:	30 08       	mov	r8,0
800024ac:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
800024ae:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
800024b0:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
800024b2:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
800024b4:	1a 9c       	mov	r12,sp
800024b6:	f0 1f 00 76 	mcall	8000268c <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
800024ba:	58 07       	cp.w	r7,0
800024bc:	f9 b7 01 31 	movne	r7,49
800024c0:	f9 b7 00 01 	moveq	r7,1
800024c4:	4f 38       	lddpc	r8,80002690 <dip204_init+0x200>
800024c6:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
800024c8:	4f 3b       	lddpc	r11,80002694 <dip204_init+0x204>
800024ca:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800024cc:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
800024d0:	ab a8       	sbr	r8,0xa
800024d2:	30 89       	mov	r9,8
800024d4:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800024d8:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800024da:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800024dc:	33 28       	mov	r8,50
800024de:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800024e0:	30 08       	mov	r8,0
800024e2:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800024e4:	4e 87       	lddpc	r7,80002684 <dip204_init+0x1f4>
800024e6:	6e 0c       	ld.w	r12,r7[0x0]
800024e8:	f0 1f 00 6c 	mcall	80002698 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
800024ec:	6e 08       	ld.w	r8,r7[0x0]
800024ee:	30 1c       	mov	r12,1
800024f0:	f8 08 09 4c 	lsl	r12,r12,r8
800024f4:	f0 1f 00 6a 	mcall	8000269c <dip204_init+0x20c>
800024f8:	c0 a8       	rjmp	8000250c <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
800024fa:	58 0b       	cp.w	r11,0
800024fc:	c0 50       	breq	80002506 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800024fe:	33 2c       	mov	r12,50
80002500:	f0 1f 00 68 	mcall	800026a0 <dip204_init+0x210>
80002504:	c0 48       	rjmp	8000250c <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002506:	33 2c       	mov	r12,50
80002508:	f0 1f 00 67 	mcall	800026a4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000250c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002510:	e2 79 a9 80 	mov	r9,240000
80002514:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002518:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000251c:	14 38       	cp.w	r8,r10
8000251e:	e0 88 00 08 	brls	8000252e <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002522:	12 38       	cp.w	r8,r9
80002524:	fe 98 ff fa 	brls	80002518 <dip204_init+0x88>
80002528:	12 3a       	cp.w	r10,r9
8000252a:	c6 e3       	brcs	80002606 <dip204_init+0x176>
8000252c:	cf 6b       	rjmp	80002518 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000252e:	12 38       	cp.w	r8,r9
80002530:	e0 8b 00 6b 	brhi	80002606 <dip204_init+0x176>
80002534:	12 3a       	cp.w	r10,r9
80002536:	c6 83       	brcs	80002606 <dip204_init+0x176>
80002538:	cf 0b       	rjmp	80002518 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000253a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000253e:	14 38       	cp.w	r8,r10
80002540:	e0 88 00 08 	brls	80002550 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002544:	12 38       	cp.w	r8,r9
80002546:	fe 98 ff fa 	brls	8000253a <dip204_init+0xaa>
8000254a:	12 3a       	cp.w	r10,r9
8000254c:	c6 b3       	brcs	80002622 <dip204_init+0x192>
8000254e:	cf 6b       	rjmp	8000253a <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002550:	12 38       	cp.w	r8,r9
80002552:	e0 8b 00 68 	brhi	80002622 <dip204_init+0x192>
80002556:	12 3a       	cp.w	r10,r9
80002558:	c6 53       	brcs	80002622 <dip204_init+0x192>
8000255a:	cf 0b       	rjmp	8000253a <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000255c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002560:	14 38       	cp.w	r8,r10
80002562:	e0 88 00 08 	brls	80002572 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002566:	12 38       	cp.w	r8,r9
80002568:	fe 98 ff fa 	brls	8000255c <dip204_init+0xcc>
8000256c:	12 3a       	cp.w	r10,r9
8000256e:	c6 23       	brcs	80002632 <dip204_init+0x1a2>
80002570:	cf 6b       	rjmp	8000255c <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002572:	12 38       	cp.w	r8,r9
80002574:	e0 8b 00 5f 	brhi	80002632 <dip204_init+0x1a2>
80002578:	12 3a       	cp.w	r10,r9
8000257a:	c5 c3       	brcs	80002632 <dip204_init+0x1a2>
8000257c:	cf 0b       	rjmp	8000255c <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000257e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002582:	14 38       	cp.w	r8,r10
80002584:	e0 88 00 08 	brls	80002594 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002588:	12 38       	cp.w	r8,r9
8000258a:	fe 98 ff fa 	brls	8000257e <dip204_init+0xee>
8000258e:	12 3a       	cp.w	r10,r9
80002590:	c5 93       	brcs	80002642 <dip204_init+0x1b2>
80002592:	cf 6b       	rjmp	8000257e <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002594:	12 38       	cp.w	r8,r9
80002596:	e0 8b 00 56 	brhi	80002642 <dip204_init+0x1b2>
8000259a:	12 3a       	cp.w	r10,r9
8000259c:	c5 33       	brcs	80002642 <dip204_init+0x1b2>
8000259e:	cf 0b       	rjmp	8000257e <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025a0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025a4:	14 38       	cp.w	r8,r10
800025a6:	e0 88 00 08 	brls	800025b6 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025aa:	12 38       	cp.w	r8,r9
800025ac:	fe 98 ff fa 	brls	800025a0 <dip204_init+0x110>
800025b0:	12 3a       	cp.w	r10,r9
800025b2:	c5 03       	brcs	80002652 <dip204_init+0x1c2>
800025b4:	cf 6b       	rjmp	800025a0 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025b6:	12 38       	cp.w	r8,r9
800025b8:	e0 8b 00 4d 	brhi	80002652 <dip204_init+0x1c2>
800025bc:	12 3a       	cp.w	r10,r9
800025be:	c4 a3       	brcs	80002652 <dip204_init+0x1c2>
800025c0:	cf 0b       	rjmp	800025a0 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025c6:	14 38       	cp.w	r8,r10
800025c8:	e0 88 00 08 	brls	800025d8 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025cc:	12 38       	cp.w	r8,r9
800025ce:	fe 98 ff fa 	brls	800025c2 <dip204_init+0x132>
800025d2:	12 3a       	cp.w	r10,r9
800025d4:	c4 93       	brcs	80002666 <dip204_init+0x1d6>
800025d6:	cf 6b       	rjmp	800025c2 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025d8:	12 38       	cp.w	r8,r9
800025da:	e0 8b 00 46 	brhi	80002666 <dip204_init+0x1d6>
800025de:	12 3a       	cp.w	r10,r9
800025e0:	c4 33       	brcs	80002666 <dip204_init+0x1d6>
800025e2:	cf 0b       	rjmp	800025c2 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025e4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025e8:	14 38       	cp.w	r8,r10
800025ea:	e0 88 00 08 	brls	800025fa <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025ee:	12 38       	cp.w	r8,r9
800025f0:	fe 98 ff fa 	brls	800025e4 <dip204_init+0x154>
800025f4:	12 3a       	cp.w	r10,r9
800025f6:	c4 03       	brcs	80002676 <dip204_init+0x1e6>
800025f8:	cf 6b       	rjmp	800025e4 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025fa:	12 38       	cp.w	r8,r9
800025fc:	e0 8b 00 3d 	brhi	80002676 <dip204_init+0x1e6>
80002600:	12 3a       	cp.w	r10,r9
80002602:	c3 a3       	brcs	80002676 <dip204_init+0x1e6>
80002604:	cf 0b       	rjmp	800025e4 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002606:	f0 1f 00 29 	mcall	800026a8 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000260a:	e0 6c 00 f8 	mov	r12,248
8000260e:	f0 1f 00 28 	mcall	800026ac <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002612:	33 4c       	mov	r12,52
80002614:	f0 1f 00 26 	mcall	800026ac <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002618:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000261c:	f0 ca d1 20 	sub	r10,r8,-12000
80002620:	c8 db       	rjmp	8000253a <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002622:	30 9c       	mov	r12,9
80002624:	f0 1f 00 22 	mcall	800026ac <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002628:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000262c:	f0 ca d1 20 	sub	r10,r8,-12000
80002630:	c9 6b       	rjmp	8000255c <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002632:	33 0c       	mov	r12,48
80002634:	f0 1f 00 1e 	mcall	800026ac <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002638:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000263c:	f0 ca d1 20 	sub	r10,r8,-12000
80002640:	c9 fb       	rjmp	8000257e <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002642:	30 fc       	mov	r12,15
80002644:	f0 1f 00 1a 	mcall	800026ac <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002648:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000264c:	f0 ca d1 20 	sub	r10,r8,-12000
80002650:	ca 8b       	rjmp	800025a0 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002652:	30 1c       	mov	r12,1
80002654:	f0 1f 00 16 	mcall	800026ac <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002658:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000265c:	e0 69 ea 60 	mov	r9,60000
80002660:	f0 09 00 0a 	add	r10,r8,r9
80002664:	ca fb       	rjmp	800025c2 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002666:	30 6c       	mov	r12,6
80002668:	f0 1f 00 11 	mcall	800026ac <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000266c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002670:	f0 ca d1 20 	sub	r10,r8,-12000
80002674:	cb 8b       	rjmp	800025e4 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002676:	f0 1f 00 0f 	mcall	800026b0 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
8000267a:	f0 1f 00 0f 	mcall	800026b4 <dip204_init+0x224>
}
8000267e:	2f cd       	sub	sp,-16
80002680:	e3 cd 80 80 	ldm	sp++,r7,pc
80002684:	00 00       	add	r0,r0
80002686:	00 0c       	add	r12,r0
80002688:	80 00       	ld.sh	r0,r0[0x0]
8000268a:	26 b8       	sub	r8,107
8000268c:	80 00       	ld.sh	r0,r0[0x0]
8000268e:	29 04       	sub	r4,-112
80002690:	00 00       	add	r0,r0
80002692:	05 38       	ld.ub	r8,r2++
80002694:	00 00       	add	r0,r0
80002696:	05 18       	ld.sh	r8,r2++
80002698:	80 00       	ld.sh	r0,r0[0x0]
8000269a:	28 bc       	sub	r12,-117
8000269c:	80 00       	ld.sh	r0,r0[0x0]
8000269e:	28 f2       	sub	r2,-113
800026a0:	80 00       	ld.sh	r0,r0[0x0]
800026a2:	27 58       	sub	r8,117
800026a4:	80 00       	ld.sh	r0,r0[0x0]
800026a6:	27 3c       	sub	r12,115
800026a8:	80 00       	ld.sh	r0,r0[0x0]
800026aa:	22 20       	sub	r0,34
800026ac:	80 00       	ld.sh	r0,r0[0x0]
800026ae:	22 34       	sub	r4,35
800026b0:	80 00       	ld.sh	r0,r0[0x0]
800026b2:	22 c8       	sub	r8,44
800026b4:	80 00       	ld.sh	r0,r0[0x0]
800026b6:	22 fc       	sub	r12,47

800026b8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800026b8:	f8 08 16 05 	lsr	r8,r12,0x5
800026bc:	a9 68       	lsl	r8,0x8
800026be:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800026c2:	58 1b       	cp.w	r11,1
800026c4:	c0 d0       	breq	800026de <gpio_enable_module_pin+0x26>
800026c6:	c0 63       	brcs	800026d2 <gpio_enable_module_pin+0x1a>
800026c8:	58 2b       	cp.w	r11,2
800026ca:	c1 00       	breq	800026ea <gpio_enable_module_pin+0x32>
800026cc:	58 3b       	cp.w	r11,3
800026ce:	c1 40       	breq	800026f6 <gpio_enable_module_pin+0x3e>
800026d0:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800026d2:	30 19       	mov	r9,1
800026d4:	f2 0c 09 49 	lsl	r9,r9,r12
800026d8:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800026da:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800026dc:	c1 28       	rjmp	80002700 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800026de:	30 19       	mov	r9,1
800026e0:	f2 0c 09 49 	lsl	r9,r9,r12
800026e4:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800026e6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800026e8:	c0 c8       	rjmp	80002700 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800026ea:	30 19       	mov	r9,1
800026ec:	f2 0c 09 49 	lsl	r9,r9,r12
800026f0:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800026f2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800026f4:	c0 68       	rjmp	80002700 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800026f6:	30 19       	mov	r9,1
800026f8:	f2 0c 09 49 	lsl	r9,r9,r12
800026fc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800026fe:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002700:	30 19       	mov	r9,1
80002702:	f2 0c 09 4c 	lsl	r12,r9,r12
80002706:	91 2c       	st.w	r8[0x8],r12
80002708:	5e fd       	retal	0
8000270a:	d7 03       	nop

8000270c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000270c:	d4 21       	pushm	r4-r7,lr
8000270e:	18 97       	mov	r7,r12
80002710:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002712:	58 0b       	cp.w	r11,0
80002714:	c0 31       	brne	8000271a <gpio_enable_module+0xe>
80002716:	30 05       	mov	r5,0
80002718:	c0 d8       	rjmp	80002732 <gpio_enable_module+0x26>
8000271a:	30 06       	mov	r6,0
8000271c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000271e:	6e 1b       	ld.w	r11,r7[0x4]
80002720:	6e 0c       	ld.w	r12,r7[0x0]
80002722:	f0 1f 00 06 	mcall	80002738 <gpio_enable_module+0x2c>
80002726:	18 45       	or	r5,r12
		gpiomap++;
80002728:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000272a:	2f f6       	sub	r6,-1
8000272c:	0c 34       	cp.w	r4,r6
8000272e:	fe 9b ff f8 	brhi	8000271e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002732:	0a 9c       	mov	r12,r5
80002734:	d8 22       	popm	r4-r7,pc
80002736:	00 00       	add	r0,r0
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	26 b8       	sub	r8,107

8000273c <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000273c:	f8 08 16 05 	lsr	r8,r12,0x5
80002740:	a9 68       	lsl	r8,0x8
80002742:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002746:	30 19       	mov	r9,1
80002748:	f2 0c 09 4c 	lsl	r12,r9,r12
8000274c:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002750:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002754:	91 1c       	st.w	r8[0x4],r12
}
80002756:	5e fc       	retal	r12

80002758 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002758:	f8 08 16 05 	lsr	r8,r12,0x5
8000275c:	a9 68       	lsl	r8,0x8
8000275e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002762:	30 19       	mov	r9,1
80002764:	f2 0c 09 4c 	lsl	r12,r9,r12
80002768:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000276c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002770:	91 1c       	st.w	r8[0x4],r12
}
80002772:	5e fc       	retal	r12

80002774 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002774:	c0 08       	rjmp	80002774 <_unhandled_interrupt>
80002776:	d7 03       	nop

80002778 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002778:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000277a:	49 18       	lddpc	r8,800027bc <INTC_init_interrupts+0x44>
8000277c:	e3 b8 00 01 	mtsr	0x4,r8
80002780:	49 0e       	lddpc	lr,800027c0 <INTC_init_interrupts+0x48>
80002782:	30 07       	mov	r7,0
80002784:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002786:	49 0c       	lddpc	r12,800027c4 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002788:	49 05       	lddpc	r5,800027c8 <INTC_init_interrupts+0x50>
8000278a:	10 15       	sub	r5,r8
8000278c:	fe 76 08 00 	mov	r6,-63488
80002790:	c1 08       	rjmp	800027b0 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002792:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002794:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002796:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002798:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000279c:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000279e:	10 3a       	cp.w	r10,r8
800027a0:	fe 9b ff fc 	brhi	80002798 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800027a4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800027a8:	2f f7       	sub	r7,-1
800027aa:	2f 8e       	sub	lr,-8
800027ac:	59 47       	cp.w	r7,20
800027ae:	c0 50       	breq	800027b8 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800027b0:	7c 08       	ld.w	r8,lr[0x0]
800027b2:	58 08       	cp.w	r8,0
800027b4:	ce f1       	brne	80002792 <INTC_init_interrupts+0x1a>
800027b6:	cf 7b       	rjmp	800027a4 <INTC_init_interrupts+0x2c>
800027b8:	d8 22       	popm	r4-r7,pc
800027ba:	00 00       	add	r0,r0
800027bc:	80 00       	ld.sh	r0,r0[0x0]
800027be:	8e 00       	ld.sh	r0,r7[0x0]
800027c0:	80 00       	ld.sh	r0,r0[0x0]
800027c2:	90 90       	ld.uh	r0,r8[0x2]
800027c4:	80 00       	ld.sh	r0,r0[0x0]
800027c6:	27 74       	sub	r4,119
800027c8:	80 00       	ld.sh	r0,r0[0x0]
800027ca:	8f 04       	st.w	r7[0x0],r4

800027cc <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800027cc:	fe 78 08 00 	mov	r8,-63488
800027d0:	e0 69 00 83 	mov	r9,131
800027d4:	f2 0c 01 0c 	sub	r12,r9,r12
800027d8:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800027dc:	f2 ca ff c0 	sub	r10,r9,-64
800027e0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027e4:	58 08       	cp.w	r8,0
800027e6:	c0 21       	brne	800027ea <_get_interrupt_handler+0x1e>
800027e8:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800027ea:	f0 08 12 00 	clz	r8,r8
800027ee:	48 5a       	lddpc	r10,80002800 <_get_interrupt_handler+0x34>
800027f0:	f4 09 00 39 	add	r9,r10,r9<<0x3
800027f4:	f0 08 11 1f 	rsub	r8,r8,31
800027f8:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800027fa:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800027fe:	5e fc       	retal	r12
80002800:	80 00       	ld.sh	r0,r0[0x0]
80002802:	90 90       	ld.uh	r0,r8[0x2]

80002804 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002804:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002806:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000280a:	99 a8       	st.w	r12[0x28],r8
}
8000280c:	5e fc       	retal	r12
8000280e:	d7 03       	nop

80002810 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002810:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002812:	ec 5b bb 9f 	cp.w	r11,899999
80002816:	e0 8b 00 04 	brhi	8000281e <pm_enable_osc0_crystal+0xe>
8000281a:	30 4b       	mov	r11,4
8000281c:	c1 38       	rjmp	80002842 <pm_enable_osc0_crystal+0x32>
8000281e:	e0 68 c6 bf 	mov	r8,50879
80002822:	ea 18 00 2d 	orh	r8,0x2d
80002826:	10 3b       	cp.w	r11,r8
80002828:	e0 8b 00 04 	brhi	80002830 <pm_enable_osc0_crystal+0x20>
8000282c:	30 5b       	mov	r11,5
8000282e:	c0 a8       	rjmp	80002842 <pm_enable_osc0_crystal+0x32>
80002830:	e0 68 12 00 	mov	r8,4608
80002834:	ea 18 00 7a 	orh	r8,0x7a
80002838:	10 3b       	cp.w	r11,r8
8000283a:	f9 bb 03 06 	movlo	r11,6
8000283e:	f9 bb 02 07 	movhs	r11,7
80002842:	f0 1f 00 02 	mcall	80002848 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002846:	d8 02       	popm	pc
80002848:	80 00       	ld.sh	r0,r0[0x0]
8000284a:	28 04       	sub	r4,-128

8000284c <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000284c:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000284e:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002852:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002854:	78 08       	ld.w	r8,r12[0x0]
80002856:	a3 a8       	sbr	r8,0x2
80002858:	99 08       	st.w	r12[0x0],r8
}
8000285a:	5e fc       	retal	r12

8000285c <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000285c:	79 58       	ld.w	r8,r12[0x54]
8000285e:	e2 18 00 80 	andl	r8,0x80,COH
80002862:	cf d0       	breq	8000285c <pm_wait_for_clk0_ready>
}
80002864:	5e fc       	retal	r12
80002866:	d7 03       	nop

80002868 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002868:	eb cd 40 80 	pushm	r7,lr
8000286c:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000286e:	f0 1f 00 04 	mcall	8000287c <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002872:	0e 9c       	mov	r12,r7
80002874:	f0 1f 00 03 	mcall	80002880 <pm_enable_clk0+0x18>
}
80002878:	e3 cd 80 80 	ldm	sp++,r7,pc
8000287c:	80 00       	ld.sh	r0,r0[0x0]
8000287e:	28 4c       	sub	r12,-124
80002880:	80 00       	ld.sh	r0,r0[0x0]
80002882:	28 5c       	sub	r12,-123

80002884 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002884:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002886:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000288a:	99 08       	st.w	r12[0x0],r8
}
8000288c:	5e fc       	retal	r12
8000288e:	d7 03       	nop

80002890 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002890:	eb cd 40 c0 	pushm	r6-r7,lr
80002894:	18 97       	mov	r7,r12
80002896:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002898:	f0 1f 00 06 	mcall	800028b0 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
8000289c:	0c 9b       	mov	r11,r6
8000289e:	0e 9c       	mov	r12,r7
800028a0:	f0 1f 00 05 	mcall	800028b4 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800028a4:	30 1b       	mov	r11,1
800028a6:	0e 9c       	mov	r12,r7
800028a8:	f0 1f 00 04 	mcall	800028b8 <pm_switch_to_osc0+0x28>
}
800028ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	28 10       	sub	r0,-127
800028b4:	80 00       	ld.sh	r0,r0[0x0]
800028b6:	28 68       	sub	r8,-122
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	28 84       	sub	r4,-120

800028bc <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
800028bc:	58 0b       	cp.w	r11,0
800028be:	c1 90       	breq	800028f0 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800028c0:	58 6c       	cp.w	r12,6
800028c2:	e0 8b 00 17 	brhi	800028f0 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800028c6:	76 0a       	ld.w	r10,r11[0x0]
800028c8:	fe 78 30 00 	mov	r8,-53248
800028cc:	f8 c9 ff f0 	sub	r9,r12,-16
800028d0:	a5 79       	lsl	r9,0x5
800028d2:	f0 09 00 09 	add	r9,r8,r9
800028d6:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800028d8:	76 19       	ld.w	r9,r11[0x4]
800028da:	a5 7c       	lsl	r12,0x5
800028dc:	f0 0c 00 0c 	add	r12,r8,r12
800028e0:	f8 c8 fd fc 	sub	r8,r12,-516
800028e4:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800028e6:	76 28       	ld.w	r8,r11[0x8]
800028e8:	f8 cc fd f8 	sub	r12,r12,-520
800028ec:	99 08       	st.w	r12[0x0],r8
800028ee:	5e fd       	retal	0

  return PWM_SUCCESS;
800028f0:	5e ff       	retal	1

800028f2 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800028f2:	18 98       	mov	r8,r12
800028f4:	e0 18 ff 80 	andl	r8,0xff80
800028f8:	c0 20       	breq	800028fc <pwm_start_channels+0xa>
800028fa:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800028fc:	fe 78 30 00 	mov	r8,-53248
80002900:	91 1c       	st.w	r8[0x4],r12
80002902:	5e fd       	retal	0

80002904 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002904:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002908:	58 0c       	cp.w	r12,0
8000290a:	c0 21       	brne	8000290e <pwm_init+0xa>
8000290c:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000290e:	e6 18 00 01 	andh	r8,0x1,COH
80002912:	c0 91       	brne	80002924 <pwm_init+0x20>
80002914:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002916:	fe 78 30 00 	mov	r8,-53248
8000291a:	37 f9       	mov	r9,127
8000291c:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000291e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002920:	d5 03       	csrf	0x10
80002922:	c0 68       	rjmp	8000292e <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002924:	fe 78 30 00 	mov	r8,-53248
80002928:	37 f9       	mov	r9,127
8000292a:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000292c:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000292e:	78 08       	ld.w	r8,r12[0x0]
80002930:	78 39       	ld.w	r9,r12[0xc]
80002932:	a9 69       	lsl	r9,0x8
80002934:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002938:	78 18       	ld.w	r8,r12[0x4]
8000293a:	10 49       	or	r9,r8
8000293c:	78 28       	ld.w	r8,r12[0x8]
8000293e:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002942:	fe 78 30 00 	mov	r8,-53248
80002946:	91 09       	st.w	r8[0x0],r9
80002948:	5e fd       	retal	0

8000294a <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000294a:	f8 c8 00 01 	sub	r8,r12,1
8000294e:	f0 0b 00 0b 	add	r11,r8,r11
80002952:	f6 0c 0d 0a 	divu	r10,r11,r12
80002956:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80002958:	f4 c8 00 01 	sub	r8,r10,1
8000295c:	e0 48 00 fe 	cp.w	r8,254
80002960:	e0 88 00 03 	brls	80002966 <getBaudDiv+0x1c>
80002964:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002966:	5c 8c       	casts.h	r12
}
80002968:	5e fc       	retal	r12

8000296a <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000296a:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000296e:	30 18       	mov	r8,1
80002970:	f0 09 18 00 	cp.b	r9,r8
80002974:	e0 88 00 04 	brls	8000297c <spi_initMaster+0x12>
80002978:	30 2c       	mov	r12,2
8000297a:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000297c:	e0 68 00 80 	mov	r8,128
80002980:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80002982:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80002984:	30 19       	mov	r9,1
80002986:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000298a:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000298e:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80002992:	30 09       	mov	r9,0
80002994:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002998:	30 fa       	mov	r10,15
8000299a:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
8000299e:	99 18       	st.w	r12[0x4],r8
800029a0:	5e f9       	retal	r9

800029a2 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800029a2:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800029a4:	30 18       	mov	r8,1
800029a6:	f0 0b 18 00 	cp.b	r11,r8
800029aa:	5f be       	srhi	lr
800029ac:	f0 0a 18 00 	cp.b	r10,r8
800029b0:	5f b8       	srhi	r8
800029b2:	fd e8 10 08 	or	r8,lr,r8
800029b6:	c0 30       	breq	800029bc <spi_selectionMode+0x1a>
800029b8:	30 2c       	mov	r12,2
800029ba:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800029bc:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800029be:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800029c2:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800029c6:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800029ca:	99 18       	st.w	r12[0x4],r8
800029cc:	d8 0a       	popm	pc,r12=0

800029ce <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800029ce:	78 18       	ld.w	r8,r12[0x4]
800029d0:	ea 18 00 0f 	orh	r8,0xf
800029d4:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800029d6:	78 18       	ld.w	r8,r12[0x4]
800029d8:	e2 18 00 04 	andl	r8,0x4,COH
800029dc:	c0 f0       	breq	800029fa <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800029de:	30 e8       	mov	r8,14
800029e0:	f0 0b 18 00 	cp.b	r11,r8
800029e4:	e0 8b 00 19 	brhi	80002a16 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800029e8:	78 18       	ld.w	r8,r12[0x4]
800029ea:	b1 6b       	lsl	r11,0x10
800029ec:	ea 1b ff f0 	orh	r11,0xfff0
800029f0:	e8 1b ff ff 	orl	r11,0xffff
800029f4:	10 6b       	and	r11,r8
800029f6:	99 1b       	st.w	r12[0x4],r11
800029f8:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800029fa:	30 38       	mov	r8,3
800029fc:	f0 0b 18 00 	cp.b	r11,r8
80002a00:	e0 8b 00 0b 	brhi	80002a16 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002a04:	78 18       	ld.w	r8,r12[0x4]
80002a06:	2f 0b       	sub	r11,-16
80002a08:	30 19       	mov	r9,1
80002a0a:	f2 0b 09 4b 	lsl	r11,r9,r11
80002a0e:	5c db       	com	r11
80002a10:	10 6b       	and	r11,r8
80002a12:	99 1b       	st.w	r12[0x4],r11
80002a14:	5e fd       	retal	0
80002a16:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002a18:	5e fc       	retal	r12

80002a1a <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002a1a:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002a1e:	c0 58       	rjmp	80002a28 <spi_unselectChip+0xe>
		if (!timeout--) {
80002a20:	58 08       	cp.w	r8,0
80002a22:	c0 21       	brne	80002a26 <spi_unselectChip+0xc>
80002a24:	5e ff       	retal	1
80002a26:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002a28:	78 49       	ld.w	r9,r12[0x10]
80002a2a:	e2 19 02 00 	andl	r9,0x200,COH
80002a2e:	cf 90       	breq	80002a20 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002a30:	78 18       	ld.w	r8,r12[0x4]
80002a32:	ea 18 00 0f 	orh	r8,0xf
80002a36:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002a38:	fc 18 01 00 	movh	r8,0x100
80002a3c:	99 08       	st.w	r12[0x0],r8
80002a3e:	5e fd       	retal	0

80002a40 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002a40:	eb cd 40 f8 	pushm	r3-r7,lr
80002a44:	18 95       	mov	r5,r12
80002a46:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002a48:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002a4c:	30 38       	mov	r8,3
80002a4e:	f0 06 18 00 	cp.b	r6,r8
80002a52:	e0 8b 00 4d 	brhi	80002aec <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002a56:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002a5a:	30 18       	mov	r8,1
80002a5c:	f0 04 18 00 	cp.b	r4,r8
80002a60:	e0 8b 00 46 	brhi	80002aec <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80002a64:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002a68:	30 78       	mov	r8,7
80002a6a:	f0 03 18 00 	cp.b	r3,r8
80002a6e:	e0 88 00 3f 	brls	80002aec <spi_setupChipReg+0xac>
80002a72:	31 08       	mov	r8,16
80002a74:	f0 03 18 00 	cp.b	r3,r8
80002a78:	e0 8b 00 3a 	brhi	80002aec <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80002a7c:	14 9b       	mov	r11,r10
80002a7e:	6e 1c       	ld.w	r12,r7[0x4]
80002a80:	f0 1f 00 1d 	mcall	80002af4 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80002a84:	c3 45       	brlt	80002aec <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80002a86:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80002a88:	ec 09 16 01 	lsr	r9,r6,0x1
80002a8c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002a90:	ec 16 00 01 	eorl	r6,0x1
80002a94:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002a98:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002a9c:	20 83       	sub	r3,8
80002a9e:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002aa2:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002aa6:	ef 39 00 09 	ld.ub	r9,r7[9]
80002aaa:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002aae:	ef 39 00 0a 	ld.ub	r9,r7[10]
80002ab2:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80002ab6:	0f 89       	ld.ub	r9,r7[0x0]
80002ab8:	30 1a       	mov	r10,1
80002aba:	f4 09 18 00 	cp.b	r9,r10
80002abe:	c0 e0       	breq	80002ada <spi_setupChipReg+0x9a>
80002ac0:	c0 a3       	brcs	80002ad4 <spi_setupChipReg+0x94>
80002ac2:	30 2a       	mov	r10,2
80002ac4:	f4 09 18 00 	cp.b	r9,r10
80002ac8:	c0 c0       	breq	80002ae0 <spi_setupChipReg+0xa0>
80002aca:	30 3a       	mov	r10,3
80002acc:	f4 09 18 00 	cp.b	r9,r10
80002ad0:	c0 e1       	brne	80002aec <spi_setupChipReg+0xac>
80002ad2:	c0 a8       	rjmp	80002ae6 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002ad4:	8b c8       	st.w	r5[0x30],r8
80002ad6:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002ada:	8b d8       	st.w	r5[0x34],r8
80002adc:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002ae0:	8b e8       	st.w	r5[0x38],r8
80002ae2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002ae6:	8b f8       	st.w	r5[0x3c],r8
80002ae8:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002aec:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002aee:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002af2:	00 00       	add	r0,r0
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	29 4a       	sub	r10,-108

80002af8 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002af8:	30 18       	mov	r8,1
80002afa:	99 08       	st.w	r12[0x0],r8
}
80002afc:	5e fc       	retal	r12

80002afe <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002afe:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002b02:	c0 58       	rjmp	80002b0c <spi_write+0xe>
		if (!timeout--) {
80002b04:	58 08       	cp.w	r8,0
80002b06:	c0 21       	brne	80002b0a <spi_write+0xc>
80002b08:	5e ff       	retal	1
80002b0a:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002b0c:	78 49       	ld.w	r9,r12[0x10]
80002b0e:	e2 19 00 02 	andl	r9,0x2,COH
80002b12:	cf 90       	breq	80002b04 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002b14:	5c 7b       	castu.h	r11
80002b16:	99 3b       	st.w	r12[0xc],r11
80002b18:	5e fd       	retal	0

80002b1a <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80002b1a:	78 4c       	ld.w	r12,r12[0x10]
}
80002b1c:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002b20:	5e fc       	retal	r12

80002b22 <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80002b22:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002b26:	c0 58       	rjmp	80002b30 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002b28:	58 08       	cp.w	r8,0
80002b2a:	c0 21       	brne	80002b2e <spi_read+0xc>
80002b2c:	5e ff       	retal	1
80002b2e:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002b30:	78 49       	ld.w	r9,r12[0x10]
80002b32:	e2 19 02 01 	andl	r9,0x201,COH
80002b36:	e0 49 02 01 	cp.w	r9,513
80002b3a:	cf 71       	brne	80002b28 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002b3c:	78 28       	ld.w	r8,r12[0x8]
80002b3e:	b6 08       	st.h	r11[0x0],r8
80002b40:	5e fd       	retal	0
80002b42:	d7 03       	nop

80002b44 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002b44:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002b48:	fe c0 9d 48 	sub	r0,pc,-25272

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002b4c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002b50:	d5 53       	csrf	0x15
  cp      r0, r1
80002b52:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002b54:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002b58:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002b5a:	c0 72       	brcc	80002b68 <idata_load_loop_end>
  cp      r0, r1
80002b5c:	fe c2 94 14 	sub	r2,pc,-27628

80002b60 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002b60:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002b62:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002b64:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002b66:	cf d3       	brcs	80002b60 <idata_load_loop>

80002b68 <idata_load_loop_end>:
  mov     r2, 0
80002b68:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002b6c:	e0 61 06 78 	mov	r1,1656
  cp      r0, r1
  brlo    udata_clear_loop
80002b70:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002b72:	c0 62       	brcc	80002b7e <udata_clear_loop_end>
80002b74:	30 02       	mov	r2,0
80002b76:	30 03       	mov	r3,0

80002b78 <udata_clear_loop>:
80002b78:	a1 22       	st.d	r0++,r2
80002b7a:	02 30       	cp.w	r0,r1
80002b7c:	cf e3       	brcs	80002b78 <udata_clear_loop>

80002b7e <udata_clear_loop_end>:
80002b7e:	fe cf 0b 76 	sub	pc,pc,2934
80002b82:	d7 03       	nop

80002b84 <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
80002b84:	30 08       	mov	r8,0
80002b86:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002b88:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
80002b8a:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002b8c:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002b8e:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002b90:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
80002b92:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
80002b94:	b8 f8       	st.b	r12[0x7],r8
}
80002b96:	5e fc       	retal	r12

80002b98 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002b98:	eb cd 40 80 	pushm	r7,lr
80002b9c:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002b9e:	49 68       	lddpc	r8,80002bf4 <config_dpi204+0x5c>
80002ba0:	1a 97       	mov	r7,sp
80002ba2:	f0 ea 00 00 	ld.d	r10,r8[0]
80002ba6:	fa eb 00 00 	st.d	sp[0],r10
80002baa:	f0 e8 00 08 	ld.d	r8,r8[8]
80002bae:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80002bb2:	30 4b       	mov	r11,4
80002bb4:	49 1c       	lddpc	r12,80002bf8 <config_dpi204+0x60>
80002bb6:	f0 1f 00 12 	mcall	80002bfc <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
80002bba:	1a 9b       	mov	r11,sp
80002bbc:	fe 7c 28 00 	mov	r12,-55296
80002bc0:	f0 1f 00 10 	mcall	80002c00 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002bc4:	30 09       	mov	r9,0
80002bc6:	12 9a       	mov	r10,r9
80002bc8:	12 9b       	mov	r11,r9
80002bca:	fe 7c 28 00 	mov	r12,-55296
80002bce:	f0 1f 00 0e 	mcall	80002c04 <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
80002bd2:	fe 7c 28 00 	mov	r12,-55296
80002bd6:	f0 1f 00 0d 	mcall	80002c08 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
80002bda:	e0 6a 1b 00 	mov	r10,6912
80002bde:	ea 1a 00 b7 	orh	r10,0xb7
80002be2:	1a 9b       	mov	r11,sp
80002be4:	fe 7c 28 00 	mov	r12,-55296
80002be8:	f0 1f 00 09 	mcall	80002c0c <config_dpi204+0x74>
}
80002bec:	2f cd       	sub	sp,-16
80002bee:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bf2:	00 00       	add	r0,r0
80002bf4:	80 00       	ld.sh	r0,r0[0x0]
80002bf6:	91 60       	st.w	r8[0x18],r0
80002bf8:	80 00       	ld.sh	r0,r0[0x0]
80002bfa:	91 70       	st.w	r8[0x1c],r0
80002bfc:	80 00       	ld.sh	r0,r0[0x0]
80002bfe:	27 0c       	sub	r12,112
80002c00:	80 00       	ld.sh	r0,r0[0x0]
80002c02:	29 6a       	sub	r10,-106
80002c04:	80 00       	ld.sh	r0,r0[0x0]
80002c06:	29 a2       	sub	r2,-102
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	2a f8       	sub	r8,-81
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2a 40       	sub	r0,-92

80002c10 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
80002c10:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
80002c12:	18 9b       	mov	r11,r12
80002c14:	fe 7c 24 00 	mov	r12,-56320
80002c18:	f0 1f 00 02 	mcall	80002c20 <mASSERT_CS+0x10>
}
80002c1c:	d8 02       	popm	pc
80002c1e:	00 00       	add	r0,r0
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	29 ce       	sub	lr,-100

80002c24 <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
80002c24:	eb cd 40 80 	pushm	r7,lr
80002c28:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
80002c2a:	49 88       	lddpc	r8,80002c88 <config_SPI_SPARE+0x64>
80002c2c:	1a 97       	mov	r7,sp
80002c2e:	f0 ea 00 00 	ld.d	r10,r8[0]
80002c32:	fa eb 00 00 	st.d	sp[0],r10
80002c36:	f0 e8 00 08 	ld.d	r8,r8[8]
80002c3a:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
80002c3e:	30 4b       	mov	r11,4
80002c40:	49 3c       	lddpc	r12,80002c8c <config_SPI_SPARE+0x68>
80002c42:	f0 1f 00 14 	mcall	80002c90 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
80002c46:	1a 9b       	mov	r11,sp
80002c48:	fe 7c 24 00 	mov	r12,-56320
80002c4c:	f0 1f 00 12 	mcall	80002c94 <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
80002c50:	30 09       	mov	r9,0
80002c52:	12 9a       	mov	r10,r9
80002c54:	12 9b       	mov	r11,r9
80002c56:	fe 7c 24 00 	mov	r12,-56320
80002c5a:	f0 1f 00 10 	mcall	80002c98 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
80002c5e:	30 0b       	mov	r11,0
80002c60:	fe 7c 24 00 	mov	r12,-56320
80002c64:	f0 1f 00 0e 	mcall	80002c9c <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002c68:	e0 6a 1b 00 	mov	r10,6912
80002c6c:	ea 1a 00 b7 	orh	r10,0xb7
80002c70:	1a 9b       	mov	r11,sp
80002c72:	fe 7c 24 00 	mov	r12,-56320
80002c76:	f0 1f 00 0b 	mcall	80002ca0 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
80002c7a:	fe 7c 24 00 	mov	r12,-56320
80002c7e:	f0 1f 00 0a 	mcall	80002ca4 <config_SPI_SPARE+0x80>
}
80002c82:	2f cd       	sub	sp,-16
80002c84:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	91 50       	st.w	r8[0x14],r0
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	91 30       	st.w	r8[0xc],r0
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	27 0c       	sub	r12,112
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	29 6a       	sub	r10,-106
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	29 a2       	sub	r2,-102
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	29 ce       	sub	lr,-100
80002ca0:	80 00       	ld.sh	r0,r0[0x0]
80002ca2:	2a 40       	sub	r0,-92
80002ca4:	80 00       	ld.sh	r0,r0[0x0]
80002ca6:	2a f8       	sub	r8,-81

80002ca8 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002ca8:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
80002caa:	fe 7c 24 00 	mov	r12,-56320
80002cae:	f0 1f 00 02 	mcall	80002cb4 <XferSPI_send+0xc>
	return 0;
}
80002cb2:	d8 0a       	popm	pc,r12=0
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2a fe       	sub	lr,-81

80002cb8 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
80002cb8:	d4 01       	pushm	lr
80002cba:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
80002cbc:	30 0b       	mov	r11,0
80002cbe:	fe 7c 24 00 	mov	r12,-56320
80002cc2:	f0 1f 00 0e 	mcall	80002cf8 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
80002cc6:	e0 6b 00 a0 	mov	r11,160
80002cca:	fe 7c 24 00 	mov	r12,-56320
80002cce:	f0 1f 00 0c 	mcall	80002cfc <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
80002cd2:	30 0b       	mov	r11,0
80002cd4:	fe 7c 24 00 	mov	r12,-56320
80002cd8:	f0 1f 00 09 	mcall	80002cfc <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
80002cdc:	fa cb ff fe 	sub	r11,sp,-2
80002ce0:	fe 7c 24 00 	mov	r12,-56320
80002ce4:	f0 1f 00 07 	mcall	80002d00 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
80002ce8:	30 0b       	mov	r11,0
80002cea:	fe 7c 24 00 	mov	r12,-56320
80002cee:	f0 1f 00 06 	mcall	80002d04 <ReadStatus2515+0x4c>

	return spidataread_temp;
}
80002cf2:	1b bc       	ld.ub	r12,sp[0x3]
80002cf4:	2f fd       	sub	sp,-4
80002cf6:	d8 02       	popm	pc
80002cf8:	80 00       	ld.sh	r0,r0[0x0]
80002cfa:	29 ce       	sub	lr,-100
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	2a fe       	sub	lr,-81
80002d00:	80 00       	ld.sh	r0,r0[0x0]
80002d02:	2b 22       	sub	r2,-78
80002d04:	80 00       	ld.sh	r0,r0[0x0]
80002d06:	2a 1a       	sub	r10,-95

80002d08 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
80002d08:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
80002d0a:	f0 1f 00 04 	mcall	80002d18 <CANRxReady+0x10>
80002d0e:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
80002d12:	5f 1c       	srne	r12
80002d14:	d8 02       	popm	pc
80002d16:	00 00       	add	r0,r0
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	2c b8       	sub	r8,-53

80002d1c <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
80002d1c:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
80002d1e:	f0 1f 00 04 	mcall	80002d2c <CANTxReady+0x10>
80002d22:	ec 1c 00 04 	eorl	r12,0x4
}
80002d26:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
80002d2a:	d8 02       	popm	pc
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	2c b8       	sub	r8,-53

80002d30 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
80002d30:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
80002d32:	18 9b       	mov	r11,r12
80002d34:	fe 7c 24 00 	mov	r12,-56320
80002d38:	f0 1f 00 02 	mcall	80002d40 <mDEASSERT_CS+0x10>
}
80002d3c:	d8 02       	popm	pc
80002d3e:	00 00       	add	r0,r0
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	2a 1a       	sub	r10,-95

80002d44 <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
80002d44:	d4 21       	pushm	r4-r7,lr
80002d46:	18 97       	mov	r7,r12
80002d48:	16 95       	mov	r5,r11
80002d4a:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
80002d4c:	18 96       	mov	r6,r12
80002d4e:	5c 56       	castu.b	r6
80002d50:	0c 9c       	mov	r12,r6
80002d52:	f0 1f 00 0a 	mcall	80002d78 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
80002d56:	30 2b       	mov	r11,2
80002d58:	0e 9c       	mov	r12,r7
80002d5a:	f0 1f 00 09 	mcall	80002d7c <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
80002d5e:	0a 9b       	mov	r11,r5
80002d60:	0e 9c       	mov	r12,r7
80002d62:	f0 1f 00 07 	mcall	80002d7c <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
80002d66:	08 9b       	mov	r11,r4
80002d68:	0e 9c       	mov	r12,r7
80002d6a:	f0 1f 00 05 	mcall	80002d7c <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
80002d6e:	0c 9c       	mov	r12,r6
80002d70:	f0 1f 00 04 	mcall	80002d80 <CAN2515ByteWrite+0x3c>
}
80002d74:	d8 22       	popm	r4-r7,pc
80002d76:	00 00       	add	r0,r0
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	2c 10       	sub	r0,-63
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	2c a8       	sub	r8,-54
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	2d 30       	sub	r0,-45

80002d84 <CAN2515SetRXB1Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB1Filters(Channel, 0, &Flt[2]);
 ********************************************************************/
void CAN2515SetRXB1Filters(int Channel, UINT16 Mask1, UINT16* pFlt2_5 )
{
80002d84:	eb cd 40 e0 	pushm	r5-r7,lr
80002d88:	18 97       	mov	r7,r12
80002d8a:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 3);
80002d8c:	16 96       	mov	r6,r11
80002d8e:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
80002d92:	32 4b       	mov	r11,36
80002d94:	f0 1f 00 26 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXM1SIDL, Mask1 << 5);
80002d98:	ec 0a 15 05 	lsl	r10,r6,0x5
80002d9c:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002da0:	32 5b       	mov	r11,37
80002da2:	0e 9c       	mov	r12,r7
80002da4:	f0 1f 00 22 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>

	// Set Four filters associated with RXB1

	CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 3);
80002da8:	8a 8a       	ld.uh	r10,r5[0x0]
80002daa:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002dae:	30 8b       	mov	r11,8
80002db0:	0e 9c       	mov	r12,r7
80002db2:	f0 1f 00 1f 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002db6:	0b 2a       	ld.uh	r10,r5++
80002db8:	a5 7a       	lsl	r10,0x5
80002dba:	a3 ba       	sbr	r10,0x3
80002dbc:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002dc0:	30 9b       	mov	r11,9
80002dc2:	0e 9c       	mov	r12,r7
80002dc4:	f0 1f 00 1a 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 3);
80002dc8:	8a 8a       	ld.uh	r10,r5[0x0]
80002dca:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002dce:	31 0b       	mov	r11,16
80002dd0:	0e 9c       	mov	r12,r7
80002dd2:	f0 1f 00 17 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002dd6:	0b 2a       	ld.uh	r10,r5++
80002dd8:	a5 7a       	lsl	r10,0x5
80002dda:	a3 ba       	sbr	r10,0x3
80002ddc:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002de0:	30 9b       	mov	r11,9
80002de2:	0e 9c       	mov	r12,r7
80002de4:	f0 1f 00 12 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 3);
80002de8:	8a 8a       	ld.uh	r10,r5[0x0]
80002dea:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002dee:	31 4b       	mov	r11,20
80002df0:	0e 9c       	mov	r12,r7
80002df2:	f0 1f 00 0f 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002df6:	0b 2a       	ld.uh	r10,r5++
80002df8:	a5 7a       	lsl	r10,0x5
80002dfa:	a3 ba       	sbr	r10,0x3
80002dfc:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002e00:	30 9b       	mov	r11,9
80002e02:	0e 9c       	mov	r12,r7
80002e04:	f0 1f 00 0a 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 3);
80002e08:	8a 8a       	ld.uh	r10,r5[0x0]
80002e0a:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002e0e:	31 8b       	mov	r11,24
80002e10:	0e 9c       	mov	r12,r7
80002e12:	f0 1f 00 07 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002e16:	8a 8a       	ld.uh	r10,r5[0x0]
80002e18:	a5 7a       	lsl	r10,0x5
80002e1a:	a3 ba       	sbr	r10,0x3
80002e1c:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002e20:	30 9b       	mov	r11,9
80002e22:	0e 9c       	mov	r12,r7
80002e24:	f0 1f 00 02 	mcall	80002e2c <CAN2515SetRXB1Filters+0xa8>
}
80002e28:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	2d 44       	sub	r4,-44

80002e30 <CAN2515SetRXB0Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0Filters(int Channel, UINT16 Mask0, UINT16* pFlt0_1 )
{
80002e30:	eb cd 40 e0 	pushm	r5-r7,lr
80002e34:	18 97       	mov	r7,r12
80002e36:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 3);
80002e38:	16 96       	mov	r6,r11
80002e3a:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
80002e3e:	32 0b       	mov	r11,32
80002e40:	f0 1f 00 15 	mcall	80002e94 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXM0SIDL, Mask0 << 5);
80002e44:	ec 0a 15 05 	lsl	r10,r6,0x5
80002e48:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002e4c:	32 1b       	mov	r11,33
80002e4e:	0e 9c       	mov	r12,r7
80002e50:	f0 1f 00 11 	mcall	80002e94 <CAN2515SetRXB0Filters+0x64>

	// Set two filters associated with RXB0

	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 3);
80002e54:	8a 8a       	ld.uh	r10,r5[0x0]
80002e56:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002e5a:	30 0b       	mov	r11,0
80002e5c:	0e 9c       	mov	r12,r7
80002e5e:	f0 1f 00 0e 	mcall	80002e94 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF0SIDL, *pFlt0_1 << 5);
80002e62:	0b 1a       	ld.sh	r10,r5++
80002e64:	a5 7a       	lsl	r10,0x5
80002e66:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002e6a:	30 1b       	mov	r11,1
80002e6c:	0e 9c       	mov	r12,r7
80002e6e:	f0 1f 00 0a 	mcall	80002e94 <CAN2515SetRXB0Filters+0x64>


	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 3);
80002e72:	8a 8a       	ld.uh	r10,r5[0x0]
80002e74:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002e78:	30 4b       	mov	r11,4
80002e7a:	0e 9c       	mov	r12,r7
80002e7c:	f0 1f 00 06 	mcall	80002e94 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF1SIDL, *pFlt0_1 << 5);
80002e80:	0b 9a       	ld.ub	r10,r5[0x1]
80002e82:	a5 7a       	lsl	r10,0x5
80002e84:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002e88:	30 5b       	mov	r11,5
80002e8a:	0e 9c       	mov	r12,r7
80002e8c:	f0 1f 00 02 	mcall	80002e94 <CAN2515SetRXB0Filters+0x64>

}
80002e90:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002e94:	80 00       	ld.sh	r0,r0[0x0]
80002e96:	2d 44       	sub	r4,-44

80002e98 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002e98:	eb cd 40 c0 	pushm	r6-r7,lr
80002e9c:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
80002e9e:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
80002ea2:	0e 9c       	mov	r12,r7
80002ea4:	f0 1f 00 06 	mcall	80002ebc <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
80002ea8:	e0 6b 00 c0 	mov	r11,192
80002eac:	0c 9c       	mov	r12,r6
80002eae:	f0 1f 00 05 	mcall	80002ec0 <CANReset+0x28>
	mDEASSERT_CS(Channel);
80002eb2:	0e 9c       	mov	r12,r7
80002eb4:	f0 1f 00 04 	mcall	80002ec4 <CANReset+0x2c>
}
80002eb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ebc:	80 00       	ld.sh	r0,r0[0x0]
80002ebe:	2c 10       	sub	r0,-63
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	2c a8       	sub	r8,-54
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	2d 30       	sub	r0,-45

80002ec8 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
80002ec8:	eb cd 40 e0 	pushm	r5-r7,lr
80002ecc:	20 1d       	sub	sp,4
80002ece:	18 97       	mov	r7,r12
80002ed0:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
80002ed2:	18 96       	mov	r6,r12
80002ed4:	5c 56       	castu.b	r6
80002ed6:	0c 9c       	mov	r12,r6
80002ed8:	f0 1f 00 13 	mcall	80002f24 <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
80002edc:	30 3b       	mov	r11,3
80002ede:	0e 9c       	mov	r12,r7
80002ee0:	f0 1f 00 12 	mcall	80002f28 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
80002ee4:	0a 9b       	mov	r11,r5
80002ee6:	0e 9c       	mov	r12,r7
80002ee8:	f0 1f 00 10 	mcall	80002f28 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
80002eec:	30 0b       	mov	r11,0
80002eee:	fe 7c 24 00 	mov	r12,-56320
80002ef2:	f0 1f 00 0f 	mcall	80002f2c <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
80002ef6:	fe 77 24 00 	mov	r7,-56320
80002efa:	c0 28       	rjmp	80002efe <CAN2515ByteRead+0x36>
		asm("NOP;");
80002efc:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
80002efe:	0e 9c       	mov	r12,r7
80002f00:	f0 1f 00 0c 	mcall	80002f30 <CAN2515ByteRead+0x68>
80002f04:	cf c0       	breq	80002efc <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
80002f06:	fa cb ff fe 	sub	r11,sp,-2
80002f0a:	fe 7c 24 00 	mov	r12,-56320
80002f0e:	f0 1f 00 0a 	mcall	80002f34 <CAN2515ByteRead+0x6c>
	return spidataread_temp;
80002f12:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
80002f14:	0c 9c       	mov	r12,r6
80002f16:	f0 1f 00 09 	mcall	80002f38 <CAN2515ByteRead+0x70>

	return tempdata;
}
80002f1a:	0e 9c       	mov	r12,r7
80002f1c:	2f fd       	sub	sp,-4
80002f1e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002f22:	00 00       	add	r0,r0
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	2c 10       	sub	r0,-63
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2c a8       	sub	r8,-54
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	2a fe       	sub	lr,-81
80002f30:	80 00       	ld.sh	r0,r0[0x0]
80002f32:	2b 1a       	sub	r10,-79
80002f34:	80 00       	ld.sh	r0,r0[0x0]
80002f36:	2b 22       	sub	r2,-78
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	2d 30       	sub	r0,-45

80002f3c <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
80002f3c:	eb cd 40 80 	pushm	r7,lr
80002f40:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
80002f42:	58 ab       	cp.w	r11,10
80002f44:	c1 11       	brne	80002f66 <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
80002f46:	30 3a       	mov	r10,3
80002f48:	32 ab       	mov	r11,42
80002f4a:	f0 1f 00 30 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002f4e:	e0 6a 00 ac 	mov	r10,172
80002f52:	32 9b       	mov	r11,41
80002f54:	0e 9c       	mov	r12,r7
80002f56:	f0 1f 00 2d 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002f5a:	30 7a       	mov	r10,7
80002f5c:	32 8b       	mov	r11,40
80002f5e:	0e 9c       	mov	r12,r7
80002f60:	f0 1f 00 2a 	mcall	80003008 <CANEnable+0xcc>
80002f64:	c3 68       	rjmp	80002fd0 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
80002f66:	58 7b       	cp.w	r11,7
80002f68:	c1 11       	brne	80002f8a <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
80002f6a:	30 1a       	mov	r10,1
80002f6c:	32 ab       	mov	r11,42
80002f6e:	f0 1f 00 27 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002f72:	e0 6a 00 ac 	mov	r10,172
80002f76:	32 9b       	mov	r11,41
80002f78:	0e 9c       	mov	r12,r7
80002f7a:	f0 1f 00 24 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002f7e:	30 7a       	mov	r10,7
80002f80:	32 8b       	mov	r11,40
80002f82:	0e 9c       	mov	r12,r7
80002f84:	f0 1f 00 21 	mcall	80003008 <CANEnable+0xcc>
80002f88:	c2 48       	rjmp	80002fd0 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
80002f8a:	58 5b       	cp.w	r11,5
80002f8c:	c1 11       	brne	80002fae <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002f8e:	30 0a       	mov	r10,0
80002f90:	32 ab       	mov	r11,42
80002f92:	f0 1f 00 1e 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002f96:	e0 6a 00 ac 	mov	r10,172
80002f9a:	32 9b       	mov	r11,41
80002f9c:	0e 9c       	mov	r12,r7
80002f9e:	f0 1f 00 1b 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002fa2:	30 7a       	mov	r10,7
80002fa4:	32 8b       	mov	r11,40
80002fa6:	0e 9c       	mov	r12,r7
80002fa8:	f0 1f 00 18 	mcall	80003008 <CANEnable+0xcc>
80002fac:	c1 28       	rjmp	80002fd0 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
80002fae:	58 1b       	cp.w	r11,1
80002fb0:	c1 01       	brne	80002fd0 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002fb2:	30 0a       	mov	r10,0
80002fb4:	32 ab       	mov	r11,42
80002fb6:	f0 1f 00 15 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
80002fba:	e0 6a 00 91 	mov	r10,145
80002fbe:	32 9b       	mov	r11,41
80002fc0:	0e 9c       	mov	r12,r7
80002fc2:	f0 1f 00 12 	mcall	80003008 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
80002fc6:	30 3a       	mov	r10,3
80002fc8:	32 8b       	mov	r11,40
80002fca:	0e 9c       	mov	r12,r7
80002fcc:	f0 1f 00 0f 	mcall	80003008 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
80002fd0:	30 3a       	mov	r10,3
80002fd2:	32 bb       	mov	r11,43
80002fd4:	0e 9c       	mov	r12,r7
80002fd6:	f0 1f 00 0d 	mcall	80003008 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
80002fda:	30 4a       	mov	r10,4
80002fdc:	30 fb       	mov	r11,15
80002fde:	0e 9c       	mov	r12,r7
80002fe0:	f0 1f 00 0a 	mcall	80003008 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
80002fe4:	30 eb       	mov	r11,14
80002fe6:	0e 9c       	mov	r12,r7
80002fe8:	f0 1f 00 09 	mcall	8000300c <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
80002fec:	30 eb       	mov	r11,14
80002fee:	0e 9c       	mov	r12,r7
80002ff0:	f0 1f 00 07 	mcall	8000300c <CANEnable+0xd0>
80002ff4:	e2 1c 00 e0 	andl	r12,0xe0,COH
80002ff8:	c0 60       	breq	80003004 <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
80002ffa:	30 4a       	mov	r10,4
80002ffc:	30 fb       	mov	r11,15
80002ffe:	0e 9c       	mov	r12,r7
80003000:	f0 1f 00 02 	mcall	80003008 <CANEnable+0xcc>
80003004:	e3 cd 80 80 	ldm	sp++,r7,pc
80003008:	80 00       	ld.sh	r0,r0[0x0]
8000300a:	2d 44       	sub	r4,-44
8000300c:	80 00       	ld.sh	r0,r0[0x0]
8000300e:	2e c8       	sub	r8,-20

80003010 <InitializeCAN>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps)
 ********************************************************************/
void InitializeCAN( int Channel , int BusSpeed, UINT16 Mask, UINT16 Flt[6])
{
80003010:	d4 21       	pushm	r4-r7,lr
80003012:	18 97       	mov	r7,r12
80003014:	16 94       	mov	r4,r11
80003016:	14 96       	mov	r6,r10
80003018:	12 95       	mov	r5,r9
	CANReset(Channel);
8000301a:	f0 1f 00 0a 	mcall	80003040 <InitializeCAN+0x30>
	CAN2515SetRXB0Filters(Channel, Mask, Flt);
8000301e:	5c 76       	castu.h	r6
80003020:	0a 9a       	mov	r10,r5
80003022:	0c 9b       	mov	r11,r6
80003024:	0e 9c       	mov	r12,r7
80003026:	f0 1f 00 08 	mcall	80003044 <InitializeCAN+0x34>
	CAN2515SetRXB1Filters(Channel, Mask, &Flt[2]);
8000302a:	ea ca ff fc 	sub	r10,r5,-4
8000302e:	0c 9b       	mov	r11,r6
80003030:	0e 9c       	mov	r12,r7
80003032:	f0 1f 00 06 	mcall	80003048 <InitializeCAN+0x38>
	CANEnable(Channel, BusSpeed);
80003036:	08 9b       	mov	r11,r4
80003038:	0e 9c       	mov	r12,r7
8000303a:	f0 1f 00 05 	mcall	8000304c <InitializeCAN+0x3c>
}
8000303e:	d8 22       	popm	r4-r7,pc
80003040:	80 00       	ld.sh	r0,r0[0x0]
80003042:	2e 98       	sub	r8,-23
80003044:	80 00       	ld.sh	r0,r0[0x0]
80003046:	2e 30       	sub	r0,-29
80003048:	80 00       	ld.sh	r0,r0[0x0]
8000304a:	2d 84       	sub	r4,-40
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	2f 3c       	sub	r12,-13

80003050 <Evk1100PrintDisp>:
 * Note:            None.
 *
 * Example:			Evk1100PrintDisp(&Ident, msg, &mSize );
 ********************************************************************/
void Evk1100PrintDisp(UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80003050:	d4 21       	pushm	r4-r7,lr
80003052:	18 95       	mov	r5,r12
80003054:	16 96       	mov	r6,r11
80003056:	14 94       	mov	r4,r10
    dip204_set_cursor_position(1,1);
80003058:	30 1b       	mov	r11,1
8000305a:	16 9c       	mov	r12,r11
8000305c:	f0 1f 00 35 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[0]);
80003060:	4b 57       	lddpc	r7,80003134 <Evk1100PrintDisp+0xe4>
80003062:	0d 88       	ld.ub	r8,r6[0x0]
80003064:	1a d8       	st.w	--sp,r8
80003066:	0e 9c       	mov	r12,r7
80003068:	f0 1f 00 34 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,1);
8000306c:	30 1b       	mov	r11,1
8000306e:	30 6c       	mov	r12,6
80003070:	f0 1f 00 30 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[1]);
80003074:	0d 98       	ld.ub	r8,r6[0x1]
80003076:	1a d8       	st.w	--sp,r8
80003078:	0e 9c       	mov	r12,r7
8000307a:	f0 1f 00 30 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,1);
8000307e:	30 1b       	mov	r11,1
80003080:	30 bc       	mov	r12,11
80003082:	f0 1f 00 2c 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[2]);
80003086:	0d a8       	ld.ub	r8,r6[0x2]
80003088:	1a d8       	st.w	--sp,r8
8000308a:	0e 9c       	mov	r12,r7
8000308c:	f0 1f 00 2b 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,1);
80003090:	30 1b       	mov	r11,1
80003092:	31 0c       	mov	r12,16
80003094:	f0 1f 00 27 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[3]);
80003098:	0d b8       	ld.ub	r8,r6[0x3]
8000309a:	1a d8       	st.w	--sp,r8
8000309c:	0e 9c       	mov	r12,r7
8000309e:	f0 1f 00 27 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,2);
800030a2:	30 2b       	mov	r11,2
800030a4:	30 1c       	mov	r12,1
800030a6:	f0 1f 00 23 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[4]);
800030aa:	0d c8       	ld.ub	r8,r6[0x4]
800030ac:	1a d8       	st.w	--sp,r8
800030ae:	0e 9c       	mov	r12,r7
800030b0:	f0 1f 00 22 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,2);
800030b4:	30 2b       	mov	r11,2
800030b6:	30 6c       	mov	r12,6
800030b8:	f0 1f 00 1e 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[5]);
800030bc:	0d d8       	ld.ub	r8,r6[0x5]
800030be:	1a d8       	st.w	--sp,r8
800030c0:	0e 9c       	mov	r12,r7
800030c2:	f0 1f 00 1e 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,2);
800030c6:	30 2b       	mov	r11,2
800030c8:	30 bc       	mov	r12,11
800030ca:	f0 1f 00 1a 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[6]);
800030ce:	0d e8       	ld.ub	r8,r6[0x6]
800030d0:	1a d8       	st.w	--sp,r8
800030d2:	0e 9c       	mov	r12,r7
800030d4:	f0 1f 00 19 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,2);
800030d8:	30 2b       	mov	r11,2
800030da:	31 0c       	mov	r12,16
800030dc:	f0 1f 00 15 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[7]);
800030e0:	0d f8       	ld.ub	r8,r6[0x7]
800030e2:	1a d8       	st.w	--sp,r8
800030e4:	0e 9c       	mov	r12,r7
800030e6:	f0 1f 00 15 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,3);
800030ea:	2f 8d       	sub	sp,-32
800030ec:	30 3b       	mov	r11,3
800030ee:	30 1c       	mov	r12,1
800030f0:	f0 1f 00 10 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("Id: ");
800030f4:	49 2c       	lddpc	r12,8000313c <Evk1100PrintDisp+0xec>
800030f6:	f0 1f 00 11 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(4,3);
800030fa:	30 3b       	mov	r11,3
800030fc:	30 4c       	mov	r12,4
800030fe:	f0 1f 00 0d 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pIdentifier);
80003102:	6a 08       	ld.w	r8,r5[0x0]
80003104:	1a d8       	st.w	--sp,r8
80003106:	0e 9c       	mov	r12,r7
80003108:	f0 1f 00 0c 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(13,3);
8000310c:	30 3b       	mov	r11,3
8000310e:	30 dc       	mov	r12,13
80003110:	f0 1f 00 08 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("DLC:");
80003114:	48 bc       	lddpc	r12,80003140 <Evk1100PrintDisp+0xf0>
80003116:	f0 1f 00 09 	mcall	80003138 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(17,3);
8000311a:	30 3b       	mov	r11,3
8000311c:	31 1c       	mov	r12,17
8000311e:	f0 1f 00 05 	mcall	80003130 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pMsgSize);
80003122:	09 88       	ld.ub	r8,r4[0x0]
80003124:	1a d8       	st.w	--sp,r8
80003126:	0e 9c       	mov	r12,r7
80003128:	f0 1f 00 04 	mcall	80003138 <Evk1100PrintDisp+0xe8>
8000312c:	2f ed       	sub	sp,-8
}
8000312e:	d8 22       	popm	r4-r7,pc
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	23 a8       	sub	r8,58
80003134:	80 00       	ld.sh	r0,r0[0x0]
80003136:	91 90       	st.w	r8[0x24],r0
80003138:	80 00       	ld.sh	r0,r0[0x0]
8000313a:	23 10       	sub	r0,49
8000313c:	80 00       	ld.sh	r0,r0[0x0]
8000313e:	91 94       	st.w	r8[0x24],r4
80003140:	80 00       	ld.sh	r0,r0[0x0]
80003142:	91 9c       	st.w	r8[0x24],r12

80003144 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80003144:	eb cd 40 fe 	pushm	r1-r7,lr
80003148:	18 96       	mov	r6,r12
8000314a:	16 93       	mov	r3,r11
8000314c:	14 94       	mov	r4,r10
8000314e:	12 92       	mov	r2,r9
80003150:	10 91       	mov	r1,r8
80003152:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80003154:	33 05       	mov	r5,48
80003156:	c1 78       	rjmp	80003184 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003158:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000315c:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003160:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003164:	14 38       	cp.w	r8,r10
80003166:	e0 88 00 08 	brls	80003176 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000316a:	12 38       	cp.w	r8,r9
8000316c:	fe 98 ff fa 	brls	80003160 <CANSendMsg+0x1c>
80003170:	12 3a       	cp.w	r10,r9
80003172:	c7 63       	brcs	8000325e <CANSendMsg+0x11a>
80003174:	cf 6b       	rjmp	80003160 <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003176:	12 38       	cp.w	r8,r9
80003178:	e0 8b 00 73 	brhi	8000325e <CANSendMsg+0x11a>
8000317c:	12 3a       	cp.w	r10,r9
8000317e:	c7 03       	brcs	8000325e <CANSendMsg+0x11a>
80003180:	cf 0b       	rjmp	80003160 <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
80003182:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80003184:	0a 9b       	mov	r11,r5
80003186:	0c 9c       	mov	r12,r6
80003188:	f0 1f 00 38 	mcall	80003268 <CANSendMsg+0x124>
8000318c:	e2 1c 00 08 	andl	r12,0x8,COH
80003190:	ce 41       	brne	80003158 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
80003192:	e6 08 16 0b 	lsr	r8,r3,0xb
80003196:	c1 01       	brne	800031b6 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
80003198:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
8000319c:	33 1b       	mov	r11,49
8000319e:	0c 9c       	mov	r12,r6
800031a0:	f0 1f 00 33 	mcall	8000326c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
800031a4:	e6 0a 15 05 	lsl	r10,r3,0x5
800031a8:	e2 1a 00 e0 	andl	r10,0xe0,COH
800031ac:	33 2b       	mov	r11,50
800031ae:	0c 9c       	mov	r12,r6
800031b0:	f0 1f 00 2f 	mcall	8000326c <CANSendMsg+0x128>
800031b4:	c2 18       	rjmp	800031f6 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
800031b6:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
800031ba:	33 1b       	mov	r11,49
800031bc:	0c 9c       	mov	r12,r6
800031be:	f0 1f 00 2c 	mcall	8000326c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
800031c2:	e6 08 16 0d 	lsr	r8,r3,0xd
800031c6:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
800031ca:	e2 18 00 e0 	andl	r8,0xe0,COH
800031ce:	10 4a       	or	r10,r8
800031d0:	a3 ba       	sbr	r10,0x3
800031d2:	e2 1a 00 eb 	andl	r10,0xeb,COH
800031d6:	33 2b       	mov	r11,50
800031d8:	0c 9c       	mov	r12,r6
800031da:	f0 1f 00 25 	mcall	8000326c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
800031de:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
800031e2:	33 3b       	mov	r11,51
800031e4:	0c 9c       	mov	r12,r6
800031e6:	f0 1f 00 22 	mcall	8000326c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
800031ea:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
800031ee:	33 4b       	mov	r11,52
800031f0:	0c 9c       	mov	r12,r6
800031f2:	f0 1f 00 1f 	mcall	8000326c <CANSendMsg+0x128>
800031f6:	30 85       	mov	r5,8
800031f8:	ea 02 18 00 	cp.b	r2,r5
800031fc:	e4 05 17 80 	movls	r5,r2
80003200:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80003204:	e0 41 00 52 	cp.w	r1,82
80003208:	c1 01       	brne	80003228 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
8000320a:	a7 a5       	sbr	r5,0x6
8000320c:	5c 55       	castu.b	r5
8000320e:	0a 9a       	mov	r10,r5
80003210:	33 5b       	mov	r11,53
80003212:	0c 9c       	mov	r12,r6
80003214:	f0 1f 00 16 	mcall	8000326c <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80003218:	30 4b       	mov	r11,4
8000321a:	31 1c       	mov	r12,17
8000321c:	f0 1f 00 15 	mcall	80003270 <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
80003220:	49 5c       	lddpc	r12,80003274 <CANSendMsg+0x130>
80003222:	f0 1f 00 16 	mcall	80003278 <CANSendMsg+0x134>
80003226:	c0 68       	rjmp	80003232 <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
80003228:	0a 9a       	mov	r10,r5
8000322a:	33 5b       	mov	r11,53
8000322c:	0c 9c       	mov	r12,r6
8000322e:	f0 1f 00 10 	mcall	8000326c <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80003232:	58 05       	cp.w	r5,0
80003234:	e0 8a 00 0e 	brle	80003250 <CANSendMsg+0x10c>
80003238:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
8000323a:	0e 9b       	mov	r11,r7
8000323c:	2c ab       	sub	r11,-54
8000323e:	e8 07 07 0a 	ld.ub	r10,r4[r7]
80003242:	5c 5b       	castu.b	r11
80003244:	0c 9c       	mov	r12,r6
80003246:	f0 1f 00 0a 	mcall	8000326c <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
8000324a:	2f f7       	sub	r7,-1
8000324c:	0a 37       	cp.w	r7,r5
8000324e:	cf 65       	brlt	8000323a <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
80003250:	30 8a       	mov	r10,8
80003252:	33 0b       	mov	r11,48
80003254:	0c 9c       	mov	r12,r6
80003256:	f0 1f 00 06 	mcall	8000326c <CANSendMsg+0x128>
8000325a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000325e:	e0 47 00 64 	cp.w	r7,100
80003262:	c9 01       	brne	80003182 <CANSendMsg+0x3e>
80003264:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003268:	80 00       	ld.sh	r0,r0[0x0]
8000326a:	2e c8       	sub	r8,-20
8000326c:	80 00       	ld.sh	r0,r0[0x0]
8000326e:	2d 44       	sub	r4,-44
80003270:	80 00       	ld.sh	r0,r0[0x0]
80003272:	23 a8       	sub	r8,58
80003274:	80 00       	ld.sh	r0,r0[0x0]
80003276:	91 a4       	st.w	r8[0x28],r4
80003278:	80 00       	ld.sh	r0,r0[0x0]
8000327a:	23 10       	sub	r0,49

8000327c <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
8000327c:	d4 31       	pushm	r0-r7,lr
8000327e:	18 95       	mov	r5,r12
80003280:	16 92       	mov	r2,r11
80003282:	14 93       	mov	r3,r10
80003284:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
80003286:	f0 1f 00 5c 	mcall	800033f4 <CANGetMsg+0x178>

        if( (temp & 3) == 0 )
8000328a:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8000328e:	e0 80 00 b1 	breq	800033f0 <CANGetMsg+0x174>
            return FALSE;
        temp&=0x03;
        if(temp==1){
80003292:	58 1c       	cp.w	r12,1
80003294:	c0 31       	brne	8000329a <CANGetMsg+0x1e>
80003296:	36 16       	mov	r6,97
80003298:	c0 58       	rjmp	800032a2 <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
8000329a:	58 2c       	cp.w	r12,2
8000329c:	e0 81 00 aa 	brne	800033f0 <CANGetMsg+0x174>
800032a0:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
800032a2:	0c 9b       	mov	r11,r6
800032a4:	0a 9c       	mov	r12,r5
800032a6:	f0 1f 00 55 	mcall	800033f8 <CANGetMsg+0x17c>
800032aa:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
800032ac:	ec cb ff ff 	sub	r11,r6,-1
800032b0:	5c 5b       	castu.b	r11
800032b2:	0a 9c       	mov	r12,r5
800032b4:	f0 1f 00 51 	mcall	800033f8 <CANGetMsg+0x17c>
800032b8:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
800032ba:	ec cb ff fe 	sub	r11,r6,-2
800032be:	5c 5b       	castu.b	r11
800032c0:	0a 9c       	mov	r12,r5
800032c2:	f0 1f 00 4e 	mcall	800033f8 <CANGetMsg+0x17c>
800032c6:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
800032c8:	ec cb ff fd 	sub	r11,r6,-3
800032cc:	5c 5b       	castu.b	r11
800032ce:	0a 9c       	mov	r12,r5
800032d0:	f0 1f 00 4a 	mcall	800033f8 <CANGetMsg+0x17c>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
800032d4:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
800032d8:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800032dc:	c1 41       	brne	80003304 <CANGetMsg+0x88>
        {
            *pIdentifier = S1<<3 | S2>>5;
800032de:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
800032e2:	ef e1 10 31 	or	r1,r7,r1<<0x3
800032e6:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
800032e8:	30 1c       	mov	r12,1
800032ea:	f0 1f 00 45 	mcall	800033fc <CANGetMsg+0x180>
            LED_Off(LED1);
800032ee:	30 2c       	mov	r12,2
800032f0:	f0 1f 00 44 	mcall	80003400 <CANGetMsg+0x184>

             dip204_set_cursor_position(1,4);
800032f4:	30 4b       	mov	r11,4
800032f6:	30 1c       	mov	r12,1
800032f8:	f0 1f 00 43 	mcall	80003404 <CANGetMsg+0x188>
             dip204_printf_string("St Id");
800032fc:	4c 3c       	lddpc	r12,80003408 <CANGetMsg+0x18c>
800032fe:	f0 1f 00 44 	mcall	8000340c <CANGetMsg+0x190>
80003302:	c1 b8       	rjmp	80003338 <CANGetMsg+0xbc>
        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
80003304:	a9 60       	lsl	r0,0x8
80003306:	e1 e1 11 51 	or	r1,r0,r1<<0x15
8000330a:	e3 ec 10 0c 	or	r12,r1,r12
8000330e:	e2 18 00 1c 	andl	r8,0x1c,COH
80003312:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80003316:	0e 48       	or	r8,r7
80003318:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
8000331c:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
8000331e:	30 2c       	mov	r12,2
80003320:	f0 1f 00 37 	mcall	800033fc <CANGetMsg+0x180>
            LED_Off(LED0);
80003324:	30 1c       	mov	r12,1
80003326:	f0 1f 00 37 	mcall	80003400 <CANGetMsg+0x184>

            dip204_set_cursor_position(1,4);
8000332a:	30 4b       	mov	r11,4
8000332c:	30 1c       	mov	r12,1
8000332e:	f0 1f 00 36 	mcall	80003404 <CANGetMsg+0x188>
            dip204_printf_string("Ex Id");
80003332:	4b 8c       	lddpc	r12,80003410 <CANGetMsg+0x194>
80003334:	f0 1f 00 36 	mcall	8000340c <CANGetMsg+0x190>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80003338:	ec cb ff fc 	sub	r11,r6,-4
8000333c:	5c 5b       	castu.b	r11
8000333e:	0a 9c       	mov	r12,r5
80003340:	f0 1f 00 2e 	mcall	800033f8 <CANGetMsg+0x17c>
80003344:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80003348:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
8000334a:	30 88       	mov	r8,8
8000334c:	f0 0c 18 00 	cp.b	r12,r8
80003350:	e0 88 00 07 	brls	8000335e <CANGetMsg+0xe2>
            *pMsgSize = 8;
80003354:	a8 88       	st.b	r4[0x0],r8
80003356:	2f b6       	sub	r6,-5
80003358:	5c 56       	castu.b	r6
8000335a:	30 07       	mov	r7,0
8000335c:	c0 58       	rjmp	80003366 <CANGetMsg+0xea>

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000335e:	58 0c       	cp.w	r12,0
80003360:	fe 99 ff fb 	brgt	80003356 <CANGetMsg+0xda>
80003364:	c0 e8       	rjmp	80003380 <CANGetMsg+0x104>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
80003366:	0c 9b       	mov	r11,r6
80003368:	0a 9c       	mov	r12,r5
8000336a:	f0 1f 00 24 	mcall	800033f8 <CANGetMsg+0x17c>
8000336e:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
80003372:	2f f7       	sub	r7,-1
80003374:	2f f6       	sub	r6,-1
80003376:	5c 56       	castu.b	r6
80003378:	09 88       	ld.ub	r8,r4[0x0]
8000337a:	0e 38       	cp.w	r8,r7
8000337c:	fe 99 ff f5 	brgt	80003366 <CANGetMsg+0xea>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
80003380:	30 4c       	mov	r12,4
80003382:	f0 1f 00 20 	mcall	80003400 <CANGetMsg+0x184>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80003386:	36 0b       	mov	r11,96
80003388:	0a 9c       	mov	r12,r5
8000338a:	f0 1f 00 1c 	mcall	800033f8 <CANGetMsg+0x17c>
8000338e:	e2 1c 00 08 	andl	r12,0x8,COH
80003392:	c0 81       	brne	800033a2 <CANGetMsg+0x126>
80003394:	37 0b       	mov	r11,112
80003396:	0a 9c       	mov	r12,r5
80003398:	f0 1f 00 18 	mcall	800033f8 <CANGetMsg+0x17c>
8000339c:	e2 1c 00 08 	andl	r12,0x8,COH
800033a0:	c1 d0       	breq	800033da <CANGetMsg+0x15e>
800033a2:	64 08       	ld.w	r8,r2[0x0]
800033a4:	58 18       	cp.w	r8,1
800033a6:	c1 a1       	brne	800033da <CANGetMsg+0x15e>
                    {
                    Msg[0] = 0;
800033a8:	30 08       	mov	r8,0
800033aa:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
800033ac:	30 18       	mov	r8,1
800033ae:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
800033b0:	30 28       	mov	r8,2
800033b2:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
800033b4:	30 38       	mov	r8,3
800033b6:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
800033b8:	30 08       	mov	r8,0
800033ba:	30 49       	mov	r9,4
800033bc:	06 9a       	mov	r10,r3
800033be:	64 0b       	ld.w	r11,r2[0x0]
800033c0:	0a 9c       	mov	r12,r5
800033c2:	f0 1f 00 15 	mcall	80003414 <CANGetMsg+0x198>
                    dip204_set_cursor_position(17,4);
800033c6:	30 4b       	mov	r11,4
800033c8:	31 1c       	mov	r12,17
800033ca:	f0 1f 00 0f 	mcall	80003404 <CANGetMsg+0x188>
                    dip204_printf_string("Re F");
800033ce:	49 3c       	lddpc	r12,80003418 <CANGetMsg+0x19c>
800033d0:	f0 1f 00 0f 	mcall	8000340c <CANGetMsg+0x190>
                    LED_On(LED2);
800033d4:	30 4c       	mov	r12,4
800033d6:	f0 1f 00 0a 	mcall	800033fc <CANGetMsg+0x180>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
800033da:	30 0a       	mov	r10,0
800033dc:	32 cb       	mov	r11,44
800033de:	14 9c       	mov	r12,r10
800033e0:	f0 1f 00 0f 	mcall	8000341c <CANGetMsg+0x1a0>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
800033e4:	30 0a       	mov	r10,0
800033e6:	32 cb       	mov	r11,44
800033e8:	14 9c       	mov	r12,r10
800033ea:	f0 1f 00 0d 	mcall	8000341c <CANGetMsg+0x1a0>
800033ee:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
800033f0:	d8 3a       	popm	r0-r7,pc,r12=0
800033f2:	00 00       	add	r0,r0
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	2c b8       	sub	r8,-53
800033f8:	80 00       	ld.sh	r0,r0[0x0]
800033fa:	2e c8       	sub	r8,-20
800033fc:	80 00       	ld.sh	r0,r0[0x0]
800033fe:	21 7c       	sub	r12,23
80003400:	80 00       	ld.sh	r0,r0[0x0]
80003402:	21 cc       	sub	r12,28
80003404:	80 00       	ld.sh	r0,r0[0x0]
80003406:	23 a8       	sub	r8,58
80003408:	80 00       	ld.sh	r0,r0[0x0]
8000340a:	91 ac       	st.w	r8[0x28],r12
8000340c:	80 00       	ld.sh	r0,r0[0x0]
8000340e:	23 10       	sub	r0,49
80003410:	80 00       	ld.sh	r0,r0[0x0]
80003412:	91 b4       	st.w	r8[0x2c],r4
80003414:	80 00       	ld.sh	r0,r0[0x0]
80003416:	31 44       	mov	r4,20
80003418:	80 00       	ld.sh	r0,r0[0x0]
8000341a:	91 a4       	st.w	r8[0x28],r4
8000341c:	80 00       	ld.sh	r0,r0[0x0]
8000341e:	2d 44       	sub	r4,-44

80003420 <memcpy>:
80003420:	58 8a       	cp.w	r10,8
80003422:	c2 f5       	brlt	80003480 <memcpy+0x60>
80003424:	f9 eb 10 09 	or	r9,r12,r11
80003428:	e2 19 00 03 	andl	r9,0x3,COH
8000342c:	e0 81 00 97 	brne	8000355a <memcpy+0x13a>
80003430:	e0 4a 00 20 	cp.w	r10,32
80003434:	c3 b4       	brge	800034aa <memcpy+0x8a>
80003436:	f4 08 14 02 	asr	r8,r10,0x2
8000343a:	f0 09 11 08 	rsub	r9,r8,8
8000343e:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003442:	76 69       	ld.w	r9,r11[0x18]
80003444:	99 69       	st.w	r12[0x18],r9
80003446:	76 59       	ld.w	r9,r11[0x14]
80003448:	99 59       	st.w	r12[0x14],r9
8000344a:	76 49       	ld.w	r9,r11[0x10]
8000344c:	99 49       	st.w	r12[0x10],r9
8000344e:	76 39       	ld.w	r9,r11[0xc]
80003450:	99 39       	st.w	r12[0xc],r9
80003452:	76 29       	ld.w	r9,r11[0x8]
80003454:	99 29       	st.w	r12[0x8],r9
80003456:	76 19       	ld.w	r9,r11[0x4]
80003458:	99 19       	st.w	r12[0x4],r9
8000345a:	76 09       	ld.w	r9,r11[0x0]
8000345c:	99 09       	st.w	r12[0x0],r9
8000345e:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003462:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003466:	e0 1a 00 03 	andl	r10,0x3
8000346a:	f4 0a 11 04 	rsub	r10,r10,4
8000346e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003472:	17 a9       	ld.ub	r9,r11[0x2]
80003474:	b0 a9       	st.b	r8[0x2],r9
80003476:	17 99       	ld.ub	r9,r11[0x1]
80003478:	b0 99       	st.b	r8[0x1],r9
8000347a:	17 89       	ld.ub	r9,r11[0x0]
8000347c:	b0 89       	st.b	r8[0x0],r9
8000347e:	5e fc       	retal	r12
80003480:	f4 0a 11 09 	rsub	r10,r10,9
80003484:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003488:	17 f9       	ld.ub	r9,r11[0x7]
8000348a:	b8 f9       	st.b	r12[0x7],r9
8000348c:	17 e9       	ld.ub	r9,r11[0x6]
8000348e:	b8 e9       	st.b	r12[0x6],r9
80003490:	17 d9       	ld.ub	r9,r11[0x5]
80003492:	b8 d9       	st.b	r12[0x5],r9
80003494:	17 c9       	ld.ub	r9,r11[0x4]
80003496:	b8 c9       	st.b	r12[0x4],r9
80003498:	17 b9       	ld.ub	r9,r11[0x3]
8000349a:	b8 b9       	st.b	r12[0x3],r9
8000349c:	17 a9       	ld.ub	r9,r11[0x2]
8000349e:	b8 a9       	st.b	r12[0x2],r9
800034a0:	17 99       	ld.ub	r9,r11[0x1]
800034a2:	b8 99       	st.b	r12[0x1],r9
800034a4:	17 89       	ld.ub	r9,r11[0x0]
800034a6:	b8 89       	st.b	r12[0x0],r9
800034a8:	5e fc       	retal	r12
800034aa:	eb cd 40 c0 	pushm	r6-r7,lr
800034ae:	18 99       	mov	r9,r12
800034b0:	22 0a       	sub	r10,32
800034b2:	b7 07       	ld.d	r6,r11++
800034b4:	b3 26       	st.d	r9++,r6
800034b6:	b7 07       	ld.d	r6,r11++
800034b8:	b3 26       	st.d	r9++,r6
800034ba:	b7 07       	ld.d	r6,r11++
800034bc:	b3 26       	st.d	r9++,r6
800034be:	b7 07       	ld.d	r6,r11++
800034c0:	b3 26       	st.d	r9++,r6
800034c2:	22 0a       	sub	r10,32
800034c4:	cf 74       	brge	800034b2 <memcpy+0x92>
800034c6:	2f 0a       	sub	r10,-16
800034c8:	c0 65       	brlt	800034d4 <memcpy+0xb4>
800034ca:	b7 07       	ld.d	r6,r11++
800034cc:	b3 26       	st.d	r9++,r6
800034ce:	b7 07       	ld.d	r6,r11++
800034d0:	b3 26       	st.d	r9++,r6
800034d2:	21 0a       	sub	r10,16
800034d4:	5c 3a       	neg	r10
800034d6:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800034da:	d7 03       	nop
800034dc:	d7 03       	nop
800034de:	f7 36 00 0e 	ld.ub	r6,r11[14]
800034e2:	f3 66 00 0e 	st.b	r9[14],r6
800034e6:	f7 36 00 0d 	ld.ub	r6,r11[13]
800034ea:	f3 66 00 0d 	st.b	r9[13],r6
800034ee:	f7 36 00 0c 	ld.ub	r6,r11[12]
800034f2:	f3 66 00 0c 	st.b	r9[12],r6
800034f6:	f7 36 00 0b 	ld.ub	r6,r11[11]
800034fa:	f3 66 00 0b 	st.b	r9[11],r6
800034fe:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003502:	f3 66 00 0a 	st.b	r9[10],r6
80003506:	f7 36 00 09 	ld.ub	r6,r11[9]
8000350a:	f3 66 00 09 	st.b	r9[9],r6
8000350e:	f7 36 00 08 	ld.ub	r6,r11[8]
80003512:	f3 66 00 08 	st.b	r9[8],r6
80003516:	f7 36 00 07 	ld.ub	r6,r11[7]
8000351a:	f3 66 00 07 	st.b	r9[7],r6
8000351e:	f7 36 00 06 	ld.ub	r6,r11[6]
80003522:	f3 66 00 06 	st.b	r9[6],r6
80003526:	f7 36 00 05 	ld.ub	r6,r11[5]
8000352a:	f3 66 00 05 	st.b	r9[5],r6
8000352e:	f7 36 00 04 	ld.ub	r6,r11[4]
80003532:	f3 66 00 04 	st.b	r9[4],r6
80003536:	f7 36 00 03 	ld.ub	r6,r11[3]
8000353a:	f3 66 00 03 	st.b	r9[3],r6
8000353e:	f7 36 00 02 	ld.ub	r6,r11[2]
80003542:	f3 66 00 02 	st.b	r9[2],r6
80003546:	f7 36 00 01 	ld.ub	r6,r11[1]
8000354a:	f3 66 00 01 	st.b	r9[1],r6
8000354e:	f7 36 00 00 	ld.ub	r6,r11[0]
80003552:	f3 66 00 00 	st.b	r9[0],r6
80003556:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000355a:	20 1a       	sub	r10,1
8000355c:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003560:	f8 0a 0b 09 	st.b	r12[r10],r9
80003564:	cf b1       	brne	8000355a <memcpy+0x13a>
80003566:	5e fc       	retal	r12

80003568 <_vsprintf_r>:
80003568:	d4 01       	pushm	lr
8000356a:	21 7d       	sub	sp,92
8000356c:	e0 68 ff ff 	mov	r8,65535
80003570:	ea 18 7f ff 	orh	r8,0x7fff
80003574:	50 58       	stdsp	sp[0x14],r8
80003576:	50 28       	stdsp	sp[0x8],r8
80003578:	e0 68 02 08 	mov	r8,520
8000357c:	ba 68       	st.h	sp[0xc],r8
8000357e:	3f f8       	mov	r8,-1
80003580:	50 4b       	stdsp	sp[0x10],r11
80003582:	50 0b       	stdsp	sp[0x0],r11
80003584:	ba 78       	st.h	sp[0xe],r8
80003586:	1a 9b       	mov	r11,sp
80003588:	ca 8d       	rcall	800038d8 <_vfprintf_r>
8000358a:	30 09       	mov	r9,0
8000358c:	40 08       	lddsp	r8,sp[0x0]
8000358e:	b0 89       	st.b	r8[0x0],r9
80003590:	2e 9d       	sub	sp,-92
80003592:	d8 02       	popm	pc

80003594 <vsprintf>:
80003594:	d4 01       	pushm	lr
80003596:	e0 68 01 00 	mov	r8,256
8000359a:	14 99       	mov	r9,r10
8000359c:	16 9a       	mov	r10,r11
8000359e:	18 9b       	mov	r11,r12
800035a0:	70 0c       	ld.w	r12,r8[0x0]
800035a2:	ce 3f       	rcall	80003568 <_vsprintf_r>
800035a4:	d8 02       	popm	pc
800035a6:	d7 03       	nop

800035a8 <get_arg>:
800035a8:	d4 31       	pushm	r0-r7,lr
800035aa:	20 8d       	sub	sp,32
800035ac:	fa c4 ff bc 	sub	r4,sp,-68
800035b0:	50 4b       	stdsp	sp[0x10],r11
800035b2:	68 2e       	ld.w	lr,r4[0x8]
800035b4:	50 58       	stdsp	sp[0x14],r8
800035b6:	12 96       	mov	r6,r9
800035b8:	7c 0b       	ld.w	r11,lr[0x0]
800035ba:	70 05       	ld.w	r5,r8[0x0]
800035bc:	50 6e       	stdsp	sp[0x18],lr
800035be:	58 0b       	cp.w	r11,0
800035c0:	f4 0b 17 00 	moveq	r11,r10
800035c4:	68 03       	ld.w	r3,r4[0x0]
800035c6:	68 11       	ld.w	r1,r4[0x4]
800035c8:	40 49       	lddsp	r9,sp[0x10]
800035ca:	30 08       	mov	r8,0
800035cc:	c2 89       	rjmp	8000381c <get_arg+0x274>
800035ce:	2f fb       	sub	r11,-1
800035d0:	32 5c       	mov	r12,37
800035d2:	17 8a       	ld.ub	r10,r11[0x0]
800035d4:	f8 0a 18 00 	cp.b	r10,r12
800035d8:	5f 1e       	srne	lr
800035da:	f0 0a 18 00 	cp.b	r10,r8
800035de:	5f 1c       	srne	r12
800035e0:	fd ec 00 0c 	and	r12,lr,r12
800035e4:	f0 0c 18 00 	cp.b	r12,r8
800035e8:	cf 31       	brne	800035ce <get_arg+0x26>
800035ea:	58 0a       	cp.w	r10,0
800035ec:	e0 80 01 25 	breq	80003836 <get_arg+0x28e>
800035f0:	30 0c       	mov	r12,0
800035f2:	3f fa       	mov	r10,-1
800035f4:	18 90       	mov	r0,r12
800035f6:	50 3a       	stdsp	sp[0xc],r10
800035f8:	18 94       	mov	r4,r12
800035fa:	18 92       	mov	r2,r12
800035fc:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003600:	16 97       	mov	r7,r11
80003602:	50 7c       	stdsp	sp[0x1c],r12
80003604:	fe cc a1 6c 	sub	r12,pc,-24212
80003608:	0f 3a       	ld.ub	r10,r7++
8000360a:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000360e:	40 7c       	lddsp	r12,sp[0x1c]
80003610:	1c 0c       	add	r12,lr
80003612:	fe ce a2 42 	sub	lr,pc,-23998
80003616:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000361a:	20 1e       	sub	lr,1
8000361c:	50 0e       	stdsp	sp[0x0],lr
8000361e:	fe ce a2 ba 	sub	lr,pc,-23878
80003622:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003626:	50 7c       	stdsp	sp[0x1c],r12
80003628:	40 0c       	lddsp	r12,sp[0x0]
8000362a:	58 7c       	cp.w	r12,7
8000362c:	e0 8b 00 f1 	brhi	8000380e <get_arg+0x266>
80003630:	fe ce a4 6c 	sub	lr,pc,-23444
80003634:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003638:	36 8b       	mov	r11,104
8000363a:	f6 0a 18 00 	cp.b	r10,r11
8000363e:	e0 80 00 e8 	breq	8000380e <get_arg+0x266>
80003642:	37 1b       	mov	r11,113
80003644:	f6 0a 18 00 	cp.b	r10,r11
80003648:	c0 70       	breq	80003656 <get_arg+0xae>
8000364a:	34 cb       	mov	r11,76
8000364c:	f6 0a 18 00 	cp.b	r10,r11
80003650:	c0 51       	brne	8000365a <get_arg+0xb2>
80003652:	a3 b4       	sbr	r4,0x3
80003654:	cd d8       	rjmp	8000380e <get_arg+0x266>
80003656:	a5 b4       	sbr	r4,0x5
80003658:	cd b8       	rjmp	8000380e <get_arg+0x266>
8000365a:	08 9a       	mov	r10,r4
8000365c:	0e 9b       	mov	r11,r7
8000365e:	a5 aa       	sbr	r10,0x4
80003660:	17 3c       	ld.ub	r12,r11++
80003662:	a5 b4       	sbr	r4,0x5
80003664:	36 ce       	mov	lr,108
80003666:	fc 0c 18 00 	cp.b	r12,lr
8000366a:	e0 80 00 d3 	breq	80003810 <get_arg+0x268>
8000366e:	14 94       	mov	r4,r10
80003670:	cc f8       	rjmp	8000380e <get_arg+0x266>
80003672:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003676:	36 7c       	mov	r12,103
80003678:	f8 0a 18 00 	cp.b	r10,r12
8000367c:	e0 8b 00 27 	brhi	800036ca <get_arg+0x122>
80003680:	36 5b       	mov	r11,101
80003682:	f6 0a 18 00 	cp.b	r10,r11
80003686:	c4 82       	brcc	80003716 <get_arg+0x16e>
80003688:	34 fb       	mov	r11,79
8000368a:	f6 0a 18 00 	cp.b	r10,r11
8000368e:	c4 80       	breq	8000371e <get_arg+0x176>
80003690:	e0 8b 00 0c 	brhi	800036a8 <get_arg+0x100>
80003694:	34 5b       	mov	r11,69
80003696:	f6 0a 18 00 	cp.b	r10,r11
8000369a:	c3 e0       	breq	80003716 <get_arg+0x16e>
8000369c:	34 7b       	mov	r11,71
8000369e:	f6 0a 18 00 	cp.b	r10,r11
800036a2:	c3 a0       	breq	80003716 <get_arg+0x16e>
800036a4:	34 4b       	mov	r11,68
800036a6:	c0 88       	rjmp	800036b6 <get_arg+0x10e>
800036a8:	35 8b       	mov	r11,88
800036aa:	f6 0a 18 00 	cp.b	r10,r11
800036ae:	c2 c0       	breq	80003706 <get_arg+0x15e>
800036b0:	e0 8b 00 07 	brhi	800036be <get_arg+0x116>
800036b4:	35 5b       	mov	r11,85
800036b6:	f6 0a 18 00 	cp.b	r10,r11
800036ba:	c3 51       	brne	80003724 <get_arg+0x17c>
800036bc:	c3 18       	rjmp	8000371e <get_arg+0x176>
800036be:	36 3b       	mov	r11,99
800036c0:	f6 0a 18 00 	cp.b	r10,r11
800036c4:	c2 f0       	breq	80003722 <get_arg+0x17a>
800036c6:	36 4b       	mov	r11,100
800036c8:	c0 e8       	rjmp	800036e4 <get_arg+0x13c>
800036ca:	37 0b       	mov	r11,112
800036cc:	f6 0a 18 00 	cp.b	r10,r11
800036d0:	c2 50       	breq	8000371a <get_arg+0x172>
800036d2:	e0 8b 00 0d 	brhi	800036ec <get_arg+0x144>
800036d6:	36 eb       	mov	r11,110
800036d8:	f6 0a 18 00 	cp.b	r10,r11
800036dc:	c1 f0       	breq	8000371a <get_arg+0x172>
800036de:	e0 8b 00 14 	brhi	80003706 <get_arg+0x15e>
800036e2:	36 9b       	mov	r11,105
800036e4:	f6 0a 18 00 	cp.b	r10,r11
800036e8:	c1 e1       	brne	80003724 <get_arg+0x17c>
800036ea:	c0 e8       	rjmp	80003706 <get_arg+0x15e>
800036ec:	37 5b       	mov	r11,117
800036ee:	f6 0a 18 00 	cp.b	r10,r11
800036f2:	c0 a0       	breq	80003706 <get_arg+0x15e>
800036f4:	37 8b       	mov	r11,120
800036f6:	f6 0a 18 00 	cp.b	r10,r11
800036fa:	c0 60       	breq	80003706 <get_arg+0x15e>
800036fc:	37 3b       	mov	r11,115
800036fe:	f6 0a 18 00 	cp.b	r10,r11
80003702:	c1 11       	brne	80003724 <get_arg+0x17c>
80003704:	c0 b8       	rjmp	8000371a <get_arg+0x172>
80003706:	ed b4 00 04 	bld	r4,0x4
8000370a:	c0 a0       	breq	8000371e <get_arg+0x176>
8000370c:	ed b4 00 05 	bld	r4,0x5
80003710:	c0 91       	brne	80003722 <get_arg+0x17a>
80003712:	30 20       	mov	r0,2
80003714:	c0 88       	rjmp	80003724 <get_arg+0x17c>
80003716:	30 40       	mov	r0,4
80003718:	c0 68       	rjmp	80003724 <get_arg+0x17c>
8000371a:	30 30       	mov	r0,3
8000371c:	c0 48       	rjmp	80003724 <get_arg+0x17c>
8000371e:	30 10       	mov	r0,1
80003720:	c0 28       	rjmp	80003724 <get_arg+0x17c>
80003722:	30 00       	mov	r0,0
80003724:	40 3b       	lddsp	r11,sp[0xc]
80003726:	5b fb       	cp.w	r11,-1
80003728:	c0 40       	breq	80003730 <get_arg+0x188>
8000372a:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000372e:	c7 08       	rjmp	8000380e <get_arg+0x266>
80003730:	58 60       	cp.w	r0,6
80003732:	e0 8b 00 6e 	brhi	8000380e <get_arg+0x266>
80003736:	6c 0a       	ld.w	r10,r6[0x0]
80003738:	ea cc ff ff 	sub	r12,r5,-1
8000373c:	fe ce a5 58 	sub	lr,pc,-23208
80003740:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003744:	f4 cb ff f8 	sub	r11,r10,-8
80003748:	8d 0b       	st.w	r6[0x0],r11
8000374a:	f4 ea 00 00 	ld.d	r10,r10[0]
8000374e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003752:	c0 f8       	rjmp	80003770 <get_arg+0x1c8>
80003754:	f4 cb ff fc 	sub	r11,r10,-4
80003758:	8d 0b       	st.w	r6[0x0],r11
8000375a:	74 0a       	ld.w	r10,r10[0x0]
8000375c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003760:	c0 88       	rjmp	80003770 <get_arg+0x1c8>
80003762:	f4 cb ff f8 	sub	r11,r10,-8
80003766:	8d 0b       	st.w	r6[0x0],r11
80003768:	f4 ea 00 00 	ld.d	r10,r10[0]
8000376c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003770:	0e 9b       	mov	r11,r7
80003772:	18 95       	mov	r5,r12
80003774:	c4 e8       	rjmp	80003810 <get_arg+0x268>
80003776:	62 0a       	ld.w	r10,r1[0x0]
80003778:	5b fa       	cp.w	r10,-1
8000377a:	c0 b1       	brne	80003790 <get_arg+0x1e8>
8000377c:	50 19       	stdsp	sp[0x4],r9
8000377e:	50 28       	stdsp	sp[0x8],r8
80003780:	e0 6a 00 80 	mov	r10,128
80003784:	30 0b       	mov	r11,0
80003786:	02 9c       	mov	r12,r1
80003788:	e0 a0 1d 78 	rcall	80007278 <memset>
8000378c:	40 28       	lddsp	r8,sp[0x8]
8000378e:	40 19       	lddsp	r9,sp[0x4]
80003790:	e4 cc 00 01 	sub	r12,r2,1
80003794:	0e 9b       	mov	r11,r7
80003796:	50 3c       	stdsp	sp[0xc],r12
80003798:	f2 0c 0c 49 	max	r9,r9,r12
8000379c:	c3 a8       	rjmp	80003810 <get_arg+0x268>
8000379e:	62 0a       	ld.w	r10,r1[0x0]
800037a0:	5b fa       	cp.w	r10,-1
800037a2:	c0 b1       	brne	800037b8 <get_arg+0x210>
800037a4:	50 19       	stdsp	sp[0x4],r9
800037a6:	50 28       	stdsp	sp[0x8],r8
800037a8:	e0 6a 00 80 	mov	r10,128
800037ac:	30 0b       	mov	r11,0
800037ae:	02 9c       	mov	r12,r1
800037b0:	e0 a0 1d 64 	rcall	80007278 <memset>
800037b4:	40 28       	lddsp	r8,sp[0x8]
800037b6:	40 19       	lddsp	r9,sp[0x4]
800037b8:	20 12       	sub	r2,1
800037ba:	30 0a       	mov	r10,0
800037bc:	0e 9b       	mov	r11,r7
800037be:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800037c2:	f2 02 0c 49 	max	r9,r9,r2
800037c6:	c2 58       	rjmp	80003810 <get_arg+0x268>
800037c8:	16 97       	mov	r7,r11
800037ca:	6c 0a       	ld.w	r10,r6[0x0]
800037cc:	f4 cb ff fc 	sub	r11,r10,-4
800037d0:	8d 0b       	st.w	r6[0x0],r11
800037d2:	74 0a       	ld.w	r10,r10[0x0]
800037d4:	0e 9b       	mov	r11,r7
800037d6:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800037da:	2f f5       	sub	r5,-1
800037dc:	c1 a8       	rjmp	80003810 <get_arg+0x268>
800037de:	f4 c2 00 30 	sub	r2,r10,48
800037e2:	c0 68       	rjmp	800037ee <get_arg+0x246>
800037e4:	e4 02 00 22 	add	r2,r2,r2<<0x2
800037e8:	2f f7       	sub	r7,-1
800037ea:	f4 02 00 12 	add	r2,r10,r2<<0x1
800037ee:	0f 8a       	ld.ub	r10,r7[0x0]
800037f0:	58 0a       	cp.w	r10,0
800037f2:	c0 e0       	breq	8000380e <get_arg+0x266>
800037f4:	23 0a       	sub	r10,48
800037f6:	58 9a       	cp.w	r10,9
800037f8:	fe 98 ff f6 	brls	800037e4 <get_arg+0x23c>
800037fc:	c0 98       	rjmp	8000380e <get_arg+0x266>
800037fe:	2f f7       	sub	r7,-1
80003800:	0f 8a       	ld.ub	r10,r7[0x0]
80003802:	58 0a       	cp.w	r10,0
80003804:	c0 50       	breq	8000380e <get_arg+0x266>
80003806:	23 0a       	sub	r10,48
80003808:	58 9a       	cp.w	r10,9
8000380a:	fe 98 ff fa 	brls	800037fe <get_arg+0x256>
8000380e:	0e 9b       	mov	r11,r7
80003810:	40 7c       	lddsp	r12,sp[0x1c]
80003812:	30 ba       	mov	r10,11
80003814:	f4 0c 18 00 	cp.b	r12,r10
80003818:	fe 91 fe f2 	brne	800035fc <get_arg+0x54>
8000381c:	40 42       	lddsp	r2,sp[0x10]
8000381e:	17 8c       	ld.ub	r12,r11[0x0]
80003820:	0a 32       	cp.w	r2,r5
80003822:	5f 4a       	srge	r10
80003824:	f0 0c 18 00 	cp.b	r12,r8
80003828:	5f 1c       	srne	r12
8000382a:	f9 ea 00 0a 	and	r10,r12,r10
8000382e:	f0 0a 18 00 	cp.b	r10,r8
80003832:	fe 91 fe cf 	brne	800035d0 <get_arg+0x28>
80003836:	30 08       	mov	r8,0
80003838:	40 4e       	lddsp	lr,sp[0x10]
8000383a:	17 8a       	ld.ub	r10,r11[0x0]
8000383c:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003840:	f0 0a 18 00 	cp.b	r10,r8
80003844:	fc 09 17 10 	movne	r9,lr
80003848:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000384c:	06 9e       	mov	lr,r3
8000384e:	c2 a8       	rjmp	800038a2 <get_arg+0x2fa>
80003850:	62 0a       	ld.w	r10,r1[0x0]
80003852:	58 3a       	cp.w	r10,3
80003854:	c1 e0       	breq	80003890 <get_arg+0x2e8>
80003856:	e0 89 00 07 	brgt	80003864 <get_arg+0x2bc>
8000385a:	58 1a       	cp.w	r10,1
8000385c:	c1 a0       	breq	80003890 <get_arg+0x2e8>
8000385e:	58 2a       	cp.w	r10,2
80003860:	c1 81       	brne	80003890 <get_arg+0x2e8>
80003862:	c0 58       	rjmp	8000386c <get_arg+0x2c4>
80003864:	58 5a       	cp.w	r10,5
80003866:	c0 c0       	breq	8000387e <get_arg+0x2d6>
80003868:	c0 b5       	brlt	8000387e <get_arg+0x2d6>
8000386a:	c1 38       	rjmp	80003890 <get_arg+0x2e8>
8000386c:	6c 0a       	ld.w	r10,r6[0x0]
8000386e:	f4 cc ff f8 	sub	r12,r10,-8
80003872:	8d 0c       	st.w	r6[0x0],r12
80003874:	f4 e2 00 00 	ld.d	r2,r10[0]
80003878:	f0 e3 00 00 	st.d	r8[0],r2
8000387c:	c1 08       	rjmp	8000389c <get_arg+0x2f4>
8000387e:	6c 0a       	ld.w	r10,r6[0x0]
80003880:	f4 cc ff f8 	sub	r12,r10,-8
80003884:	8d 0c       	st.w	r6[0x0],r12
80003886:	f4 e2 00 00 	ld.d	r2,r10[0]
8000388a:	f0 e3 00 00 	st.d	r8[0],r2
8000388e:	c0 78       	rjmp	8000389c <get_arg+0x2f4>
80003890:	6c 0a       	ld.w	r10,r6[0x0]
80003892:	f4 cc ff fc 	sub	r12,r10,-4
80003896:	8d 0c       	st.w	r6[0x0],r12
80003898:	74 0a       	ld.w	r10,r10[0x0]
8000389a:	91 0a       	st.w	r8[0x0],r10
8000389c:	2f f5       	sub	r5,-1
8000389e:	2f 88       	sub	r8,-8
800038a0:	2f c1       	sub	r1,-4
800038a2:	12 35       	cp.w	r5,r9
800038a4:	fe 9a ff d6 	brle	80003850 <get_arg+0x2a8>
800038a8:	1c 93       	mov	r3,lr
800038aa:	40 52       	lddsp	r2,sp[0x14]
800038ac:	40 6e       	lddsp	lr,sp[0x18]
800038ae:	85 05       	st.w	r2[0x0],r5
800038b0:	9d 0b       	st.w	lr[0x0],r11
800038b2:	40 4b       	lddsp	r11,sp[0x10]
800038b4:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800038b8:	2f 8d       	sub	sp,-32
800038ba:	d8 32       	popm	r0-r7,pc

800038bc <__sprint_r>:
800038bc:	d4 21       	pushm	r4-r7,lr
800038be:	14 97       	mov	r7,r10
800038c0:	74 28       	ld.w	r8,r10[0x8]
800038c2:	58 08       	cp.w	r8,0
800038c4:	c0 41       	brne	800038cc <__sprint_r+0x10>
800038c6:	95 18       	st.w	r10[0x4],r8
800038c8:	10 9c       	mov	r12,r8
800038ca:	d8 22       	popm	r4-r7,pc
800038cc:	e0 a0 18 b4 	rcall	80006a34 <__sfvwrite_r>
800038d0:	30 08       	mov	r8,0
800038d2:	8f 18       	st.w	r7[0x4],r8
800038d4:	8f 28       	st.w	r7[0x8],r8
800038d6:	d8 22       	popm	r4-r7,pc

800038d8 <_vfprintf_r>:
800038d8:	d4 31       	pushm	r0-r7,lr
800038da:	fa cd 06 bc 	sub	sp,sp,1724
800038de:	51 09       	stdsp	sp[0x40],r9
800038e0:	16 91       	mov	r1,r11
800038e2:	14 97       	mov	r7,r10
800038e4:	18 95       	mov	r5,r12
800038e6:	e0 a0 1a 1d 	rcall	80006d20 <_localeconv_r>
800038ea:	78 0c       	ld.w	r12,r12[0x0]
800038ec:	50 cc       	stdsp	sp[0x30],r12
800038ee:	58 05       	cp.w	r5,0
800038f0:	c0 70       	breq	800038fe <_vfprintf_r+0x26>
800038f2:	6a 68       	ld.w	r8,r5[0x18]
800038f4:	58 08       	cp.w	r8,0
800038f6:	c0 41       	brne	800038fe <_vfprintf_r+0x26>
800038f8:	0a 9c       	mov	r12,r5
800038fa:	e0 a0 17 3d 	rcall	80006774 <__sinit>
800038fe:	fe c8 a3 56 	sub	r8,pc,-23722
80003902:	10 31       	cp.w	r1,r8
80003904:	c0 31       	brne	8000390a <_vfprintf_r+0x32>
80003906:	6a 01       	ld.w	r1,r5[0x0]
80003908:	c0 c8       	rjmp	80003920 <_vfprintf_r+0x48>
8000390a:	fe c8 a3 42 	sub	r8,pc,-23742
8000390e:	10 31       	cp.w	r1,r8
80003910:	c0 31       	brne	80003916 <_vfprintf_r+0x3e>
80003912:	6a 11       	ld.w	r1,r5[0x4]
80003914:	c0 68       	rjmp	80003920 <_vfprintf_r+0x48>
80003916:	fe c8 a3 2e 	sub	r8,pc,-23762
8000391a:	10 31       	cp.w	r1,r8
8000391c:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003920:	82 68       	ld.sh	r8,r1[0xc]
80003922:	ed b8 00 03 	bld	r8,0x3
80003926:	c0 41       	brne	8000392e <_vfprintf_r+0x56>
80003928:	62 48       	ld.w	r8,r1[0x10]
8000392a:	58 08       	cp.w	r8,0
8000392c:	c0 71       	brne	8000393a <_vfprintf_r+0x62>
8000392e:	02 9b       	mov	r11,r1
80003930:	0a 9c       	mov	r12,r5
80003932:	e0 a0 0f 5d 	rcall	800057ec <__swsetup_r>
80003936:	e0 81 0f 54 	brne	800057de <_vfprintf_r+0x1f06>
8000393a:	82 68       	ld.sh	r8,r1[0xc]
8000393c:	10 99       	mov	r9,r8
8000393e:	e2 19 00 1a 	andl	r9,0x1a,COH
80003942:	58 a9       	cp.w	r9,10
80003944:	c3 c1       	brne	800039bc <_vfprintf_r+0xe4>
80003946:	82 79       	ld.sh	r9,r1[0xe]
80003948:	30 0a       	mov	r10,0
8000394a:	f4 09 19 00 	cp.h	r9,r10
8000394e:	c3 75       	brlt	800039bc <_vfprintf_r+0xe4>
80003950:	a1 d8       	cbr	r8,0x1
80003952:	fb 58 05 d0 	st.h	sp[1488],r8
80003956:	62 88       	ld.w	r8,r1[0x20]
80003958:	fb 48 05 e4 	st.w	sp[1508],r8
8000395c:	62 a8       	ld.w	r8,r1[0x28]
8000395e:	fb 48 05 ec 	st.w	sp[1516],r8
80003962:	fa c8 ff bc 	sub	r8,sp,-68
80003966:	fb 48 05 d4 	st.w	sp[1492],r8
8000396a:	fb 48 05 c4 	st.w	sp[1476],r8
8000396e:	e0 68 04 00 	mov	r8,1024
80003972:	fb 48 05 d8 	st.w	sp[1496],r8
80003976:	fb 48 05 cc 	st.w	sp[1484],r8
8000397a:	30 08       	mov	r8,0
8000397c:	fb 59 05 d2 	st.h	sp[1490],r9
80003980:	0e 9a       	mov	r10,r7
80003982:	41 09       	lddsp	r9,sp[0x40]
80003984:	fa c7 fa 3c 	sub	r7,sp,-1476
80003988:	fb 48 05 dc 	st.w	sp[1500],r8
8000398c:	0a 9c       	mov	r12,r5
8000398e:	0e 9b       	mov	r11,r7
80003990:	ca 4f       	rcall	800038d8 <_vfprintf_r>
80003992:	50 bc       	stdsp	sp[0x2c],r12
80003994:	c0 95       	brlt	800039a6 <_vfprintf_r+0xce>
80003996:	0e 9b       	mov	r11,r7
80003998:	0a 9c       	mov	r12,r5
8000399a:	e0 a0 16 15 	rcall	800065c4 <_fflush_r>
8000399e:	40 be       	lddsp	lr,sp[0x2c]
800039a0:	f9 be 01 ff 	movne	lr,-1
800039a4:	50 be       	stdsp	sp[0x2c],lr
800039a6:	fb 08 05 d0 	ld.sh	r8,sp[1488]
800039aa:	ed b8 00 06 	bld	r8,0x6
800039ae:	e0 81 0f 1a 	brne	800057e2 <_vfprintf_r+0x1f0a>
800039b2:	82 68       	ld.sh	r8,r1[0xc]
800039b4:	a7 a8       	sbr	r8,0x6
800039b6:	a2 68       	st.h	r1[0xc],r8
800039b8:	e0 8f 0f 15 	bral	800057e2 <_vfprintf_r+0x1f0a>
800039bc:	30 08       	mov	r8,0
800039be:	fb 48 06 b4 	st.w	sp[1716],r8
800039c2:	fb 48 06 90 	st.w	sp[1680],r8
800039c6:	fb 48 06 8c 	st.w	sp[1676],r8
800039ca:	fb 48 06 b0 	st.w	sp[1712],r8
800039ce:	30 08       	mov	r8,0
800039d0:	30 09       	mov	r9,0
800039d2:	50 a7       	stdsp	sp[0x28],r7
800039d4:	50 78       	stdsp	sp[0x1c],r8
800039d6:	fa c3 f9 e0 	sub	r3,sp,-1568
800039da:	3f f8       	mov	r8,-1
800039dc:	50 59       	stdsp	sp[0x14],r9
800039de:	fb 43 06 88 	st.w	sp[1672],r3
800039e2:	fb 48 05 44 	st.w	sp[1348],r8
800039e6:	12 9c       	mov	r12,r9
800039e8:	50 69       	stdsp	sp[0x18],r9
800039ea:	50 d9       	stdsp	sp[0x34],r9
800039ec:	50 e9       	stdsp	sp[0x38],r9
800039ee:	50 b9       	stdsp	sp[0x2c],r9
800039f0:	12 97       	mov	r7,r9
800039f2:	0a 94       	mov	r4,r5
800039f4:	40 a2       	lddsp	r2,sp[0x28]
800039f6:	32 5a       	mov	r10,37
800039f8:	30 08       	mov	r8,0
800039fa:	c0 28       	rjmp	800039fe <_vfprintf_r+0x126>
800039fc:	2f f2       	sub	r2,-1
800039fe:	05 89       	ld.ub	r9,r2[0x0]
80003a00:	f0 09 18 00 	cp.b	r9,r8
80003a04:	5f 1b       	srne	r11
80003a06:	f4 09 18 00 	cp.b	r9,r10
80003a0a:	5f 19       	srne	r9
80003a0c:	f3 eb 00 0b 	and	r11,r9,r11
80003a10:	f0 0b 18 00 	cp.b	r11,r8
80003a14:	cf 41       	brne	800039fc <_vfprintf_r+0x124>
80003a16:	40 ab       	lddsp	r11,sp[0x28]
80003a18:	e4 0b 01 06 	sub	r6,r2,r11
80003a1c:	c1 e0       	breq	80003a58 <_vfprintf_r+0x180>
80003a1e:	fa f8 06 90 	ld.w	r8,sp[1680]
80003a22:	0c 08       	add	r8,r6
80003a24:	87 0b       	st.w	r3[0x0],r11
80003a26:	fb 48 06 90 	st.w	sp[1680],r8
80003a2a:	87 16       	st.w	r3[0x4],r6
80003a2c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003a30:	2f f8       	sub	r8,-1
80003a32:	fb 48 06 8c 	st.w	sp[1676],r8
80003a36:	58 78       	cp.w	r8,7
80003a38:	e0 89 00 04 	brgt	80003a40 <_vfprintf_r+0x168>
80003a3c:	2f 83       	sub	r3,-8
80003a3e:	c0 a8       	rjmp	80003a52 <_vfprintf_r+0x17a>
80003a40:	fa ca f9 78 	sub	r10,sp,-1672
80003a44:	02 9b       	mov	r11,r1
80003a46:	08 9c       	mov	r12,r4
80003a48:	c3 af       	rcall	800038bc <__sprint_r>
80003a4a:	e0 81 0e c6 	brne	800057d6 <_vfprintf_r+0x1efe>
80003a4e:	fa c3 f9 e0 	sub	r3,sp,-1568
80003a52:	40 ba       	lddsp	r10,sp[0x2c]
80003a54:	0c 0a       	add	r10,r6
80003a56:	50 ba       	stdsp	sp[0x2c],r10
80003a58:	05 89       	ld.ub	r9,r2[0x0]
80003a5a:	30 08       	mov	r8,0
80003a5c:	f0 09 18 00 	cp.b	r9,r8
80003a60:	e0 80 0e aa 	breq	800057b4 <_vfprintf_r+0x1edc>
80003a64:	30 09       	mov	r9,0
80003a66:	fb 68 06 bb 	st.b	sp[1723],r8
80003a6a:	0e 96       	mov	r6,r7
80003a6c:	e4 c8 ff ff 	sub	r8,r2,-1
80003a70:	3f fe       	mov	lr,-1
80003a72:	50 93       	stdsp	sp[0x24],r3
80003a74:	50 41       	stdsp	sp[0x10],r1
80003a76:	0e 93       	mov	r3,r7
80003a78:	04 91       	mov	r1,r2
80003a7a:	50 89       	stdsp	sp[0x20],r9
80003a7c:	50 a8       	stdsp	sp[0x28],r8
80003a7e:	50 2e       	stdsp	sp[0x8],lr
80003a80:	50 39       	stdsp	sp[0xc],r9
80003a82:	12 95       	mov	r5,r9
80003a84:	12 90       	mov	r0,r9
80003a86:	10 97       	mov	r7,r8
80003a88:	08 92       	mov	r2,r4
80003a8a:	c0 78       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003a8c:	3f fc       	mov	r12,-1
80003a8e:	08 97       	mov	r7,r4
80003a90:	50 2c       	stdsp	sp[0x8],r12
80003a92:	c0 38       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003a94:	30 0b       	mov	r11,0
80003a96:	50 3b       	stdsp	sp[0xc],r11
80003a98:	0f 38       	ld.ub	r8,r7++
80003a9a:	c0 28       	rjmp	80003a9e <_vfprintf_r+0x1c6>
80003a9c:	12 90       	mov	r0,r9
80003a9e:	f0 c9 00 20 	sub	r9,r8,32
80003aa2:	e0 49 00 58 	cp.w	r9,88
80003aa6:	e0 8b 0a 30 	brhi	80004f06 <_vfprintf_r+0x162e>
80003aaa:	fe ca a8 aa 	sub	r10,pc,-22358
80003aae:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003ab2:	50 a7       	stdsp	sp[0x28],r7
80003ab4:	50 80       	stdsp	sp[0x20],r0
80003ab6:	0c 97       	mov	r7,r6
80003ab8:	04 94       	mov	r4,r2
80003aba:	06 96       	mov	r6,r3
80003abc:	02 92       	mov	r2,r1
80003abe:	fe c9 a6 82 	sub	r9,pc,-22910
80003ac2:	40 93       	lddsp	r3,sp[0x24]
80003ac4:	10 90       	mov	r0,r8
80003ac6:	40 41       	lddsp	r1,sp[0x10]
80003ac8:	50 d9       	stdsp	sp[0x34],r9
80003aca:	e0 8f 08 8e 	bral	80004be6 <_vfprintf_r+0x130e>
80003ace:	30 08       	mov	r8,0
80003ad0:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003ad4:	f0 09 18 00 	cp.b	r9,r8
80003ad8:	ce 01       	brne	80003a98 <_vfprintf_r+0x1c0>
80003ada:	32 08       	mov	r8,32
80003adc:	c6 e8       	rjmp	80003bb8 <_vfprintf_r+0x2e0>
80003ade:	a1 a5       	sbr	r5,0x0
80003ae0:	cd cb       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003ae2:	0f 89       	ld.ub	r9,r7[0x0]
80003ae4:	f2 c8 00 30 	sub	r8,r9,48
80003ae8:	58 98       	cp.w	r8,9
80003aea:	e0 8b 00 1d 	brhi	80003b24 <_vfprintf_r+0x24c>
80003aee:	ee c8 ff ff 	sub	r8,r7,-1
80003af2:	30 0b       	mov	r11,0
80003af4:	23 09       	sub	r9,48
80003af6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003afa:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003afe:	11 39       	ld.ub	r9,r8++
80003b00:	f2 ca 00 30 	sub	r10,r9,48
80003b04:	58 9a       	cp.w	r10,9
80003b06:	fe 98 ff f7 	brls	80003af4 <_vfprintf_r+0x21c>
80003b0a:	e0 49 00 24 	cp.w	r9,36
80003b0e:	cc 31       	brne	80003a94 <_vfprintf_r+0x1bc>
80003b10:	e0 4b 00 20 	cp.w	r11,32
80003b14:	e0 89 0e 60 	brgt	800057d4 <_vfprintf_r+0x1efc>
80003b18:	20 1b       	sub	r11,1
80003b1a:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b1e:	12 3b       	cp.w	r11,r9
80003b20:	c0 95       	brlt	80003b32 <_vfprintf_r+0x25a>
80003b22:	c1 08       	rjmp	80003b42 <_vfprintf_r+0x26a>
80003b24:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b28:	ec ca ff ff 	sub	r10,r6,-1
80003b2c:	12 36       	cp.w	r6,r9
80003b2e:	c1 f5       	brlt	80003b6c <_vfprintf_r+0x294>
80003b30:	c2 68       	rjmp	80003b7c <_vfprintf_r+0x2a4>
80003b32:	fa ce f9 44 	sub	lr,sp,-1724
80003b36:	10 97       	mov	r7,r8
80003b38:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003b3c:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003b40:	c3 58       	rjmp	80003baa <_vfprintf_r+0x2d2>
80003b42:	10 97       	mov	r7,r8
80003b44:	fa c8 f9 50 	sub	r8,sp,-1712
80003b48:	1a d8       	st.w	--sp,r8
80003b4a:	fa c8 fa b8 	sub	r8,sp,-1352
80003b4e:	1a d8       	st.w	--sp,r8
80003b50:	fa c8 fb b4 	sub	r8,sp,-1100
80003b54:	02 9a       	mov	r10,r1
80003b56:	1a d8       	st.w	--sp,r8
80003b58:	04 9c       	mov	r12,r2
80003b5a:	fa c8 f9 40 	sub	r8,sp,-1728
80003b5e:	fa c9 ff b4 	sub	r9,sp,-76
80003b62:	fe b0 fd 23 	rcall	800035a8 <get_arg>
80003b66:	2f dd       	sub	sp,-12
80003b68:	78 00       	ld.w	r0,r12[0x0]
80003b6a:	c2 08       	rjmp	80003baa <_vfprintf_r+0x2d2>
80003b6c:	fa cc f9 44 	sub	r12,sp,-1724
80003b70:	14 96       	mov	r6,r10
80003b72:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003b76:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003b7a:	c1 88       	rjmp	80003baa <_vfprintf_r+0x2d2>
80003b7c:	41 08       	lddsp	r8,sp[0x40]
80003b7e:	59 f9       	cp.w	r9,31
80003b80:	e0 89 00 11 	brgt	80003ba2 <_vfprintf_r+0x2ca>
80003b84:	f0 cb ff fc 	sub	r11,r8,-4
80003b88:	51 0b       	stdsp	sp[0x40],r11
80003b8a:	70 00       	ld.w	r0,r8[0x0]
80003b8c:	fa cb f9 44 	sub	r11,sp,-1724
80003b90:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003b94:	f1 40 fd 88 	st.w	r8[-632],r0
80003b98:	2f f9       	sub	r9,-1
80003b9a:	14 96       	mov	r6,r10
80003b9c:	fb 49 06 b4 	st.w	sp[1716],r9
80003ba0:	c0 58       	rjmp	80003baa <_vfprintf_r+0x2d2>
80003ba2:	70 00       	ld.w	r0,r8[0x0]
80003ba4:	14 96       	mov	r6,r10
80003ba6:	2f c8       	sub	r8,-4
80003ba8:	51 08       	stdsp	sp[0x40],r8
80003baa:	58 00       	cp.w	r0,0
80003bac:	fe 94 ff 76 	brge	80003a98 <_vfprintf_r+0x1c0>
80003bb0:	5c 30       	neg	r0
80003bb2:	a3 a5       	sbr	r5,0x2
80003bb4:	c7 2b       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003bb6:	32 b8       	mov	r8,43
80003bb8:	fb 68 06 bb 	st.b	sp[1723],r8
80003bbc:	c6 eb       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003bbe:	0f 38       	ld.ub	r8,r7++
80003bc0:	e0 48 00 2a 	cp.w	r8,42
80003bc4:	c0 30       	breq	80003bca <_vfprintf_r+0x2f2>
80003bc6:	30 09       	mov	r9,0
80003bc8:	c7 98       	rjmp	80003cba <_vfprintf_r+0x3e2>
80003bca:	0f 88       	ld.ub	r8,r7[0x0]
80003bcc:	f0 c9 00 30 	sub	r9,r8,48
80003bd0:	58 99       	cp.w	r9,9
80003bd2:	e0 8b 00 1f 	brhi	80003c10 <_vfprintf_r+0x338>
80003bd6:	ee c4 ff ff 	sub	r4,r7,-1
80003bda:	30 0b       	mov	r11,0
80003bdc:	23 08       	sub	r8,48
80003bde:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003be2:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003be6:	09 38       	ld.ub	r8,r4++
80003be8:	f0 c9 00 30 	sub	r9,r8,48
80003bec:	58 99       	cp.w	r9,9
80003bee:	fe 98 ff f7 	brls	80003bdc <_vfprintf_r+0x304>
80003bf2:	e0 48 00 24 	cp.w	r8,36
80003bf6:	fe 91 ff 4f 	brne	80003a94 <_vfprintf_r+0x1bc>
80003bfa:	e0 4b 00 20 	cp.w	r11,32
80003bfe:	e0 89 0d eb 	brgt	800057d4 <_vfprintf_r+0x1efc>
80003c02:	20 1b       	sub	r11,1
80003c04:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003c08:	10 3b       	cp.w	r11,r8
80003c0a:	c0 a5       	brlt	80003c1e <_vfprintf_r+0x346>
80003c0c:	c1 18       	rjmp	80003c2e <_vfprintf_r+0x356>
80003c0e:	d7 03       	nop
80003c10:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003c14:	ec c9 ff ff 	sub	r9,r6,-1
80003c18:	14 36       	cp.w	r6,r10
80003c1a:	c1 f5       	brlt	80003c58 <_vfprintf_r+0x380>
80003c1c:	c2 88       	rjmp	80003c6c <_vfprintf_r+0x394>
80003c1e:	fa ca f9 44 	sub	r10,sp,-1724
80003c22:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003c26:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003c2a:	50 2b       	stdsp	sp[0x8],r11
80003c2c:	c3 c8       	rjmp	80003ca4 <_vfprintf_r+0x3cc>
80003c2e:	fa c8 f9 50 	sub	r8,sp,-1712
80003c32:	1a d8       	st.w	--sp,r8
80003c34:	fa c8 fa b8 	sub	r8,sp,-1352
80003c38:	1a d8       	st.w	--sp,r8
80003c3a:	fa c8 fb b4 	sub	r8,sp,-1100
80003c3e:	02 9a       	mov	r10,r1
80003c40:	1a d8       	st.w	--sp,r8
80003c42:	04 9c       	mov	r12,r2
80003c44:	fa c8 f9 40 	sub	r8,sp,-1728
80003c48:	fa c9 ff b4 	sub	r9,sp,-76
80003c4c:	fe b0 fc ae 	rcall	800035a8 <get_arg>
80003c50:	2f dd       	sub	sp,-12
80003c52:	78 0c       	ld.w	r12,r12[0x0]
80003c54:	50 2c       	stdsp	sp[0x8],r12
80003c56:	c2 78       	rjmp	80003ca4 <_vfprintf_r+0x3cc>
80003c58:	12 96       	mov	r6,r9
80003c5a:	0e 94       	mov	r4,r7
80003c5c:	fa c9 f9 44 	sub	r9,sp,-1724
80003c60:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003c64:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003c68:	50 28       	stdsp	sp[0x8],r8
80003c6a:	c1 d8       	rjmp	80003ca4 <_vfprintf_r+0x3cc>
80003c6c:	41 08       	lddsp	r8,sp[0x40]
80003c6e:	59 fa       	cp.w	r10,31
80003c70:	e0 89 00 14 	brgt	80003c98 <_vfprintf_r+0x3c0>
80003c74:	f0 cb ff fc 	sub	r11,r8,-4
80003c78:	70 08       	ld.w	r8,r8[0x0]
80003c7a:	51 0b       	stdsp	sp[0x40],r11
80003c7c:	50 28       	stdsp	sp[0x8],r8
80003c7e:	fa c6 f9 44 	sub	r6,sp,-1724
80003c82:	40 2e       	lddsp	lr,sp[0x8]
80003c84:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003c88:	f1 4e fd 88 	st.w	r8[-632],lr
80003c8c:	2f fa       	sub	r10,-1
80003c8e:	0e 94       	mov	r4,r7
80003c90:	fb 4a 06 b4 	st.w	sp[1716],r10
80003c94:	12 96       	mov	r6,r9
80003c96:	c0 78       	rjmp	80003ca4 <_vfprintf_r+0x3cc>
80003c98:	70 0c       	ld.w	r12,r8[0x0]
80003c9a:	0e 94       	mov	r4,r7
80003c9c:	2f c8       	sub	r8,-4
80003c9e:	50 2c       	stdsp	sp[0x8],r12
80003ca0:	12 96       	mov	r6,r9
80003ca2:	51 08       	stdsp	sp[0x40],r8
80003ca4:	40 2b       	lddsp	r11,sp[0x8]
80003ca6:	58 0b       	cp.w	r11,0
80003ca8:	fe 95 fe f2 	brlt	80003a8c <_vfprintf_r+0x1b4>
80003cac:	08 97       	mov	r7,r4
80003cae:	cf 5a       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003cb0:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003cb4:	0f 38       	ld.ub	r8,r7++
80003cb6:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003cba:	f0 ca 00 30 	sub	r10,r8,48
80003cbe:	58 9a       	cp.w	r10,9
80003cc0:	fe 98 ff f8 	brls	80003cb0 <_vfprintf_r+0x3d8>
80003cc4:	3f fa       	mov	r10,-1
80003cc6:	f2 0a 0c 49 	max	r9,r9,r10
80003cca:	50 29       	stdsp	sp[0x8],r9
80003ccc:	ce 9a       	rjmp	80003a9e <_vfprintf_r+0x1c6>
80003cce:	a7 b5       	sbr	r5,0x7
80003cd0:	ce 4a       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003cd2:	30 09       	mov	r9,0
80003cd4:	23 08       	sub	r8,48
80003cd6:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003cda:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003cde:	0f 38       	ld.ub	r8,r7++
80003ce0:	f0 ca 00 30 	sub	r10,r8,48
80003ce4:	58 9a       	cp.w	r10,9
80003ce6:	fe 98 ff f7 	brls	80003cd4 <_vfprintf_r+0x3fc>
80003cea:	e0 48 00 24 	cp.w	r8,36
80003cee:	fe 91 fe d7 	brne	80003a9c <_vfprintf_r+0x1c4>
80003cf2:	e0 49 00 20 	cp.w	r9,32
80003cf6:	e0 89 0d 6f 	brgt	800057d4 <_vfprintf_r+0x1efc>
80003cfa:	f2 c3 00 01 	sub	r3,r9,1
80003cfe:	30 19       	mov	r9,1
80003d00:	50 39       	stdsp	sp[0xc],r9
80003d02:	cc ba       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003d04:	a3 b5       	sbr	r5,0x3
80003d06:	cc 9a       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003d08:	a7 a5       	sbr	r5,0x6
80003d0a:	cc 7a       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003d0c:	0a 98       	mov	r8,r5
80003d0e:	a5 b5       	sbr	r5,0x5
80003d10:	a5 a8       	sbr	r8,0x4
80003d12:	0f 89       	ld.ub	r9,r7[0x0]
80003d14:	36 ce       	mov	lr,108
80003d16:	fc 09 18 00 	cp.b	r9,lr
80003d1a:	f7 b7 00 ff 	subeq	r7,-1
80003d1e:	f0 05 17 10 	movne	r5,r8
80003d22:	cb ba       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003d24:	a5 b5       	sbr	r5,0x5
80003d26:	cb 9a       	rjmp	80003a98 <_vfprintf_r+0x1c0>
80003d28:	50 a7       	stdsp	sp[0x28],r7
80003d2a:	50 80       	stdsp	sp[0x20],r0
80003d2c:	0c 97       	mov	r7,r6
80003d2e:	10 90       	mov	r0,r8
80003d30:	06 96       	mov	r6,r3
80003d32:	04 94       	mov	r4,r2
80003d34:	40 93       	lddsp	r3,sp[0x24]
80003d36:	02 92       	mov	r2,r1
80003d38:	0e 99       	mov	r9,r7
80003d3a:	40 41       	lddsp	r1,sp[0x10]
80003d3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003d40:	40 3c       	lddsp	r12,sp[0xc]
80003d42:	58 0c       	cp.w	r12,0
80003d44:	c1 d0       	breq	80003d7e <_vfprintf_r+0x4a6>
80003d46:	10 36       	cp.w	r6,r8
80003d48:	c0 64       	brge	80003d54 <_vfprintf_r+0x47c>
80003d4a:	fa cb f9 44 	sub	r11,sp,-1724
80003d4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003d52:	c1 d8       	rjmp	80003d8c <_vfprintf_r+0x4b4>
80003d54:	fa c8 f9 50 	sub	r8,sp,-1712
80003d58:	1a d8       	st.w	--sp,r8
80003d5a:	fa c8 fa b8 	sub	r8,sp,-1352
80003d5e:	1a d8       	st.w	--sp,r8
80003d60:	fa c8 fb b4 	sub	r8,sp,-1100
80003d64:	1a d8       	st.w	--sp,r8
80003d66:	fa c8 f9 40 	sub	r8,sp,-1728
80003d6a:	fa c9 ff b4 	sub	r9,sp,-76
80003d6e:	04 9a       	mov	r10,r2
80003d70:	0c 9b       	mov	r11,r6
80003d72:	08 9c       	mov	r12,r4
80003d74:	fe b0 fc 1a 	rcall	800035a8 <get_arg>
80003d78:	2f dd       	sub	sp,-12
80003d7a:	19 b8       	ld.ub	r8,r12[0x3]
80003d7c:	c2 28       	rjmp	80003dc0 <_vfprintf_r+0x4e8>
80003d7e:	2f f7       	sub	r7,-1
80003d80:	10 39       	cp.w	r9,r8
80003d82:	c0 84       	brge	80003d92 <_vfprintf_r+0x4ba>
80003d84:	fa ca f9 44 	sub	r10,sp,-1724
80003d88:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003d8c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003d90:	c1 88       	rjmp	80003dc0 <_vfprintf_r+0x4e8>
80003d92:	41 09       	lddsp	r9,sp[0x40]
80003d94:	59 f8       	cp.w	r8,31
80003d96:	e0 89 00 12 	brgt	80003dba <_vfprintf_r+0x4e2>
80003d9a:	f2 ca ff fc 	sub	r10,r9,-4
80003d9e:	51 0a       	stdsp	sp[0x40],r10
80003da0:	72 09       	ld.w	r9,r9[0x0]
80003da2:	fa c6 f9 44 	sub	r6,sp,-1724
80003da6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003daa:	2f f8       	sub	r8,-1
80003dac:	f5 49 fd 88 	st.w	r10[-632],r9
80003db0:	fb 48 06 b4 	st.w	sp[1716],r8
80003db4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003db8:	c0 48       	rjmp	80003dc0 <_vfprintf_r+0x4e8>
80003dba:	13 b8       	ld.ub	r8,r9[0x3]
80003dbc:	2f c9       	sub	r9,-4
80003dbe:	51 09       	stdsp	sp[0x40],r9
80003dc0:	fb 68 06 60 	st.b	sp[1632],r8
80003dc4:	30 0e       	mov	lr,0
80003dc6:	30 08       	mov	r8,0
80003dc8:	30 12       	mov	r2,1
80003dca:	fb 68 06 bb 	st.b	sp[1723],r8
80003dce:	50 2e       	stdsp	sp[0x8],lr
80003dd0:	e0 8f 08 ad 	bral	80004f2a <_vfprintf_r+0x1652>
80003dd4:	50 a7       	stdsp	sp[0x28],r7
80003dd6:	50 80       	stdsp	sp[0x20],r0
80003dd8:	0c 97       	mov	r7,r6
80003dda:	04 94       	mov	r4,r2
80003ddc:	06 96       	mov	r6,r3
80003dde:	02 92       	mov	r2,r1
80003de0:	40 93       	lddsp	r3,sp[0x24]
80003de2:	10 90       	mov	r0,r8
80003de4:	40 41       	lddsp	r1,sp[0x10]
80003de6:	a5 a5       	sbr	r5,0x4
80003de8:	c0 a8       	rjmp	80003dfc <_vfprintf_r+0x524>
80003dea:	50 a7       	stdsp	sp[0x28],r7
80003dec:	50 80       	stdsp	sp[0x20],r0
80003dee:	0c 97       	mov	r7,r6
80003df0:	04 94       	mov	r4,r2
80003df2:	06 96       	mov	r6,r3
80003df4:	02 92       	mov	r2,r1
80003df6:	40 93       	lddsp	r3,sp[0x24]
80003df8:	10 90       	mov	r0,r8
80003dfa:	40 41       	lddsp	r1,sp[0x10]
80003dfc:	ed b5 00 05 	bld	r5,0x5
80003e00:	c5 11       	brne	80003ea2 <_vfprintf_r+0x5ca>
80003e02:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003e06:	40 3c       	lddsp	r12,sp[0xc]
80003e08:	58 0c       	cp.w	r12,0
80003e0a:	c1 e0       	breq	80003e46 <_vfprintf_r+0x56e>
80003e0c:	10 36       	cp.w	r6,r8
80003e0e:	c0 64       	brge	80003e1a <_vfprintf_r+0x542>
80003e10:	fa cb f9 44 	sub	r11,sp,-1724
80003e14:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003e18:	c2 08       	rjmp	80003e58 <_vfprintf_r+0x580>
80003e1a:	fa c8 f9 50 	sub	r8,sp,-1712
80003e1e:	1a d8       	st.w	--sp,r8
80003e20:	fa c8 fa b8 	sub	r8,sp,-1352
80003e24:	0c 9b       	mov	r11,r6
80003e26:	1a d8       	st.w	--sp,r8
80003e28:	fa c8 fb b4 	sub	r8,sp,-1100
80003e2c:	1a d8       	st.w	--sp,r8
80003e2e:	fa c9 ff b4 	sub	r9,sp,-76
80003e32:	fa c8 f9 40 	sub	r8,sp,-1728
80003e36:	04 9a       	mov	r10,r2
80003e38:	08 9c       	mov	r12,r4
80003e3a:	fe b0 fb b7 	rcall	800035a8 <get_arg>
80003e3e:	2f dd       	sub	sp,-12
80003e40:	78 1b       	ld.w	r11,r12[0x4]
80003e42:	78 09       	ld.w	r9,r12[0x0]
80003e44:	c2 b8       	rjmp	80003e9a <_vfprintf_r+0x5c2>
80003e46:	ee ca ff ff 	sub	r10,r7,-1
80003e4a:	10 37       	cp.w	r7,r8
80003e4c:	c0 b4       	brge	80003e62 <_vfprintf_r+0x58a>
80003e4e:	fa c9 f9 44 	sub	r9,sp,-1724
80003e52:	14 97       	mov	r7,r10
80003e54:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003e58:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003e5c:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003e60:	c1 d8       	rjmp	80003e9a <_vfprintf_r+0x5c2>
80003e62:	41 09       	lddsp	r9,sp[0x40]
80003e64:	59 f8       	cp.w	r8,31
80003e66:	e0 89 00 14 	brgt	80003e8e <_vfprintf_r+0x5b6>
80003e6a:	f2 cb ff f8 	sub	r11,r9,-8
80003e6e:	51 0b       	stdsp	sp[0x40],r11
80003e70:	fa c6 f9 44 	sub	r6,sp,-1724
80003e74:	72 1b       	ld.w	r11,r9[0x4]
80003e76:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003e7a:	72 09       	ld.w	r9,r9[0x0]
80003e7c:	f9 4b fd 8c 	st.w	r12[-628],r11
80003e80:	f9 49 fd 88 	st.w	r12[-632],r9
80003e84:	2f f8       	sub	r8,-1
80003e86:	14 97       	mov	r7,r10
80003e88:	fb 48 06 b4 	st.w	sp[1716],r8
80003e8c:	c0 78       	rjmp	80003e9a <_vfprintf_r+0x5c2>
80003e8e:	f2 c8 ff f8 	sub	r8,r9,-8
80003e92:	72 1b       	ld.w	r11,r9[0x4]
80003e94:	14 97       	mov	r7,r10
80003e96:	51 08       	stdsp	sp[0x40],r8
80003e98:	72 09       	ld.w	r9,r9[0x0]
80003e9a:	16 98       	mov	r8,r11
80003e9c:	fa e9 00 00 	st.d	sp[0],r8
80003ea0:	ca e8       	rjmp	80003ffc <_vfprintf_r+0x724>
80003ea2:	ed b5 00 04 	bld	r5,0x4
80003ea6:	c1 71       	brne	80003ed4 <_vfprintf_r+0x5fc>
80003ea8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003eac:	40 3e       	lddsp	lr,sp[0xc]
80003eae:	58 0e       	cp.w	lr,0
80003eb0:	c0 80       	breq	80003ec0 <_vfprintf_r+0x5e8>
80003eb2:	10 36       	cp.w	r6,r8
80003eb4:	c6 94       	brge	80003f86 <_vfprintf_r+0x6ae>
80003eb6:	fa cc f9 44 	sub	r12,sp,-1724
80003eba:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003ebe:	c8 28       	rjmp	80003fc2 <_vfprintf_r+0x6ea>
80003ec0:	ee ca ff ff 	sub	r10,r7,-1
80003ec4:	10 37       	cp.w	r7,r8
80003ec6:	e0 84 00 81 	brge	80003fc8 <_vfprintf_r+0x6f0>
80003eca:	fa cb f9 44 	sub	r11,sp,-1724
80003ece:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003ed2:	c7 78       	rjmp	80003fc0 <_vfprintf_r+0x6e8>
80003ed4:	ed b5 00 06 	bld	r5,0x6
80003ed8:	c4 b1       	brne	80003f6e <_vfprintf_r+0x696>
80003eda:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ede:	40 3c       	lddsp	r12,sp[0xc]
80003ee0:	58 0c       	cp.w	r12,0
80003ee2:	c1 d0       	breq	80003f1c <_vfprintf_r+0x644>
80003ee4:	10 36       	cp.w	r6,r8
80003ee6:	c0 64       	brge	80003ef2 <_vfprintf_r+0x61a>
80003ee8:	fa cb f9 44 	sub	r11,sp,-1724
80003eec:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003ef0:	c1 f8       	rjmp	80003f2e <_vfprintf_r+0x656>
80003ef2:	fa c8 f9 50 	sub	r8,sp,-1712
80003ef6:	1a d8       	st.w	--sp,r8
80003ef8:	fa c8 fa b8 	sub	r8,sp,-1352
80003efc:	1a d8       	st.w	--sp,r8
80003efe:	fa c8 fb b4 	sub	r8,sp,-1100
80003f02:	1a d8       	st.w	--sp,r8
80003f04:	fa c8 f9 40 	sub	r8,sp,-1728
80003f08:	fa c9 ff b4 	sub	r9,sp,-76
80003f0c:	04 9a       	mov	r10,r2
80003f0e:	0c 9b       	mov	r11,r6
80003f10:	08 9c       	mov	r12,r4
80003f12:	fe b0 fb 4b 	rcall	800035a8 <get_arg>
80003f16:	2f dd       	sub	sp,-12
80003f18:	98 18       	ld.sh	r8,r12[0x2]
80003f1a:	c2 68       	rjmp	80003f66 <_vfprintf_r+0x68e>
80003f1c:	ee ca ff ff 	sub	r10,r7,-1
80003f20:	10 37       	cp.w	r7,r8
80003f22:	c0 94       	brge	80003f34 <_vfprintf_r+0x65c>
80003f24:	fa c9 f9 44 	sub	r9,sp,-1724
80003f28:	14 97       	mov	r7,r10
80003f2a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003f2e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80003f32:	c1 a8       	rjmp	80003f66 <_vfprintf_r+0x68e>
80003f34:	41 09       	lddsp	r9,sp[0x40]
80003f36:	59 f8       	cp.w	r8,31
80003f38:	e0 89 00 13 	brgt	80003f5e <_vfprintf_r+0x686>
80003f3c:	f2 cb ff fc 	sub	r11,r9,-4
80003f40:	51 0b       	stdsp	sp[0x40],r11
80003f42:	72 09       	ld.w	r9,r9[0x0]
80003f44:	fa c6 f9 44 	sub	r6,sp,-1724
80003f48:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80003f4c:	2f f8       	sub	r8,-1
80003f4e:	f7 49 fd 88 	st.w	r11[-632],r9
80003f52:	fb 48 06 b4 	st.w	sp[1716],r8
80003f56:	14 97       	mov	r7,r10
80003f58:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80003f5c:	c0 58       	rjmp	80003f66 <_vfprintf_r+0x68e>
80003f5e:	92 18       	ld.sh	r8,r9[0x2]
80003f60:	14 97       	mov	r7,r10
80003f62:	2f c9       	sub	r9,-4
80003f64:	51 09       	stdsp	sp[0x40],r9
80003f66:	50 18       	stdsp	sp[0x4],r8
80003f68:	bf 58       	asr	r8,0x1f
80003f6a:	50 08       	stdsp	sp[0x0],r8
80003f6c:	c4 88       	rjmp	80003ffc <_vfprintf_r+0x724>
80003f6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f72:	40 3c       	lddsp	r12,sp[0xc]
80003f74:	58 0c       	cp.w	r12,0
80003f76:	c1 d0       	breq	80003fb0 <_vfprintf_r+0x6d8>
80003f78:	10 36       	cp.w	r6,r8
80003f7a:	c0 64       	brge	80003f86 <_vfprintf_r+0x6ae>
80003f7c:	fa cb f9 44 	sub	r11,sp,-1724
80003f80:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f84:	c1 f8       	rjmp	80003fc2 <_vfprintf_r+0x6ea>
80003f86:	fa c8 f9 50 	sub	r8,sp,-1712
80003f8a:	1a d8       	st.w	--sp,r8
80003f8c:	fa c8 fa b8 	sub	r8,sp,-1352
80003f90:	0c 9b       	mov	r11,r6
80003f92:	1a d8       	st.w	--sp,r8
80003f94:	fa c8 fb b4 	sub	r8,sp,-1100
80003f98:	04 9a       	mov	r10,r2
80003f9a:	1a d8       	st.w	--sp,r8
80003f9c:	08 9c       	mov	r12,r4
80003f9e:	fa c8 f9 40 	sub	r8,sp,-1728
80003fa2:	fa c9 ff b4 	sub	r9,sp,-76
80003fa6:	fe b0 fb 01 	rcall	800035a8 <get_arg>
80003faa:	2f dd       	sub	sp,-12
80003fac:	78 0b       	ld.w	r11,r12[0x0]
80003fae:	c2 48       	rjmp	80003ff6 <_vfprintf_r+0x71e>
80003fb0:	ee ca ff ff 	sub	r10,r7,-1
80003fb4:	10 37       	cp.w	r7,r8
80003fb6:	c0 94       	brge	80003fc8 <_vfprintf_r+0x6f0>
80003fb8:	fa c9 f9 44 	sub	r9,sp,-1724
80003fbc:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003fc0:	14 97       	mov	r7,r10
80003fc2:	ec fb fd 88 	ld.w	r11,r6[-632]
80003fc6:	c1 88       	rjmp	80003ff6 <_vfprintf_r+0x71e>
80003fc8:	41 09       	lddsp	r9,sp[0x40]
80003fca:	59 f8       	cp.w	r8,31
80003fcc:	e0 89 00 11 	brgt	80003fee <_vfprintf_r+0x716>
80003fd0:	f2 cb ff fc 	sub	r11,r9,-4
80003fd4:	51 0b       	stdsp	sp[0x40],r11
80003fd6:	fa c6 f9 44 	sub	r6,sp,-1724
80003fda:	72 0b       	ld.w	r11,r9[0x0]
80003fdc:	ec 08 00 39 	add	r9,r6,r8<<0x3
80003fe0:	f3 4b fd 88 	st.w	r9[-632],r11
80003fe4:	2f f8       	sub	r8,-1
80003fe6:	14 97       	mov	r7,r10
80003fe8:	fb 48 06 b4 	st.w	sp[1716],r8
80003fec:	c0 58       	rjmp	80003ff6 <_vfprintf_r+0x71e>
80003fee:	72 0b       	ld.w	r11,r9[0x0]
80003ff0:	14 97       	mov	r7,r10
80003ff2:	2f c9       	sub	r9,-4
80003ff4:	51 09       	stdsp	sp[0x40],r9
80003ff6:	50 1b       	stdsp	sp[0x4],r11
80003ff8:	bf 5b       	asr	r11,0x1f
80003ffa:	50 0b       	stdsp	sp[0x0],r11
80003ffc:	fa ea 00 00 	ld.d	r10,sp[0]
80004000:	58 0a       	cp.w	r10,0
80004002:	5c 2b       	cpc	r11
80004004:	c0 e4       	brge	80004020 <_vfprintf_r+0x748>
80004006:	30 08       	mov	r8,0
80004008:	fa ea 00 00 	ld.d	r10,sp[0]
8000400c:	30 09       	mov	r9,0
8000400e:	f0 0a 01 0a 	sub	r10,r8,r10
80004012:	f2 0b 01 4b 	sbc	r11,r9,r11
80004016:	32 d8       	mov	r8,45
80004018:	fa eb 00 00 	st.d	sp[0],r10
8000401c:	fb 68 06 bb 	st.b	sp[1723],r8
80004020:	30 18       	mov	r8,1
80004022:	e0 8f 06 fa 	bral	80004e16 <_vfprintf_r+0x153e>
80004026:	50 a7       	stdsp	sp[0x28],r7
80004028:	50 80       	stdsp	sp[0x20],r0
8000402a:	0c 97       	mov	r7,r6
8000402c:	04 94       	mov	r4,r2
8000402e:	06 96       	mov	r6,r3
80004030:	02 92       	mov	r2,r1
80004032:	40 93       	lddsp	r3,sp[0x24]
80004034:	10 90       	mov	r0,r8
80004036:	40 41       	lddsp	r1,sp[0x10]
80004038:	0e 99       	mov	r9,r7
8000403a:	ed b5 00 03 	bld	r5,0x3
8000403e:	c4 11       	brne	800040c0 <_vfprintf_r+0x7e8>
80004040:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004044:	40 3a       	lddsp	r10,sp[0xc]
80004046:	58 0a       	cp.w	r10,0
80004048:	c1 90       	breq	8000407a <_vfprintf_r+0x7a2>
8000404a:	10 36       	cp.w	r6,r8
8000404c:	c6 45       	brlt	80004114 <_vfprintf_r+0x83c>
8000404e:	fa c8 f9 50 	sub	r8,sp,-1712
80004052:	1a d8       	st.w	--sp,r8
80004054:	fa c8 fa b8 	sub	r8,sp,-1352
80004058:	1a d8       	st.w	--sp,r8
8000405a:	fa c8 fb b4 	sub	r8,sp,-1100
8000405e:	0c 9b       	mov	r11,r6
80004060:	1a d8       	st.w	--sp,r8
80004062:	04 9a       	mov	r10,r2
80004064:	fa c8 f9 40 	sub	r8,sp,-1728
80004068:	fa c9 ff b4 	sub	r9,sp,-76
8000406c:	08 9c       	mov	r12,r4
8000406e:	fe b0 fa 9d 	rcall	800035a8 <get_arg>
80004072:	2f dd       	sub	sp,-12
80004074:	78 16       	ld.w	r6,r12[0x4]
80004076:	50 76       	stdsp	sp[0x1c],r6
80004078:	c4 88       	rjmp	80004108 <_vfprintf_r+0x830>
8000407a:	2f f7       	sub	r7,-1
8000407c:	10 39       	cp.w	r9,r8
8000407e:	c0 c4       	brge	80004096 <_vfprintf_r+0x7be>
80004080:	fa ce f9 44 	sub	lr,sp,-1724
80004084:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004088:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000408c:	50 7c       	stdsp	sp[0x1c],r12
8000408e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004092:	50 56       	stdsp	sp[0x14],r6
80004094:	c6 68       	rjmp	80004160 <_vfprintf_r+0x888>
80004096:	41 09       	lddsp	r9,sp[0x40]
80004098:	59 f8       	cp.w	r8,31
8000409a:	e0 89 00 10 	brgt	800040ba <_vfprintf_r+0x7e2>
8000409e:	f2 ca ff f8 	sub	r10,r9,-8
800040a2:	72 1b       	ld.w	r11,r9[0x4]
800040a4:	51 0a       	stdsp	sp[0x40],r10
800040a6:	72 09       	ld.w	r9,r9[0x0]
800040a8:	fa ca f9 44 	sub	r10,sp,-1724
800040ac:	50 7b       	stdsp	sp[0x1c],r11
800040ae:	50 59       	stdsp	sp[0x14],r9
800040b0:	f4 08 00 39 	add	r9,r10,r8<<0x3
800040b4:	40 5b       	lddsp	r11,sp[0x14]
800040b6:	40 7a       	lddsp	r10,sp[0x1c]
800040b8:	c4 78       	rjmp	80004146 <_vfprintf_r+0x86e>
800040ba:	72 18       	ld.w	r8,r9[0x4]
800040bc:	50 78       	stdsp	sp[0x1c],r8
800040be:	c4 c8       	rjmp	80004156 <_vfprintf_r+0x87e>
800040c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040c4:	40 3e       	lddsp	lr,sp[0xc]
800040c6:	58 0e       	cp.w	lr,0
800040c8:	c2 30       	breq	8000410e <_vfprintf_r+0x836>
800040ca:	10 36       	cp.w	r6,r8
800040cc:	c0 94       	brge	800040de <_vfprintf_r+0x806>
800040ce:	fa cc f9 44 	sub	r12,sp,-1724
800040d2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800040d6:	ec fb fd 8c 	ld.w	r11,r6[-628]
800040da:	50 7b       	stdsp	sp[0x1c],r11
800040dc:	cd 9b       	rjmp	8000408e <_vfprintf_r+0x7b6>
800040de:	fa c8 f9 50 	sub	r8,sp,-1712
800040e2:	1a d8       	st.w	--sp,r8
800040e4:	fa c8 fa b8 	sub	r8,sp,-1352
800040e8:	04 9a       	mov	r10,r2
800040ea:	1a d8       	st.w	--sp,r8
800040ec:	fa c8 fb b4 	sub	r8,sp,-1100
800040f0:	0c 9b       	mov	r11,r6
800040f2:	1a d8       	st.w	--sp,r8
800040f4:	08 9c       	mov	r12,r4
800040f6:	fa c8 f9 40 	sub	r8,sp,-1728
800040fa:	fa c9 ff b4 	sub	r9,sp,-76
800040fe:	fe b0 fa 55 	rcall	800035a8 <get_arg>
80004102:	2f dd       	sub	sp,-12
80004104:	78 1a       	ld.w	r10,r12[0x4]
80004106:	50 7a       	stdsp	sp[0x1c],r10
80004108:	78 0c       	ld.w	r12,r12[0x0]
8000410a:	50 5c       	stdsp	sp[0x14],r12
8000410c:	c2 a8       	rjmp	80004160 <_vfprintf_r+0x888>
8000410e:	2f f7       	sub	r7,-1
80004110:	10 39       	cp.w	r9,r8
80004112:	c0 94       	brge	80004124 <_vfprintf_r+0x84c>
80004114:	fa c9 f9 44 	sub	r9,sp,-1724
80004118:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000411c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004120:	50 78       	stdsp	sp[0x1c],r8
80004122:	cb 6b       	rjmp	8000408e <_vfprintf_r+0x7b6>
80004124:	41 09       	lddsp	r9,sp[0x40]
80004126:	59 f8       	cp.w	r8,31
80004128:	e0 89 00 15 	brgt	80004152 <_vfprintf_r+0x87a>
8000412c:	f2 ca ff f8 	sub	r10,r9,-8
80004130:	72 16       	ld.w	r6,r9[0x4]
80004132:	72 09       	ld.w	r9,r9[0x0]
80004134:	51 0a       	stdsp	sp[0x40],r10
80004136:	50 59       	stdsp	sp[0x14],r9
80004138:	fa ce f9 44 	sub	lr,sp,-1724
8000413c:	50 76       	stdsp	sp[0x1c],r6
8000413e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004142:	40 5b       	lddsp	r11,sp[0x14]
80004144:	0c 9a       	mov	r10,r6
80004146:	f2 eb fd 88 	st.d	r9[-632],r10
8000414a:	2f f8       	sub	r8,-1
8000414c:	fb 48 06 b4 	st.w	sp[1716],r8
80004150:	c0 88       	rjmp	80004160 <_vfprintf_r+0x888>
80004152:	72 1c       	ld.w	r12,r9[0x4]
80004154:	50 7c       	stdsp	sp[0x1c],r12
80004156:	f2 c8 ff f8 	sub	r8,r9,-8
8000415a:	51 08       	stdsp	sp[0x40],r8
8000415c:	72 09       	ld.w	r9,r9[0x0]
8000415e:	50 59       	stdsp	sp[0x14],r9
80004160:	40 5b       	lddsp	r11,sp[0x14]
80004162:	40 7a       	lddsp	r10,sp[0x1c]
80004164:	e0 a0 1c de 	rcall	80007b20 <__isinfd>
80004168:	18 96       	mov	r6,r12
8000416a:	c1 70       	breq	80004198 <_vfprintf_r+0x8c0>
8000416c:	30 08       	mov	r8,0
8000416e:	30 09       	mov	r9,0
80004170:	40 5b       	lddsp	r11,sp[0x14]
80004172:	40 7a       	lddsp	r10,sp[0x1c]
80004174:	e0 a0 21 cc 	rcall	8000850c <__avr32_f64_cmp_lt>
80004178:	c0 40       	breq	80004180 <_vfprintf_r+0x8a8>
8000417a:	32 d8       	mov	r8,45
8000417c:	fb 68 06 bb 	st.b	sp[1723],r8
80004180:	fe c8 ad 30 	sub	r8,pc,-21200
80004184:	fe c6 ad 30 	sub	r6,pc,-21200
80004188:	a7 d5       	cbr	r5,0x7
8000418a:	e0 40 00 47 	cp.w	r0,71
8000418e:	f0 06 17 a0 	movle	r6,r8
80004192:	30 32       	mov	r2,3
80004194:	e0 8f 06 ce 	bral	80004f30 <_vfprintf_r+0x1658>
80004198:	40 5b       	lddsp	r11,sp[0x14]
8000419a:	40 7a       	lddsp	r10,sp[0x1c]
8000419c:	e0 a0 1c d7 	rcall	80007b4a <__isnand>
800041a0:	c0 e0       	breq	800041bc <_vfprintf_r+0x8e4>
800041a2:	50 26       	stdsp	sp[0x8],r6
800041a4:	fe c8 ad 4c 	sub	r8,pc,-21172
800041a8:	fe c6 ad 4c 	sub	r6,pc,-21172
800041ac:	a7 d5       	cbr	r5,0x7
800041ae:	e0 40 00 47 	cp.w	r0,71
800041b2:	f0 06 17 a0 	movle	r6,r8
800041b6:	30 32       	mov	r2,3
800041b8:	e0 8f 06 c2 	bral	80004f3c <_vfprintf_r+0x1664>
800041bc:	40 2a       	lddsp	r10,sp[0x8]
800041be:	5b fa       	cp.w	r10,-1
800041c0:	c0 41       	brne	800041c8 <_vfprintf_r+0x8f0>
800041c2:	30 69       	mov	r9,6
800041c4:	50 29       	stdsp	sp[0x8],r9
800041c6:	c1 18       	rjmp	800041e8 <_vfprintf_r+0x910>
800041c8:	e0 40 00 47 	cp.w	r0,71
800041cc:	5f 09       	sreq	r9
800041ce:	e0 40 00 67 	cp.w	r0,103
800041d2:	5f 08       	sreq	r8
800041d4:	f3 e8 10 08 	or	r8,r9,r8
800041d8:	f8 08 18 00 	cp.b	r8,r12
800041dc:	c0 60       	breq	800041e8 <_vfprintf_r+0x910>
800041de:	40 28       	lddsp	r8,sp[0x8]
800041e0:	58 08       	cp.w	r8,0
800041e2:	f9 b8 00 01 	moveq	r8,1
800041e6:	50 28       	stdsp	sp[0x8],r8
800041e8:	40 78       	lddsp	r8,sp[0x1c]
800041ea:	40 59       	lddsp	r9,sp[0x14]
800041ec:	fa e9 06 94 	st.d	sp[1684],r8
800041f0:	a9 a5       	sbr	r5,0x8
800041f2:	fa f8 06 94 	ld.w	r8,sp[1684]
800041f6:	58 08       	cp.w	r8,0
800041f8:	c0 65       	brlt	80004204 <_vfprintf_r+0x92c>
800041fa:	40 5e       	lddsp	lr,sp[0x14]
800041fc:	30 0c       	mov	r12,0
800041fe:	50 6e       	stdsp	sp[0x18],lr
80004200:	50 9c       	stdsp	sp[0x24],r12
80004202:	c0 78       	rjmp	80004210 <_vfprintf_r+0x938>
80004204:	40 5b       	lddsp	r11,sp[0x14]
80004206:	32 da       	mov	r10,45
80004208:	ee 1b 80 00 	eorh	r11,0x8000
8000420c:	50 9a       	stdsp	sp[0x24],r10
8000420e:	50 6b       	stdsp	sp[0x18],r11
80004210:	e0 40 00 46 	cp.w	r0,70
80004214:	5f 09       	sreq	r9
80004216:	e0 40 00 66 	cp.w	r0,102
8000421a:	5f 08       	sreq	r8
8000421c:	f3 e8 10 08 	or	r8,r9,r8
80004220:	50 48       	stdsp	sp[0x10],r8
80004222:	c0 40       	breq	8000422a <_vfprintf_r+0x952>
80004224:	40 22       	lddsp	r2,sp[0x8]
80004226:	30 39       	mov	r9,3
80004228:	c1 08       	rjmp	80004248 <_vfprintf_r+0x970>
8000422a:	e0 40 00 45 	cp.w	r0,69
8000422e:	5f 09       	sreq	r9
80004230:	e0 40 00 65 	cp.w	r0,101
80004234:	5f 08       	sreq	r8
80004236:	40 22       	lddsp	r2,sp[0x8]
80004238:	10 49       	or	r9,r8
8000423a:	2f f2       	sub	r2,-1
8000423c:	40 46       	lddsp	r6,sp[0x10]
8000423e:	ec 09 18 00 	cp.b	r9,r6
80004242:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004246:	30 29       	mov	r9,2
80004248:	fa c8 f9 5c 	sub	r8,sp,-1700
8000424c:	1a d8       	st.w	--sp,r8
8000424e:	fa c8 f9 54 	sub	r8,sp,-1708
80004252:	1a d8       	st.w	--sp,r8
80004254:	fa c8 f9 4c 	sub	r8,sp,-1716
80004258:	08 9c       	mov	r12,r4
8000425a:	1a d8       	st.w	--sp,r8
8000425c:	04 98       	mov	r8,r2
8000425e:	40 9b       	lddsp	r11,sp[0x24]
80004260:	40 aa       	lddsp	r10,sp[0x28]
80004262:	e0 a0 0b c3 	rcall	800059e8 <_dtoa_r>
80004266:	e0 40 00 47 	cp.w	r0,71
8000426a:	5f 19       	srne	r9
8000426c:	e0 40 00 67 	cp.w	r0,103
80004270:	5f 18       	srne	r8
80004272:	18 96       	mov	r6,r12
80004274:	2f dd       	sub	sp,-12
80004276:	f3 e8 00 08 	and	r8,r9,r8
8000427a:	c0 41       	brne	80004282 <_vfprintf_r+0x9aa>
8000427c:	ed b5 00 00 	bld	r5,0x0
80004280:	c3 01       	brne	800042e0 <_vfprintf_r+0xa08>
80004282:	ec 02 00 0e 	add	lr,r6,r2
80004286:	50 3e       	stdsp	sp[0xc],lr
80004288:	40 4c       	lddsp	r12,sp[0x10]
8000428a:	58 0c       	cp.w	r12,0
8000428c:	c1 50       	breq	800042b6 <_vfprintf_r+0x9de>
8000428e:	0d 89       	ld.ub	r9,r6[0x0]
80004290:	33 08       	mov	r8,48
80004292:	f0 09 18 00 	cp.b	r9,r8
80004296:	c0 b1       	brne	800042ac <_vfprintf_r+0x9d4>
80004298:	30 08       	mov	r8,0
8000429a:	30 09       	mov	r9,0
8000429c:	40 6b       	lddsp	r11,sp[0x18]
8000429e:	40 7a       	lddsp	r10,sp[0x1c]
800042a0:	e0 a0 20 ef 	rcall	8000847e <__avr32_f64_cmp_eq>
800042a4:	fb b2 00 01 	rsubeq	r2,1
800042a8:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800042ac:	40 3b       	lddsp	r11,sp[0xc]
800042ae:	fa f8 06 ac 	ld.w	r8,sp[1708]
800042b2:	10 0b       	add	r11,r8
800042b4:	50 3b       	stdsp	sp[0xc],r11
800042b6:	40 6b       	lddsp	r11,sp[0x18]
800042b8:	30 08       	mov	r8,0
800042ba:	30 09       	mov	r9,0
800042bc:	40 7a       	lddsp	r10,sp[0x1c]
800042be:	e0 a0 20 e0 	rcall	8000847e <__avr32_f64_cmp_eq>
800042c2:	c0 90       	breq	800042d4 <_vfprintf_r+0x9fc>
800042c4:	40 3a       	lddsp	r10,sp[0xc]
800042c6:	fb 4a 06 a4 	st.w	sp[1700],r10
800042ca:	c0 58       	rjmp	800042d4 <_vfprintf_r+0x9fc>
800042cc:	10 c9       	st.b	r8++,r9
800042ce:	fb 48 06 a4 	st.w	sp[1700],r8
800042d2:	c0 28       	rjmp	800042d6 <_vfprintf_r+0x9fe>
800042d4:	33 09       	mov	r9,48
800042d6:	fa f8 06 a4 	ld.w	r8,sp[1700]
800042da:	40 3e       	lddsp	lr,sp[0xc]
800042dc:	1c 38       	cp.w	r8,lr
800042de:	cf 73       	brcs	800042cc <_vfprintf_r+0x9f4>
800042e0:	e0 40 00 47 	cp.w	r0,71
800042e4:	5f 09       	sreq	r9
800042e6:	e0 40 00 67 	cp.w	r0,103
800042ea:	5f 08       	sreq	r8
800042ec:	f3 e8 10 08 	or	r8,r9,r8
800042f0:	fa f9 06 a4 	ld.w	r9,sp[1700]
800042f4:	0c 19       	sub	r9,r6
800042f6:	50 69       	stdsp	sp[0x18],r9
800042f8:	58 08       	cp.w	r8,0
800042fa:	c0 b0       	breq	80004310 <_vfprintf_r+0xa38>
800042fc:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004300:	5b d8       	cp.w	r8,-3
80004302:	c0 55       	brlt	8000430c <_vfprintf_r+0xa34>
80004304:	40 2c       	lddsp	r12,sp[0x8]
80004306:	18 38       	cp.w	r8,r12
80004308:	e0 8a 00 6a 	brle	800043dc <_vfprintf_r+0xb04>
8000430c:	20 20       	sub	r0,2
8000430e:	c0 58       	rjmp	80004318 <_vfprintf_r+0xa40>
80004310:	e0 40 00 65 	cp.w	r0,101
80004314:	e0 89 00 46 	brgt	800043a0 <_vfprintf_r+0xac8>
80004318:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000431c:	fb 60 06 9c 	st.b	sp[1692],r0
80004320:	20 1b       	sub	r11,1
80004322:	fb 4b 06 ac 	st.w	sp[1708],r11
80004326:	c0 47       	brpl	8000432e <_vfprintf_r+0xa56>
80004328:	5c 3b       	neg	r11
8000432a:	32 d8       	mov	r8,45
8000432c:	c0 28       	rjmp	80004330 <_vfprintf_r+0xa58>
8000432e:	32 b8       	mov	r8,43
80004330:	fb 68 06 9d 	st.b	sp[1693],r8
80004334:	58 9b       	cp.w	r11,9
80004336:	e0 8a 00 1d 	brle	80004370 <_vfprintf_r+0xa98>
8000433a:	fa c9 fa 35 	sub	r9,sp,-1483
8000433e:	30 aa       	mov	r10,10
80004340:	12 98       	mov	r8,r9
80004342:	0e 9c       	mov	r12,r7
80004344:	0c 92       	mov	r2,r6
80004346:	f6 0a 0c 06 	divs	r6,r11,r10
8000434a:	0e 9b       	mov	r11,r7
8000434c:	2d 0b       	sub	r11,-48
8000434e:	10 fb       	st.b	--r8,r11
80004350:	0c 9b       	mov	r11,r6
80004352:	58 96       	cp.w	r6,9
80004354:	fe 99 ff f9 	brgt	80004346 <_vfprintf_r+0xa6e>
80004358:	2d 0b       	sub	r11,-48
8000435a:	18 97       	mov	r7,r12
8000435c:	04 96       	mov	r6,r2
8000435e:	10 fb       	st.b	--r8,r11
80004360:	fa ca f9 62 	sub	r10,sp,-1694
80004364:	c0 38       	rjmp	8000436a <_vfprintf_r+0xa92>
80004366:	11 3b       	ld.ub	r11,r8++
80004368:	14 cb       	st.b	r10++,r11
8000436a:	12 38       	cp.w	r8,r9
8000436c:	cf d3       	brcs	80004366 <_vfprintf_r+0xa8e>
8000436e:	c0 98       	rjmp	80004380 <_vfprintf_r+0xaa8>
80004370:	2d 0b       	sub	r11,-48
80004372:	33 08       	mov	r8,48
80004374:	fb 6b 06 9f 	st.b	sp[1695],r11
80004378:	fb 68 06 9e 	st.b	sp[1694],r8
8000437c:	fa ca f9 60 	sub	r10,sp,-1696
80004380:	fa c8 f9 64 	sub	r8,sp,-1692
80004384:	f4 08 01 08 	sub	r8,r10,r8
80004388:	50 e8       	stdsp	sp[0x38],r8
8000438a:	10 92       	mov	r2,r8
8000438c:	40 6b       	lddsp	r11,sp[0x18]
8000438e:	16 02       	add	r2,r11
80004390:	58 1b       	cp.w	r11,1
80004392:	e0 89 00 05 	brgt	8000439c <_vfprintf_r+0xac4>
80004396:	ed b5 00 00 	bld	r5,0x0
8000439a:	c3 51       	brne	80004404 <_vfprintf_r+0xb2c>
8000439c:	2f f2       	sub	r2,-1
8000439e:	c3 38       	rjmp	80004404 <_vfprintf_r+0xb2c>
800043a0:	e0 40 00 66 	cp.w	r0,102
800043a4:	c1 c1       	brne	800043dc <_vfprintf_r+0xb04>
800043a6:	fa f2 06 ac 	ld.w	r2,sp[1708]
800043aa:	58 02       	cp.w	r2,0
800043ac:	e0 8a 00 0c 	brle	800043c4 <_vfprintf_r+0xaec>
800043b0:	40 2a       	lddsp	r10,sp[0x8]
800043b2:	58 0a       	cp.w	r10,0
800043b4:	c0 41       	brne	800043bc <_vfprintf_r+0xae4>
800043b6:	ed b5 00 00 	bld	r5,0x0
800043ba:	c2 51       	brne	80004404 <_vfprintf_r+0xb2c>
800043bc:	2f f2       	sub	r2,-1
800043be:	40 29       	lddsp	r9,sp[0x8]
800043c0:	12 02       	add	r2,r9
800043c2:	c0 b8       	rjmp	800043d8 <_vfprintf_r+0xb00>
800043c4:	40 28       	lddsp	r8,sp[0x8]
800043c6:	58 08       	cp.w	r8,0
800043c8:	c0 61       	brne	800043d4 <_vfprintf_r+0xafc>
800043ca:	ed b5 00 00 	bld	r5,0x0
800043ce:	c0 30       	breq	800043d4 <_vfprintf_r+0xafc>
800043d0:	30 12       	mov	r2,1
800043d2:	c1 98       	rjmp	80004404 <_vfprintf_r+0xb2c>
800043d4:	40 22       	lddsp	r2,sp[0x8]
800043d6:	2f e2       	sub	r2,-2
800043d8:	36 60       	mov	r0,102
800043da:	c1 58       	rjmp	80004404 <_vfprintf_r+0xb2c>
800043dc:	fa f2 06 ac 	ld.w	r2,sp[1708]
800043e0:	40 6e       	lddsp	lr,sp[0x18]
800043e2:	1c 32       	cp.w	r2,lr
800043e4:	c0 65       	brlt	800043f0 <_vfprintf_r+0xb18>
800043e6:	ed b5 00 00 	bld	r5,0x0
800043ea:	f7 b2 00 ff 	subeq	r2,-1
800043ee:	c0 a8       	rjmp	80004402 <_vfprintf_r+0xb2a>
800043f0:	e4 08 11 02 	rsub	r8,r2,2
800043f4:	40 6c       	lddsp	r12,sp[0x18]
800043f6:	58 02       	cp.w	r2,0
800043f8:	f0 02 17 a0 	movle	r2,r8
800043fc:	f9 b2 09 01 	movgt	r2,1
80004400:	18 02       	add	r2,r12
80004402:	36 70       	mov	r0,103
80004404:	40 9b       	lddsp	r11,sp[0x24]
80004406:	58 0b       	cp.w	r11,0
80004408:	e0 80 05 94 	breq	80004f30 <_vfprintf_r+0x1658>
8000440c:	32 d8       	mov	r8,45
8000440e:	fb 68 06 bb 	st.b	sp[1723],r8
80004412:	e0 8f 05 93 	bral	80004f38 <_vfprintf_r+0x1660>
80004416:	50 a7       	stdsp	sp[0x28],r7
80004418:	04 94       	mov	r4,r2
8000441a:	0c 97       	mov	r7,r6
8000441c:	02 92       	mov	r2,r1
8000441e:	06 96       	mov	r6,r3
80004420:	40 41       	lddsp	r1,sp[0x10]
80004422:	40 93       	lddsp	r3,sp[0x24]
80004424:	0e 99       	mov	r9,r7
80004426:	ed b5 00 05 	bld	r5,0x5
8000442a:	c4 81       	brne	800044ba <_vfprintf_r+0xbe2>
8000442c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004430:	40 3e       	lddsp	lr,sp[0xc]
80004432:	58 0e       	cp.w	lr,0
80004434:	c1 d0       	breq	8000446e <_vfprintf_r+0xb96>
80004436:	10 36       	cp.w	r6,r8
80004438:	c0 64       	brge	80004444 <_vfprintf_r+0xb6c>
8000443a:	fa cc f9 44 	sub	r12,sp,-1724
8000443e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004442:	c1 d8       	rjmp	8000447c <_vfprintf_r+0xba4>
80004444:	fa c8 f9 50 	sub	r8,sp,-1712
80004448:	1a d8       	st.w	--sp,r8
8000444a:	fa c8 fa b8 	sub	r8,sp,-1352
8000444e:	04 9a       	mov	r10,r2
80004450:	1a d8       	st.w	--sp,r8
80004452:	fa c8 fb b4 	sub	r8,sp,-1100
80004456:	0c 9b       	mov	r11,r6
80004458:	1a d8       	st.w	--sp,r8
8000445a:	08 9c       	mov	r12,r4
8000445c:	fa c8 f9 40 	sub	r8,sp,-1728
80004460:	fa c9 ff b4 	sub	r9,sp,-76
80004464:	fe b0 f8 a2 	rcall	800035a8 <get_arg>
80004468:	2f dd       	sub	sp,-12
8000446a:	78 0a       	ld.w	r10,r12[0x0]
8000446c:	c2 08       	rjmp	800044ac <_vfprintf_r+0xbd4>
8000446e:	2f f7       	sub	r7,-1
80004470:	10 39       	cp.w	r9,r8
80004472:	c0 84       	brge	80004482 <_vfprintf_r+0xbaa>
80004474:	fa cb f9 44 	sub	r11,sp,-1724
80004478:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000447c:	ec fa fd 88 	ld.w	r10,r6[-632]
80004480:	c1 68       	rjmp	800044ac <_vfprintf_r+0xbd4>
80004482:	41 09       	lddsp	r9,sp[0x40]
80004484:	59 f8       	cp.w	r8,31
80004486:	e0 89 00 10 	brgt	800044a6 <_vfprintf_r+0xbce>
8000448a:	f2 ca ff fc 	sub	r10,r9,-4
8000448e:	51 0a       	stdsp	sp[0x40],r10
80004490:	fa c6 f9 44 	sub	r6,sp,-1724
80004494:	72 0a       	ld.w	r10,r9[0x0]
80004496:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000449a:	f3 4a fd 88 	st.w	r9[-632],r10
8000449e:	2f f8       	sub	r8,-1
800044a0:	fb 48 06 b4 	st.w	sp[1716],r8
800044a4:	c0 48       	rjmp	800044ac <_vfprintf_r+0xbd4>
800044a6:	72 0a       	ld.w	r10,r9[0x0]
800044a8:	2f c9       	sub	r9,-4
800044aa:	51 09       	stdsp	sp[0x40],r9
800044ac:	40 be       	lddsp	lr,sp[0x2c]
800044ae:	1c 98       	mov	r8,lr
800044b0:	95 1e       	st.w	r10[0x4],lr
800044b2:	bf 58       	asr	r8,0x1f
800044b4:	95 08       	st.w	r10[0x0],r8
800044b6:	fe 9f fa 9f 	bral	800039f4 <_vfprintf_r+0x11c>
800044ba:	ed b5 00 04 	bld	r5,0x4
800044be:	c4 80       	breq	8000454e <_vfprintf_r+0xc76>
800044c0:	e2 15 00 40 	andl	r5,0x40,COH
800044c4:	c4 50       	breq	8000454e <_vfprintf_r+0xc76>
800044c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044ca:	40 3c       	lddsp	r12,sp[0xc]
800044cc:	58 0c       	cp.w	r12,0
800044ce:	c1 d0       	breq	80004508 <_vfprintf_r+0xc30>
800044d0:	10 36       	cp.w	r6,r8
800044d2:	c0 64       	brge	800044de <_vfprintf_r+0xc06>
800044d4:	fa cb f9 44 	sub	r11,sp,-1724
800044d8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044dc:	c1 d8       	rjmp	80004516 <_vfprintf_r+0xc3e>
800044de:	fa c8 f9 50 	sub	r8,sp,-1712
800044e2:	1a d8       	st.w	--sp,r8
800044e4:	fa c8 fa b8 	sub	r8,sp,-1352
800044e8:	04 9a       	mov	r10,r2
800044ea:	1a d8       	st.w	--sp,r8
800044ec:	fa c8 fb b4 	sub	r8,sp,-1100
800044f0:	0c 9b       	mov	r11,r6
800044f2:	1a d8       	st.w	--sp,r8
800044f4:	08 9c       	mov	r12,r4
800044f6:	fa c8 f9 40 	sub	r8,sp,-1728
800044fa:	fa c9 ff b4 	sub	r9,sp,-76
800044fe:	fe b0 f8 55 	rcall	800035a8 <get_arg>
80004502:	2f dd       	sub	sp,-12
80004504:	78 0a       	ld.w	r10,r12[0x0]
80004506:	c2 08       	rjmp	80004546 <_vfprintf_r+0xc6e>
80004508:	2f f7       	sub	r7,-1
8000450a:	10 39       	cp.w	r9,r8
8000450c:	c0 84       	brge	8000451c <_vfprintf_r+0xc44>
8000450e:	fa ca f9 44 	sub	r10,sp,-1724
80004512:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004516:	ec fa fd 88 	ld.w	r10,r6[-632]
8000451a:	c1 68       	rjmp	80004546 <_vfprintf_r+0xc6e>
8000451c:	41 09       	lddsp	r9,sp[0x40]
8000451e:	59 f8       	cp.w	r8,31
80004520:	e0 89 00 10 	brgt	80004540 <_vfprintf_r+0xc68>
80004524:	f2 ca ff fc 	sub	r10,r9,-4
80004528:	51 0a       	stdsp	sp[0x40],r10
8000452a:	fa c6 f9 44 	sub	r6,sp,-1724
8000452e:	72 0a       	ld.w	r10,r9[0x0]
80004530:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004534:	f3 4a fd 88 	st.w	r9[-632],r10
80004538:	2f f8       	sub	r8,-1
8000453a:	fb 48 06 b4 	st.w	sp[1716],r8
8000453e:	c0 48       	rjmp	80004546 <_vfprintf_r+0xc6e>
80004540:	72 0a       	ld.w	r10,r9[0x0]
80004542:	2f c9       	sub	r9,-4
80004544:	51 09       	stdsp	sp[0x40],r9
80004546:	40 be       	lddsp	lr,sp[0x2c]
80004548:	b4 0e       	st.h	r10[0x0],lr
8000454a:	fe 9f fa 55 	bral	800039f4 <_vfprintf_r+0x11c>
8000454e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004552:	40 3c       	lddsp	r12,sp[0xc]
80004554:	58 0c       	cp.w	r12,0
80004556:	c1 d0       	breq	80004590 <_vfprintf_r+0xcb8>
80004558:	10 36       	cp.w	r6,r8
8000455a:	c0 64       	brge	80004566 <_vfprintf_r+0xc8e>
8000455c:	fa cb f9 44 	sub	r11,sp,-1724
80004560:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004564:	c1 d8       	rjmp	8000459e <_vfprintf_r+0xcc6>
80004566:	fa c8 f9 50 	sub	r8,sp,-1712
8000456a:	1a d8       	st.w	--sp,r8
8000456c:	fa c8 fa b8 	sub	r8,sp,-1352
80004570:	04 9a       	mov	r10,r2
80004572:	1a d8       	st.w	--sp,r8
80004574:	fa c8 fb b4 	sub	r8,sp,-1100
80004578:	0c 9b       	mov	r11,r6
8000457a:	1a d8       	st.w	--sp,r8
8000457c:	08 9c       	mov	r12,r4
8000457e:	fa c8 f9 40 	sub	r8,sp,-1728
80004582:	fa c9 ff b4 	sub	r9,sp,-76
80004586:	fe b0 f8 11 	rcall	800035a8 <get_arg>
8000458a:	2f dd       	sub	sp,-12
8000458c:	78 0a       	ld.w	r10,r12[0x0]
8000458e:	c2 08       	rjmp	800045ce <_vfprintf_r+0xcf6>
80004590:	2f f7       	sub	r7,-1
80004592:	10 39       	cp.w	r9,r8
80004594:	c0 84       	brge	800045a4 <_vfprintf_r+0xccc>
80004596:	fa ca f9 44 	sub	r10,sp,-1724
8000459a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000459e:	ec fa fd 88 	ld.w	r10,r6[-632]
800045a2:	c1 68       	rjmp	800045ce <_vfprintf_r+0xcf6>
800045a4:	41 09       	lddsp	r9,sp[0x40]
800045a6:	59 f8       	cp.w	r8,31
800045a8:	e0 89 00 10 	brgt	800045c8 <_vfprintf_r+0xcf0>
800045ac:	f2 ca ff fc 	sub	r10,r9,-4
800045b0:	51 0a       	stdsp	sp[0x40],r10
800045b2:	fa c6 f9 44 	sub	r6,sp,-1724
800045b6:	72 0a       	ld.w	r10,r9[0x0]
800045b8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800045bc:	f3 4a fd 88 	st.w	r9[-632],r10
800045c0:	2f f8       	sub	r8,-1
800045c2:	fb 48 06 b4 	st.w	sp[1716],r8
800045c6:	c0 48       	rjmp	800045ce <_vfprintf_r+0xcf6>
800045c8:	72 0a       	ld.w	r10,r9[0x0]
800045ca:	2f c9       	sub	r9,-4
800045cc:	51 09       	stdsp	sp[0x40],r9
800045ce:	40 be       	lddsp	lr,sp[0x2c]
800045d0:	95 0e       	st.w	r10[0x0],lr
800045d2:	fe 9f fa 11 	bral	800039f4 <_vfprintf_r+0x11c>
800045d6:	50 a7       	stdsp	sp[0x28],r7
800045d8:	50 80       	stdsp	sp[0x20],r0
800045da:	0c 97       	mov	r7,r6
800045dc:	04 94       	mov	r4,r2
800045de:	06 96       	mov	r6,r3
800045e0:	02 92       	mov	r2,r1
800045e2:	40 93       	lddsp	r3,sp[0x24]
800045e4:	10 90       	mov	r0,r8
800045e6:	40 41       	lddsp	r1,sp[0x10]
800045e8:	a5 a5       	sbr	r5,0x4
800045ea:	c0 a8       	rjmp	800045fe <_vfprintf_r+0xd26>
800045ec:	50 a7       	stdsp	sp[0x28],r7
800045ee:	50 80       	stdsp	sp[0x20],r0
800045f0:	0c 97       	mov	r7,r6
800045f2:	04 94       	mov	r4,r2
800045f4:	06 96       	mov	r6,r3
800045f6:	02 92       	mov	r2,r1
800045f8:	40 93       	lddsp	r3,sp[0x24]
800045fa:	10 90       	mov	r0,r8
800045fc:	40 41       	lddsp	r1,sp[0x10]
800045fe:	ed b5 00 05 	bld	r5,0x5
80004602:	c5 d1       	brne	800046bc <_vfprintf_r+0xde4>
80004604:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004608:	40 3c       	lddsp	r12,sp[0xc]
8000460a:	58 0c       	cp.w	r12,0
8000460c:	c2 60       	breq	80004658 <_vfprintf_r+0xd80>
8000460e:	10 36       	cp.w	r6,r8
80004610:	c0 a4       	brge	80004624 <_vfprintf_r+0xd4c>
80004612:	fa cb f9 44 	sub	r11,sp,-1724
80004616:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000461a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000461e:	fa e9 00 00 	st.d	sp[0],r8
80004622:	c1 88       	rjmp	80004652 <_vfprintf_r+0xd7a>
80004624:	fa c8 f9 50 	sub	r8,sp,-1712
80004628:	1a d8       	st.w	--sp,r8
8000462a:	fa c8 fa b8 	sub	r8,sp,-1352
8000462e:	04 9a       	mov	r10,r2
80004630:	1a d8       	st.w	--sp,r8
80004632:	0c 9b       	mov	r11,r6
80004634:	fa c8 fb b4 	sub	r8,sp,-1100
80004638:	08 9c       	mov	r12,r4
8000463a:	1a d8       	st.w	--sp,r8
8000463c:	fa c8 f9 40 	sub	r8,sp,-1728
80004640:	fa c9 ff b4 	sub	r9,sp,-76
80004644:	fe b0 f7 b2 	rcall	800035a8 <get_arg>
80004648:	2f dd       	sub	sp,-12
8000464a:	f8 ea 00 00 	ld.d	r10,r12[0]
8000464e:	fa eb 00 00 	st.d	sp[0],r10
80004652:	30 08       	mov	r8,0
80004654:	e0 8f 03 de 	bral	80004e10 <_vfprintf_r+0x1538>
80004658:	ee ca ff ff 	sub	r10,r7,-1
8000465c:	10 37       	cp.w	r7,r8
8000465e:	c0 b4       	brge	80004674 <_vfprintf_r+0xd9c>
80004660:	fa c9 f9 44 	sub	r9,sp,-1724
80004664:	14 97       	mov	r7,r10
80004666:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000466a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000466e:	fa eb 00 00 	st.d	sp[0],r10
80004672:	c1 88       	rjmp	800046a2 <_vfprintf_r+0xdca>
80004674:	41 09       	lddsp	r9,sp[0x40]
80004676:	59 f8       	cp.w	r8,31
80004678:	e0 89 00 18 	brgt	800046a8 <_vfprintf_r+0xdd0>
8000467c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004680:	f2 cb ff f8 	sub	r11,r9,-8
80004684:	fa e7 00 00 	st.d	sp[0],r6
80004688:	51 0b       	stdsp	sp[0x40],r11
8000468a:	fa c6 f9 44 	sub	r6,sp,-1724
8000468e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004692:	fa e6 00 00 	ld.d	r6,sp[0]
80004696:	f2 e7 fd 88 	st.d	r9[-632],r6
8000469a:	2f f8       	sub	r8,-1
8000469c:	14 97       	mov	r7,r10
8000469e:	fb 48 06 b4 	st.w	sp[1716],r8
800046a2:	40 38       	lddsp	r8,sp[0xc]
800046a4:	e0 8f 03 b6 	bral	80004e10 <_vfprintf_r+0x1538>
800046a8:	f2 e6 00 00 	ld.d	r6,r9[0]
800046ac:	40 38       	lddsp	r8,sp[0xc]
800046ae:	fa e7 00 00 	st.d	sp[0],r6
800046b2:	2f 89       	sub	r9,-8
800046b4:	14 97       	mov	r7,r10
800046b6:	51 09       	stdsp	sp[0x40],r9
800046b8:	e0 8f 03 ac 	bral	80004e10 <_vfprintf_r+0x1538>
800046bc:	ed b5 00 04 	bld	r5,0x4
800046c0:	c1 61       	brne	800046ec <_vfprintf_r+0xe14>
800046c2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046c6:	40 3e       	lddsp	lr,sp[0xc]
800046c8:	58 0e       	cp.w	lr,0
800046ca:	c0 80       	breq	800046da <_vfprintf_r+0xe02>
800046cc:	10 36       	cp.w	r6,r8
800046ce:	c6 74       	brge	8000479c <_vfprintf_r+0xec4>
800046d0:	fa cc f9 44 	sub	r12,sp,-1724
800046d4:	f8 06 00 36 	add	r6,r12,r6<<0x3
800046d8:	c8 08       	rjmp	800047d8 <_vfprintf_r+0xf00>
800046da:	ee ca ff ff 	sub	r10,r7,-1
800046de:	10 37       	cp.w	r7,r8
800046e0:	c7 f4       	brge	800047de <_vfprintf_r+0xf06>
800046e2:	fa cb f9 44 	sub	r11,sp,-1724
800046e6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800046ea:	c7 68       	rjmp	800047d6 <_vfprintf_r+0xefe>
800046ec:	ed b5 00 06 	bld	r5,0x6
800046f0:	c4 a1       	brne	80004784 <_vfprintf_r+0xeac>
800046f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046f6:	40 3c       	lddsp	r12,sp[0xc]
800046f8:	58 0c       	cp.w	r12,0
800046fa:	c1 d0       	breq	80004734 <_vfprintf_r+0xe5c>
800046fc:	10 36       	cp.w	r6,r8
800046fe:	c0 64       	brge	8000470a <_vfprintf_r+0xe32>
80004700:	fa cb f9 44 	sub	r11,sp,-1724
80004704:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004708:	c1 f8       	rjmp	80004746 <_vfprintf_r+0xe6e>
8000470a:	fa c8 f9 50 	sub	r8,sp,-1712
8000470e:	1a d8       	st.w	--sp,r8
80004710:	fa c8 fa b8 	sub	r8,sp,-1352
80004714:	1a d8       	st.w	--sp,r8
80004716:	fa c8 fb b4 	sub	r8,sp,-1100
8000471a:	1a d8       	st.w	--sp,r8
8000471c:	fa c8 f9 40 	sub	r8,sp,-1728
80004720:	fa c9 ff b4 	sub	r9,sp,-76
80004724:	04 9a       	mov	r10,r2
80004726:	0c 9b       	mov	r11,r6
80004728:	08 9c       	mov	r12,r4
8000472a:	fe b0 f7 3f 	rcall	800035a8 <get_arg>
8000472e:	2f dd       	sub	sp,-12
80004730:	98 18       	ld.sh	r8,r12[0x2]
80004732:	c2 68       	rjmp	8000477e <_vfprintf_r+0xea6>
80004734:	ee ca ff ff 	sub	r10,r7,-1
80004738:	10 37       	cp.w	r7,r8
8000473a:	c0 94       	brge	8000474c <_vfprintf_r+0xe74>
8000473c:	fa c9 f9 44 	sub	r9,sp,-1724
80004740:	14 97       	mov	r7,r10
80004742:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004746:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000474a:	c1 a8       	rjmp	8000477e <_vfprintf_r+0xea6>
8000474c:	41 09       	lddsp	r9,sp[0x40]
8000474e:	59 f8       	cp.w	r8,31
80004750:	e0 89 00 13 	brgt	80004776 <_vfprintf_r+0xe9e>
80004754:	f2 cb ff fc 	sub	r11,r9,-4
80004758:	51 0b       	stdsp	sp[0x40],r11
8000475a:	72 09       	ld.w	r9,r9[0x0]
8000475c:	fa c6 f9 44 	sub	r6,sp,-1724
80004760:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004764:	2f f8       	sub	r8,-1
80004766:	f7 49 fd 88 	st.w	r11[-632],r9
8000476a:	fb 48 06 b4 	st.w	sp[1716],r8
8000476e:	14 97       	mov	r7,r10
80004770:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004774:	c0 58       	rjmp	8000477e <_vfprintf_r+0xea6>
80004776:	92 18       	ld.sh	r8,r9[0x2]
80004778:	14 97       	mov	r7,r10
8000477a:	2f c9       	sub	r9,-4
8000477c:	51 09       	stdsp	sp[0x40],r9
8000477e:	5c 78       	castu.h	r8
80004780:	50 18       	stdsp	sp[0x4],r8
80004782:	c4 68       	rjmp	8000480e <_vfprintf_r+0xf36>
80004784:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004788:	40 3c       	lddsp	r12,sp[0xc]
8000478a:	58 0c       	cp.w	r12,0
8000478c:	c1 d0       	breq	800047c6 <_vfprintf_r+0xeee>
8000478e:	10 36       	cp.w	r6,r8
80004790:	c0 64       	brge	8000479c <_vfprintf_r+0xec4>
80004792:	fa cb f9 44 	sub	r11,sp,-1724
80004796:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000479a:	c1 f8       	rjmp	800047d8 <_vfprintf_r+0xf00>
8000479c:	fa c8 f9 50 	sub	r8,sp,-1712
800047a0:	1a d8       	st.w	--sp,r8
800047a2:	fa c8 fa b8 	sub	r8,sp,-1352
800047a6:	0c 9b       	mov	r11,r6
800047a8:	1a d8       	st.w	--sp,r8
800047aa:	fa c8 fb b4 	sub	r8,sp,-1100
800047ae:	04 9a       	mov	r10,r2
800047b0:	1a d8       	st.w	--sp,r8
800047b2:	08 9c       	mov	r12,r4
800047b4:	fa c8 f9 40 	sub	r8,sp,-1728
800047b8:	fa c9 ff b4 	sub	r9,sp,-76
800047bc:	fe b0 f6 f6 	rcall	800035a8 <get_arg>
800047c0:	2f dd       	sub	sp,-12
800047c2:	78 0b       	ld.w	r11,r12[0x0]
800047c4:	c2 48       	rjmp	8000480c <_vfprintf_r+0xf34>
800047c6:	ee ca ff ff 	sub	r10,r7,-1
800047ca:	10 37       	cp.w	r7,r8
800047cc:	c0 94       	brge	800047de <_vfprintf_r+0xf06>
800047ce:	fa c9 f9 44 	sub	r9,sp,-1724
800047d2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047d6:	14 97       	mov	r7,r10
800047d8:	ec fb fd 88 	ld.w	r11,r6[-632]
800047dc:	c1 88       	rjmp	8000480c <_vfprintf_r+0xf34>
800047de:	41 09       	lddsp	r9,sp[0x40]
800047e0:	59 f8       	cp.w	r8,31
800047e2:	e0 89 00 11 	brgt	80004804 <_vfprintf_r+0xf2c>
800047e6:	f2 cb ff fc 	sub	r11,r9,-4
800047ea:	51 0b       	stdsp	sp[0x40],r11
800047ec:	fa c6 f9 44 	sub	r6,sp,-1724
800047f0:	72 0b       	ld.w	r11,r9[0x0]
800047f2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800047f6:	f3 4b fd 88 	st.w	r9[-632],r11
800047fa:	2f f8       	sub	r8,-1
800047fc:	14 97       	mov	r7,r10
800047fe:	fb 48 06 b4 	st.w	sp[1716],r8
80004802:	c0 58       	rjmp	8000480c <_vfprintf_r+0xf34>
80004804:	72 0b       	ld.w	r11,r9[0x0]
80004806:	14 97       	mov	r7,r10
80004808:	2f c9       	sub	r9,-4
8000480a:	51 09       	stdsp	sp[0x40],r9
8000480c:	50 1b       	stdsp	sp[0x4],r11
8000480e:	30 0e       	mov	lr,0
80004810:	50 0e       	stdsp	sp[0x0],lr
80004812:	1c 98       	mov	r8,lr
80004814:	e0 8f 02 fe 	bral	80004e10 <_vfprintf_r+0x1538>
80004818:	50 a7       	stdsp	sp[0x28],r7
8000481a:	50 80       	stdsp	sp[0x20],r0
8000481c:	0c 97       	mov	r7,r6
8000481e:	04 94       	mov	r4,r2
80004820:	06 96       	mov	r6,r3
80004822:	02 92       	mov	r2,r1
80004824:	40 93       	lddsp	r3,sp[0x24]
80004826:	40 41       	lddsp	r1,sp[0x10]
80004828:	0e 99       	mov	r9,r7
8000482a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000482e:	40 3c       	lddsp	r12,sp[0xc]
80004830:	58 0c       	cp.w	r12,0
80004832:	c1 d0       	breq	8000486c <_vfprintf_r+0xf94>
80004834:	10 36       	cp.w	r6,r8
80004836:	c0 64       	brge	80004842 <_vfprintf_r+0xf6a>
80004838:	fa cb f9 44 	sub	r11,sp,-1724
8000483c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004840:	c1 d8       	rjmp	8000487a <_vfprintf_r+0xfa2>
80004842:	fa c8 f9 50 	sub	r8,sp,-1712
80004846:	1a d8       	st.w	--sp,r8
80004848:	fa c8 fa b8 	sub	r8,sp,-1352
8000484c:	1a d8       	st.w	--sp,r8
8000484e:	fa c8 fb b4 	sub	r8,sp,-1100
80004852:	1a d8       	st.w	--sp,r8
80004854:	fa c9 ff b4 	sub	r9,sp,-76
80004858:	fa c8 f9 40 	sub	r8,sp,-1728
8000485c:	04 9a       	mov	r10,r2
8000485e:	0c 9b       	mov	r11,r6
80004860:	08 9c       	mov	r12,r4
80004862:	fe b0 f6 a3 	rcall	800035a8 <get_arg>
80004866:	2f dd       	sub	sp,-12
80004868:	78 09       	ld.w	r9,r12[0x0]
8000486a:	c2 18       	rjmp	800048ac <_vfprintf_r+0xfd4>
8000486c:	2f f7       	sub	r7,-1
8000486e:	10 39       	cp.w	r9,r8
80004870:	c0 84       	brge	80004880 <_vfprintf_r+0xfa8>
80004872:	fa ca f9 44 	sub	r10,sp,-1724
80004876:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000487a:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000487e:	c1 78       	rjmp	800048ac <_vfprintf_r+0xfd4>
80004880:	41 09       	lddsp	r9,sp[0x40]
80004882:	59 f8       	cp.w	r8,31
80004884:	e0 89 00 10 	brgt	800048a4 <_vfprintf_r+0xfcc>
80004888:	f2 ca ff fc 	sub	r10,r9,-4
8000488c:	51 0a       	stdsp	sp[0x40],r10
8000488e:	fa c6 f9 44 	sub	r6,sp,-1724
80004892:	72 09       	ld.w	r9,r9[0x0]
80004894:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004898:	f5 49 fd 88 	st.w	r10[-632],r9
8000489c:	2f f8       	sub	r8,-1
8000489e:	fb 48 06 b4 	st.w	sp[1716],r8
800048a2:	c0 58       	rjmp	800048ac <_vfprintf_r+0xfd4>
800048a4:	f2 c8 ff fc 	sub	r8,r9,-4
800048a8:	51 08       	stdsp	sp[0x40],r8
800048aa:	72 09       	ld.w	r9,r9[0x0]
800048ac:	33 08       	mov	r8,48
800048ae:	fb 68 06 b8 	st.b	sp[1720],r8
800048b2:	37 88       	mov	r8,120
800048b4:	30 0e       	mov	lr,0
800048b6:	fb 68 06 b9 	st.b	sp[1721],r8
800048ba:	fe cc b4 5a 	sub	r12,pc,-19366
800048be:	50 19       	stdsp	sp[0x4],r9
800048c0:	a1 b5       	sbr	r5,0x1
800048c2:	50 0e       	stdsp	sp[0x0],lr
800048c4:	50 dc       	stdsp	sp[0x34],r12
800048c6:	30 28       	mov	r8,2
800048c8:	37 80       	mov	r0,120
800048ca:	e0 8f 02 a3 	bral	80004e10 <_vfprintf_r+0x1538>
800048ce:	50 a7       	stdsp	sp[0x28],r7
800048d0:	50 80       	stdsp	sp[0x20],r0
800048d2:	10 90       	mov	r0,r8
800048d4:	30 08       	mov	r8,0
800048d6:	fb 68 06 bb 	st.b	sp[1723],r8
800048da:	0c 97       	mov	r7,r6
800048dc:	04 94       	mov	r4,r2
800048de:	06 96       	mov	r6,r3
800048e0:	02 92       	mov	r2,r1
800048e2:	40 93       	lddsp	r3,sp[0x24]
800048e4:	40 41       	lddsp	r1,sp[0x10]
800048e6:	0e 99       	mov	r9,r7
800048e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048ec:	40 3b       	lddsp	r11,sp[0xc]
800048ee:	58 0b       	cp.w	r11,0
800048f0:	c1 d0       	breq	8000492a <_vfprintf_r+0x1052>
800048f2:	10 36       	cp.w	r6,r8
800048f4:	c0 64       	brge	80004900 <_vfprintf_r+0x1028>
800048f6:	fa ca f9 44 	sub	r10,sp,-1724
800048fa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800048fe:	c1 d8       	rjmp	80004938 <_vfprintf_r+0x1060>
80004900:	fa c8 f9 50 	sub	r8,sp,-1712
80004904:	1a d8       	st.w	--sp,r8
80004906:	fa c8 fa b8 	sub	r8,sp,-1352
8000490a:	1a d8       	st.w	--sp,r8
8000490c:	fa c8 fb b4 	sub	r8,sp,-1100
80004910:	0c 9b       	mov	r11,r6
80004912:	1a d8       	st.w	--sp,r8
80004914:	04 9a       	mov	r10,r2
80004916:	fa c8 f9 40 	sub	r8,sp,-1728
8000491a:	fa c9 ff b4 	sub	r9,sp,-76
8000491e:	08 9c       	mov	r12,r4
80004920:	fe b0 f6 44 	rcall	800035a8 <get_arg>
80004924:	2f dd       	sub	sp,-12
80004926:	78 06       	ld.w	r6,r12[0x0]
80004928:	c2 08       	rjmp	80004968 <_vfprintf_r+0x1090>
8000492a:	2f f7       	sub	r7,-1
8000492c:	10 39       	cp.w	r9,r8
8000492e:	c0 84       	brge	8000493e <_vfprintf_r+0x1066>
80004930:	fa c9 f9 44 	sub	r9,sp,-1724
80004934:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004938:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000493c:	c1 68       	rjmp	80004968 <_vfprintf_r+0x1090>
8000493e:	41 09       	lddsp	r9,sp[0x40]
80004940:	59 f8       	cp.w	r8,31
80004942:	e0 89 00 10 	brgt	80004962 <_vfprintf_r+0x108a>
80004946:	f2 ca ff fc 	sub	r10,r9,-4
8000494a:	51 0a       	stdsp	sp[0x40],r10
8000494c:	72 06       	ld.w	r6,r9[0x0]
8000494e:	fa ce f9 44 	sub	lr,sp,-1724
80004952:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004956:	f3 46 fd 88 	st.w	r9[-632],r6
8000495a:	2f f8       	sub	r8,-1
8000495c:	fb 48 06 b4 	st.w	sp[1716],r8
80004960:	c0 48       	rjmp	80004968 <_vfprintf_r+0x1090>
80004962:	72 06       	ld.w	r6,r9[0x0]
80004964:	2f c9       	sub	r9,-4
80004966:	51 09       	stdsp	sp[0x40],r9
80004968:	40 2c       	lddsp	r12,sp[0x8]
8000496a:	58 0c       	cp.w	r12,0
8000496c:	c1 05       	brlt	8000498c <_vfprintf_r+0x10b4>
8000496e:	18 9a       	mov	r10,r12
80004970:	30 0b       	mov	r11,0
80004972:	0c 9c       	mov	r12,r6
80004974:	e0 a0 14 58 	rcall	80007224 <memchr>
80004978:	e0 80 02 df 	breq	80004f36 <_vfprintf_r+0x165e>
8000497c:	f8 06 01 02 	sub	r2,r12,r6
80004980:	40 2b       	lddsp	r11,sp[0x8]
80004982:	16 32       	cp.w	r2,r11
80004984:	e0 89 02 d9 	brgt	80004f36 <_vfprintf_r+0x165e>
80004988:	e0 8f 02 d4 	bral	80004f30 <_vfprintf_r+0x1658>
8000498c:	30 0a       	mov	r10,0
8000498e:	0c 9c       	mov	r12,r6
80004990:	50 2a       	stdsp	sp[0x8],r10
80004992:	e0 a0 19 33 	rcall	80007bf8 <strlen>
80004996:	18 92       	mov	r2,r12
80004998:	e0 8f 02 d2 	bral	80004f3c <_vfprintf_r+0x1664>
8000499c:	50 a7       	stdsp	sp[0x28],r7
8000499e:	50 80       	stdsp	sp[0x20],r0
800049a0:	0c 97       	mov	r7,r6
800049a2:	04 94       	mov	r4,r2
800049a4:	06 96       	mov	r6,r3
800049a6:	02 92       	mov	r2,r1
800049a8:	40 93       	lddsp	r3,sp[0x24]
800049aa:	10 90       	mov	r0,r8
800049ac:	40 41       	lddsp	r1,sp[0x10]
800049ae:	a5 a5       	sbr	r5,0x4
800049b0:	c0 a8       	rjmp	800049c4 <_vfprintf_r+0x10ec>
800049b2:	50 a7       	stdsp	sp[0x28],r7
800049b4:	50 80       	stdsp	sp[0x20],r0
800049b6:	0c 97       	mov	r7,r6
800049b8:	04 94       	mov	r4,r2
800049ba:	06 96       	mov	r6,r3
800049bc:	02 92       	mov	r2,r1
800049be:	40 93       	lddsp	r3,sp[0x24]
800049c0:	10 90       	mov	r0,r8
800049c2:	40 41       	lddsp	r1,sp[0x10]
800049c4:	ed b5 00 05 	bld	r5,0x5
800049c8:	c5 61       	brne	80004a74 <_vfprintf_r+0x119c>
800049ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049ce:	40 39       	lddsp	r9,sp[0xc]
800049d0:	58 09       	cp.w	r9,0
800049d2:	c2 10       	breq	80004a14 <_vfprintf_r+0x113c>
800049d4:	10 36       	cp.w	r6,r8
800049d6:	c0 74       	brge	800049e4 <_vfprintf_r+0x110c>
800049d8:	fa c8 f9 44 	sub	r8,sp,-1724
800049dc:	f0 06 00 36 	add	r6,r8,r6<<0x3
800049e0:	c2 38       	rjmp	80004a26 <_vfprintf_r+0x114e>
800049e2:	d7 03       	nop
800049e4:	fa c8 f9 50 	sub	r8,sp,-1712
800049e8:	1a d8       	st.w	--sp,r8
800049ea:	fa c8 fa b8 	sub	r8,sp,-1352
800049ee:	1a d8       	st.w	--sp,r8
800049f0:	fa c8 fb b4 	sub	r8,sp,-1100
800049f4:	1a d8       	st.w	--sp,r8
800049f6:	fa c8 f9 40 	sub	r8,sp,-1728
800049fa:	fa c9 ff b4 	sub	r9,sp,-76
800049fe:	04 9a       	mov	r10,r2
80004a00:	0c 9b       	mov	r11,r6
80004a02:	08 9c       	mov	r12,r4
80004a04:	fe b0 f5 d2 	rcall	800035a8 <get_arg>
80004a08:	2f dd       	sub	sp,-12
80004a0a:	f8 e8 00 00 	ld.d	r8,r12[0]
80004a0e:	fa e9 00 00 	st.d	sp[0],r8
80004a12:	c2 e8       	rjmp	80004a6e <_vfprintf_r+0x1196>
80004a14:	ee ca ff ff 	sub	r10,r7,-1
80004a18:	10 37       	cp.w	r7,r8
80004a1a:	c0 b4       	brge	80004a30 <_vfprintf_r+0x1158>
80004a1c:	fa c8 f9 44 	sub	r8,sp,-1724
80004a20:	14 97       	mov	r7,r10
80004a22:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a26:	ec ea fd 88 	ld.d	r10,r6[-632]
80004a2a:	fa eb 00 00 	st.d	sp[0],r10
80004a2e:	c2 08       	rjmp	80004a6e <_vfprintf_r+0x1196>
80004a30:	41 09       	lddsp	r9,sp[0x40]
80004a32:	59 f8       	cp.w	r8,31
80004a34:	e0 89 00 16 	brgt	80004a60 <_vfprintf_r+0x1188>
80004a38:	f2 e6 00 00 	ld.d	r6,r9[0]
80004a3c:	f2 cb ff f8 	sub	r11,r9,-8
80004a40:	fa e7 00 00 	st.d	sp[0],r6
80004a44:	51 0b       	stdsp	sp[0x40],r11
80004a46:	fa c6 f9 44 	sub	r6,sp,-1724
80004a4a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a4e:	fa e6 00 00 	ld.d	r6,sp[0]
80004a52:	f2 e7 fd 88 	st.d	r9[-632],r6
80004a56:	2f f8       	sub	r8,-1
80004a58:	14 97       	mov	r7,r10
80004a5a:	fb 48 06 b4 	st.w	sp[1716],r8
80004a5e:	c0 88       	rjmp	80004a6e <_vfprintf_r+0x1196>
80004a60:	f2 e6 00 00 	ld.d	r6,r9[0]
80004a64:	2f 89       	sub	r9,-8
80004a66:	fa e7 00 00 	st.d	sp[0],r6
80004a6a:	51 09       	stdsp	sp[0x40],r9
80004a6c:	14 97       	mov	r7,r10
80004a6e:	30 18       	mov	r8,1
80004a70:	e0 8f 01 d0 	bral	80004e10 <_vfprintf_r+0x1538>
80004a74:	ed b5 00 04 	bld	r5,0x4
80004a78:	c1 61       	brne	80004aa4 <_vfprintf_r+0x11cc>
80004a7a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a7e:	40 3e       	lddsp	lr,sp[0xc]
80004a80:	58 0e       	cp.w	lr,0
80004a82:	c0 80       	breq	80004a92 <_vfprintf_r+0x11ba>
80004a84:	10 36       	cp.w	r6,r8
80004a86:	c6 74       	brge	80004b54 <_vfprintf_r+0x127c>
80004a88:	fa cc f9 44 	sub	r12,sp,-1724
80004a8c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004a90:	c8 08       	rjmp	80004b90 <_vfprintf_r+0x12b8>
80004a92:	ee ca ff ff 	sub	r10,r7,-1
80004a96:	10 37       	cp.w	r7,r8
80004a98:	c7 f4       	brge	80004b96 <_vfprintf_r+0x12be>
80004a9a:	fa cb f9 44 	sub	r11,sp,-1724
80004a9e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004aa2:	c7 68       	rjmp	80004b8e <_vfprintf_r+0x12b6>
80004aa4:	ed b5 00 06 	bld	r5,0x6
80004aa8:	c4 a1       	brne	80004b3c <_vfprintf_r+0x1264>
80004aaa:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004aae:	40 3c       	lddsp	r12,sp[0xc]
80004ab0:	58 0c       	cp.w	r12,0
80004ab2:	c1 d0       	breq	80004aec <_vfprintf_r+0x1214>
80004ab4:	10 36       	cp.w	r6,r8
80004ab6:	c0 64       	brge	80004ac2 <_vfprintf_r+0x11ea>
80004ab8:	fa cb f9 44 	sub	r11,sp,-1724
80004abc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ac0:	c1 f8       	rjmp	80004afe <_vfprintf_r+0x1226>
80004ac2:	fa c8 f9 50 	sub	r8,sp,-1712
80004ac6:	1a d8       	st.w	--sp,r8
80004ac8:	fa c8 fa b8 	sub	r8,sp,-1352
80004acc:	1a d8       	st.w	--sp,r8
80004ace:	fa c8 fb b4 	sub	r8,sp,-1100
80004ad2:	1a d8       	st.w	--sp,r8
80004ad4:	fa c8 f9 40 	sub	r8,sp,-1728
80004ad8:	fa c9 ff b4 	sub	r9,sp,-76
80004adc:	04 9a       	mov	r10,r2
80004ade:	0c 9b       	mov	r11,r6
80004ae0:	08 9c       	mov	r12,r4
80004ae2:	fe b0 f5 63 	rcall	800035a8 <get_arg>
80004ae6:	2f dd       	sub	sp,-12
80004ae8:	98 18       	ld.sh	r8,r12[0x2]
80004aea:	c2 68       	rjmp	80004b36 <_vfprintf_r+0x125e>
80004aec:	ee ca ff ff 	sub	r10,r7,-1
80004af0:	10 37       	cp.w	r7,r8
80004af2:	c0 94       	brge	80004b04 <_vfprintf_r+0x122c>
80004af4:	fa c9 f9 44 	sub	r9,sp,-1724
80004af8:	14 97       	mov	r7,r10
80004afa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004afe:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004b02:	c1 a8       	rjmp	80004b36 <_vfprintf_r+0x125e>
80004b04:	41 09       	lddsp	r9,sp[0x40]
80004b06:	59 f8       	cp.w	r8,31
80004b08:	e0 89 00 13 	brgt	80004b2e <_vfprintf_r+0x1256>
80004b0c:	f2 cb ff fc 	sub	r11,r9,-4
80004b10:	51 0b       	stdsp	sp[0x40],r11
80004b12:	72 09       	ld.w	r9,r9[0x0]
80004b14:	fa c6 f9 44 	sub	r6,sp,-1724
80004b18:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004b1c:	2f f8       	sub	r8,-1
80004b1e:	f7 49 fd 88 	st.w	r11[-632],r9
80004b22:	fb 48 06 b4 	st.w	sp[1716],r8
80004b26:	14 97       	mov	r7,r10
80004b28:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004b2c:	c0 58       	rjmp	80004b36 <_vfprintf_r+0x125e>
80004b2e:	92 18       	ld.sh	r8,r9[0x2]
80004b30:	14 97       	mov	r7,r10
80004b32:	2f c9       	sub	r9,-4
80004b34:	51 09       	stdsp	sp[0x40],r9
80004b36:	5c 78       	castu.h	r8
80004b38:	50 18       	stdsp	sp[0x4],r8
80004b3a:	c4 68       	rjmp	80004bc6 <_vfprintf_r+0x12ee>
80004b3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b40:	40 3c       	lddsp	r12,sp[0xc]
80004b42:	58 0c       	cp.w	r12,0
80004b44:	c1 d0       	breq	80004b7e <_vfprintf_r+0x12a6>
80004b46:	10 36       	cp.w	r6,r8
80004b48:	c0 64       	brge	80004b54 <_vfprintf_r+0x127c>
80004b4a:	fa cb f9 44 	sub	r11,sp,-1724
80004b4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b52:	c1 f8       	rjmp	80004b90 <_vfprintf_r+0x12b8>
80004b54:	fa c8 f9 50 	sub	r8,sp,-1712
80004b58:	1a d8       	st.w	--sp,r8
80004b5a:	fa c8 fa b8 	sub	r8,sp,-1352
80004b5e:	0c 9b       	mov	r11,r6
80004b60:	1a d8       	st.w	--sp,r8
80004b62:	fa c8 fb b4 	sub	r8,sp,-1100
80004b66:	04 9a       	mov	r10,r2
80004b68:	1a d8       	st.w	--sp,r8
80004b6a:	08 9c       	mov	r12,r4
80004b6c:	fa c8 f9 40 	sub	r8,sp,-1728
80004b70:	fa c9 ff b4 	sub	r9,sp,-76
80004b74:	fe b0 f5 1a 	rcall	800035a8 <get_arg>
80004b78:	2f dd       	sub	sp,-12
80004b7a:	78 0b       	ld.w	r11,r12[0x0]
80004b7c:	c2 48       	rjmp	80004bc4 <_vfprintf_r+0x12ec>
80004b7e:	ee ca ff ff 	sub	r10,r7,-1
80004b82:	10 37       	cp.w	r7,r8
80004b84:	c0 94       	brge	80004b96 <_vfprintf_r+0x12be>
80004b86:	fa c9 f9 44 	sub	r9,sp,-1724
80004b8a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b8e:	14 97       	mov	r7,r10
80004b90:	ec fb fd 88 	ld.w	r11,r6[-632]
80004b94:	c1 88       	rjmp	80004bc4 <_vfprintf_r+0x12ec>
80004b96:	41 09       	lddsp	r9,sp[0x40]
80004b98:	59 f8       	cp.w	r8,31
80004b9a:	e0 89 00 11 	brgt	80004bbc <_vfprintf_r+0x12e4>
80004b9e:	f2 cb ff fc 	sub	r11,r9,-4
80004ba2:	51 0b       	stdsp	sp[0x40],r11
80004ba4:	fa c6 f9 44 	sub	r6,sp,-1724
80004ba8:	72 0b       	ld.w	r11,r9[0x0]
80004baa:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004bae:	f3 4b fd 88 	st.w	r9[-632],r11
80004bb2:	2f f8       	sub	r8,-1
80004bb4:	14 97       	mov	r7,r10
80004bb6:	fb 48 06 b4 	st.w	sp[1716],r8
80004bba:	c0 58       	rjmp	80004bc4 <_vfprintf_r+0x12ec>
80004bbc:	72 0b       	ld.w	r11,r9[0x0]
80004bbe:	14 97       	mov	r7,r10
80004bc0:	2f c9       	sub	r9,-4
80004bc2:	51 09       	stdsp	sp[0x40],r9
80004bc4:	50 1b       	stdsp	sp[0x4],r11
80004bc6:	30 0e       	mov	lr,0
80004bc8:	30 18       	mov	r8,1
80004bca:	50 0e       	stdsp	sp[0x0],lr
80004bcc:	c2 29       	rjmp	80004e10 <_vfprintf_r+0x1538>
80004bce:	50 a7       	stdsp	sp[0x28],r7
80004bd0:	50 80       	stdsp	sp[0x20],r0
80004bd2:	0c 97       	mov	r7,r6
80004bd4:	04 94       	mov	r4,r2
80004bd6:	06 96       	mov	r6,r3
80004bd8:	02 92       	mov	r2,r1
80004bda:	fe cc b7 7a 	sub	r12,pc,-18566
80004bde:	40 93       	lddsp	r3,sp[0x24]
80004be0:	10 90       	mov	r0,r8
80004be2:	40 41       	lddsp	r1,sp[0x10]
80004be4:	50 dc       	stdsp	sp[0x34],r12
80004be6:	ed b5 00 05 	bld	r5,0x5
80004bea:	c5 51       	brne	80004c94 <_vfprintf_r+0x13bc>
80004bec:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bf0:	40 3b       	lddsp	r11,sp[0xc]
80004bf2:	58 0b       	cp.w	r11,0
80004bf4:	c2 20       	breq	80004c38 <_vfprintf_r+0x1360>
80004bf6:	10 36       	cp.w	r6,r8
80004bf8:	c0 a4       	brge	80004c0c <_vfprintf_r+0x1334>
80004bfa:	fa ca f9 44 	sub	r10,sp,-1724
80004bfe:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004c02:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004c06:	fa e9 00 00 	st.d	sp[0],r8
80004c0a:	cf 28       	rjmp	80004dee <_vfprintf_r+0x1516>
80004c0c:	fa c8 f9 50 	sub	r8,sp,-1712
80004c10:	1a d8       	st.w	--sp,r8
80004c12:	fa c8 fa b8 	sub	r8,sp,-1352
80004c16:	04 9a       	mov	r10,r2
80004c18:	1a d8       	st.w	--sp,r8
80004c1a:	0c 9b       	mov	r11,r6
80004c1c:	fa c8 fb b4 	sub	r8,sp,-1100
80004c20:	08 9c       	mov	r12,r4
80004c22:	1a d8       	st.w	--sp,r8
80004c24:	fa c8 f9 40 	sub	r8,sp,-1728
80004c28:	fa c9 ff b4 	sub	r9,sp,-76
80004c2c:	fe b0 f4 be 	rcall	800035a8 <get_arg>
80004c30:	2f dd       	sub	sp,-12
80004c32:	f8 ea 00 00 	ld.d	r10,r12[0]
80004c36:	c0 c8       	rjmp	80004c4e <_vfprintf_r+0x1376>
80004c38:	ee ca ff ff 	sub	r10,r7,-1
80004c3c:	10 37       	cp.w	r7,r8
80004c3e:	c0 b4       	brge	80004c54 <_vfprintf_r+0x137c>
80004c40:	fa c9 f9 44 	sub	r9,sp,-1724
80004c44:	14 97       	mov	r7,r10
80004c46:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c4a:	ec ea fd 88 	ld.d	r10,r6[-632]
80004c4e:	fa eb 00 00 	st.d	sp[0],r10
80004c52:	cc e8       	rjmp	80004dee <_vfprintf_r+0x1516>
80004c54:	41 09       	lddsp	r9,sp[0x40]
80004c56:	59 f8       	cp.w	r8,31
80004c58:	e0 89 00 16 	brgt	80004c84 <_vfprintf_r+0x13ac>
80004c5c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004c60:	f2 cb ff f8 	sub	r11,r9,-8
80004c64:	fa e7 00 00 	st.d	sp[0],r6
80004c68:	51 0b       	stdsp	sp[0x40],r11
80004c6a:	fa c6 f9 44 	sub	r6,sp,-1724
80004c6e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c72:	fa e6 00 00 	ld.d	r6,sp[0]
80004c76:	f2 e7 fd 88 	st.d	r9[-632],r6
80004c7a:	2f f8       	sub	r8,-1
80004c7c:	14 97       	mov	r7,r10
80004c7e:	fb 48 06 b4 	st.w	sp[1716],r8
80004c82:	cb 68       	rjmp	80004dee <_vfprintf_r+0x1516>
80004c84:	f2 e6 00 00 	ld.d	r6,r9[0]
80004c88:	2f 89       	sub	r9,-8
80004c8a:	fa e7 00 00 	st.d	sp[0],r6
80004c8e:	51 09       	stdsp	sp[0x40],r9
80004c90:	14 97       	mov	r7,r10
80004c92:	ca e8       	rjmp	80004dee <_vfprintf_r+0x1516>
80004c94:	ed b5 00 04 	bld	r5,0x4
80004c98:	c1 71       	brne	80004cc6 <_vfprintf_r+0x13ee>
80004c9a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c9e:	40 3e       	lddsp	lr,sp[0xc]
80004ca0:	58 0e       	cp.w	lr,0
80004ca2:	c0 80       	breq	80004cb2 <_vfprintf_r+0x13da>
80004ca4:	10 36       	cp.w	r6,r8
80004ca6:	c6 94       	brge	80004d78 <_vfprintf_r+0x14a0>
80004ca8:	fa cc f9 44 	sub	r12,sp,-1724
80004cac:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004cb0:	c8 28       	rjmp	80004db4 <_vfprintf_r+0x14dc>
80004cb2:	ee ca ff ff 	sub	r10,r7,-1
80004cb6:	10 37       	cp.w	r7,r8
80004cb8:	e0 84 00 81 	brge	80004dba <_vfprintf_r+0x14e2>
80004cbc:	fa cb f9 44 	sub	r11,sp,-1724
80004cc0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004cc4:	c7 78       	rjmp	80004db2 <_vfprintf_r+0x14da>
80004cc6:	ed b5 00 06 	bld	r5,0x6
80004cca:	c4 b1       	brne	80004d60 <_vfprintf_r+0x1488>
80004ccc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cd0:	40 3c       	lddsp	r12,sp[0xc]
80004cd2:	58 0c       	cp.w	r12,0
80004cd4:	c1 d0       	breq	80004d0e <_vfprintf_r+0x1436>
80004cd6:	10 36       	cp.w	r6,r8
80004cd8:	c0 64       	brge	80004ce4 <_vfprintf_r+0x140c>
80004cda:	fa cb f9 44 	sub	r11,sp,-1724
80004cde:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ce2:	c1 f8       	rjmp	80004d20 <_vfprintf_r+0x1448>
80004ce4:	fa c8 f9 50 	sub	r8,sp,-1712
80004ce8:	1a d8       	st.w	--sp,r8
80004cea:	fa c8 fa b8 	sub	r8,sp,-1352
80004cee:	1a d8       	st.w	--sp,r8
80004cf0:	fa c8 fb b4 	sub	r8,sp,-1100
80004cf4:	1a d8       	st.w	--sp,r8
80004cf6:	fa c8 f9 40 	sub	r8,sp,-1728
80004cfa:	fa c9 ff b4 	sub	r9,sp,-76
80004cfe:	04 9a       	mov	r10,r2
80004d00:	0c 9b       	mov	r11,r6
80004d02:	08 9c       	mov	r12,r4
80004d04:	fe b0 f4 52 	rcall	800035a8 <get_arg>
80004d08:	2f dd       	sub	sp,-12
80004d0a:	98 18       	ld.sh	r8,r12[0x2]
80004d0c:	c2 78       	rjmp	80004d5a <_vfprintf_r+0x1482>
80004d0e:	ee ca ff ff 	sub	r10,r7,-1
80004d12:	10 37       	cp.w	r7,r8
80004d14:	c0 a4       	brge	80004d28 <_vfprintf_r+0x1450>
80004d16:	fa c9 f9 44 	sub	r9,sp,-1724
80004d1a:	14 97       	mov	r7,r10
80004d1c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d20:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004d24:	c1 b8       	rjmp	80004d5a <_vfprintf_r+0x1482>
80004d26:	d7 03       	nop
80004d28:	41 09       	lddsp	r9,sp[0x40]
80004d2a:	59 f8       	cp.w	r8,31
80004d2c:	e0 89 00 13 	brgt	80004d52 <_vfprintf_r+0x147a>
80004d30:	f2 cb ff fc 	sub	r11,r9,-4
80004d34:	51 0b       	stdsp	sp[0x40],r11
80004d36:	72 09       	ld.w	r9,r9[0x0]
80004d38:	fa c6 f9 44 	sub	r6,sp,-1724
80004d3c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004d40:	2f f8       	sub	r8,-1
80004d42:	f7 49 fd 88 	st.w	r11[-632],r9
80004d46:	fb 48 06 b4 	st.w	sp[1716],r8
80004d4a:	14 97       	mov	r7,r10
80004d4c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004d50:	c0 58       	rjmp	80004d5a <_vfprintf_r+0x1482>
80004d52:	92 18       	ld.sh	r8,r9[0x2]
80004d54:	14 97       	mov	r7,r10
80004d56:	2f c9       	sub	r9,-4
80004d58:	51 09       	stdsp	sp[0x40],r9
80004d5a:	5c 78       	castu.h	r8
80004d5c:	50 18       	stdsp	sp[0x4],r8
80004d5e:	c4 68       	rjmp	80004dea <_vfprintf_r+0x1512>
80004d60:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d64:	40 3c       	lddsp	r12,sp[0xc]
80004d66:	58 0c       	cp.w	r12,0
80004d68:	c1 d0       	breq	80004da2 <_vfprintf_r+0x14ca>
80004d6a:	10 36       	cp.w	r6,r8
80004d6c:	c0 64       	brge	80004d78 <_vfprintf_r+0x14a0>
80004d6e:	fa cb f9 44 	sub	r11,sp,-1724
80004d72:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d76:	c1 f8       	rjmp	80004db4 <_vfprintf_r+0x14dc>
80004d78:	fa c8 f9 50 	sub	r8,sp,-1712
80004d7c:	1a d8       	st.w	--sp,r8
80004d7e:	fa c8 fa b8 	sub	r8,sp,-1352
80004d82:	0c 9b       	mov	r11,r6
80004d84:	1a d8       	st.w	--sp,r8
80004d86:	fa c8 fb b4 	sub	r8,sp,-1100
80004d8a:	04 9a       	mov	r10,r2
80004d8c:	1a d8       	st.w	--sp,r8
80004d8e:	08 9c       	mov	r12,r4
80004d90:	fa c8 f9 40 	sub	r8,sp,-1728
80004d94:	fa c9 ff b4 	sub	r9,sp,-76
80004d98:	fe b0 f4 08 	rcall	800035a8 <get_arg>
80004d9c:	2f dd       	sub	sp,-12
80004d9e:	78 0b       	ld.w	r11,r12[0x0]
80004da0:	c2 48       	rjmp	80004de8 <_vfprintf_r+0x1510>
80004da2:	ee ca ff ff 	sub	r10,r7,-1
80004da6:	10 37       	cp.w	r7,r8
80004da8:	c0 94       	brge	80004dba <_vfprintf_r+0x14e2>
80004daa:	fa c9 f9 44 	sub	r9,sp,-1724
80004dae:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004db2:	14 97       	mov	r7,r10
80004db4:	ec fb fd 88 	ld.w	r11,r6[-632]
80004db8:	c1 88       	rjmp	80004de8 <_vfprintf_r+0x1510>
80004dba:	41 09       	lddsp	r9,sp[0x40]
80004dbc:	59 f8       	cp.w	r8,31
80004dbe:	e0 89 00 11 	brgt	80004de0 <_vfprintf_r+0x1508>
80004dc2:	f2 cb ff fc 	sub	r11,r9,-4
80004dc6:	51 0b       	stdsp	sp[0x40],r11
80004dc8:	fa c6 f9 44 	sub	r6,sp,-1724
80004dcc:	72 0b       	ld.w	r11,r9[0x0]
80004dce:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004dd2:	f3 4b fd 88 	st.w	r9[-632],r11
80004dd6:	2f f8       	sub	r8,-1
80004dd8:	14 97       	mov	r7,r10
80004dda:	fb 48 06 b4 	st.w	sp[1716],r8
80004dde:	c0 58       	rjmp	80004de8 <_vfprintf_r+0x1510>
80004de0:	72 0b       	ld.w	r11,r9[0x0]
80004de2:	14 97       	mov	r7,r10
80004de4:	2f c9       	sub	r9,-4
80004de6:	51 09       	stdsp	sp[0x40],r9
80004de8:	50 1b       	stdsp	sp[0x4],r11
80004dea:	30 0e       	mov	lr,0
80004dec:	50 0e       	stdsp	sp[0x0],lr
80004dee:	40 08       	lddsp	r8,sp[0x0]
80004df0:	40 1c       	lddsp	r12,sp[0x4]
80004df2:	18 48       	or	r8,r12
80004df4:	5f 19       	srne	r9
80004df6:	0a 98       	mov	r8,r5
80004df8:	eb e9 00 09 	and	r9,r5,r9
80004dfc:	a1 b8       	sbr	r8,0x1
80004dfe:	58 09       	cp.w	r9,0
80004e00:	c0 70       	breq	80004e0e <_vfprintf_r+0x1536>
80004e02:	10 95       	mov	r5,r8
80004e04:	fb 60 06 b9 	st.b	sp[1721],r0
80004e08:	33 08       	mov	r8,48
80004e0a:	fb 68 06 b8 	st.b	sp[1720],r8
80004e0e:	30 28       	mov	r8,2
80004e10:	30 09       	mov	r9,0
80004e12:	fb 69 06 bb 	st.b	sp[1723],r9
80004e16:	0a 99       	mov	r9,r5
80004e18:	a7 d9       	cbr	r9,0x7
80004e1a:	40 2b       	lddsp	r11,sp[0x8]
80004e1c:	40 16       	lddsp	r6,sp[0x4]
80004e1e:	58 0b       	cp.w	r11,0
80004e20:	5f 1a       	srne	r10
80004e22:	f2 05 17 40 	movge	r5,r9
80004e26:	fa c2 f9 78 	sub	r2,sp,-1672
80004e2a:	40 09       	lddsp	r9,sp[0x0]
80004e2c:	0c 49       	or	r9,r6
80004e2e:	5f 19       	srne	r9
80004e30:	f5 e9 10 09 	or	r9,r10,r9
80004e34:	c5 c0       	breq	80004eec <_vfprintf_r+0x1614>
80004e36:	30 19       	mov	r9,1
80004e38:	f2 08 18 00 	cp.b	r8,r9
80004e3c:	c0 60       	breq	80004e48 <_vfprintf_r+0x1570>
80004e3e:	30 29       	mov	r9,2
80004e40:	f2 08 18 00 	cp.b	r8,r9
80004e44:	c0 41       	brne	80004e4c <_vfprintf_r+0x1574>
80004e46:	c3 c8       	rjmp	80004ebe <_vfprintf_r+0x15e6>
80004e48:	04 96       	mov	r6,r2
80004e4a:	c3 08       	rjmp	80004eaa <_vfprintf_r+0x15d2>
80004e4c:	04 96       	mov	r6,r2
80004e4e:	fa e8 00 00 	ld.d	r8,sp[0]
80004e52:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004e56:	2d 0a       	sub	r10,-48
80004e58:	0c fa       	st.b	--r6,r10
80004e5a:	f0 0b 16 03 	lsr	r11,r8,0x3
80004e5e:	f2 0c 16 03 	lsr	r12,r9,0x3
80004e62:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004e66:	18 99       	mov	r9,r12
80004e68:	16 98       	mov	r8,r11
80004e6a:	58 08       	cp.w	r8,0
80004e6c:	5c 29       	cpc	r9
80004e6e:	cf 21       	brne	80004e52 <_vfprintf_r+0x157a>
80004e70:	fa e9 00 00 	st.d	sp[0],r8
80004e74:	ed b5 00 00 	bld	r5,0x0
80004e78:	c4 51       	brne	80004f02 <_vfprintf_r+0x162a>
80004e7a:	33 09       	mov	r9,48
80004e7c:	f2 0a 18 00 	cp.b	r10,r9
80004e80:	c4 10       	breq	80004f02 <_vfprintf_r+0x162a>
80004e82:	0c f9       	st.b	--r6,r9
80004e84:	c3 f8       	rjmp	80004f02 <_vfprintf_r+0x162a>
80004e86:	fa ea 00 00 	ld.d	r10,sp[0]
80004e8a:	30 a8       	mov	r8,10
80004e8c:	30 09       	mov	r9,0
80004e8e:	e0 a0 1e 31 	rcall	80008af0 <__avr32_umod64>
80004e92:	30 a8       	mov	r8,10
80004e94:	2d 0a       	sub	r10,-48
80004e96:	30 09       	mov	r9,0
80004e98:	ac 8a       	st.b	r6[0x0],r10
80004e9a:	fa ea 00 00 	ld.d	r10,sp[0]
80004e9e:	e0 a0 1c f7 	rcall	8000888c <__avr32_udiv64>
80004ea2:	16 99       	mov	r9,r11
80004ea4:	14 98       	mov	r8,r10
80004ea6:	fa e9 00 00 	st.d	sp[0],r8
80004eaa:	20 16       	sub	r6,1
80004eac:	fa ea 00 00 	ld.d	r10,sp[0]
80004eb0:	58 9a       	cp.w	r10,9
80004eb2:	5c 2b       	cpc	r11
80004eb4:	fe 9b ff e9 	brhi	80004e86 <_vfprintf_r+0x15ae>
80004eb8:	1b f8       	ld.ub	r8,sp[0x7]
80004eba:	2d 08       	sub	r8,-48
80004ebc:	c2 08       	rjmp	80004efc <_vfprintf_r+0x1624>
80004ebe:	04 96       	mov	r6,r2
80004ec0:	fa e8 00 00 	ld.d	r8,sp[0]
80004ec4:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004ec8:	40 de       	lddsp	lr,sp[0x34]
80004eca:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004ece:	0c fa       	st.b	--r6,r10
80004ed0:	f2 0b 16 04 	lsr	r11,r9,0x4
80004ed4:	f0 0a 16 04 	lsr	r10,r8,0x4
80004ed8:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004edc:	16 99       	mov	r9,r11
80004ede:	14 98       	mov	r8,r10
80004ee0:	58 08       	cp.w	r8,0
80004ee2:	5c 29       	cpc	r9
80004ee4:	cf 01       	brne	80004ec4 <_vfprintf_r+0x15ec>
80004ee6:	fa e9 00 00 	st.d	sp[0],r8
80004eea:	c0 c8       	rjmp	80004f02 <_vfprintf_r+0x162a>
80004eec:	58 08       	cp.w	r8,0
80004eee:	c0 91       	brne	80004f00 <_vfprintf_r+0x1628>
80004ef0:	ed b5 00 00 	bld	r5,0x0
80004ef4:	c0 61       	brne	80004f00 <_vfprintf_r+0x1628>
80004ef6:	fa c6 f9 79 	sub	r6,sp,-1671
80004efa:	33 08       	mov	r8,48
80004efc:	ac 88       	st.b	r6[0x0],r8
80004efe:	c0 28       	rjmp	80004f02 <_vfprintf_r+0x162a>
80004f00:	04 96       	mov	r6,r2
80004f02:	0c 12       	sub	r2,r6
80004f04:	c1 c8       	rjmp	80004f3c <_vfprintf_r+0x1664>
80004f06:	50 a7       	stdsp	sp[0x28],r7
80004f08:	50 80       	stdsp	sp[0x20],r0
80004f0a:	40 93       	lddsp	r3,sp[0x24]
80004f0c:	0c 97       	mov	r7,r6
80004f0e:	10 90       	mov	r0,r8
80004f10:	04 94       	mov	r4,r2
80004f12:	40 41       	lddsp	r1,sp[0x10]
80004f14:	58 08       	cp.w	r8,0
80004f16:	e0 80 04 4f 	breq	800057b4 <_vfprintf_r+0x1edc>
80004f1a:	fb 68 06 60 	st.b	sp[1632],r8
80004f1e:	30 0c       	mov	r12,0
80004f20:	30 08       	mov	r8,0
80004f22:	30 12       	mov	r2,1
80004f24:	fb 68 06 bb 	st.b	sp[1723],r8
80004f28:	50 2c       	stdsp	sp[0x8],r12
80004f2a:	fa c6 f9 a0 	sub	r6,sp,-1632
80004f2e:	c0 78       	rjmp	80004f3c <_vfprintf_r+0x1664>
80004f30:	30 0b       	mov	r11,0
80004f32:	50 2b       	stdsp	sp[0x8],r11
80004f34:	c0 48       	rjmp	80004f3c <_vfprintf_r+0x1664>
80004f36:	40 22       	lddsp	r2,sp[0x8]
80004f38:	30 0a       	mov	r10,0
80004f3a:	50 2a       	stdsp	sp[0x8],r10
80004f3c:	40 29       	lddsp	r9,sp[0x8]
80004f3e:	e4 09 0c 49 	max	r9,r2,r9
80004f42:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004f46:	50 39       	stdsp	sp[0xc],r9
80004f48:	0a 9e       	mov	lr,r5
80004f4a:	30 09       	mov	r9,0
80004f4c:	e2 1e 00 02 	andl	lr,0x2,COH
80004f50:	f2 08 18 00 	cp.b	r8,r9
80004f54:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80004f58:	f7 b8 01 ff 	subne	r8,-1
80004f5c:	fb f8 1a 03 	st.wne	sp[0xc],r8
80004f60:	0a 9b       	mov	r11,r5
80004f62:	58 0e       	cp.w	lr,0
80004f64:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80004f68:	f7 bc 01 fe 	subne	r12,-2
80004f6c:	fb fc 1a 03 	st.wne	sp[0xc],r12
80004f70:	e2 1b 00 84 	andl	r11,0x84,COH
80004f74:	50 fe       	stdsp	sp[0x3c],lr
80004f76:	50 9b       	stdsp	sp[0x24],r11
80004f78:	c4 71       	brne	80005006 <_vfprintf_r+0x172e>
80004f7a:	40 8a       	lddsp	r10,sp[0x20]
80004f7c:	40 39       	lddsp	r9,sp[0xc]
80004f7e:	12 1a       	sub	r10,r9
80004f80:	50 4a       	stdsp	sp[0x10],r10
80004f82:	58 0a       	cp.w	r10,0
80004f84:	e0 89 00 20 	brgt	80004fc4 <_vfprintf_r+0x16ec>
80004f88:	c3 f8       	rjmp	80005006 <_vfprintf_r+0x172e>
80004f8a:	2f 09       	sub	r9,-16
80004f8c:	2f f8       	sub	r8,-1
80004f8e:	fe ce bb 16 	sub	lr,pc,-17642
80004f92:	31 0c       	mov	r12,16
80004f94:	fb 49 06 90 	st.w	sp[1680],r9
80004f98:	87 0e       	st.w	r3[0x0],lr
80004f9a:	87 1c       	st.w	r3[0x4],r12
80004f9c:	fb 48 06 8c 	st.w	sp[1676],r8
80004fa0:	58 78       	cp.w	r8,7
80004fa2:	e0 89 00 04 	brgt	80004faa <_vfprintf_r+0x16d2>
80004fa6:	2f 83       	sub	r3,-8
80004fa8:	c0 b8       	rjmp	80004fbe <_vfprintf_r+0x16e6>
80004faa:	fa ca f9 78 	sub	r10,sp,-1672
80004fae:	02 9b       	mov	r11,r1
80004fb0:	08 9c       	mov	r12,r4
80004fb2:	fe b0 f4 85 	rcall	800038bc <__sprint_r>
80004fb6:	e0 81 04 10 	brne	800057d6 <_vfprintf_r+0x1efe>
80004fba:	fa c3 f9 e0 	sub	r3,sp,-1568
80004fbe:	40 4b       	lddsp	r11,sp[0x10]
80004fc0:	21 0b       	sub	r11,16
80004fc2:	50 4b       	stdsp	sp[0x10],r11
80004fc4:	fa f9 06 90 	ld.w	r9,sp[1680]
80004fc8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004fcc:	fe ca bb 54 	sub	r10,pc,-17580
80004fd0:	40 4e       	lddsp	lr,sp[0x10]
80004fd2:	59 0e       	cp.w	lr,16
80004fd4:	fe 99 ff db 	brgt	80004f8a <_vfprintf_r+0x16b2>
80004fd8:	1c 09       	add	r9,lr
80004fda:	2f f8       	sub	r8,-1
80004fdc:	87 0a       	st.w	r3[0x0],r10
80004fde:	fb 49 06 90 	st.w	sp[1680],r9
80004fe2:	87 1e       	st.w	r3[0x4],lr
80004fe4:	fb 48 06 8c 	st.w	sp[1676],r8
80004fe8:	58 78       	cp.w	r8,7
80004fea:	e0 89 00 04 	brgt	80004ff2 <_vfprintf_r+0x171a>
80004fee:	2f 83       	sub	r3,-8
80004ff0:	c0 b8       	rjmp	80005006 <_vfprintf_r+0x172e>
80004ff2:	fa ca f9 78 	sub	r10,sp,-1672
80004ff6:	02 9b       	mov	r11,r1
80004ff8:	08 9c       	mov	r12,r4
80004ffa:	fe b0 f4 61 	rcall	800038bc <__sprint_r>
80004ffe:	e0 81 03 ec 	brne	800057d6 <_vfprintf_r+0x1efe>
80005002:	fa c3 f9 e0 	sub	r3,sp,-1568
80005006:	30 09       	mov	r9,0
80005008:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000500c:	f2 08 18 00 	cp.b	r8,r9
80005010:	c1 f0       	breq	8000504e <_vfprintf_r+0x1776>
80005012:	fa f8 06 90 	ld.w	r8,sp[1680]
80005016:	fa c9 f9 45 	sub	r9,sp,-1723
8000501a:	2f f8       	sub	r8,-1
8000501c:	87 09       	st.w	r3[0x0],r9
8000501e:	fb 48 06 90 	st.w	sp[1680],r8
80005022:	30 19       	mov	r9,1
80005024:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005028:	87 19       	st.w	r3[0x4],r9
8000502a:	2f f8       	sub	r8,-1
8000502c:	fb 48 06 8c 	st.w	sp[1676],r8
80005030:	58 78       	cp.w	r8,7
80005032:	e0 89 00 04 	brgt	8000503a <_vfprintf_r+0x1762>
80005036:	2f 83       	sub	r3,-8
80005038:	c0 b8       	rjmp	8000504e <_vfprintf_r+0x1776>
8000503a:	fa ca f9 78 	sub	r10,sp,-1672
8000503e:	02 9b       	mov	r11,r1
80005040:	08 9c       	mov	r12,r4
80005042:	fe b0 f4 3d 	rcall	800038bc <__sprint_r>
80005046:	e0 81 03 c8 	brne	800057d6 <_vfprintf_r+0x1efe>
8000504a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000504e:	40 fc       	lddsp	r12,sp[0x3c]
80005050:	58 0c       	cp.w	r12,0
80005052:	c1 f0       	breq	80005090 <_vfprintf_r+0x17b8>
80005054:	fa f8 06 90 	ld.w	r8,sp[1680]
80005058:	fa c9 f9 48 	sub	r9,sp,-1720
8000505c:	2f e8       	sub	r8,-2
8000505e:	87 09       	st.w	r3[0x0],r9
80005060:	fb 48 06 90 	st.w	sp[1680],r8
80005064:	30 29       	mov	r9,2
80005066:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000506a:	87 19       	st.w	r3[0x4],r9
8000506c:	2f f8       	sub	r8,-1
8000506e:	fb 48 06 8c 	st.w	sp[1676],r8
80005072:	58 78       	cp.w	r8,7
80005074:	e0 89 00 04 	brgt	8000507c <_vfprintf_r+0x17a4>
80005078:	2f 83       	sub	r3,-8
8000507a:	c0 b8       	rjmp	80005090 <_vfprintf_r+0x17b8>
8000507c:	fa ca f9 78 	sub	r10,sp,-1672
80005080:	02 9b       	mov	r11,r1
80005082:	08 9c       	mov	r12,r4
80005084:	fe b0 f4 1c 	rcall	800038bc <__sprint_r>
80005088:	e0 81 03 a7 	brne	800057d6 <_vfprintf_r+0x1efe>
8000508c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005090:	40 9b       	lddsp	r11,sp[0x24]
80005092:	e0 4b 00 80 	cp.w	r11,128
80005096:	c4 71       	brne	80005124 <_vfprintf_r+0x184c>
80005098:	40 8a       	lddsp	r10,sp[0x20]
8000509a:	40 39       	lddsp	r9,sp[0xc]
8000509c:	12 1a       	sub	r10,r9
8000509e:	50 4a       	stdsp	sp[0x10],r10
800050a0:	58 0a       	cp.w	r10,0
800050a2:	e0 89 00 20 	brgt	800050e2 <_vfprintf_r+0x180a>
800050a6:	c3 f8       	rjmp	80005124 <_vfprintf_r+0x184c>
800050a8:	2f 09       	sub	r9,-16
800050aa:	2f f8       	sub	r8,-1
800050ac:	fe ce bc 24 	sub	lr,pc,-17372
800050b0:	31 0c       	mov	r12,16
800050b2:	fb 49 06 90 	st.w	sp[1680],r9
800050b6:	87 0e       	st.w	r3[0x0],lr
800050b8:	87 1c       	st.w	r3[0x4],r12
800050ba:	fb 48 06 8c 	st.w	sp[1676],r8
800050be:	58 78       	cp.w	r8,7
800050c0:	e0 89 00 04 	brgt	800050c8 <_vfprintf_r+0x17f0>
800050c4:	2f 83       	sub	r3,-8
800050c6:	c0 b8       	rjmp	800050dc <_vfprintf_r+0x1804>
800050c8:	fa ca f9 78 	sub	r10,sp,-1672
800050cc:	02 9b       	mov	r11,r1
800050ce:	08 9c       	mov	r12,r4
800050d0:	fe b0 f3 f6 	rcall	800038bc <__sprint_r>
800050d4:	e0 81 03 81 	brne	800057d6 <_vfprintf_r+0x1efe>
800050d8:	fa c3 f9 e0 	sub	r3,sp,-1568
800050dc:	40 4b       	lddsp	r11,sp[0x10]
800050de:	21 0b       	sub	r11,16
800050e0:	50 4b       	stdsp	sp[0x10],r11
800050e2:	fa f9 06 90 	ld.w	r9,sp[1680]
800050e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800050ea:	fe ca bc 62 	sub	r10,pc,-17310
800050ee:	40 4e       	lddsp	lr,sp[0x10]
800050f0:	59 0e       	cp.w	lr,16
800050f2:	fe 99 ff db 	brgt	800050a8 <_vfprintf_r+0x17d0>
800050f6:	1c 09       	add	r9,lr
800050f8:	2f f8       	sub	r8,-1
800050fa:	87 0a       	st.w	r3[0x0],r10
800050fc:	fb 49 06 90 	st.w	sp[1680],r9
80005100:	87 1e       	st.w	r3[0x4],lr
80005102:	fb 48 06 8c 	st.w	sp[1676],r8
80005106:	58 78       	cp.w	r8,7
80005108:	e0 89 00 04 	brgt	80005110 <_vfprintf_r+0x1838>
8000510c:	2f 83       	sub	r3,-8
8000510e:	c0 b8       	rjmp	80005124 <_vfprintf_r+0x184c>
80005110:	fa ca f9 78 	sub	r10,sp,-1672
80005114:	02 9b       	mov	r11,r1
80005116:	08 9c       	mov	r12,r4
80005118:	fe b0 f3 d2 	rcall	800038bc <__sprint_r>
8000511c:	e0 81 03 5d 	brne	800057d6 <_vfprintf_r+0x1efe>
80005120:	fa c3 f9 e0 	sub	r3,sp,-1568
80005124:	40 2c       	lddsp	r12,sp[0x8]
80005126:	04 1c       	sub	r12,r2
80005128:	50 2c       	stdsp	sp[0x8],r12
8000512a:	58 0c       	cp.w	r12,0
8000512c:	e0 89 00 20 	brgt	8000516c <_vfprintf_r+0x1894>
80005130:	c3 f8       	rjmp	800051ae <_vfprintf_r+0x18d6>
80005132:	2f 09       	sub	r9,-16
80005134:	2f f8       	sub	r8,-1
80005136:	fe cb bc ae 	sub	r11,pc,-17234
8000513a:	31 0a       	mov	r10,16
8000513c:	fb 49 06 90 	st.w	sp[1680],r9
80005140:	87 0b       	st.w	r3[0x0],r11
80005142:	87 1a       	st.w	r3[0x4],r10
80005144:	fb 48 06 8c 	st.w	sp[1676],r8
80005148:	58 78       	cp.w	r8,7
8000514a:	e0 89 00 04 	brgt	80005152 <_vfprintf_r+0x187a>
8000514e:	2f 83       	sub	r3,-8
80005150:	c0 b8       	rjmp	80005166 <_vfprintf_r+0x188e>
80005152:	fa ca f9 78 	sub	r10,sp,-1672
80005156:	02 9b       	mov	r11,r1
80005158:	08 9c       	mov	r12,r4
8000515a:	fe b0 f3 b1 	rcall	800038bc <__sprint_r>
8000515e:	e0 81 03 3c 	brne	800057d6 <_vfprintf_r+0x1efe>
80005162:	fa c3 f9 e0 	sub	r3,sp,-1568
80005166:	40 29       	lddsp	r9,sp[0x8]
80005168:	21 09       	sub	r9,16
8000516a:	50 29       	stdsp	sp[0x8],r9
8000516c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005170:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005174:	fe ca bc ec 	sub	r10,pc,-17172
80005178:	40 2e       	lddsp	lr,sp[0x8]
8000517a:	59 0e       	cp.w	lr,16
8000517c:	fe 99 ff db 	brgt	80005132 <_vfprintf_r+0x185a>
80005180:	1c 09       	add	r9,lr
80005182:	2f f8       	sub	r8,-1
80005184:	87 0a       	st.w	r3[0x0],r10
80005186:	fb 49 06 90 	st.w	sp[1680],r9
8000518a:	87 1e       	st.w	r3[0x4],lr
8000518c:	fb 48 06 8c 	st.w	sp[1676],r8
80005190:	58 78       	cp.w	r8,7
80005192:	e0 89 00 04 	brgt	8000519a <_vfprintf_r+0x18c2>
80005196:	2f 83       	sub	r3,-8
80005198:	c0 b8       	rjmp	800051ae <_vfprintf_r+0x18d6>
8000519a:	fa ca f9 78 	sub	r10,sp,-1672
8000519e:	02 9b       	mov	r11,r1
800051a0:	08 9c       	mov	r12,r4
800051a2:	fe b0 f3 8d 	rcall	800038bc <__sprint_r>
800051a6:	e0 81 03 18 	brne	800057d6 <_vfprintf_r+0x1efe>
800051aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800051ae:	ed b5 00 08 	bld	r5,0x8
800051b2:	c0 b0       	breq	800051c8 <_vfprintf_r+0x18f0>
800051b4:	fa f8 06 90 	ld.w	r8,sp[1680]
800051b8:	87 12       	st.w	r3[0x4],r2
800051ba:	87 06       	st.w	r3[0x0],r6
800051bc:	f0 02 00 02 	add	r2,r8,r2
800051c0:	fb 42 06 90 	st.w	sp[1680],r2
800051c4:	e0 8f 01 d4 	bral	8000556c <_vfprintf_r+0x1c94>
800051c8:	e0 40 00 65 	cp.w	r0,101
800051cc:	e0 8a 01 d6 	brle	80005578 <_vfprintf_r+0x1ca0>
800051d0:	30 08       	mov	r8,0
800051d2:	30 09       	mov	r9,0
800051d4:	40 5b       	lddsp	r11,sp[0x14]
800051d6:	40 7a       	lddsp	r10,sp[0x1c]
800051d8:	e0 a0 19 53 	rcall	8000847e <__avr32_f64_cmp_eq>
800051dc:	c7 90       	breq	800052ce <_vfprintf_r+0x19f6>
800051de:	fa f8 06 90 	ld.w	r8,sp[1680]
800051e2:	fe c9 bd 6e 	sub	r9,pc,-17042
800051e6:	2f f8       	sub	r8,-1
800051e8:	87 09       	st.w	r3[0x0],r9
800051ea:	fb 48 06 90 	st.w	sp[1680],r8
800051ee:	30 19       	mov	r9,1
800051f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051f4:	87 19       	st.w	r3[0x4],r9
800051f6:	2f f8       	sub	r8,-1
800051f8:	fb 48 06 8c 	st.w	sp[1676],r8
800051fc:	58 78       	cp.w	r8,7
800051fe:	e0 89 00 05 	brgt	80005208 <_vfprintf_r+0x1930>
80005202:	2f 83       	sub	r3,-8
80005204:	c0 c8       	rjmp	8000521c <_vfprintf_r+0x1944>
80005206:	d7 03       	nop
80005208:	fa ca f9 78 	sub	r10,sp,-1672
8000520c:	02 9b       	mov	r11,r1
8000520e:	08 9c       	mov	r12,r4
80005210:	fe b0 f3 56 	rcall	800038bc <__sprint_r>
80005214:	e0 81 02 e1 	brne	800057d6 <_vfprintf_r+0x1efe>
80005218:	fa c3 f9 e0 	sub	r3,sp,-1568
8000521c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005220:	40 6c       	lddsp	r12,sp[0x18]
80005222:	18 38       	cp.w	r8,r12
80005224:	c0 55       	brlt	8000522e <_vfprintf_r+0x1956>
80005226:	ed b5 00 00 	bld	r5,0x0
8000522a:	e0 81 02 6b 	brne	80005700 <_vfprintf_r+0x1e28>
8000522e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005232:	2f f8       	sub	r8,-1
80005234:	40 cb       	lddsp	r11,sp[0x30]
80005236:	fb 48 06 90 	st.w	sp[1680],r8
8000523a:	30 19       	mov	r9,1
8000523c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005240:	87 0b       	st.w	r3[0x0],r11
80005242:	2f f8       	sub	r8,-1
80005244:	87 19       	st.w	r3[0x4],r9
80005246:	fb 48 06 8c 	st.w	sp[1676],r8
8000524a:	58 78       	cp.w	r8,7
8000524c:	e0 89 00 04 	brgt	80005254 <_vfprintf_r+0x197c>
80005250:	2f 83       	sub	r3,-8
80005252:	c0 b8       	rjmp	80005268 <_vfprintf_r+0x1990>
80005254:	fa ca f9 78 	sub	r10,sp,-1672
80005258:	02 9b       	mov	r11,r1
8000525a:	08 9c       	mov	r12,r4
8000525c:	fe b0 f3 30 	rcall	800038bc <__sprint_r>
80005260:	e0 81 02 bb 	brne	800057d6 <_vfprintf_r+0x1efe>
80005264:	fa c3 f9 e0 	sub	r3,sp,-1568
80005268:	40 66       	lddsp	r6,sp[0x18]
8000526a:	20 16       	sub	r6,1
8000526c:	58 06       	cp.w	r6,0
8000526e:	e0 89 00 1d 	brgt	800052a8 <_vfprintf_r+0x19d0>
80005272:	e0 8f 02 47 	bral	80005700 <_vfprintf_r+0x1e28>
80005276:	2f 09       	sub	r9,-16
80005278:	2f f8       	sub	r8,-1
8000527a:	fb 49 06 90 	st.w	sp[1680],r9
8000527e:	87 02       	st.w	r3[0x0],r2
80005280:	87 10       	st.w	r3[0x4],r0
80005282:	fb 48 06 8c 	st.w	sp[1676],r8
80005286:	58 78       	cp.w	r8,7
80005288:	e0 89 00 04 	brgt	80005290 <_vfprintf_r+0x19b8>
8000528c:	2f 83       	sub	r3,-8
8000528e:	c0 b8       	rjmp	800052a4 <_vfprintf_r+0x19cc>
80005290:	fa ca f9 78 	sub	r10,sp,-1672
80005294:	02 9b       	mov	r11,r1
80005296:	08 9c       	mov	r12,r4
80005298:	fe b0 f3 12 	rcall	800038bc <__sprint_r>
8000529c:	e0 81 02 9d 	brne	800057d6 <_vfprintf_r+0x1efe>
800052a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800052a4:	21 06       	sub	r6,16
800052a6:	c0 48       	rjmp	800052ae <_vfprintf_r+0x19d6>
800052a8:	fe c2 be 20 	sub	r2,pc,-16864
800052ac:	31 00       	mov	r0,16
800052ae:	fa f9 06 90 	ld.w	r9,sp[1680]
800052b2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052b6:	fe ca be 2e 	sub	r10,pc,-16850
800052ba:	59 06       	cp.w	r6,16
800052bc:	fe 99 ff dd 	brgt	80005276 <_vfprintf_r+0x199e>
800052c0:	0c 09       	add	r9,r6
800052c2:	87 0a       	st.w	r3[0x0],r10
800052c4:	fb 49 06 90 	st.w	sp[1680],r9
800052c8:	2f f8       	sub	r8,-1
800052ca:	87 16       	st.w	r3[0x4],r6
800052cc:	c5 39       	rjmp	80005572 <_vfprintf_r+0x1c9a>
800052ce:	fa fa 06 ac 	ld.w	r10,sp[1708]
800052d2:	58 0a       	cp.w	r10,0
800052d4:	e0 89 00 92 	brgt	800053f8 <_vfprintf_r+0x1b20>
800052d8:	fa f8 06 90 	ld.w	r8,sp[1680]
800052dc:	fe c9 be 68 	sub	r9,pc,-16792
800052e0:	2f f8       	sub	r8,-1
800052e2:	87 09       	st.w	r3[0x0],r9
800052e4:	fb 48 06 90 	st.w	sp[1680],r8
800052e8:	30 19       	mov	r9,1
800052ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052ee:	87 19       	st.w	r3[0x4],r9
800052f0:	2f f8       	sub	r8,-1
800052f2:	fb 48 06 8c 	st.w	sp[1676],r8
800052f6:	58 78       	cp.w	r8,7
800052f8:	e0 89 00 04 	brgt	80005300 <_vfprintf_r+0x1a28>
800052fc:	2f 83       	sub	r3,-8
800052fe:	c0 b8       	rjmp	80005314 <_vfprintf_r+0x1a3c>
80005300:	fa ca f9 78 	sub	r10,sp,-1672
80005304:	02 9b       	mov	r11,r1
80005306:	08 9c       	mov	r12,r4
80005308:	fe b0 f2 da 	rcall	800038bc <__sprint_r>
8000530c:	e0 81 02 65 	brne	800057d6 <_vfprintf_r+0x1efe>
80005310:	fa c3 f9 e0 	sub	r3,sp,-1568
80005314:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005318:	58 08       	cp.w	r8,0
8000531a:	c0 81       	brne	8000532a <_vfprintf_r+0x1a52>
8000531c:	40 6a       	lddsp	r10,sp[0x18]
8000531e:	58 0a       	cp.w	r10,0
80005320:	c0 51       	brne	8000532a <_vfprintf_r+0x1a52>
80005322:	ed b5 00 00 	bld	r5,0x0
80005326:	e0 81 01 ed 	brne	80005700 <_vfprintf_r+0x1e28>
8000532a:	40 c9       	lddsp	r9,sp[0x30]
8000532c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005330:	2f f8       	sub	r8,-1
80005332:	87 09       	st.w	r3[0x0],r9
80005334:	fb 48 06 90 	st.w	sp[1680],r8
80005338:	30 19       	mov	r9,1
8000533a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000533e:	87 19       	st.w	r3[0x4],r9
80005340:	2f f8       	sub	r8,-1
80005342:	fb 48 06 8c 	st.w	sp[1676],r8
80005346:	58 78       	cp.w	r8,7
80005348:	e0 89 00 04 	brgt	80005350 <_vfprintf_r+0x1a78>
8000534c:	2f 83       	sub	r3,-8
8000534e:	c0 b8       	rjmp	80005364 <_vfprintf_r+0x1a8c>
80005350:	fa ca f9 78 	sub	r10,sp,-1672
80005354:	02 9b       	mov	r11,r1
80005356:	08 9c       	mov	r12,r4
80005358:	fe b0 f2 b2 	rcall	800038bc <__sprint_r>
8000535c:	e0 81 02 3d 	brne	800057d6 <_vfprintf_r+0x1efe>
80005360:	fa c3 f9 e0 	sub	r3,sp,-1568
80005364:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005368:	5c 32       	neg	r2
8000536a:	58 02       	cp.w	r2,0
8000536c:	e0 89 00 1d 	brgt	800053a6 <_vfprintf_r+0x1ace>
80005370:	c3 d8       	rjmp	800053ea <_vfprintf_r+0x1b12>
80005372:	2f 09       	sub	r9,-16
80005374:	2f f8       	sub	r8,-1
80005376:	31 0e       	mov	lr,16
80005378:	fb 49 06 90 	st.w	sp[1680],r9
8000537c:	87 00       	st.w	r3[0x0],r0
8000537e:	87 1e       	st.w	r3[0x4],lr
80005380:	fb 48 06 8c 	st.w	sp[1676],r8
80005384:	58 78       	cp.w	r8,7
80005386:	e0 89 00 04 	brgt	8000538e <_vfprintf_r+0x1ab6>
8000538a:	2f 83       	sub	r3,-8
8000538c:	c0 b8       	rjmp	800053a2 <_vfprintf_r+0x1aca>
8000538e:	fa ca f9 78 	sub	r10,sp,-1672
80005392:	02 9b       	mov	r11,r1
80005394:	08 9c       	mov	r12,r4
80005396:	fe b0 f2 93 	rcall	800038bc <__sprint_r>
8000539a:	e0 81 02 1e 	brne	800057d6 <_vfprintf_r+0x1efe>
8000539e:	fa c3 f9 e0 	sub	r3,sp,-1568
800053a2:	21 02       	sub	r2,16
800053a4:	c0 38       	rjmp	800053aa <_vfprintf_r+0x1ad2>
800053a6:	fe c0 bf 1e 	sub	r0,pc,-16610
800053aa:	fa f9 06 90 	ld.w	r9,sp[1680]
800053ae:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053b2:	fe ca bf 2a 	sub	r10,pc,-16598
800053b6:	59 02       	cp.w	r2,16
800053b8:	fe 99 ff dd 	brgt	80005372 <_vfprintf_r+0x1a9a>
800053bc:	04 09       	add	r9,r2
800053be:	2f f8       	sub	r8,-1
800053c0:	87 0a       	st.w	r3[0x0],r10
800053c2:	fb 49 06 90 	st.w	sp[1680],r9
800053c6:	87 12       	st.w	r3[0x4],r2
800053c8:	fb 48 06 8c 	st.w	sp[1676],r8
800053cc:	58 78       	cp.w	r8,7
800053ce:	e0 89 00 04 	brgt	800053d6 <_vfprintf_r+0x1afe>
800053d2:	2f 83       	sub	r3,-8
800053d4:	c0 b8       	rjmp	800053ea <_vfprintf_r+0x1b12>
800053d6:	fa ca f9 78 	sub	r10,sp,-1672
800053da:	02 9b       	mov	r11,r1
800053dc:	08 9c       	mov	r12,r4
800053de:	fe b0 f2 6f 	rcall	800038bc <__sprint_r>
800053e2:	e0 81 01 fa 	brne	800057d6 <_vfprintf_r+0x1efe>
800053e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800053ea:	40 6c       	lddsp	r12,sp[0x18]
800053ec:	fa f8 06 90 	ld.w	r8,sp[1680]
800053f0:	87 06       	st.w	r3[0x0],r6
800053f2:	87 1c       	st.w	r3[0x4],r12
800053f4:	18 08       	add	r8,r12
800053f6:	cb 98       	rjmp	80005568 <_vfprintf_r+0x1c90>
800053f8:	fa f9 06 90 	ld.w	r9,sp[1680]
800053fc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005400:	40 6b       	lddsp	r11,sp[0x18]
80005402:	16 3a       	cp.w	r10,r11
80005404:	c6 f5       	brlt	800054e2 <_vfprintf_r+0x1c0a>
80005406:	16 09       	add	r9,r11
80005408:	2f f8       	sub	r8,-1
8000540a:	87 06       	st.w	r3[0x0],r6
8000540c:	fb 49 06 90 	st.w	sp[1680],r9
80005410:	87 1b       	st.w	r3[0x4],r11
80005412:	fb 48 06 8c 	st.w	sp[1676],r8
80005416:	58 78       	cp.w	r8,7
80005418:	e0 89 00 04 	brgt	80005420 <_vfprintf_r+0x1b48>
8000541c:	2f 83       	sub	r3,-8
8000541e:	c0 b8       	rjmp	80005434 <_vfprintf_r+0x1b5c>
80005420:	fa ca f9 78 	sub	r10,sp,-1672
80005424:	02 9b       	mov	r11,r1
80005426:	08 9c       	mov	r12,r4
80005428:	fe b0 f2 4a 	rcall	800038bc <__sprint_r>
8000542c:	e0 81 01 d5 	brne	800057d6 <_vfprintf_r+0x1efe>
80005430:	fa c3 f9 e0 	sub	r3,sp,-1568
80005434:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005438:	40 6a       	lddsp	r10,sp[0x18]
8000543a:	14 16       	sub	r6,r10
8000543c:	58 06       	cp.w	r6,0
8000543e:	e0 89 00 1c 	brgt	80005476 <_vfprintf_r+0x1b9e>
80005442:	c3 d8       	rjmp	800054bc <_vfprintf_r+0x1be4>
80005444:	2f 09       	sub	r9,-16
80005446:	2f f8       	sub	r8,-1
80005448:	fb 49 06 90 	st.w	sp[1680],r9
8000544c:	87 02       	st.w	r3[0x0],r2
8000544e:	87 10       	st.w	r3[0x4],r0
80005450:	fb 48 06 8c 	st.w	sp[1676],r8
80005454:	58 78       	cp.w	r8,7
80005456:	e0 89 00 04 	brgt	8000545e <_vfprintf_r+0x1b86>
8000545a:	2f 83       	sub	r3,-8
8000545c:	c0 b8       	rjmp	80005472 <_vfprintf_r+0x1b9a>
8000545e:	fa ca f9 78 	sub	r10,sp,-1672
80005462:	02 9b       	mov	r11,r1
80005464:	08 9c       	mov	r12,r4
80005466:	fe b0 f2 2b 	rcall	800038bc <__sprint_r>
8000546a:	e0 81 01 b6 	brne	800057d6 <_vfprintf_r+0x1efe>
8000546e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005472:	21 06       	sub	r6,16
80005474:	c0 48       	rjmp	8000547c <_vfprintf_r+0x1ba4>
80005476:	fe c2 bf ee 	sub	r2,pc,-16402
8000547a:	31 00       	mov	r0,16
8000547c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005480:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005484:	fe ca bf fc 	sub	r10,pc,-16388
80005488:	59 06       	cp.w	r6,16
8000548a:	fe 99 ff dd 	brgt	80005444 <_vfprintf_r+0x1b6c>
8000548e:	0c 09       	add	r9,r6
80005490:	2f f8       	sub	r8,-1
80005492:	87 0a       	st.w	r3[0x0],r10
80005494:	fb 49 06 90 	st.w	sp[1680],r9
80005498:	87 16       	st.w	r3[0x4],r6
8000549a:	fb 48 06 8c 	st.w	sp[1676],r8
8000549e:	58 78       	cp.w	r8,7
800054a0:	e0 89 00 04 	brgt	800054a8 <_vfprintf_r+0x1bd0>
800054a4:	2f 83       	sub	r3,-8
800054a6:	c0 b8       	rjmp	800054bc <_vfprintf_r+0x1be4>
800054a8:	fa ca f9 78 	sub	r10,sp,-1672
800054ac:	02 9b       	mov	r11,r1
800054ae:	08 9c       	mov	r12,r4
800054b0:	fe b0 f2 06 	rcall	800038bc <__sprint_r>
800054b4:	e0 81 01 91 	brne	800057d6 <_vfprintf_r+0x1efe>
800054b8:	fa c3 f9 e0 	sub	r3,sp,-1568
800054bc:	ed b5 00 00 	bld	r5,0x0
800054c0:	e0 81 01 20 	brne	80005700 <_vfprintf_r+0x1e28>
800054c4:	40 c9       	lddsp	r9,sp[0x30]
800054c6:	fa f8 06 90 	ld.w	r8,sp[1680]
800054ca:	2f f8       	sub	r8,-1
800054cc:	87 09       	st.w	r3[0x0],r9
800054ce:	fb 48 06 90 	st.w	sp[1680],r8
800054d2:	30 19       	mov	r9,1
800054d4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054d8:	87 19       	st.w	r3[0x4],r9
800054da:	2f f8       	sub	r8,-1
800054dc:	fb 48 06 8c 	st.w	sp[1676],r8
800054e0:	c0 29       	rjmp	800056e4 <_vfprintf_r+0x1e0c>
800054e2:	14 09       	add	r9,r10
800054e4:	2f f8       	sub	r8,-1
800054e6:	fb 49 06 90 	st.w	sp[1680],r9
800054ea:	87 06       	st.w	r3[0x0],r6
800054ec:	87 1a       	st.w	r3[0x4],r10
800054ee:	fb 48 06 8c 	st.w	sp[1676],r8
800054f2:	58 78       	cp.w	r8,7
800054f4:	e0 89 00 04 	brgt	800054fc <_vfprintf_r+0x1c24>
800054f8:	2f 83       	sub	r3,-8
800054fa:	c0 b8       	rjmp	80005510 <_vfprintf_r+0x1c38>
800054fc:	fa ca f9 78 	sub	r10,sp,-1672
80005500:	02 9b       	mov	r11,r1
80005502:	08 9c       	mov	r12,r4
80005504:	fe b0 f1 dc 	rcall	800038bc <__sprint_r>
80005508:	e0 81 01 67 	brne	800057d6 <_vfprintf_r+0x1efe>
8000550c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005510:	40 c8       	lddsp	r8,sp[0x30]
80005512:	87 08       	st.w	r3[0x0],r8
80005514:	fa f8 06 90 	ld.w	r8,sp[1680]
80005518:	2f f8       	sub	r8,-1
8000551a:	30 19       	mov	r9,1
8000551c:	fb 48 06 90 	st.w	sp[1680],r8
80005520:	87 19       	st.w	r3[0x4],r9
80005522:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005526:	2f f8       	sub	r8,-1
80005528:	fb 48 06 8c 	st.w	sp[1676],r8
8000552c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005530:	58 78       	cp.w	r8,7
80005532:	e0 89 00 04 	brgt	8000553a <_vfprintf_r+0x1c62>
80005536:	2f 83       	sub	r3,-8
80005538:	c0 b8       	rjmp	8000554e <_vfprintf_r+0x1c76>
8000553a:	fa ca f9 78 	sub	r10,sp,-1672
8000553e:	02 9b       	mov	r11,r1
80005540:	08 9c       	mov	r12,r4
80005542:	fe b0 f1 bd 	rcall	800038bc <__sprint_r>
80005546:	e0 81 01 48 	brne	800057d6 <_vfprintf_r+0x1efe>
8000554a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000554e:	04 06       	add	r6,r2
80005550:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005554:	87 06       	st.w	r3[0x0],r6
80005556:	fa f9 06 90 	ld.w	r9,sp[1680]
8000555a:	40 66       	lddsp	r6,sp[0x18]
8000555c:	40 6e       	lddsp	lr,sp[0x18]
8000555e:	10 16       	sub	r6,r8
80005560:	f2 08 01 08 	sub	r8,r9,r8
80005564:	87 16       	st.w	r3[0x4],r6
80005566:	1c 08       	add	r8,lr
80005568:	fb 48 06 90 	st.w	sp[1680],r8
8000556c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005570:	2f f8       	sub	r8,-1
80005572:	fb 48 06 8c 	st.w	sp[1676],r8
80005576:	cb 78       	rjmp	800056e4 <_vfprintf_r+0x1e0c>
80005578:	40 6c       	lddsp	r12,sp[0x18]
8000557a:	58 1c       	cp.w	r12,1
8000557c:	e0 89 00 06 	brgt	80005588 <_vfprintf_r+0x1cb0>
80005580:	ed b5 00 00 	bld	r5,0x0
80005584:	e0 81 00 85 	brne	8000568e <_vfprintf_r+0x1db6>
80005588:	fa f8 06 90 	ld.w	r8,sp[1680]
8000558c:	2f f8       	sub	r8,-1
8000558e:	30 19       	mov	r9,1
80005590:	fb 48 06 90 	st.w	sp[1680],r8
80005594:	87 06       	st.w	r3[0x0],r6
80005596:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000559a:	87 19       	st.w	r3[0x4],r9
8000559c:	2f f8       	sub	r8,-1
8000559e:	fb 48 06 8c 	st.w	sp[1676],r8
800055a2:	58 78       	cp.w	r8,7
800055a4:	e0 89 00 04 	brgt	800055ac <_vfprintf_r+0x1cd4>
800055a8:	2f 83       	sub	r3,-8
800055aa:	c0 b8       	rjmp	800055c0 <_vfprintf_r+0x1ce8>
800055ac:	fa ca f9 78 	sub	r10,sp,-1672
800055b0:	02 9b       	mov	r11,r1
800055b2:	08 9c       	mov	r12,r4
800055b4:	fe b0 f1 84 	rcall	800038bc <__sprint_r>
800055b8:	e0 81 01 0f 	brne	800057d6 <_vfprintf_r+0x1efe>
800055bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800055c0:	fa f8 06 90 	ld.w	r8,sp[1680]
800055c4:	2f f8       	sub	r8,-1
800055c6:	40 cb       	lddsp	r11,sp[0x30]
800055c8:	fb 48 06 90 	st.w	sp[1680],r8
800055cc:	30 19       	mov	r9,1
800055ce:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055d2:	87 0b       	st.w	r3[0x0],r11
800055d4:	2f f8       	sub	r8,-1
800055d6:	87 19       	st.w	r3[0x4],r9
800055d8:	fb 48 06 8c 	st.w	sp[1676],r8
800055dc:	58 78       	cp.w	r8,7
800055de:	e0 89 00 05 	brgt	800055e8 <_vfprintf_r+0x1d10>
800055e2:	2f 83       	sub	r3,-8
800055e4:	c0 c8       	rjmp	800055fc <_vfprintf_r+0x1d24>
800055e6:	d7 03       	nop
800055e8:	fa ca f9 78 	sub	r10,sp,-1672
800055ec:	02 9b       	mov	r11,r1
800055ee:	08 9c       	mov	r12,r4
800055f0:	fe b0 f1 66 	rcall	800038bc <__sprint_r>
800055f4:	e0 81 00 f1 	brne	800057d6 <_vfprintf_r+0x1efe>
800055f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800055fc:	30 08       	mov	r8,0
800055fe:	30 09       	mov	r9,0
80005600:	40 5b       	lddsp	r11,sp[0x14]
80005602:	40 7a       	lddsp	r10,sp[0x1c]
80005604:	e0 a0 17 3d 	rcall	8000847e <__avr32_f64_cmp_eq>
80005608:	40 68       	lddsp	r8,sp[0x18]
8000560a:	20 18       	sub	r8,1
8000560c:	58 0c       	cp.w	r12,0
8000560e:	c0 d1       	brne	80005628 <_vfprintf_r+0x1d50>
80005610:	2f f6       	sub	r6,-1
80005612:	87 18       	st.w	r3[0x4],r8
80005614:	87 06       	st.w	r3[0x0],r6
80005616:	fa f6 06 90 	ld.w	r6,sp[1680]
8000561a:	10 06       	add	r6,r8
8000561c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005620:	fb 46 06 90 	st.w	sp[1680],r6
80005624:	2f f8       	sub	r8,-1
80005626:	c3 18       	rjmp	80005688 <_vfprintf_r+0x1db0>
80005628:	10 96       	mov	r6,r8
8000562a:	58 08       	cp.w	r8,0
8000562c:	e0 89 00 1c 	brgt	80005664 <_vfprintf_r+0x1d8c>
80005630:	c4 b8       	rjmp	800056c6 <_vfprintf_r+0x1dee>
80005632:	2f 09       	sub	r9,-16
80005634:	2f f8       	sub	r8,-1
80005636:	fb 49 06 90 	st.w	sp[1680],r9
8000563a:	87 02       	st.w	r3[0x0],r2
8000563c:	87 10       	st.w	r3[0x4],r0
8000563e:	fb 48 06 8c 	st.w	sp[1676],r8
80005642:	58 78       	cp.w	r8,7
80005644:	e0 89 00 04 	brgt	8000564c <_vfprintf_r+0x1d74>
80005648:	2f 83       	sub	r3,-8
8000564a:	c0 b8       	rjmp	80005660 <_vfprintf_r+0x1d88>
8000564c:	fa ca f9 78 	sub	r10,sp,-1672
80005650:	02 9b       	mov	r11,r1
80005652:	08 9c       	mov	r12,r4
80005654:	fe b0 f1 34 	rcall	800038bc <__sprint_r>
80005658:	e0 81 00 bf 	brne	800057d6 <_vfprintf_r+0x1efe>
8000565c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005660:	21 06       	sub	r6,16
80005662:	c0 48       	rjmp	8000566a <_vfprintf_r+0x1d92>
80005664:	fe c2 c1 dc 	sub	r2,pc,-15908
80005668:	31 00       	mov	r0,16
8000566a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000566e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005672:	fe ca c1 ea 	sub	r10,pc,-15894
80005676:	59 06       	cp.w	r6,16
80005678:	fe 99 ff dd 	brgt	80005632 <_vfprintf_r+0x1d5a>
8000567c:	0c 09       	add	r9,r6
8000567e:	87 0a       	st.w	r3[0x0],r10
80005680:	fb 49 06 90 	st.w	sp[1680],r9
80005684:	2f f8       	sub	r8,-1
80005686:	87 16       	st.w	r3[0x4],r6
80005688:	fb 48 06 8c 	st.w	sp[1676],r8
8000568c:	c0 e8       	rjmp	800056a8 <_vfprintf_r+0x1dd0>
8000568e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005692:	2f f8       	sub	r8,-1
80005694:	30 19       	mov	r9,1
80005696:	fb 48 06 90 	st.w	sp[1680],r8
8000569a:	87 06       	st.w	r3[0x0],r6
8000569c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056a0:	87 19       	st.w	r3[0x4],r9
800056a2:	2f f8       	sub	r8,-1
800056a4:	fb 48 06 8c 	st.w	sp[1676],r8
800056a8:	58 78       	cp.w	r8,7
800056aa:	e0 89 00 04 	brgt	800056b2 <_vfprintf_r+0x1dda>
800056ae:	2f 83       	sub	r3,-8
800056b0:	c0 b8       	rjmp	800056c6 <_vfprintf_r+0x1dee>
800056b2:	fa ca f9 78 	sub	r10,sp,-1672
800056b6:	02 9b       	mov	r11,r1
800056b8:	08 9c       	mov	r12,r4
800056ba:	fe b0 f1 01 	rcall	800038bc <__sprint_r>
800056be:	e0 81 00 8c 	brne	800057d6 <_vfprintf_r+0x1efe>
800056c2:	fa c3 f9 e0 	sub	r3,sp,-1568
800056c6:	40 ea       	lddsp	r10,sp[0x38]
800056c8:	fa f8 06 90 	ld.w	r8,sp[1680]
800056cc:	14 08       	add	r8,r10
800056ce:	fa c9 f9 64 	sub	r9,sp,-1692
800056d2:	fb 48 06 90 	st.w	sp[1680],r8
800056d6:	87 1a       	st.w	r3[0x4],r10
800056d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056dc:	87 09       	st.w	r3[0x0],r9
800056de:	2f f8       	sub	r8,-1
800056e0:	fb 48 06 8c 	st.w	sp[1676],r8
800056e4:	58 78       	cp.w	r8,7
800056e6:	e0 89 00 04 	brgt	800056ee <_vfprintf_r+0x1e16>
800056ea:	2f 83       	sub	r3,-8
800056ec:	c0 a8       	rjmp	80005700 <_vfprintf_r+0x1e28>
800056ee:	fa ca f9 78 	sub	r10,sp,-1672
800056f2:	02 9b       	mov	r11,r1
800056f4:	08 9c       	mov	r12,r4
800056f6:	fe b0 f0 e3 	rcall	800038bc <__sprint_r>
800056fa:	c6 e1       	brne	800057d6 <_vfprintf_r+0x1efe>
800056fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005700:	e2 15 00 04 	andl	r5,0x4,COH
80005704:	c3 f0       	breq	80005782 <_vfprintf_r+0x1eaa>
80005706:	40 86       	lddsp	r6,sp[0x20]
80005708:	40 39       	lddsp	r9,sp[0xc]
8000570a:	12 16       	sub	r6,r9
8000570c:	58 06       	cp.w	r6,0
8000570e:	e0 89 00 1a 	brgt	80005742 <_vfprintf_r+0x1e6a>
80005712:	c3 88       	rjmp	80005782 <_vfprintf_r+0x1eaa>
80005714:	2f 09       	sub	r9,-16
80005716:	2f f8       	sub	r8,-1
80005718:	fb 49 06 90 	st.w	sp[1680],r9
8000571c:	87 05       	st.w	r3[0x0],r5
8000571e:	87 12       	st.w	r3[0x4],r2
80005720:	fb 48 06 8c 	st.w	sp[1676],r8
80005724:	58 78       	cp.w	r8,7
80005726:	e0 89 00 04 	brgt	8000572e <_vfprintf_r+0x1e56>
8000572a:	2f 83       	sub	r3,-8
8000572c:	c0 98       	rjmp	8000573e <_vfprintf_r+0x1e66>
8000572e:	00 9a       	mov	r10,r0
80005730:	02 9b       	mov	r11,r1
80005732:	08 9c       	mov	r12,r4
80005734:	fe b0 f0 c4 	rcall	800038bc <__sprint_r>
80005738:	c4 f1       	brne	800057d6 <_vfprintf_r+0x1efe>
8000573a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000573e:	21 06       	sub	r6,16
80005740:	c0 68       	rjmp	8000574c <_vfprintf_r+0x1e74>
80005742:	fe c5 c2 ca 	sub	r5,pc,-15670
80005746:	31 02       	mov	r2,16
80005748:	fa c0 f9 78 	sub	r0,sp,-1672
8000574c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005750:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005754:	fe ca c2 dc 	sub	r10,pc,-15652
80005758:	59 06       	cp.w	r6,16
8000575a:	fe 99 ff dd 	brgt	80005714 <_vfprintf_r+0x1e3c>
8000575e:	0c 09       	add	r9,r6
80005760:	2f f8       	sub	r8,-1
80005762:	87 0a       	st.w	r3[0x0],r10
80005764:	87 16       	st.w	r3[0x4],r6
80005766:	fb 49 06 90 	st.w	sp[1680],r9
8000576a:	fb 48 06 8c 	st.w	sp[1676],r8
8000576e:	58 78       	cp.w	r8,7
80005770:	e0 8a 00 09 	brle	80005782 <_vfprintf_r+0x1eaa>
80005774:	fa ca f9 78 	sub	r10,sp,-1672
80005778:	02 9b       	mov	r11,r1
8000577a:	08 9c       	mov	r12,r4
8000577c:	fe b0 f0 a0 	rcall	800038bc <__sprint_r>
80005780:	c2 b1       	brne	800057d6 <_vfprintf_r+0x1efe>
80005782:	40 bc       	lddsp	r12,sp[0x2c]
80005784:	40 36       	lddsp	r6,sp[0xc]
80005786:	40 8e       	lddsp	lr,sp[0x20]
80005788:	ec 0e 0c 48 	max	r8,r6,lr
8000578c:	10 0c       	add	r12,r8
8000578e:	50 bc       	stdsp	sp[0x2c],r12
80005790:	fa f8 06 90 	ld.w	r8,sp[1680]
80005794:	58 08       	cp.w	r8,0
80005796:	c0 80       	breq	800057a6 <_vfprintf_r+0x1ece>
80005798:	fa ca f9 78 	sub	r10,sp,-1672
8000579c:	02 9b       	mov	r11,r1
8000579e:	08 9c       	mov	r12,r4
800057a0:	fe b0 f0 8e 	rcall	800038bc <__sprint_r>
800057a4:	c1 91       	brne	800057d6 <_vfprintf_r+0x1efe>
800057a6:	30 0b       	mov	r11,0
800057a8:	fa c3 f9 e0 	sub	r3,sp,-1568
800057ac:	fb 4b 06 8c 	st.w	sp[1676],r11
800057b0:	fe 9f f1 22 	bral	800039f4 <_vfprintf_r+0x11c>
800057b4:	08 95       	mov	r5,r4
800057b6:	fa f8 06 90 	ld.w	r8,sp[1680]
800057ba:	58 08       	cp.w	r8,0
800057bc:	c0 80       	breq	800057cc <_vfprintf_r+0x1ef4>
800057be:	08 9c       	mov	r12,r4
800057c0:	fa ca f9 78 	sub	r10,sp,-1672
800057c4:	02 9b       	mov	r11,r1
800057c6:	fe b0 f0 7b 	rcall	800038bc <__sprint_r>
800057ca:	c0 61       	brne	800057d6 <_vfprintf_r+0x1efe>
800057cc:	30 08       	mov	r8,0
800057ce:	fb 48 06 8c 	st.w	sp[1676],r8
800057d2:	c0 28       	rjmp	800057d6 <_vfprintf_r+0x1efe>
800057d4:	40 41       	lddsp	r1,sp[0x10]
800057d6:	82 68       	ld.sh	r8,r1[0xc]
800057d8:	ed b8 00 06 	bld	r8,0x6
800057dc:	c0 31       	brne	800057e2 <_vfprintf_r+0x1f0a>
800057de:	3f fa       	mov	r10,-1
800057e0:	50 ba       	stdsp	sp[0x2c],r10
800057e2:	40 bc       	lddsp	r12,sp[0x2c]
800057e4:	fe 3d f9 44 	sub	sp,-1724
800057e8:	d8 32       	popm	r0-r7,pc
800057ea:	d7 03       	nop

800057ec <__swsetup_r>:
800057ec:	d4 21       	pushm	r4-r7,lr
800057ee:	e0 68 01 00 	mov	r8,256
800057f2:	18 96       	mov	r6,r12
800057f4:	16 97       	mov	r7,r11
800057f6:	70 0c       	ld.w	r12,r8[0x0]
800057f8:	58 0c       	cp.w	r12,0
800057fa:	c0 60       	breq	80005806 <__swsetup_r+0x1a>
800057fc:	78 68       	ld.w	r8,r12[0x18]
800057fe:	58 08       	cp.w	r8,0
80005800:	c0 31       	brne	80005806 <__swsetup_r+0x1a>
80005802:	e0 a0 07 b9 	rcall	80006774 <__sinit>
80005806:	fe c8 c2 5e 	sub	r8,pc,-15778
8000580a:	10 37       	cp.w	r7,r8
8000580c:	c0 61       	brne	80005818 <__swsetup_r+0x2c>
8000580e:	e0 68 01 00 	mov	r8,256
80005812:	70 08       	ld.w	r8,r8[0x0]
80005814:	70 07       	ld.w	r7,r8[0x0]
80005816:	c1 28       	rjmp	8000583a <__swsetup_r+0x4e>
80005818:	fe c8 c2 50 	sub	r8,pc,-15792
8000581c:	10 37       	cp.w	r7,r8
8000581e:	c0 61       	brne	8000582a <__swsetup_r+0x3e>
80005820:	e0 68 01 00 	mov	r8,256
80005824:	70 08       	ld.w	r8,r8[0x0]
80005826:	70 17       	ld.w	r7,r8[0x4]
80005828:	c0 98       	rjmp	8000583a <__swsetup_r+0x4e>
8000582a:	fe c8 c2 42 	sub	r8,pc,-15806
8000582e:	10 37       	cp.w	r7,r8
80005830:	c0 51       	brne	8000583a <__swsetup_r+0x4e>
80005832:	e0 68 01 00 	mov	r8,256
80005836:	70 08       	ld.w	r8,r8[0x0]
80005838:	70 27       	ld.w	r7,r8[0x8]
8000583a:	8e 68       	ld.sh	r8,r7[0xc]
8000583c:	ed b8 00 03 	bld	r8,0x3
80005840:	c1 e0       	breq	8000587c <__swsetup_r+0x90>
80005842:	ed b8 00 04 	bld	r8,0x4
80005846:	c3 e1       	brne	800058c2 <__swsetup_r+0xd6>
80005848:	ed b8 00 02 	bld	r8,0x2
8000584c:	c1 51       	brne	80005876 <__swsetup_r+0x8a>
8000584e:	6e db       	ld.w	r11,r7[0x34]
80005850:	58 0b       	cp.w	r11,0
80005852:	c0 a0       	breq	80005866 <__swsetup_r+0x7a>
80005854:	ee c8 ff bc 	sub	r8,r7,-68
80005858:	10 3b       	cp.w	r11,r8
8000585a:	c0 40       	breq	80005862 <__swsetup_r+0x76>
8000585c:	0c 9c       	mov	r12,r6
8000585e:	e0 a0 08 25 	rcall	800068a8 <_free_r>
80005862:	30 08       	mov	r8,0
80005864:	8f d8       	st.w	r7[0x34],r8
80005866:	8e 68       	ld.sh	r8,r7[0xc]
80005868:	e0 18 ff db 	andl	r8,0xffdb
8000586c:	ae 68       	st.h	r7[0xc],r8
8000586e:	30 08       	mov	r8,0
80005870:	8f 18       	st.w	r7[0x4],r8
80005872:	6e 48       	ld.w	r8,r7[0x10]
80005874:	8f 08       	st.w	r7[0x0],r8
80005876:	8e 68       	ld.sh	r8,r7[0xc]
80005878:	a3 b8       	sbr	r8,0x3
8000587a:	ae 68       	st.h	r7[0xc],r8
8000587c:	6e 48       	ld.w	r8,r7[0x10]
8000587e:	58 08       	cp.w	r8,0
80005880:	c0 b1       	brne	80005896 <__swsetup_r+0xaa>
80005882:	8e 68       	ld.sh	r8,r7[0xc]
80005884:	e2 18 02 80 	andl	r8,0x280,COH
80005888:	e0 48 02 00 	cp.w	r8,512
8000588c:	c0 50       	breq	80005896 <__swsetup_r+0xaa>
8000588e:	0c 9c       	mov	r12,r6
80005890:	0e 9b       	mov	r11,r7
80005892:	e0 a0 0a 4b 	rcall	80006d28 <__smakebuf_r>
80005896:	8e 69       	ld.sh	r9,r7[0xc]
80005898:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000589c:	c0 70       	breq	800058aa <__swsetup_r+0xbe>
8000589e:	30 08       	mov	r8,0
800058a0:	8f 28       	st.w	r7[0x8],r8
800058a2:	6e 58       	ld.w	r8,r7[0x14]
800058a4:	5c 38       	neg	r8
800058a6:	8f 68       	st.w	r7[0x18],r8
800058a8:	c0 68       	rjmp	800058b4 <__swsetup_r+0xc8>
800058aa:	ed b9 00 01 	bld	r9,0x1
800058ae:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800058b2:	8f 28       	st.w	r7[0x8],r8
800058b4:	6e 48       	ld.w	r8,r7[0x10]
800058b6:	58 08       	cp.w	r8,0
800058b8:	c0 61       	brne	800058c4 <__swsetup_r+0xd8>
800058ba:	8e 68       	ld.sh	r8,r7[0xc]
800058bc:	ed b8 00 07 	bld	r8,0x7
800058c0:	c0 21       	brne	800058c4 <__swsetup_r+0xd8>
800058c2:	dc 2a       	popm	r4-r7,pc,r12=-1
800058c4:	d8 2a       	popm	r4-r7,pc,r12=0
800058c6:	d7 03       	nop

800058c8 <quorem>:
800058c8:	d4 31       	pushm	r0-r7,lr
800058ca:	20 2d       	sub	sp,8
800058cc:	18 97       	mov	r7,r12
800058ce:	78 48       	ld.w	r8,r12[0x10]
800058d0:	76 46       	ld.w	r6,r11[0x10]
800058d2:	0c 38       	cp.w	r8,r6
800058d4:	c0 34       	brge	800058da <quorem+0x12>
800058d6:	30 0c       	mov	r12,0
800058d8:	c8 58       	rjmp	800059e2 <quorem+0x11a>
800058da:	ec c2 ff fc 	sub	r2,r6,-4
800058de:	f6 c3 ff ec 	sub	r3,r11,-20
800058e2:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800058e6:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800058ea:	2f f9       	sub	r9,-1
800058ec:	20 16       	sub	r6,1
800058ee:	f8 09 0d 08 	divu	r8,r12,r9
800058f2:	f6 02 00 22 	add	r2,r11,r2<<0x2
800058f6:	ee c4 ff ec 	sub	r4,r7,-20
800058fa:	10 95       	mov	r5,r8
800058fc:	58 08       	cp.w	r8,0
800058fe:	c4 10       	breq	80005980 <quorem+0xb8>
80005900:	30 09       	mov	r9,0
80005902:	06 9a       	mov	r10,r3
80005904:	08 98       	mov	r8,r4
80005906:	12 91       	mov	r1,r9
80005908:	50 0b       	stdsp	sp[0x0],r11
8000590a:	70 0e       	ld.w	lr,r8[0x0]
8000590c:	b1 8e       	lsr	lr,0x10
8000590e:	50 1e       	stdsp	sp[0x4],lr
80005910:	15 0e       	ld.w	lr,r10++
80005912:	fc 00 16 10 	lsr	r0,lr,0x10
80005916:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000591a:	ea 0e 03 41 	mac	r1,r5,lr
8000591e:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005922:	b1 81       	lsr	r1,0x10
80005924:	40 1b       	lddsp	r11,sp[0x4]
80005926:	ea 00 02 40 	mul	r0,r5,r0
8000592a:	e2 00 00 00 	add	r0,r1,r0
8000592e:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005932:	02 1b       	sub	r11,r1
80005934:	50 1b       	stdsp	sp[0x4],r11
80005936:	70 0b       	ld.w	r11,r8[0x0]
80005938:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000593c:	02 09       	add	r9,r1
8000593e:	f2 0e 01 0e 	sub	lr,r9,lr
80005942:	b0 1e       	st.h	r8[0x2],lr
80005944:	fc 09 14 10 	asr	r9,lr,0x10
80005948:	40 1e       	lddsp	lr,sp[0x4]
8000594a:	fc 09 00 09 	add	r9,lr,r9
8000594e:	b0 09       	st.h	r8[0x0],r9
80005950:	e0 01 16 10 	lsr	r1,r0,0x10
80005954:	2f c8       	sub	r8,-4
80005956:	b1 49       	asr	r9,0x10
80005958:	04 3a       	cp.w	r10,r2
8000595a:	fe 98 ff d8 	brls	8000590a <quorem+0x42>
8000595e:	40 0b       	lddsp	r11,sp[0x0]
80005960:	58 0c       	cp.w	r12,0
80005962:	c0 f1       	brne	80005980 <quorem+0xb8>
80005964:	ec c8 ff fb 	sub	r8,r6,-5
80005968:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000596c:	c0 28       	rjmp	80005970 <quorem+0xa8>
8000596e:	20 16       	sub	r6,1
80005970:	20 48       	sub	r8,4
80005972:	08 38       	cp.w	r8,r4
80005974:	e0 88 00 05 	brls	8000597e <quorem+0xb6>
80005978:	70 09       	ld.w	r9,r8[0x0]
8000597a:	58 09       	cp.w	r9,0
8000597c:	cf 90       	breq	8000596e <quorem+0xa6>
8000597e:	8f 46       	st.w	r7[0x10],r6
80005980:	0e 9c       	mov	r12,r7
80005982:	e0 a0 0c fb 	rcall	80007378 <__mcmp>
80005986:	c2 d5       	brlt	800059e0 <quorem+0x118>
80005988:	2f f5       	sub	r5,-1
8000598a:	08 98       	mov	r8,r4
8000598c:	30 09       	mov	r9,0
8000598e:	07 0b       	ld.w	r11,r3++
80005990:	f6 0a 16 10 	lsr	r10,r11,0x10
80005994:	70 0c       	ld.w	r12,r8[0x0]
80005996:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000599a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000599e:	14 1e       	sub	lr,r10
800059a0:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800059a4:	16 1a       	sub	r10,r11
800059a6:	12 0a       	add	r10,r9
800059a8:	b0 1a       	st.h	r8[0x2],r10
800059aa:	b1 4a       	asr	r10,0x10
800059ac:	fc 0a 00 09 	add	r9,lr,r10
800059b0:	b0 09       	st.h	r8[0x0],r9
800059b2:	2f c8       	sub	r8,-4
800059b4:	b1 49       	asr	r9,0x10
800059b6:	04 33       	cp.w	r3,r2
800059b8:	fe 98 ff eb 	brls	8000598e <quorem+0xc6>
800059bc:	ec c8 ff fb 	sub	r8,r6,-5
800059c0:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800059c4:	58 09       	cp.w	r9,0
800059c6:	c0 d1       	brne	800059e0 <quorem+0x118>
800059c8:	ee 08 00 28 	add	r8,r7,r8<<0x2
800059cc:	c0 28       	rjmp	800059d0 <quorem+0x108>
800059ce:	20 16       	sub	r6,1
800059d0:	20 48       	sub	r8,4
800059d2:	08 38       	cp.w	r8,r4
800059d4:	e0 88 00 05 	brls	800059de <quorem+0x116>
800059d8:	70 09       	ld.w	r9,r8[0x0]
800059da:	58 09       	cp.w	r9,0
800059dc:	cf 90       	breq	800059ce <quorem+0x106>
800059de:	8f 46       	st.w	r7[0x10],r6
800059e0:	0a 9c       	mov	r12,r5
800059e2:	2f ed       	sub	sp,-8
800059e4:	d8 32       	popm	r0-r7,pc
800059e6:	d7 03       	nop

800059e8 <_dtoa_r>:
800059e8:	d4 31       	pushm	r0-r7,lr
800059ea:	21 ad       	sub	sp,104
800059ec:	fa c4 ff 74 	sub	r4,sp,-140
800059f0:	18 97       	mov	r7,r12
800059f2:	16 95       	mov	r5,r11
800059f4:	68 2c       	ld.w	r12,r4[0x8]
800059f6:	50 c9       	stdsp	sp[0x30],r9
800059f8:	68 16       	ld.w	r6,r4[0x4]
800059fa:	68 09       	ld.w	r9,r4[0x0]
800059fc:	50 e8       	stdsp	sp[0x38],r8
800059fe:	14 94       	mov	r4,r10
80005a00:	51 2c       	stdsp	sp[0x48],r12
80005a02:	fa e5 00 08 	st.d	sp[8],r4
80005a06:	51 59       	stdsp	sp[0x54],r9
80005a08:	6e 95       	ld.w	r5,r7[0x24]
80005a0a:	58 05       	cp.w	r5,0
80005a0c:	c0 91       	brne	80005a1e <_dtoa_r+0x36>
80005a0e:	31 0c       	mov	r12,16
80005a10:	e0 a0 09 ea 	rcall	80006de4 <malloc>
80005a14:	99 35       	st.w	r12[0xc],r5
80005a16:	8f 9c       	st.w	r7[0x24],r12
80005a18:	99 15       	st.w	r12[0x4],r5
80005a1a:	99 25       	st.w	r12[0x8],r5
80005a1c:	99 05       	st.w	r12[0x0],r5
80005a1e:	6e 99       	ld.w	r9,r7[0x24]
80005a20:	72 08       	ld.w	r8,r9[0x0]
80005a22:	58 08       	cp.w	r8,0
80005a24:	c0 f0       	breq	80005a42 <_dtoa_r+0x5a>
80005a26:	72 1a       	ld.w	r10,r9[0x4]
80005a28:	91 1a       	st.w	r8[0x4],r10
80005a2a:	30 1a       	mov	r10,1
80005a2c:	72 19       	ld.w	r9,r9[0x4]
80005a2e:	f4 09 09 49 	lsl	r9,r10,r9
80005a32:	10 9b       	mov	r11,r8
80005a34:	91 29       	st.w	r8[0x8],r9
80005a36:	0e 9c       	mov	r12,r7
80005a38:	e0 a0 0c ba 	rcall	800073ac <_Bfree>
80005a3c:	6e 98       	ld.w	r8,r7[0x24]
80005a3e:	30 09       	mov	r9,0
80005a40:	91 09       	st.w	r8[0x0],r9
80005a42:	40 28       	lddsp	r8,sp[0x8]
80005a44:	10 94       	mov	r4,r8
80005a46:	58 08       	cp.w	r8,0
80005a48:	c0 64       	brge	80005a54 <_dtoa_r+0x6c>
80005a4a:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005a4e:	50 28       	stdsp	sp[0x8],r8
80005a50:	30 18       	mov	r8,1
80005a52:	c0 28       	rjmp	80005a56 <_dtoa_r+0x6e>
80005a54:	30 08       	mov	r8,0
80005a56:	8d 08       	st.w	r6[0x0],r8
80005a58:	fc 1c 7f f0 	movh	r12,0x7ff0
80005a5c:	40 26       	lddsp	r6,sp[0x8]
80005a5e:	0c 98       	mov	r8,r6
80005a60:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005a64:	18 38       	cp.w	r8,r12
80005a66:	c2 01       	brne	80005aa6 <_dtoa_r+0xbe>
80005a68:	e0 68 27 0f 	mov	r8,9999
80005a6c:	41 5b       	lddsp	r11,sp[0x54]
80005a6e:	97 08       	st.w	r11[0x0],r8
80005a70:	40 3a       	lddsp	r10,sp[0xc]
80005a72:	58 0a       	cp.w	r10,0
80005a74:	c0 71       	brne	80005a82 <_dtoa_r+0x9a>
80005a76:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005a7a:	c0 41       	brne	80005a82 <_dtoa_r+0x9a>
80005a7c:	fe cc c4 e4 	sub	r12,pc,-15132
80005a80:	c0 38       	rjmp	80005a86 <_dtoa_r+0x9e>
80005a82:	fe cc c4 de 	sub	r12,pc,-15138
80005a86:	41 29       	lddsp	r9,sp[0x48]
80005a88:	58 09       	cp.w	r9,0
80005a8a:	e0 80 05 9a 	breq	800065be <_dtoa_r+0xbd6>
80005a8e:	f8 c8 ff fd 	sub	r8,r12,-3
80005a92:	f8 c9 ff f8 	sub	r9,r12,-8
80005a96:	11 8b       	ld.ub	r11,r8[0x0]
80005a98:	30 0a       	mov	r10,0
80005a9a:	41 25       	lddsp	r5,sp[0x48]
80005a9c:	f4 0b 18 00 	cp.b	r11,r10
80005aa0:	f2 08 17 10 	movne	r8,r9
80005aa4:	c1 68       	rjmp	80005ad0 <_dtoa_r+0xe8>
80005aa6:	fa ea 00 08 	ld.d	r10,sp[8]
80005aaa:	30 08       	mov	r8,0
80005aac:	fa eb 00 3c 	st.d	sp[60],r10
80005ab0:	30 09       	mov	r9,0
80005ab2:	e0 a0 14 e6 	rcall	8000847e <__avr32_f64_cmp_eq>
80005ab6:	c1 00       	breq	80005ad6 <_dtoa_r+0xee>
80005ab8:	30 18       	mov	r8,1
80005aba:	41 5a       	lddsp	r10,sp[0x54]
80005abc:	95 08       	st.w	r10[0x0],r8
80005abe:	fe cc c6 4a 	sub	r12,pc,-14774
80005ac2:	41 29       	lddsp	r9,sp[0x48]
80005ac4:	f8 08 00 08 	add	r8,r12,r8
80005ac8:	58 09       	cp.w	r9,0
80005aca:	e0 80 05 7a 	breq	800065be <_dtoa_r+0xbd6>
80005ace:	12 95       	mov	r5,r9
80005ad0:	8b 08       	st.w	r5[0x0],r8
80005ad2:	e0 8f 05 76 	bral	800065be <_dtoa_r+0xbd6>
80005ad6:	fa c8 ff 9c 	sub	r8,sp,-100
80005ada:	fa c9 ff a0 	sub	r9,sp,-96
80005ade:	fa ea 00 3c 	ld.d	r10,sp[60]
80005ae2:	0e 9c       	mov	r12,r7
80005ae4:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005ae8:	e0 a0 0c b4 	rcall	80007450 <__d2b>
80005aec:	18 93       	mov	r3,r12
80005aee:	58 05       	cp.w	r5,0
80005af0:	c0 d0       	breq	80005b0a <_dtoa_r+0x122>
80005af2:	fa ea 00 3c 	ld.d	r10,sp[60]
80005af6:	30 04       	mov	r4,0
80005af8:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005afc:	ea c5 03 ff 	sub	r5,r5,1023
80005b00:	10 9b       	mov	r11,r8
80005b02:	51 74       	stdsp	sp[0x5c],r4
80005b04:	ea 1b 3f f0 	orh	r11,0x3ff0
80005b08:	c2 58       	rjmp	80005b52 <_dtoa_r+0x16a>
80005b0a:	41 88       	lddsp	r8,sp[0x60]
80005b0c:	41 9c       	lddsp	r12,sp[0x64]
80005b0e:	10 0c       	add	r12,r8
80005b10:	f8 c5 fb ce 	sub	r5,r12,-1074
80005b14:	e0 45 00 20 	cp.w	r5,32
80005b18:	e0 8a 00 0e 	brle	80005b34 <_dtoa_r+0x14c>
80005b1c:	f8 cc fb ee 	sub	r12,r12,-1042
80005b20:	40 3b       	lddsp	r11,sp[0xc]
80005b22:	ea 08 11 40 	rsub	r8,r5,64
80005b26:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005b2a:	ec 08 09 46 	lsl	r6,r6,r8
80005b2e:	0c 4c       	or	r12,r6
80005b30:	c0 78       	rjmp	80005b3e <_dtoa_r+0x156>
80005b32:	d7 03       	nop
80005b34:	ea 0c 11 20 	rsub	r12,r5,32
80005b38:	40 3a       	lddsp	r10,sp[0xc]
80005b3a:	f4 0c 09 4c 	lsl	r12,r10,r12
80005b3e:	e0 a0 14 2c 	rcall	80008396 <__avr32_u32_to_f64>
80005b42:	fc 18 fe 10 	movh	r8,0xfe10
80005b46:	30 19       	mov	r9,1
80005b48:	ea c5 04 33 	sub	r5,r5,1075
80005b4c:	f0 0b 00 0b 	add	r11,r8,r11
80005b50:	51 79       	stdsp	sp[0x5c],r9
80005b52:	30 08       	mov	r8,0
80005b54:	fc 19 3f f8 	movh	r9,0x3ff8
80005b58:	e0 a0 12 b4 	rcall	800080c0 <__avr32_f64_sub>
80005b5c:	e0 68 43 61 	mov	r8,17249
80005b60:	ea 18 63 6f 	orh	r8,0x636f
80005b64:	e0 69 87 a7 	mov	r9,34727
80005b68:	ea 19 3f d2 	orh	r9,0x3fd2
80005b6c:	e0 a0 11 be 	rcall	80007ee8 <__avr32_f64_mul>
80005b70:	e0 68 c8 b3 	mov	r8,51379
80005b74:	ea 18 8b 60 	orh	r8,0x8b60
80005b78:	e0 69 8a 28 	mov	r9,35368
80005b7c:	ea 19 3f c6 	orh	r9,0x3fc6
80005b80:	e0 a0 13 6e 	rcall	8000825c <__avr32_f64_add>
80005b84:	0a 9c       	mov	r12,r5
80005b86:	14 90       	mov	r0,r10
80005b88:	16 91       	mov	r1,r11
80005b8a:	e0 a0 14 0a 	rcall	8000839e <__avr32_s32_to_f64>
80005b8e:	e0 68 79 fb 	mov	r8,31227
80005b92:	ea 18 50 9f 	orh	r8,0x509f
80005b96:	e0 69 44 13 	mov	r9,17427
80005b9a:	ea 19 3f d3 	orh	r9,0x3fd3
80005b9e:	e0 a0 11 a5 	rcall	80007ee8 <__avr32_f64_mul>
80005ba2:	14 98       	mov	r8,r10
80005ba4:	16 99       	mov	r9,r11
80005ba6:	00 9a       	mov	r10,r0
80005ba8:	02 9b       	mov	r11,r1
80005baa:	e0 a0 13 59 	rcall	8000825c <__avr32_f64_add>
80005bae:	14 90       	mov	r0,r10
80005bb0:	16 91       	mov	r1,r11
80005bb2:	e0 a0 13 df 	rcall	80008370 <__avr32_f64_to_s32>
80005bb6:	30 08       	mov	r8,0
80005bb8:	18 96       	mov	r6,r12
80005bba:	30 09       	mov	r9,0
80005bbc:	00 9a       	mov	r10,r0
80005bbe:	02 9b       	mov	r11,r1
80005bc0:	e0 a0 14 a6 	rcall	8000850c <__avr32_f64_cmp_lt>
80005bc4:	c0 c0       	breq	80005bdc <_dtoa_r+0x1f4>
80005bc6:	0c 9c       	mov	r12,r6
80005bc8:	e0 a0 13 eb 	rcall	8000839e <__avr32_s32_to_f64>
80005bcc:	14 98       	mov	r8,r10
80005bce:	16 99       	mov	r9,r11
80005bd0:	00 9a       	mov	r10,r0
80005bd2:	02 9b       	mov	r11,r1
80005bd4:	e0 a0 14 55 	rcall	8000847e <__avr32_f64_cmp_eq>
80005bd8:	f7 b6 00 01 	subeq	r6,1
80005bdc:	59 66       	cp.w	r6,22
80005bde:	e0 88 00 05 	brls	80005be8 <_dtoa_r+0x200>
80005be2:	30 18       	mov	r8,1
80005be4:	51 48       	stdsp	sp[0x50],r8
80005be6:	c1 38       	rjmp	80005c0c <_dtoa_r+0x224>
80005be8:	fe c8 c5 94 	sub	r8,pc,-14956
80005bec:	fa ea 00 3c 	ld.d	r10,sp[60]
80005bf0:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005bf4:	e0 a0 14 8c 	rcall	8000850c <__avr32_f64_cmp_lt>
80005bf8:	f9 b4 00 00 	moveq	r4,0
80005bfc:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005c00:	f7 b6 01 01 	subne	r6,1
80005c04:	f9 bc 01 00 	movne	r12,0
80005c08:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005c0c:	41 90       	lddsp	r0,sp[0x64]
80005c0e:	20 10       	sub	r0,1
80005c10:	0a 10       	sub	r0,r5
80005c12:	c0 46       	brmi	80005c1a <_dtoa_r+0x232>
80005c14:	50 40       	stdsp	sp[0x10],r0
80005c16:	30 00       	mov	r0,0
80005c18:	c0 48       	rjmp	80005c20 <_dtoa_r+0x238>
80005c1a:	30 0b       	mov	r11,0
80005c1c:	5c 30       	neg	r0
80005c1e:	50 4b       	stdsp	sp[0x10],r11
80005c20:	ec 02 11 00 	rsub	r2,r6,0
80005c24:	58 06       	cp.w	r6,0
80005c26:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005c2a:	f5 d6 e4 0a 	addge	r10,r10,r6
80005c2e:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005c32:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005c36:	f9 b2 04 00 	movge	r2,0
80005c3a:	e1 d6 e5 10 	sublt	r0,r0,r6
80005c3e:	f9 b9 05 00 	movlt	r9,0
80005c42:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005c46:	40 c8       	lddsp	r8,sp[0x30]
80005c48:	58 98       	cp.w	r8,9
80005c4a:	e0 8b 00 20 	brhi	80005c8a <_dtoa_r+0x2a2>
80005c4e:	58 58       	cp.w	r8,5
80005c50:	f9 b4 0a 01 	movle	r4,1
80005c54:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005c58:	f7 b5 09 04 	subgt	r5,4
80005c5c:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005c60:	f9 b4 09 00 	movgt	r4,0
80005c64:	40 cc       	lddsp	r12,sp[0x30]
80005c66:	58 3c       	cp.w	r12,3
80005c68:	c2 d0       	breq	80005cc2 <_dtoa_r+0x2da>
80005c6a:	e0 89 00 05 	brgt	80005c74 <_dtoa_r+0x28c>
80005c6e:	58 2c       	cp.w	r12,2
80005c70:	c1 01       	brne	80005c90 <_dtoa_r+0x2a8>
80005c72:	c1 88       	rjmp	80005ca2 <_dtoa_r+0x2ba>
80005c74:	40 cb       	lddsp	r11,sp[0x30]
80005c76:	58 4b       	cp.w	r11,4
80005c78:	c0 60       	breq	80005c84 <_dtoa_r+0x29c>
80005c7a:	58 5b       	cp.w	r11,5
80005c7c:	c0 a1       	brne	80005c90 <_dtoa_r+0x2a8>
80005c7e:	30 1a       	mov	r10,1
80005c80:	50 da       	stdsp	sp[0x34],r10
80005c82:	c2 28       	rjmp	80005cc6 <_dtoa_r+0x2de>
80005c84:	30 19       	mov	r9,1
80005c86:	50 d9       	stdsp	sp[0x34],r9
80005c88:	c0 f8       	rjmp	80005ca6 <_dtoa_r+0x2be>
80005c8a:	30 08       	mov	r8,0
80005c8c:	30 14       	mov	r4,1
80005c8e:	50 c8       	stdsp	sp[0x30],r8
80005c90:	3f f5       	mov	r5,-1
80005c92:	30 1c       	mov	r12,1
80005c94:	30 0b       	mov	r11,0
80005c96:	50 95       	stdsp	sp[0x24],r5
80005c98:	50 dc       	stdsp	sp[0x34],r12
80005c9a:	0a 91       	mov	r1,r5
80005c9c:	31 28       	mov	r8,18
80005c9e:	50 eb       	stdsp	sp[0x38],r11
80005ca0:	c2 08       	rjmp	80005ce0 <_dtoa_r+0x2f8>
80005ca2:	30 0a       	mov	r10,0
80005ca4:	50 da       	stdsp	sp[0x34],r10
80005ca6:	40 e9       	lddsp	r9,sp[0x38]
80005ca8:	58 09       	cp.w	r9,0
80005caa:	e0 89 00 07 	brgt	80005cb8 <_dtoa_r+0x2d0>
80005cae:	30 18       	mov	r8,1
80005cb0:	50 98       	stdsp	sp[0x24],r8
80005cb2:	10 91       	mov	r1,r8
80005cb4:	50 e8       	stdsp	sp[0x38],r8
80005cb6:	c1 58       	rjmp	80005ce0 <_dtoa_r+0x2f8>
80005cb8:	40 e5       	lddsp	r5,sp[0x38]
80005cba:	50 95       	stdsp	sp[0x24],r5
80005cbc:	0a 91       	mov	r1,r5
80005cbe:	0a 98       	mov	r8,r5
80005cc0:	c1 08       	rjmp	80005ce0 <_dtoa_r+0x2f8>
80005cc2:	30 0c       	mov	r12,0
80005cc4:	50 dc       	stdsp	sp[0x34],r12
80005cc6:	40 eb       	lddsp	r11,sp[0x38]
80005cc8:	ec 0b 00 0b 	add	r11,r6,r11
80005ccc:	50 9b       	stdsp	sp[0x24],r11
80005cce:	16 98       	mov	r8,r11
80005cd0:	2f f8       	sub	r8,-1
80005cd2:	58 08       	cp.w	r8,0
80005cd4:	e0 89 00 05 	brgt	80005cde <_dtoa_r+0x2f6>
80005cd8:	10 91       	mov	r1,r8
80005cda:	30 18       	mov	r8,1
80005cdc:	c0 28       	rjmp	80005ce0 <_dtoa_r+0x2f8>
80005cde:	10 91       	mov	r1,r8
80005ce0:	30 09       	mov	r9,0
80005ce2:	6e 9a       	ld.w	r10,r7[0x24]
80005ce4:	95 19       	st.w	r10[0x4],r9
80005ce6:	30 49       	mov	r9,4
80005ce8:	c0 68       	rjmp	80005cf4 <_dtoa_r+0x30c>
80005cea:	d7 03       	nop
80005cec:	6a 1a       	ld.w	r10,r5[0x4]
80005cee:	a1 79       	lsl	r9,0x1
80005cf0:	2f fa       	sub	r10,-1
80005cf2:	8b 1a       	st.w	r5[0x4],r10
80005cf4:	6e 95       	ld.w	r5,r7[0x24]
80005cf6:	f2 ca ff ec 	sub	r10,r9,-20
80005cfa:	10 3a       	cp.w	r10,r8
80005cfc:	fe 98 ff f8 	brls	80005cec <_dtoa_r+0x304>
80005d00:	6a 1b       	ld.w	r11,r5[0x4]
80005d02:	0e 9c       	mov	r12,r7
80005d04:	e0 a0 0b 6e 	rcall	800073e0 <_Balloc>
80005d08:	58 e1       	cp.w	r1,14
80005d0a:	5f 88       	srls	r8
80005d0c:	8b 0c       	st.w	r5[0x0],r12
80005d0e:	f1 e4 00 04 	and	r4,r8,r4
80005d12:	6e 98       	ld.w	r8,r7[0x24]
80005d14:	70 08       	ld.w	r8,r8[0x0]
80005d16:	50 88       	stdsp	sp[0x20],r8
80005d18:	e0 80 01 82 	breq	8000601c <_dtoa_r+0x634>
80005d1c:	58 06       	cp.w	r6,0
80005d1e:	e0 8a 00 43 	brle	80005da4 <_dtoa_r+0x3bc>
80005d22:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005d26:	fe c8 c6 d2 	sub	r8,pc,-14638
80005d2a:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005d2e:	fa e5 00 18 	st.d	sp[24],r4
80005d32:	ec 04 14 04 	asr	r4,r6,0x4
80005d36:	ed b4 00 04 	bld	r4,0x4
80005d3a:	c0 30       	breq	80005d40 <_dtoa_r+0x358>
80005d3c:	30 25       	mov	r5,2
80005d3e:	c1 08       	rjmp	80005d5e <_dtoa_r+0x376>
80005d40:	fe c8 c6 24 	sub	r8,pc,-14812
80005d44:	f0 e8 00 20 	ld.d	r8,r8[32]
80005d48:	fa ea 00 3c 	ld.d	r10,sp[60]
80005d4c:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005d50:	e0 a0 14 12 	rcall	80008574 <__avr32_f64_div>
80005d54:	30 35       	mov	r5,3
80005d56:	14 98       	mov	r8,r10
80005d58:	16 99       	mov	r9,r11
80005d5a:	fa e9 00 08 	st.d	sp[8],r8
80005d5e:	fe cc c6 42 	sub	r12,pc,-14782
80005d62:	50 a3       	stdsp	sp[0x28],r3
80005d64:	0c 93       	mov	r3,r6
80005d66:	18 96       	mov	r6,r12
80005d68:	c0 f8       	rjmp	80005d86 <_dtoa_r+0x39e>
80005d6a:	fa ea 00 18 	ld.d	r10,sp[24]
80005d6e:	ed b4 00 00 	bld	r4,0x0
80005d72:	c0 81       	brne	80005d82 <_dtoa_r+0x39a>
80005d74:	ec e8 00 00 	ld.d	r8,r6[0]
80005d78:	2f f5       	sub	r5,-1
80005d7a:	e0 a0 10 b7 	rcall	80007ee8 <__avr32_f64_mul>
80005d7e:	fa eb 00 18 	st.d	sp[24],r10
80005d82:	a1 54       	asr	r4,0x1
80005d84:	2f 86       	sub	r6,-8
80005d86:	58 04       	cp.w	r4,0
80005d88:	cf 11       	brne	80005d6a <_dtoa_r+0x382>
80005d8a:	fa e8 00 18 	ld.d	r8,sp[24]
80005d8e:	fa ea 00 08 	ld.d	r10,sp[8]
80005d92:	06 96       	mov	r6,r3
80005d94:	e0 a0 13 f0 	rcall	80008574 <__avr32_f64_div>
80005d98:	40 a3       	lddsp	r3,sp[0x28]
80005d9a:	14 98       	mov	r8,r10
80005d9c:	16 99       	mov	r9,r11
80005d9e:	fa e9 00 08 	st.d	sp[8],r8
80005da2:	c2 f8       	rjmp	80005e00 <_dtoa_r+0x418>
80005da4:	ec 08 11 00 	rsub	r8,r6,0
80005da8:	c0 31       	brne	80005dae <_dtoa_r+0x3c6>
80005daa:	30 25       	mov	r5,2
80005dac:	c2 a8       	rjmp	80005e00 <_dtoa_r+0x418>
80005dae:	fe cc c6 92 	sub	r12,pc,-14702
80005db2:	f0 04 14 04 	asr	r4,r8,0x4
80005db6:	50 1c       	stdsp	sp[0x4],r12
80005db8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005dbc:	fe c9 c7 68 	sub	r9,pc,-14488
80005dc0:	fa ea 00 3c 	ld.d	r10,sp[60]
80005dc4:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005dc8:	e0 a0 10 90 	rcall	80007ee8 <__avr32_f64_mul>
80005dcc:	40 1c       	lddsp	r12,sp[0x4]
80005dce:	50 63       	stdsp	sp[0x18],r3
80005dd0:	30 25       	mov	r5,2
80005dd2:	0c 93       	mov	r3,r6
80005dd4:	fa eb 00 08 	st.d	sp[8],r10
80005dd8:	18 96       	mov	r6,r12
80005dda:	c0 f8       	rjmp	80005df8 <_dtoa_r+0x410>
80005ddc:	fa ea 00 08 	ld.d	r10,sp[8]
80005de0:	ed b4 00 00 	bld	r4,0x0
80005de4:	c0 81       	brne	80005df4 <_dtoa_r+0x40c>
80005de6:	ec e8 00 00 	ld.d	r8,r6[0]
80005dea:	2f f5       	sub	r5,-1
80005dec:	e0 a0 10 7e 	rcall	80007ee8 <__avr32_f64_mul>
80005df0:	fa eb 00 08 	st.d	sp[8],r10
80005df4:	a1 54       	asr	r4,0x1
80005df6:	2f 86       	sub	r6,-8
80005df8:	58 04       	cp.w	r4,0
80005dfa:	cf 11       	brne	80005ddc <_dtoa_r+0x3f4>
80005dfc:	06 96       	mov	r6,r3
80005dfe:	40 63       	lddsp	r3,sp[0x18]
80005e00:	41 4a       	lddsp	r10,sp[0x50]
80005e02:	58 0a       	cp.w	r10,0
80005e04:	c2 a0       	breq	80005e58 <_dtoa_r+0x470>
80005e06:	fa e8 00 08 	ld.d	r8,sp[8]
80005e0a:	58 01       	cp.w	r1,0
80005e0c:	5f 94       	srgt	r4
80005e0e:	fa e9 00 18 	st.d	sp[24],r8
80005e12:	30 08       	mov	r8,0
80005e14:	fc 19 3f f0 	movh	r9,0x3ff0
80005e18:	fa ea 00 18 	ld.d	r10,sp[24]
80005e1c:	e0 a0 13 78 	rcall	8000850c <__avr32_f64_cmp_lt>
80005e20:	f9 bc 00 00 	moveq	r12,0
80005e24:	f9 bc 01 01 	movne	r12,1
80005e28:	e9 ec 00 0c 	and	r12,r4,r12
80005e2c:	c1 60       	breq	80005e58 <_dtoa_r+0x470>
80005e2e:	40 98       	lddsp	r8,sp[0x24]
80005e30:	58 08       	cp.w	r8,0
80005e32:	e0 8a 00 f1 	brle	80006014 <_dtoa_r+0x62c>
80005e36:	30 08       	mov	r8,0
80005e38:	fc 19 40 24 	movh	r9,0x4024
80005e3c:	ec c4 00 01 	sub	r4,r6,1
80005e40:	fa ea 00 18 	ld.d	r10,sp[24]
80005e44:	2f f5       	sub	r5,-1
80005e46:	50 64       	stdsp	sp[0x18],r4
80005e48:	e0 a0 10 50 	rcall	80007ee8 <__avr32_f64_mul>
80005e4c:	40 94       	lddsp	r4,sp[0x24]
80005e4e:	14 98       	mov	r8,r10
80005e50:	16 99       	mov	r9,r11
80005e52:	fa e9 00 08 	st.d	sp[8],r8
80005e56:	c0 38       	rjmp	80005e5c <_dtoa_r+0x474>
80005e58:	50 66       	stdsp	sp[0x18],r6
80005e5a:	02 94       	mov	r4,r1
80005e5c:	0a 9c       	mov	r12,r5
80005e5e:	e0 a0 12 a0 	rcall	8000839e <__avr32_s32_to_f64>
80005e62:	fa e8 00 08 	ld.d	r8,sp[8]
80005e66:	e0 a0 10 41 	rcall	80007ee8 <__avr32_f64_mul>
80005e6a:	30 08       	mov	r8,0
80005e6c:	fc 19 40 1c 	movh	r9,0x401c
80005e70:	e0 a0 11 f6 	rcall	8000825c <__avr32_f64_add>
80005e74:	14 98       	mov	r8,r10
80005e76:	16 99       	mov	r9,r11
80005e78:	fa e9 00 28 	st.d	sp[40],r8
80005e7c:	fc 18 fc c0 	movh	r8,0xfcc0
80005e80:	40 a5       	lddsp	r5,sp[0x28]
80005e82:	10 05       	add	r5,r8
80005e84:	50 a5       	stdsp	sp[0x28],r5
80005e86:	58 04       	cp.w	r4,0
80005e88:	c2 11       	brne	80005eca <_dtoa_r+0x4e2>
80005e8a:	fa ea 00 08 	ld.d	r10,sp[8]
80005e8e:	30 08       	mov	r8,0
80005e90:	fc 19 40 14 	movh	r9,0x4014
80005e94:	e0 a0 11 16 	rcall	800080c0 <__avr32_f64_sub>
80005e98:	40 bc       	lddsp	r12,sp[0x2c]
80005e9a:	fa eb 00 08 	st.d	sp[8],r10
80005e9e:	14 98       	mov	r8,r10
80005ea0:	16 99       	mov	r9,r11
80005ea2:	18 9a       	mov	r10,r12
80005ea4:	0a 9b       	mov	r11,r5
80005ea6:	e0 a0 13 33 	rcall	8000850c <__avr32_f64_cmp_lt>
80005eaa:	e0 81 02 54 	brne	80006352 <_dtoa_r+0x96a>
80005eae:	0a 98       	mov	r8,r5
80005eb0:	40 b9       	lddsp	r9,sp[0x2c]
80005eb2:	ee 18 80 00 	eorh	r8,0x8000
80005eb6:	fa ea 00 08 	ld.d	r10,sp[8]
80005eba:	10 95       	mov	r5,r8
80005ebc:	12 98       	mov	r8,r9
80005ebe:	0a 99       	mov	r9,r5
80005ec0:	e0 a0 13 26 	rcall	8000850c <__avr32_f64_cmp_lt>
80005ec4:	e0 81 02 3e 	brne	80006340 <_dtoa_r+0x958>
80005ec8:	ca 68       	rjmp	80006014 <_dtoa_r+0x62c>
80005eca:	fe c9 c8 76 	sub	r9,pc,-14218
80005ece:	e8 c8 00 01 	sub	r8,r4,1
80005ed2:	40 d5       	lddsp	r5,sp[0x34]
80005ed4:	58 05       	cp.w	r5,0
80005ed6:	c4 f0       	breq	80005f74 <_dtoa_r+0x58c>
80005ed8:	30 0c       	mov	r12,0
80005eda:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005ede:	51 3c       	stdsp	sp[0x4c],r12
80005ee0:	30 0a       	mov	r10,0
80005ee2:	fc 1b 3f e0 	movh	r11,0x3fe0
80005ee6:	e0 a0 13 47 	rcall	80008574 <__avr32_f64_div>
80005eea:	fa e8 00 28 	ld.d	r8,sp[40]
80005eee:	40 85       	lddsp	r5,sp[0x20]
80005ef0:	e0 a0 10 e8 	rcall	800080c0 <__avr32_f64_sub>
80005ef4:	fa eb 00 28 	st.d	sp[40],r10
80005ef8:	fa ea 00 08 	ld.d	r10,sp[8]
80005efc:	e0 a0 12 3a 	rcall	80008370 <__avr32_f64_to_s32>
80005f00:	51 6c       	stdsp	sp[0x58],r12
80005f02:	e0 a0 12 4e 	rcall	8000839e <__avr32_s32_to_f64>
80005f06:	14 98       	mov	r8,r10
80005f08:	16 99       	mov	r9,r11
80005f0a:	fa ea 00 08 	ld.d	r10,sp[8]
80005f0e:	e0 a0 10 d9 	rcall	800080c0 <__avr32_f64_sub>
80005f12:	fa eb 00 08 	st.d	sp[8],r10
80005f16:	41 68       	lddsp	r8,sp[0x58]
80005f18:	2d 08       	sub	r8,-48
80005f1a:	0a c8       	st.b	r5++,r8
80005f1c:	41 39       	lddsp	r9,sp[0x4c]
80005f1e:	2f f9       	sub	r9,-1
80005f20:	51 39       	stdsp	sp[0x4c],r9
80005f22:	fa e8 00 28 	ld.d	r8,sp[40]
80005f26:	e0 a0 12 f3 	rcall	8000850c <__avr32_f64_cmp_lt>
80005f2a:	e0 81 03 39 	brne	8000659c <_dtoa_r+0xbb4>
80005f2e:	fa e8 00 08 	ld.d	r8,sp[8]
80005f32:	30 0a       	mov	r10,0
80005f34:	fc 1b 3f f0 	movh	r11,0x3ff0
80005f38:	e0 a0 10 c4 	rcall	800080c0 <__avr32_f64_sub>
80005f3c:	fa e8 00 28 	ld.d	r8,sp[40]
80005f40:	e0 a0 12 e6 	rcall	8000850c <__avr32_f64_cmp_lt>
80005f44:	fa ea 00 28 	ld.d	r10,sp[40]
80005f48:	30 08       	mov	r8,0
80005f4a:	fc 19 40 24 	movh	r9,0x4024
80005f4e:	e0 81 00 da 	brne	80006102 <_dtoa_r+0x71a>
80005f52:	41 3c       	lddsp	r12,sp[0x4c]
80005f54:	08 3c       	cp.w	r12,r4
80005f56:	c5 f4       	brge	80006014 <_dtoa_r+0x62c>
80005f58:	e0 a0 0f c8 	rcall	80007ee8 <__avr32_f64_mul>
80005f5c:	30 08       	mov	r8,0
80005f5e:	fa eb 00 28 	st.d	sp[40],r10
80005f62:	fc 19 40 24 	movh	r9,0x4024
80005f66:	fa ea 00 08 	ld.d	r10,sp[8]
80005f6a:	e0 a0 0f bf 	rcall	80007ee8 <__avr32_f64_mul>
80005f6e:	fa eb 00 08 	st.d	sp[8],r10
80005f72:	cc 3b       	rjmp	80005ef8 <_dtoa_r+0x510>
80005f74:	40 85       	lddsp	r5,sp[0x20]
80005f76:	08 05       	add	r5,r4
80005f78:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80005f7c:	51 35       	stdsp	sp[0x4c],r5
80005f7e:	fa e8 00 28 	ld.d	r8,sp[40]
80005f82:	40 85       	lddsp	r5,sp[0x20]
80005f84:	e0 a0 0f b2 	rcall	80007ee8 <__avr32_f64_mul>
80005f88:	fa eb 00 28 	st.d	sp[40],r10
80005f8c:	fa ea 00 08 	ld.d	r10,sp[8]
80005f90:	e0 a0 11 f0 	rcall	80008370 <__avr32_f64_to_s32>
80005f94:	51 6c       	stdsp	sp[0x58],r12
80005f96:	e0 a0 12 04 	rcall	8000839e <__avr32_s32_to_f64>
80005f9a:	14 98       	mov	r8,r10
80005f9c:	16 99       	mov	r9,r11
80005f9e:	fa ea 00 08 	ld.d	r10,sp[8]
80005fa2:	e0 a0 10 8f 	rcall	800080c0 <__avr32_f64_sub>
80005fa6:	fa eb 00 08 	st.d	sp[8],r10
80005faa:	41 68       	lddsp	r8,sp[0x58]
80005fac:	2d 08       	sub	r8,-48
80005fae:	0a c8       	st.b	r5++,r8
80005fb0:	41 3c       	lddsp	r12,sp[0x4c]
80005fb2:	18 35       	cp.w	r5,r12
80005fb4:	c2 81       	brne	80006004 <_dtoa_r+0x61c>
80005fb6:	30 08       	mov	r8,0
80005fb8:	fc 19 3f e0 	movh	r9,0x3fe0
80005fbc:	fa ea 00 28 	ld.d	r10,sp[40]
80005fc0:	e0 a0 11 4e 	rcall	8000825c <__avr32_f64_add>
80005fc4:	40 85       	lddsp	r5,sp[0x20]
80005fc6:	fa e8 00 08 	ld.d	r8,sp[8]
80005fca:	08 05       	add	r5,r4
80005fcc:	e0 a0 12 a0 	rcall	8000850c <__avr32_f64_cmp_lt>
80005fd0:	e0 81 00 99 	brne	80006102 <_dtoa_r+0x71a>
80005fd4:	fa e8 00 28 	ld.d	r8,sp[40]
80005fd8:	30 0a       	mov	r10,0
80005fda:	fc 1b 3f e0 	movh	r11,0x3fe0
80005fde:	e0 a0 10 71 	rcall	800080c0 <__avr32_f64_sub>
80005fe2:	14 98       	mov	r8,r10
80005fe4:	16 99       	mov	r9,r11
80005fe6:	fa ea 00 08 	ld.d	r10,sp[8]
80005fea:	e0 a0 12 91 	rcall	8000850c <__avr32_f64_cmp_lt>
80005fee:	c1 30       	breq	80006014 <_dtoa_r+0x62c>
80005ff0:	33 09       	mov	r9,48
80005ff2:	0a 98       	mov	r8,r5
80005ff4:	11 7a       	ld.ub	r10,--r8
80005ff6:	f2 0a 18 00 	cp.b	r10,r9
80005ffa:	e0 81 02 d1 	brne	8000659c <_dtoa_r+0xbb4>
80005ffe:	10 95       	mov	r5,r8
80006000:	cf 9b       	rjmp	80005ff2 <_dtoa_r+0x60a>
80006002:	d7 03       	nop
80006004:	30 08       	mov	r8,0
80006006:	fc 19 40 24 	movh	r9,0x4024
8000600a:	e0 a0 0f 6f 	rcall	80007ee8 <__avr32_f64_mul>
8000600e:	fa eb 00 08 	st.d	sp[8],r10
80006012:	cb db       	rjmp	80005f8c <_dtoa_r+0x5a4>
80006014:	fa ea 00 3c 	ld.d	r10,sp[60]
80006018:	fa eb 00 08 	st.d	sp[8],r10
8000601c:	58 e6       	cp.w	r6,14
8000601e:	5f ab       	srle	r11
80006020:	41 8a       	lddsp	r10,sp[0x60]
80006022:	30 08       	mov	r8,0
80006024:	f4 09 11 ff 	rsub	r9,r10,-1
80006028:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000602c:	f0 09 18 00 	cp.b	r9,r8
80006030:	e0 80 00 82 	breq	80006134 <_dtoa_r+0x74c>
80006034:	40 ea       	lddsp	r10,sp[0x38]
80006036:	58 01       	cp.w	r1,0
80006038:	5f a9       	srle	r9
8000603a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000603e:	fe ca c9 ea 	sub	r10,pc,-13846
80006042:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006046:	fa e5 00 10 	st.d	sp[16],r4
8000604a:	f0 09 18 00 	cp.b	r9,r8
8000604e:	c1 40       	breq	80006076 <_dtoa_r+0x68e>
80006050:	58 01       	cp.w	r1,0
80006052:	e0 81 01 77 	brne	80006340 <_dtoa_r+0x958>
80006056:	30 08       	mov	r8,0
80006058:	fc 19 40 14 	movh	r9,0x4014
8000605c:	08 9a       	mov	r10,r4
8000605e:	0a 9b       	mov	r11,r5
80006060:	e0 a0 0f 44 	rcall	80007ee8 <__avr32_f64_mul>
80006064:	fa e8 00 08 	ld.d	r8,sp[8]
80006068:	e0 a0 12 1e 	rcall	800084a4 <__avr32_f64_cmp_ge>
8000606c:	e0 81 01 6a 	brne	80006340 <_dtoa_r+0x958>
80006070:	02 92       	mov	r2,r1
80006072:	e0 8f 01 72 	bral	80006356 <_dtoa_r+0x96e>
80006076:	40 85       	lddsp	r5,sp[0x20]
80006078:	30 14       	mov	r4,1
8000607a:	fa e8 00 10 	ld.d	r8,sp[16]
8000607e:	fa ea 00 08 	ld.d	r10,sp[8]
80006082:	e0 a0 12 79 	rcall	80008574 <__avr32_f64_div>
80006086:	e0 a0 11 75 	rcall	80008370 <__avr32_f64_to_s32>
8000608a:	18 92       	mov	r2,r12
8000608c:	e0 a0 11 89 	rcall	8000839e <__avr32_s32_to_f64>
80006090:	fa e8 00 10 	ld.d	r8,sp[16]
80006094:	e0 a0 0f 2a 	rcall	80007ee8 <__avr32_f64_mul>
80006098:	14 98       	mov	r8,r10
8000609a:	16 99       	mov	r9,r11
8000609c:	fa ea 00 08 	ld.d	r10,sp[8]
800060a0:	e0 a0 10 10 	rcall	800080c0 <__avr32_f64_sub>
800060a4:	fa eb 00 08 	st.d	sp[8],r10
800060a8:	e4 c8 ff d0 	sub	r8,r2,-48
800060ac:	0a c8       	st.b	r5++,r8
800060ae:	fc 19 40 24 	movh	r9,0x4024
800060b2:	30 08       	mov	r8,0
800060b4:	02 34       	cp.w	r4,r1
800060b6:	c3 31       	brne	8000611c <_dtoa_r+0x734>
800060b8:	fa e8 00 08 	ld.d	r8,sp[8]
800060bc:	e0 a0 10 d0 	rcall	8000825c <__avr32_f64_add>
800060c0:	16 91       	mov	r1,r11
800060c2:	14 90       	mov	r0,r10
800060c4:	14 98       	mov	r8,r10
800060c6:	02 99       	mov	r9,r1
800060c8:	fa ea 00 10 	ld.d	r10,sp[16]
800060cc:	e0 a0 12 20 	rcall	8000850c <__avr32_f64_cmp_lt>
800060d0:	c1 a1       	brne	80006104 <_dtoa_r+0x71c>
800060d2:	fa e8 00 10 	ld.d	r8,sp[16]
800060d6:	00 9a       	mov	r10,r0
800060d8:	02 9b       	mov	r11,r1
800060da:	e0 a0 11 d2 	rcall	8000847e <__avr32_f64_cmp_eq>
800060de:	e0 80 02 5e 	breq	8000659a <_dtoa_r+0xbb2>
800060e2:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800060e6:	c0 f1       	brne	80006104 <_dtoa_r+0x71c>
800060e8:	e0 8f 02 59 	bral	8000659a <_dtoa_r+0xbb2>
800060ec:	40 8a       	lddsp	r10,sp[0x20]
800060ee:	14 38       	cp.w	r8,r10
800060f0:	c0 30       	breq	800060f6 <_dtoa_r+0x70e>
800060f2:	10 95       	mov	r5,r8
800060f4:	c0 98       	rjmp	80006106 <_dtoa_r+0x71e>
800060f6:	33 08       	mov	r8,48
800060f8:	40 89       	lddsp	r9,sp[0x20]
800060fa:	2f f6       	sub	r6,-1
800060fc:	b2 88       	st.b	r9[0x0],r8
800060fe:	40 88       	lddsp	r8,sp[0x20]
80006100:	c0 88       	rjmp	80006110 <_dtoa_r+0x728>
80006102:	40 66       	lddsp	r6,sp[0x18]
80006104:	33 99       	mov	r9,57
80006106:	0a 98       	mov	r8,r5
80006108:	11 7a       	ld.ub	r10,--r8
8000610a:	f2 0a 18 00 	cp.b	r10,r9
8000610e:	ce f0       	breq	800060ec <_dtoa_r+0x704>
80006110:	50 66       	stdsp	sp[0x18],r6
80006112:	11 89       	ld.ub	r9,r8[0x0]
80006114:	2f f9       	sub	r9,-1
80006116:	b0 89       	st.b	r8[0x0],r9
80006118:	e0 8f 02 42 	bral	8000659c <_dtoa_r+0xbb4>
8000611c:	e0 a0 0e e6 	rcall	80007ee8 <__avr32_f64_mul>
80006120:	2f f4       	sub	r4,-1
80006122:	fa eb 00 08 	st.d	sp[8],r10
80006126:	30 08       	mov	r8,0
80006128:	30 09       	mov	r9,0
8000612a:	e0 a0 11 aa 	rcall	8000847e <__avr32_f64_cmp_eq>
8000612e:	ca 60       	breq	8000607a <_dtoa_r+0x692>
80006130:	e0 8f 02 35 	bral	8000659a <_dtoa_r+0xbb2>
80006134:	40 d8       	lddsp	r8,sp[0x34]
80006136:	58 08       	cp.w	r8,0
80006138:	c0 51       	brne	80006142 <_dtoa_r+0x75a>
8000613a:	04 98       	mov	r8,r2
8000613c:	00 95       	mov	r5,r0
8000613e:	40 d4       	lddsp	r4,sp[0x34]
80006140:	c3 78       	rjmp	800061ae <_dtoa_r+0x7c6>
80006142:	40 c5       	lddsp	r5,sp[0x30]
80006144:	58 15       	cp.w	r5,1
80006146:	e0 89 00 0f 	brgt	80006164 <_dtoa_r+0x77c>
8000614a:	41 74       	lddsp	r4,sp[0x5c]
8000614c:	58 04       	cp.w	r4,0
8000614e:	c0 40       	breq	80006156 <_dtoa_r+0x76e>
80006150:	f4 c9 fb cd 	sub	r9,r10,-1075
80006154:	c0 48       	rjmp	8000615c <_dtoa_r+0x774>
80006156:	41 99       	lddsp	r9,sp[0x64]
80006158:	f2 09 11 36 	rsub	r9,r9,54
8000615c:	04 98       	mov	r8,r2
8000615e:	00 95       	mov	r5,r0
80006160:	c1 c8       	rjmp	80006198 <_dtoa_r+0x7b0>
80006162:	d7 03       	nop
80006164:	e2 c8 00 01 	sub	r8,r1,1
80006168:	58 01       	cp.w	r1,0
8000616a:	e0 05 17 40 	movge	r5,r0
8000616e:	e2 09 17 40 	movge	r9,r1
80006172:	e1 d1 e5 15 	sublt	r5,r0,r1
80006176:	f9 b9 05 00 	movlt	r9,0
8000617a:	10 32       	cp.w	r2,r8
8000617c:	e5 d8 e4 18 	subge	r8,r2,r8
80006180:	f1 d2 e5 18 	sublt	r8,r8,r2
80006184:	e5 d8 e5 02 	addlt	r2,r2,r8
80006188:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000618c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006190:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006194:	f9 b8 05 00 	movlt	r8,0
80006198:	40 4b       	lddsp	r11,sp[0x10]
8000619a:	12 0b       	add	r11,r9
8000619c:	50 08       	stdsp	sp[0x0],r8
8000619e:	50 4b       	stdsp	sp[0x10],r11
800061a0:	12 00       	add	r0,r9
800061a2:	30 1b       	mov	r11,1
800061a4:	0e 9c       	mov	r12,r7
800061a6:	e0 a0 0a d1 	rcall	80007748 <__i2b>
800061aa:	40 08       	lddsp	r8,sp[0x0]
800061ac:	18 94       	mov	r4,r12
800061ae:	40 4a       	lddsp	r10,sp[0x10]
800061b0:	58 05       	cp.w	r5,0
800061b2:	5f 99       	srgt	r9
800061b4:	58 0a       	cp.w	r10,0
800061b6:	5f 9a       	srgt	r10
800061b8:	f5 e9 00 09 	and	r9,r10,r9
800061bc:	c0 80       	breq	800061cc <_dtoa_r+0x7e4>
800061be:	40 4c       	lddsp	r12,sp[0x10]
800061c0:	f8 05 0d 49 	min	r9,r12,r5
800061c4:	12 1c       	sub	r12,r9
800061c6:	12 10       	sub	r0,r9
800061c8:	50 4c       	stdsp	sp[0x10],r12
800061ca:	12 15       	sub	r5,r9
800061cc:	58 02       	cp.w	r2,0
800061ce:	e0 8a 00 27 	brle	8000621c <_dtoa_r+0x834>
800061d2:	40 db       	lddsp	r11,sp[0x34]
800061d4:	58 0b       	cp.w	r11,0
800061d6:	c1 d0       	breq	80006210 <_dtoa_r+0x828>
800061d8:	58 08       	cp.w	r8,0
800061da:	e0 8a 00 17 	brle	80006208 <_dtoa_r+0x820>
800061de:	10 9a       	mov	r10,r8
800061e0:	50 08       	stdsp	sp[0x0],r8
800061e2:	08 9b       	mov	r11,r4
800061e4:	0e 9c       	mov	r12,r7
800061e6:	e0 a0 0a f7 	rcall	800077d4 <__pow5mult>
800061ea:	06 9a       	mov	r10,r3
800061ec:	18 9b       	mov	r11,r12
800061ee:	18 94       	mov	r4,r12
800061f0:	0e 9c       	mov	r12,r7
800061f2:	e0 a0 0a 2b 	rcall	80007648 <__multiply>
800061f6:	18 99       	mov	r9,r12
800061f8:	06 9b       	mov	r11,r3
800061fa:	50 19       	stdsp	sp[0x4],r9
800061fc:	0e 9c       	mov	r12,r7
800061fe:	e0 a0 08 d7 	rcall	800073ac <_Bfree>
80006202:	40 19       	lddsp	r9,sp[0x4]
80006204:	40 08       	lddsp	r8,sp[0x0]
80006206:	12 93       	mov	r3,r9
80006208:	e4 08 01 0a 	sub	r10,r2,r8
8000620c:	c0 80       	breq	8000621c <_dtoa_r+0x834>
8000620e:	c0 28       	rjmp	80006212 <_dtoa_r+0x82a>
80006210:	04 9a       	mov	r10,r2
80006212:	06 9b       	mov	r11,r3
80006214:	0e 9c       	mov	r12,r7
80006216:	e0 a0 0a df 	rcall	800077d4 <__pow5mult>
8000621a:	18 93       	mov	r3,r12
8000621c:	30 1b       	mov	r11,1
8000621e:	0e 9c       	mov	r12,r7
80006220:	e0 a0 0a 94 	rcall	80007748 <__i2b>
80006224:	41 1a       	lddsp	r10,sp[0x44]
80006226:	18 92       	mov	r2,r12
80006228:	58 0a       	cp.w	r10,0
8000622a:	e0 8a 00 07 	brle	80006238 <_dtoa_r+0x850>
8000622e:	18 9b       	mov	r11,r12
80006230:	0e 9c       	mov	r12,r7
80006232:	e0 a0 0a d1 	rcall	800077d4 <__pow5mult>
80006236:	18 92       	mov	r2,r12
80006238:	40 c9       	lddsp	r9,sp[0x30]
8000623a:	58 19       	cp.w	r9,1
8000623c:	e0 89 00 14 	brgt	80006264 <_dtoa_r+0x87c>
80006240:	40 38       	lddsp	r8,sp[0xc]
80006242:	58 08       	cp.w	r8,0
80006244:	c1 01       	brne	80006264 <_dtoa_r+0x87c>
80006246:	40 29       	lddsp	r9,sp[0x8]
80006248:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000624c:	c0 c1       	brne	80006264 <_dtoa_r+0x87c>
8000624e:	12 98       	mov	r8,r9
80006250:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006254:	c0 80       	breq	80006264 <_dtoa_r+0x87c>
80006256:	40 4c       	lddsp	r12,sp[0x10]
80006258:	30 1b       	mov	r11,1
8000625a:	2f fc       	sub	r12,-1
8000625c:	2f f0       	sub	r0,-1
8000625e:	50 4c       	stdsp	sp[0x10],r12
80006260:	50 6b       	stdsp	sp[0x18],r11
80006262:	c0 38       	rjmp	80006268 <_dtoa_r+0x880>
80006264:	30 0a       	mov	r10,0
80006266:	50 6a       	stdsp	sp[0x18],r10
80006268:	41 19       	lddsp	r9,sp[0x44]
8000626a:	58 09       	cp.w	r9,0
8000626c:	c0 31       	brne	80006272 <_dtoa_r+0x88a>
8000626e:	30 1c       	mov	r12,1
80006270:	c0 98       	rjmp	80006282 <_dtoa_r+0x89a>
80006272:	64 48       	ld.w	r8,r2[0x10]
80006274:	2f c8       	sub	r8,-4
80006276:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000627a:	e0 a0 08 08 	rcall	8000728a <__hi0bits>
8000627e:	f8 0c 11 20 	rsub	r12,r12,32
80006282:	40 4b       	lddsp	r11,sp[0x10]
80006284:	f8 0b 00 08 	add	r8,r12,r11
80006288:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000628c:	c0 c0       	breq	800062a4 <_dtoa_r+0x8bc>
8000628e:	f0 08 11 20 	rsub	r8,r8,32
80006292:	58 48       	cp.w	r8,4
80006294:	e0 8a 00 06 	brle	800062a0 <_dtoa_r+0x8b8>
80006298:	20 48       	sub	r8,4
8000629a:	10 0b       	add	r11,r8
8000629c:	50 4b       	stdsp	sp[0x10],r11
8000629e:	c0 78       	rjmp	800062ac <_dtoa_r+0x8c4>
800062a0:	58 48       	cp.w	r8,4
800062a2:	c0 70       	breq	800062b0 <_dtoa_r+0x8c8>
800062a4:	40 4a       	lddsp	r10,sp[0x10]
800062a6:	2e 48       	sub	r8,-28
800062a8:	10 0a       	add	r10,r8
800062aa:	50 4a       	stdsp	sp[0x10],r10
800062ac:	10 00       	add	r0,r8
800062ae:	10 05       	add	r5,r8
800062b0:	58 00       	cp.w	r0,0
800062b2:	e0 8a 00 08 	brle	800062c2 <_dtoa_r+0x8da>
800062b6:	06 9b       	mov	r11,r3
800062b8:	00 9a       	mov	r10,r0
800062ba:	0e 9c       	mov	r12,r7
800062bc:	e0 a0 09 82 	rcall	800075c0 <__lshift>
800062c0:	18 93       	mov	r3,r12
800062c2:	40 49       	lddsp	r9,sp[0x10]
800062c4:	58 09       	cp.w	r9,0
800062c6:	e0 8a 00 08 	brle	800062d6 <_dtoa_r+0x8ee>
800062ca:	04 9b       	mov	r11,r2
800062cc:	12 9a       	mov	r10,r9
800062ce:	0e 9c       	mov	r12,r7
800062d0:	e0 a0 09 78 	rcall	800075c0 <__lshift>
800062d4:	18 92       	mov	r2,r12
800062d6:	41 48       	lddsp	r8,sp[0x50]
800062d8:	58 08       	cp.w	r8,0
800062da:	c1 b0       	breq	80006310 <_dtoa_r+0x928>
800062dc:	04 9b       	mov	r11,r2
800062de:	06 9c       	mov	r12,r3
800062e0:	e0 a0 08 4c 	rcall	80007378 <__mcmp>
800062e4:	c1 64       	brge	80006310 <_dtoa_r+0x928>
800062e6:	06 9b       	mov	r11,r3
800062e8:	30 09       	mov	r9,0
800062ea:	30 aa       	mov	r10,10
800062ec:	0e 9c       	mov	r12,r7
800062ee:	e0 a0 0a 35 	rcall	80007758 <__multadd>
800062f2:	20 16       	sub	r6,1
800062f4:	18 93       	mov	r3,r12
800062f6:	40 dc       	lddsp	r12,sp[0x34]
800062f8:	58 0c       	cp.w	r12,0
800062fa:	c0 31       	brne	80006300 <_dtoa_r+0x918>
800062fc:	40 91       	lddsp	r1,sp[0x24]
800062fe:	c0 98       	rjmp	80006310 <_dtoa_r+0x928>
80006300:	08 9b       	mov	r11,r4
80006302:	40 91       	lddsp	r1,sp[0x24]
80006304:	30 09       	mov	r9,0
80006306:	30 aa       	mov	r10,10
80006308:	0e 9c       	mov	r12,r7
8000630a:	e0 a0 0a 27 	rcall	80007758 <__multadd>
8000630e:	18 94       	mov	r4,r12
80006310:	58 01       	cp.w	r1,0
80006312:	5f a9       	srle	r9
80006314:	40 cb       	lddsp	r11,sp[0x30]
80006316:	58 2b       	cp.w	r11,2
80006318:	5f 98       	srgt	r8
8000631a:	f3 e8 00 08 	and	r8,r9,r8
8000631e:	c2 50       	breq	80006368 <_dtoa_r+0x980>
80006320:	58 01       	cp.w	r1,0
80006322:	c1 11       	brne	80006344 <_dtoa_r+0x95c>
80006324:	04 9b       	mov	r11,r2
80006326:	02 99       	mov	r9,r1
80006328:	30 5a       	mov	r10,5
8000632a:	0e 9c       	mov	r12,r7
8000632c:	e0 a0 0a 16 	rcall	80007758 <__multadd>
80006330:	18 92       	mov	r2,r12
80006332:	18 9b       	mov	r11,r12
80006334:	06 9c       	mov	r12,r3
80006336:	e0 a0 08 21 	rcall	80007378 <__mcmp>
8000633a:	e0 89 00 0f 	brgt	80006358 <_dtoa_r+0x970>
8000633e:	c0 38       	rjmp	80006344 <_dtoa_r+0x95c>
80006340:	30 02       	mov	r2,0
80006342:	04 94       	mov	r4,r2
80006344:	40 ea       	lddsp	r10,sp[0x38]
80006346:	30 09       	mov	r9,0
80006348:	5c da       	com	r10
8000634a:	40 85       	lddsp	r5,sp[0x20]
8000634c:	50 6a       	stdsp	sp[0x18],r10
8000634e:	50 49       	stdsp	sp[0x10],r9
80006350:	c0 f9       	rjmp	8000656e <_dtoa_r+0xb86>
80006352:	08 92       	mov	r2,r4
80006354:	40 66       	lddsp	r6,sp[0x18]
80006356:	04 94       	mov	r4,r2
80006358:	2f f6       	sub	r6,-1
8000635a:	50 66       	stdsp	sp[0x18],r6
8000635c:	33 18       	mov	r8,49
8000635e:	40 85       	lddsp	r5,sp[0x20]
80006360:	0a c8       	st.b	r5++,r8
80006362:	30 08       	mov	r8,0
80006364:	50 48       	stdsp	sp[0x10],r8
80006366:	c0 49       	rjmp	8000656e <_dtoa_r+0xb86>
80006368:	40 dc       	lddsp	r12,sp[0x34]
8000636a:	58 0c       	cp.w	r12,0
8000636c:	e0 80 00 b5 	breq	800064d6 <_dtoa_r+0xaee>
80006370:	58 05       	cp.w	r5,0
80006372:	e0 8a 00 08 	brle	80006382 <_dtoa_r+0x99a>
80006376:	08 9b       	mov	r11,r4
80006378:	0a 9a       	mov	r10,r5
8000637a:	0e 9c       	mov	r12,r7
8000637c:	e0 a0 09 22 	rcall	800075c0 <__lshift>
80006380:	18 94       	mov	r4,r12
80006382:	40 6b       	lddsp	r11,sp[0x18]
80006384:	58 0b       	cp.w	r11,0
80006386:	c0 31       	brne	8000638c <_dtoa_r+0x9a4>
80006388:	08 9c       	mov	r12,r4
8000638a:	c1 38       	rjmp	800063b0 <_dtoa_r+0x9c8>
8000638c:	68 1b       	ld.w	r11,r4[0x4]
8000638e:	0e 9c       	mov	r12,r7
80006390:	e0 a0 08 28 	rcall	800073e0 <_Balloc>
80006394:	68 4a       	ld.w	r10,r4[0x10]
80006396:	18 95       	mov	r5,r12
80006398:	e8 cb ff f4 	sub	r11,r4,-12
8000639c:	2f ea       	sub	r10,-2
8000639e:	2f 4c       	sub	r12,-12
800063a0:	a3 6a       	lsl	r10,0x2
800063a2:	fe b0 e8 3f 	rcall	80003420 <memcpy>
800063a6:	0a 9b       	mov	r11,r5
800063a8:	30 1a       	mov	r10,1
800063aa:	0e 9c       	mov	r12,r7
800063ac:	e0 a0 09 0a 	rcall	800075c0 <__lshift>
800063b0:	50 44       	stdsp	sp[0x10],r4
800063b2:	40 3a       	lddsp	r10,sp[0xc]
800063b4:	30 19       	mov	r9,1
800063b6:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800063ba:	18 94       	mov	r4,r12
800063bc:	50 da       	stdsp	sp[0x34],r10
800063be:	40 85       	lddsp	r5,sp[0x20]
800063c0:	50 99       	stdsp	sp[0x24],r9
800063c2:	50 26       	stdsp	sp[0x8],r6
800063c4:	50 e1       	stdsp	sp[0x38],r1
800063c6:	04 9b       	mov	r11,r2
800063c8:	06 9c       	mov	r12,r3
800063ca:	fe b0 fa 7f 	rcall	800058c8 <quorem>
800063ce:	40 4b       	lddsp	r11,sp[0x10]
800063d0:	f8 c0 ff d0 	sub	r0,r12,-48
800063d4:	06 9c       	mov	r12,r3
800063d6:	e0 a0 07 d1 	rcall	80007378 <__mcmp>
800063da:	08 9a       	mov	r10,r4
800063dc:	50 6c       	stdsp	sp[0x18],r12
800063de:	04 9b       	mov	r11,r2
800063e0:	0e 9c       	mov	r12,r7
800063e2:	e0 a0 08 87 	rcall	800074f0 <__mdiff>
800063e6:	18 91       	mov	r1,r12
800063e8:	78 38       	ld.w	r8,r12[0xc]
800063ea:	58 08       	cp.w	r8,0
800063ec:	c0 30       	breq	800063f2 <_dtoa_r+0xa0a>
800063ee:	30 16       	mov	r6,1
800063f0:	c0 68       	rjmp	800063fc <_dtoa_r+0xa14>
800063f2:	18 9b       	mov	r11,r12
800063f4:	06 9c       	mov	r12,r3
800063f6:	e0 a0 07 c1 	rcall	80007378 <__mcmp>
800063fa:	18 96       	mov	r6,r12
800063fc:	0e 9c       	mov	r12,r7
800063fe:	02 9b       	mov	r11,r1
80006400:	e0 a0 07 d6 	rcall	800073ac <_Bfree>
80006404:	40 cc       	lddsp	r12,sp[0x30]
80006406:	ed ec 10 08 	or	r8,r6,r12
8000640a:	c0 d1       	brne	80006424 <_dtoa_r+0xa3c>
8000640c:	40 db       	lddsp	r11,sp[0x34]
8000640e:	58 0b       	cp.w	r11,0
80006410:	c0 a1       	brne	80006424 <_dtoa_r+0xa3c>
80006412:	40 26       	lddsp	r6,sp[0x8]
80006414:	e0 40 00 39 	cp.w	r0,57
80006418:	c3 00       	breq	80006478 <_dtoa_r+0xa90>
8000641a:	40 6a       	lddsp	r10,sp[0x18]
8000641c:	58 0a       	cp.w	r10,0
8000641e:	e0 89 00 24 	brgt	80006466 <_dtoa_r+0xa7e>
80006422:	c2 f8       	rjmp	80006480 <_dtoa_r+0xa98>
80006424:	40 69       	lddsp	r9,sp[0x18]
80006426:	58 09       	cp.w	r9,0
80006428:	c0 85       	brlt	80006438 <_dtoa_r+0xa50>
8000642a:	12 98       	mov	r8,r9
8000642c:	40 cc       	lddsp	r12,sp[0x30]
8000642e:	18 48       	or	r8,r12
80006430:	c1 d1       	brne	8000646a <_dtoa_r+0xa82>
80006432:	40 db       	lddsp	r11,sp[0x34]
80006434:	58 0b       	cp.w	r11,0
80006436:	c1 a1       	brne	8000646a <_dtoa_r+0xa82>
80006438:	0c 99       	mov	r9,r6
8000643a:	40 26       	lddsp	r6,sp[0x8]
8000643c:	58 09       	cp.w	r9,0
8000643e:	e0 8a 00 21 	brle	80006480 <_dtoa_r+0xa98>
80006442:	06 9b       	mov	r11,r3
80006444:	30 1a       	mov	r10,1
80006446:	0e 9c       	mov	r12,r7
80006448:	e0 a0 08 bc 	rcall	800075c0 <__lshift>
8000644c:	04 9b       	mov	r11,r2
8000644e:	18 93       	mov	r3,r12
80006450:	e0 a0 07 94 	rcall	80007378 <__mcmp>
80006454:	e0 89 00 06 	brgt	80006460 <_dtoa_r+0xa78>
80006458:	c1 41       	brne	80006480 <_dtoa_r+0xa98>
8000645a:	ed b0 00 00 	bld	r0,0x0
8000645e:	c1 11       	brne	80006480 <_dtoa_r+0xa98>
80006460:	e0 40 00 39 	cp.w	r0,57
80006464:	c0 a0       	breq	80006478 <_dtoa_r+0xa90>
80006466:	2f f0       	sub	r0,-1
80006468:	c0 c8       	rjmp	80006480 <_dtoa_r+0xa98>
8000646a:	58 06       	cp.w	r6,0
8000646c:	e0 8a 00 0c 	brle	80006484 <_dtoa_r+0xa9c>
80006470:	40 26       	lddsp	r6,sp[0x8]
80006472:	e0 40 00 39 	cp.w	r0,57
80006476:	c0 41       	brne	8000647e <_dtoa_r+0xa96>
80006478:	33 98       	mov	r8,57
8000647a:	0a c8       	st.b	r5++,r8
8000647c:	c6 78       	rjmp	8000654a <_dtoa_r+0xb62>
8000647e:	2f f0       	sub	r0,-1
80006480:	0a c0       	st.b	r5++,r0
80006482:	c7 58       	rjmp	8000656c <_dtoa_r+0xb84>
80006484:	0a c0       	st.b	r5++,r0
80006486:	40 9a       	lddsp	r10,sp[0x24]
80006488:	40 e9       	lddsp	r9,sp[0x38]
8000648a:	12 3a       	cp.w	r10,r9
8000648c:	c4 30       	breq	80006512 <_dtoa_r+0xb2a>
8000648e:	06 9b       	mov	r11,r3
80006490:	30 09       	mov	r9,0
80006492:	30 aa       	mov	r10,10
80006494:	0e 9c       	mov	r12,r7
80006496:	e0 a0 09 61 	rcall	80007758 <__multadd>
8000649a:	40 48       	lddsp	r8,sp[0x10]
8000649c:	18 93       	mov	r3,r12
8000649e:	08 38       	cp.w	r8,r4
800064a0:	c0 91       	brne	800064b2 <_dtoa_r+0xaca>
800064a2:	10 9b       	mov	r11,r8
800064a4:	30 09       	mov	r9,0
800064a6:	30 aa       	mov	r10,10
800064a8:	0e 9c       	mov	r12,r7
800064aa:	e0 a0 09 57 	rcall	80007758 <__multadd>
800064ae:	50 4c       	stdsp	sp[0x10],r12
800064b0:	c0 e8       	rjmp	800064cc <_dtoa_r+0xae4>
800064b2:	40 4b       	lddsp	r11,sp[0x10]
800064b4:	30 09       	mov	r9,0
800064b6:	30 aa       	mov	r10,10
800064b8:	0e 9c       	mov	r12,r7
800064ba:	e0 a0 09 4f 	rcall	80007758 <__multadd>
800064be:	08 9b       	mov	r11,r4
800064c0:	50 4c       	stdsp	sp[0x10],r12
800064c2:	30 09       	mov	r9,0
800064c4:	30 aa       	mov	r10,10
800064c6:	0e 9c       	mov	r12,r7
800064c8:	e0 a0 09 48 	rcall	80007758 <__multadd>
800064cc:	18 94       	mov	r4,r12
800064ce:	40 9c       	lddsp	r12,sp[0x24]
800064d0:	2f fc       	sub	r12,-1
800064d2:	50 9c       	stdsp	sp[0x24],r12
800064d4:	c7 9b       	rjmp	800063c6 <_dtoa_r+0x9de>
800064d6:	30 18       	mov	r8,1
800064d8:	06 90       	mov	r0,r3
800064da:	40 85       	lddsp	r5,sp[0x20]
800064dc:	08 93       	mov	r3,r4
800064de:	0c 94       	mov	r4,r6
800064e0:	10 96       	mov	r6,r8
800064e2:	04 9b       	mov	r11,r2
800064e4:	00 9c       	mov	r12,r0
800064e6:	fe b0 f9 f1 	rcall	800058c8 <quorem>
800064ea:	2d 0c       	sub	r12,-48
800064ec:	0a cc       	st.b	r5++,r12
800064ee:	02 36       	cp.w	r6,r1
800064f0:	c0 a4       	brge	80006504 <_dtoa_r+0xb1c>
800064f2:	00 9b       	mov	r11,r0
800064f4:	30 09       	mov	r9,0
800064f6:	30 aa       	mov	r10,10
800064f8:	0e 9c       	mov	r12,r7
800064fa:	2f f6       	sub	r6,-1
800064fc:	e0 a0 09 2e 	rcall	80007758 <__multadd>
80006500:	18 90       	mov	r0,r12
80006502:	cf 0b       	rjmp	800064e2 <_dtoa_r+0xafa>
80006504:	08 96       	mov	r6,r4
80006506:	30 0b       	mov	r11,0
80006508:	06 94       	mov	r4,r3
8000650a:	50 4b       	stdsp	sp[0x10],r11
8000650c:	00 93       	mov	r3,r0
8000650e:	18 90       	mov	r0,r12
80006510:	c0 28       	rjmp	80006514 <_dtoa_r+0xb2c>
80006512:	40 26       	lddsp	r6,sp[0x8]
80006514:	06 9b       	mov	r11,r3
80006516:	30 1a       	mov	r10,1
80006518:	0e 9c       	mov	r12,r7
8000651a:	e0 a0 08 53 	rcall	800075c0 <__lshift>
8000651e:	04 9b       	mov	r11,r2
80006520:	18 93       	mov	r3,r12
80006522:	e0 a0 07 2b 	rcall	80007378 <__mcmp>
80006526:	e0 89 00 12 	brgt	8000654a <_dtoa_r+0xb62>
8000652a:	c1 b1       	brne	80006560 <_dtoa_r+0xb78>
8000652c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006530:	c0 d1       	brne	8000654a <_dtoa_r+0xb62>
80006532:	c1 78       	rjmp	80006560 <_dtoa_r+0xb78>
80006534:	40 89       	lddsp	r9,sp[0x20]
80006536:	12 38       	cp.w	r8,r9
80006538:	c0 30       	breq	8000653e <_dtoa_r+0xb56>
8000653a:	10 95       	mov	r5,r8
8000653c:	c0 88       	rjmp	8000654c <_dtoa_r+0xb64>
8000653e:	2f f6       	sub	r6,-1
80006540:	50 66       	stdsp	sp[0x18],r6
80006542:	33 18       	mov	r8,49
80006544:	40 8c       	lddsp	r12,sp[0x20]
80006546:	b8 88       	st.b	r12[0x0],r8
80006548:	c1 38       	rjmp	8000656e <_dtoa_r+0xb86>
8000654a:	33 9a       	mov	r10,57
8000654c:	0a 98       	mov	r8,r5
8000654e:	11 79       	ld.ub	r9,--r8
80006550:	f4 09 18 00 	cp.b	r9,r10
80006554:	cf 00       	breq	80006534 <_dtoa_r+0xb4c>
80006556:	2f f9       	sub	r9,-1
80006558:	b0 89       	st.b	r8[0x0],r9
8000655a:	c0 98       	rjmp	8000656c <_dtoa_r+0xb84>
8000655c:	10 95       	mov	r5,r8
8000655e:	c0 28       	rjmp	80006562 <_dtoa_r+0xb7a>
80006560:	33 09       	mov	r9,48
80006562:	0a 98       	mov	r8,r5
80006564:	11 7a       	ld.ub	r10,--r8
80006566:	f2 0a 18 00 	cp.b	r10,r9
8000656a:	cf 90       	breq	8000655c <_dtoa_r+0xb74>
8000656c:	50 66       	stdsp	sp[0x18],r6
8000656e:	04 9b       	mov	r11,r2
80006570:	0e 9c       	mov	r12,r7
80006572:	e0 a0 07 1d 	rcall	800073ac <_Bfree>
80006576:	58 04       	cp.w	r4,0
80006578:	c1 20       	breq	8000659c <_dtoa_r+0xbb4>
8000657a:	40 4b       	lddsp	r11,sp[0x10]
8000657c:	08 3b       	cp.w	r11,r4
8000657e:	5f 19       	srne	r9
80006580:	58 0b       	cp.w	r11,0
80006582:	5f 18       	srne	r8
80006584:	f3 e8 00 08 	and	r8,r9,r8
80006588:	c0 40       	breq	80006590 <_dtoa_r+0xba8>
8000658a:	0e 9c       	mov	r12,r7
8000658c:	e0 a0 07 10 	rcall	800073ac <_Bfree>
80006590:	08 9b       	mov	r11,r4
80006592:	0e 9c       	mov	r12,r7
80006594:	e0 a0 07 0c 	rcall	800073ac <_Bfree>
80006598:	c0 28       	rjmp	8000659c <_dtoa_r+0xbb4>
8000659a:	50 66       	stdsp	sp[0x18],r6
8000659c:	0e 9c       	mov	r12,r7
8000659e:	06 9b       	mov	r11,r3
800065a0:	e0 a0 07 06 	rcall	800073ac <_Bfree>
800065a4:	30 08       	mov	r8,0
800065a6:	aa 88       	st.b	r5[0x0],r8
800065a8:	40 68       	lddsp	r8,sp[0x18]
800065aa:	41 5a       	lddsp	r10,sp[0x54]
800065ac:	2f f8       	sub	r8,-1
800065ae:	41 29       	lddsp	r9,sp[0x48]
800065b0:	95 08       	st.w	r10[0x0],r8
800065b2:	40 8c       	lddsp	r12,sp[0x20]
800065b4:	58 09       	cp.w	r9,0
800065b6:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800065ba:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800065be:	2e 6d       	sub	sp,-104
800065c0:	d8 32       	popm	r0-r7,pc
800065c2:	d7 03       	nop

800065c4 <_fflush_r>:
800065c4:	d4 21       	pushm	r4-r7,lr
800065c6:	16 97       	mov	r7,r11
800065c8:	18 96       	mov	r6,r12
800065ca:	76 48       	ld.w	r8,r11[0x10]
800065cc:	58 08       	cp.w	r8,0
800065ce:	c7 f0       	breq	800066cc <_fflush_r+0x108>
800065d0:	58 0c       	cp.w	r12,0
800065d2:	c0 50       	breq	800065dc <_fflush_r+0x18>
800065d4:	78 68       	ld.w	r8,r12[0x18]
800065d6:	58 08       	cp.w	r8,0
800065d8:	c0 21       	brne	800065dc <_fflush_r+0x18>
800065da:	cc dc       	rcall	80006774 <__sinit>
800065dc:	fe c8 d0 34 	sub	r8,pc,-12236
800065e0:	10 37       	cp.w	r7,r8
800065e2:	c0 31       	brne	800065e8 <_fflush_r+0x24>
800065e4:	6c 07       	ld.w	r7,r6[0x0]
800065e6:	c0 c8       	rjmp	800065fe <_fflush_r+0x3a>
800065e8:	fe c8 d0 20 	sub	r8,pc,-12256
800065ec:	10 37       	cp.w	r7,r8
800065ee:	c0 31       	brne	800065f4 <_fflush_r+0x30>
800065f0:	6c 17       	ld.w	r7,r6[0x4]
800065f2:	c0 68       	rjmp	800065fe <_fflush_r+0x3a>
800065f4:	fe c8 d0 0c 	sub	r8,pc,-12276
800065f8:	10 37       	cp.w	r7,r8
800065fa:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800065fe:	8e 6a       	ld.sh	r10,r7[0xc]
80006600:	14 98       	mov	r8,r10
80006602:	ed ba 00 03 	bld	r10,0x3
80006606:	c4 20       	breq	8000668a <_fflush_r+0xc6>
80006608:	ab ba       	sbr	r10,0xb
8000660a:	ae 6a       	st.h	r7[0xc],r10
8000660c:	6e 18       	ld.w	r8,r7[0x4]
8000660e:	58 08       	cp.w	r8,0
80006610:	e0 89 00 06 	brgt	8000661c <_fflush_r+0x58>
80006614:	6f 08       	ld.w	r8,r7[0x40]
80006616:	58 08       	cp.w	r8,0
80006618:	e0 8a 00 5a 	brle	800066cc <_fflush_r+0x108>
8000661c:	6e b8       	ld.w	r8,r7[0x2c]
8000661e:	58 08       	cp.w	r8,0
80006620:	c5 60       	breq	800066cc <_fflush_r+0x108>
80006622:	e2 1a 10 00 	andl	r10,0x1000,COH
80006626:	c0 30       	breq	8000662c <_fflush_r+0x68>
80006628:	6f 55       	ld.w	r5,r7[0x54]
8000662a:	c0 f8       	rjmp	80006648 <_fflush_r+0x84>
8000662c:	30 19       	mov	r9,1
8000662e:	6e 8b       	ld.w	r11,r7[0x20]
80006630:	0c 9c       	mov	r12,r6
80006632:	5d 18       	icall	r8
80006634:	18 95       	mov	r5,r12
80006636:	5b fc       	cp.w	r12,-1
80006638:	c0 81       	brne	80006648 <_fflush_r+0x84>
8000663a:	6c 38       	ld.w	r8,r6[0xc]
8000663c:	59 d8       	cp.w	r8,29
8000663e:	c4 70       	breq	800066cc <_fflush_r+0x108>
80006640:	8e 68       	ld.sh	r8,r7[0xc]
80006642:	a7 a8       	sbr	r8,0x6
80006644:	ae 68       	st.h	r7[0xc],r8
80006646:	d8 22       	popm	r4-r7,pc
80006648:	8e 68       	ld.sh	r8,r7[0xc]
8000664a:	ed b8 00 02 	bld	r8,0x2
8000664e:	c0 91       	brne	80006660 <_fflush_r+0x9c>
80006650:	6e 18       	ld.w	r8,r7[0x4]
80006652:	10 15       	sub	r5,r8
80006654:	6e d8       	ld.w	r8,r7[0x34]
80006656:	58 08       	cp.w	r8,0
80006658:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000665c:	eb d8 e1 15 	subne	r5,r5,r8
80006660:	6e b8       	ld.w	r8,r7[0x2c]
80006662:	0c 9c       	mov	r12,r6
80006664:	30 09       	mov	r9,0
80006666:	0a 9a       	mov	r10,r5
80006668:	6e 8b       	ld.w	r11,r7[0x20]
8000666a:	5d 18       	icall	r8
8000666c:	8e 68       	ld.sh	r8,r7[0xc]
8000666e:	0a 3c       	cp.w	r12,r5
80006670:	c2 61       	brne	800066bc <_fflush_r+0xf8>
80006672:	ab d8       	cbr	r8,0xb
80006674:	30 0c       	mov	r12,0
80006676:	6e 49       	ld.w	r9,r7[0x10]
80006678:	ae 68       	st.h	r7[0xc],r8
8000667a:	8f 1c       	st.w	r7[0x4],r12
8000667c:	8f 09       	st.w	r7[0x0],r9
8000667e:	ed b8 00 0c 	bld	r8,0xc
80006682:	c2 51       	brne	800066cc <_fflush_r+0x108>
80006684:	ef 45 00 54 	st.w	r7[84],r5
80006688:	d8 22       	popm	r4-r7,pc
8000668a:	6e 45       	ld.w	r5,r7[0x10]
8000668c:	58 05       	cp.w	r5,0
8000668e:	c1 f0       	breq	800066cc <_fflush_r+0x108>
80006690:	6e 04       	ld.w	r4,r7[0x0]
80006692:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006696:	8f 05       	st.w	r7[0x0],r5
80006698:	f9 b8 01 00 	movne	r8,0
8000669c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800066a0:	0a 14       	sub	r4,r5
800066a2:	8f 28       	st.w	r7[0x8],r8
800066a4:	c1 18       	rjmp	800066c6 <_fflush_r+0x102>
800066a6:	08 99       	mov	r9,r4
800066a8:	0a 9a       	mov	r10,r5
800066aa:	6e a8       	ld.w	r8,r7[0x28]
800066ac:	6e 8b       	ld.w	r11,r7[0x20]
800066ae:	0c 9c       	mov	r12,r6
800066b0:	5d 18       	icall	r8
800066b2:	18 14       	sub	r4,r12
800066b4:	58 0c       	cp.w	r12,0
800066b6:	e0 89 00 07 	brgt	800066c4 <_fflush_r+0x100>
800066ba:	8e 68       	ld.sh	r8,r7[0xc]
800066bc:	a7 a8       	sbr	r8,0x6
800066be:	3f fc       	mov	r12,-1
800066c0:	ae 68       	st.h	r7[0xc],r8
800066c2:	d8 22       	popm	r4-r7,pc
800066c4:	18 05       	add	r5,r12
800066c6:	58 04       	cp.w	r4,0
800066c8:	fe 99 ff ef 	brgt	800066a6 <_fflush_r+0xe2>
800066cc:	d8 2a       	popm	r4-r7,pc,r12=0
800066ce:	d7 03       	nop

800066d0 <__sfp_lock_acquire>:
800066d0:	5e fc       	retal	r12

800066d2 <__sfp_lock_release>:
800066d2:	5e fc       	retal	r12

800066d4 <_cleanup_r>:
800066d4:	d4 01       	pushm	lr
800066d6:	fe cb e8 6a 	sub	r11,pc,-6038
800066da:	e0 a0 02 fd 	rcall	80006cd4 <_fwalk>
800066de:	d8 02       	popm	pc

800066e0 <__sfmoreglue>:
800066e0:	d4 21       	pushm	r4-r7,lr
800066e2:	16 95       	mov	r5,r11
800066e4:	f6 06 10 5c 	mul	r6,r11,92
800066e8:	ec cb ff f4 	sub	r11,r6,-12
800066ec:	e0 a0 03 84 	rcall	80006df4 <_malloc_r>
800066f0:	18 97       	mov	r7,r12
800066f2:	c0 90       	breq	80006704 <__sfmoreglue+0x24>
800066f4:	99 15       	st.w	r12[0x4],r5
800066f6:	30 0b       	mov	r11,0
800066f8:	2f 4c       	sub	r12,-12
800066fa:	0c 9a       	mov	r10,r6
800066fc:	8f 2c       	st.w	r7[0x8],r12
800066fe:	8f 0b       	st.w	r7[0x0],r11
80006700:	e0 a0 05 bc 	rcall	80007278 <memset>
80006704:	0e 9c       	mov	r12,r7
80006706:	d8 22       	popm	r4-r7,pc

80006708 <__sfp>:
80006708:	d4 21       	pushm	r4-r7,lr
8000670a:	fe c8 d5 4a 	sub	r8,pc,-10934
8000670e:	18 96       	mov	r6,r12
80006710:	70 07       	ld.w	r7,r8[0x0]
80006712:	6e 68       	ld.w	r8,r7[0x18]
80006714:	58 08       	cp.w	r8,0
80006716:	c0 31       	brne	8000671c <__sfp+0x14>
80006718:	0e 9c       	mov	r12,r7
8000671a:	c2 dc       	rcall	80006774 <__sinit>
8000671c:	ee c7 ff 28 	sub	r7,r7,-216
80006720:	30 05       	mov	r5,0
80006722:	6e 2c       	ld.w	r12,r7[0x8]
80006724:	6e 18       	ld.w	r8,r7[0x4]
80006726:	c0 68       	rjmp	80006732 <__sfp+0x2a>
80006728:	98 69       	ld.sh	r9,r12[0xc]
8000672a:	ea 09 19 00 	cp.h	r9,r5
8000672e:	c1 10       	breq	80006750 <__sfp+0x48>
80006730:	2a 4c       	sub	r12,-92
80006732:	20 18       	sub	r8,1
80006734:	cf a7       	brpl	80006728 <__sfp+0x20>
80006736:	6e 08       	ld.w	r8,r7[0x0]
80006738:	58 08       	cp.w	r8,0
8000673a:	c0 61       	brne	80006746 <__sfp+0x3e>
8000673c:	30 4b       	mov	r11,4
8000673e:	0c 9c       	mov	r12,r6
80006740:	cd 0f       	rcall	800066e0 <__sfmoreglue>
80006742:	8f 0c       	st.w	r7[0x0],r12
80006744:	c0 30       	breq	8000674a <__sfp+0x42>
80006746:	6e 07       	ld.w	r7,r7[0x0]
80006748:	ce db       	rjmp	80006722 <__sfp+0x1a>
8000674a:	30 c8       	mov	r8,12
8000674c:	8d 38       	st.w	r6[0xc],r8
8000674e:	d8 22       	popm	r4-r7,pc
80006750:	30 08       	mov	r8,0
80006752:	f9 48 00 4c 	st.w	r12[76],r8
80006756:	99 08       	st.w	r12[0x0],r8
80006758:	99 28       	st.w	r12[0x8],r8
8000675a:	99 18       	st.w	r12[0x4],r8
8000675c:	99 48       	st.w	r12[0x10],r8
8000675e:	99 58       	st.w	r12[0x14],r8
80006760:	99 68       	st.w	r12[0x18],r8
80006762:	99 d8       	st.w	r12[0x34],r8
80006764:	99 e8       	st.w	r12[0x38],r8
80006766:	f9 48 00 48 	st.w	r12[72],r8
8000676a:	3f f8       	mov	r8,-1
8000676c:	b8 78       	st.h	r12[0xe],r8
8000676e:	30 18       	mov	r8,1
80006770:	b8 68       	st.h	r12[0xc],r8
80006772:	d8 22       	popm	r4-r7,pc

80006774 <__sinit>:
80006774:	d4 21       	pushm	r4-r7,lr
80006776:	18 96       	mov	r6,r12
80006778:	78 67       	ld.w	r7,r12[0x18]
8000677a:	58 07       	cp.w	r7,0
8000677c:	c4 91       	brne	8000680e <__sinit+0x9a>
8000677e:	fe c8 00 aa 	sub	r8,pc,170
80006782:	30 15       	mov	r5,1
80006784:	99 a8       	st.w	r12[0x28],r8
80006786:	f9 47 00 d8 	st.w	r12[216],r7
8000678a:	f9 47 00 dc 	st.w	r12[220],r7
8000678e:	f9 47 00 e0 	st.w	r12[224],r7
80006792:	99 65       	st.w	r12[0x18],r5
80006794:	cb af       	rcall	80006708 <__sfp>
80006796:	8d 0c       	st.w	r6[0x0],r12
80006798:	0c 9c       	mov	r12,r6
8000679a:	cb 7f       	rcall	80006708 <__sfp>
8000679c:	8d 1c       	st.w	r6[0x4],r12
8000679e:	0c 9c       	mov	r12,r6
800067a0:	cb 4f       	rcall	80006708 <__sfp>
800067a2:	6c 09       	ld.w	r9,r6[0x0]
800067a4:	30 48       	mov	r8,4
800067a6:	93 07       	st.w	r9[0x0],r7
800067a8:	b2 68       	st.h	r9[0xc],r8
800067aa:	93 17       	st.w	r9[0x4],r7
800067ac:	93 27       	st.w	r9[0x8],r7
800067ae:	6c 18       	ld.w	r8,r6[0x4]
800067b0:	b2 77       	st.h	r9[0xe],r7
800067b2:	93 47       	st.w	r9[0x10],r7
800067b4:	93 57       	st.w	r9[0x14],r7
800067b6:	93 67       	st.w	r9[0x18],r7
800067b8:	93 89       	st.w	r9[0x20],r9
800067ba:	91 07       	st.w	r8[0x0],r7
800067bc:	91 17       	st.w	r8[0x4],r7
800067be:	91 27       	st.w	r8[0x8],r7
800067c0:	fe ce eb e4 	sub	lr,pc,-5148
800067c4:	fe cb ec 14 	sub	r11,pc,-5100
800067c8:	93 9e       	st.w	r9[0x24],lr
800067ca:	93 ab       	st.w	r9[0x28],r11
800067cc:	fe ca ec 3c 	sub	r10,pc,-5060
800067d0:	fe c4 ec 48 	sub	r4,pc,-5048
800067d4:	93 ba       	st.w	r9[0x2c],r10
800067d6:	93 c4       	st.w	r9[0x30],r4
800067d8:	30 99       	mov	r9,9
800067da:	b0 69       	st.h	r8[0xc],r9
800067dc:	b0 75       	st.h	r8[0xe],r5
800067de:	91 c4       	st.w	r8[0x30],r4
800067e0:	91 47       	st.w	r8[0x10],r7
800067e2:	91 57       	st.w	r8[0x14],r7
800067e4:	91 67       	st.w	r8[0x18],r7
800067e6:	91 88       	st.w	r8[0x20],r8
800067e8:	91 9e       	st.w	r8[0x24],lr
800067ea:	91 ab       	st.w	r8[0x28],r11
800067ec:	91 ba       	st.w	r8[0x2c],r10
800067ee:	8d 2c       	st.w	r6[0x8],r12
800067f0:	31 28       	mov	r8,18
800067f2:	99 07       	st.w	r12[0x0],r7
800067f4:	b8 68       	st.h	r12[0xc],r8
800067f6:	99 17       	st.w	r12[0x4],r7
800067f8:	99 27       	st.w	r12[0x8],r7
800067fa:	30 28       	mov	r8,2
800067fc:	b8 78       	st.h	r12[0xe],r8
800067fe:	99 c4       	st.w	r12[0x30],r4
80006800:	99 67       	st.w	r12[0x18],r7
80006802:	99 9e       	st.w	r12[0x24],lr
80006804:	99 ab       	st.w	r12[0x28],r11
80006806:	99 ba       	st.w	r12[0x2c],r10
80006808:	99 47       	st.w	r12[0x10],r7
8000680a:	99 57       	st.w	r12[0x14],r7
8000680c:	99 8c       	st.w	r12[0x20],r12
8000680e:	d8 22       	popm	r4-r7,pc

80006810 <_malloc_trim_r>:
80006810:	d4 21       	pushm	r4-r7,lr
80006812:	16 95       	mov	r5,r11
80006814:	18 97       	mov	r7,r12
80006816:	e0 a0 05 38 	rcall	80007286 <__malloc_lock>
8000681a:	e0 64 01 04 	mov	r4,260
8000681e:	68 28       	ld.w	r8,r4[0x8]
80006820:	70 16       	ld.w	r6,r8[0x4]
80006822:	e0 16 ff fc 	andl	r6,0xfffc
80006826:	ec c8 ff 91 	sub	r8,r6,-111
8000682a:	f0 05 01 05 	sub	r5,r8,r5
8000682e:	e0 15 ff 80 	andl	r5,0xff80
80006832:	ea c5 00 80 	sub	r5,r5,128
80006836:	e0 45 00 7f 	cp.w	r5,127
8000683a:	e0 8a 00 25 	brle	80006884 <_malloc_trim_r+0x74>
8000683e:	30 0b       	mov	r11,0
80006840:	0e 9c       	mov	r12,r7
80006842:	e0 a0 09 93 	rcall	80007b68 <_sbrk_r>
80006846:	68 28       	ld.w	r8,r4[0x8]
80006848:	0c 08       	add	r8,r6
8000684a:	10 3c       	cp.w	r12,r8
8000684c:	c1 c1       	brne	80006884 <_malloc_trim_r+0x74>
8000684e:	ea 0b 11 00 	rsub	r11,r5,0
80006852:	0e 9c       	mov	r12,r7
80006854:	e0 a0 09 8a 	rcall	80007b68 <_sbrk_r>
80006858:	5b fc       	cp.w	r12,-1
8000685a:	c1 91       	brne	8000688c <_malloc_trim_r+0x7c>
8000685c:	30 0b       	mov	r11,0
8000685e:	0e 9c       	mov	r12,r7
80006860:	e0 a0 09 84 	rcall	80007b68 <_sbrk_r>
80006864:	68 28       	ld.w	r8,r4[0x8]
80006866:	f8 08 01 09 	sub	r9,r12,r8
8000686a:	58 f9       	cp.w	r9,15
8000686c:	e0 8a 00 0c 	brle	80006884 <_malloc_trim_r+0x74>
80006870:	a1 a9       	sbr	r9,0x0
80006872:	91 19       	st.w	r8[0x4],r9
80006874:	e0 68 05 10 	mov	r8,1296
80006878:	70 09       	ld.w	r9,r8[0x0]
8000687a:	e0 68 06 34 	mov	r8,1588
8000687e:	f8 09 01 09 	sub	r9,r12,r9
80006882:	91 09       	st.w	r8[0x0],r9
80006884:	0e 9c       	mov	r12,r7
80006886:	e0 a0 05 01 	rcall	80007288 <__malloc_unlock>
8000688a:	d8 2a       	popm	r4-r7,pc,r12=0
8000688c:	68 28       	ld.w	r8,r4[0x8]
8000688e:	0a 16       	sub	r6,r5
80006890:	a1 a6       	sbr	r6,0x0
80006892:	91 16       	st.w	r8[0x4],r6
80006894:	e0 68 06 34 	mov	r8,1588
80006898:	70 09       	ld.w	r9,r8[0x0]
8000689a:	0a 19       	sub	r9,r5
8000689c:	0e 9c       	mov	r12,r7
8000689e:	91 09       	st.w	r8[0x0],r9
800068a0:	e0 a0 04 f4 	rcall	80007288 <__malloc_unlock>
800068a4:	da 2a       	popm	r4-r7,pc,r12=1
800068a6:	d7 03       	nop

800068a8 <_free_r>:
800068a8:	d4 21       	pushm	r4-r7,lr
800068aa:	16 96       	mov	r6,r11
800068ac:	18 97       	mov	r7,r12
800068ae:	58 0b       	cp.w	r11,0
800068b0:	e0 80 00 c0 	breq	80006a30 <_free_r+0x188>
800068b4:	e0 a0 04 e9 	rcall	80007286 <__malloc_lock>
800068b8:	20 86       	sub	r6,8
800068ba:	e0 6a 01 04 	mov	r10,260
800068be:	6c 18       	ld.w	r8,r6[0x4]
800068c0:	74 2e       	ld.w	lr,r10[0x8]
800068c2:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800068c6:	a1 c8       	cbr	r8,0x0
800068c8:	ec 08 00 09 	add	r9,r6,r8
800068cc:	72 1b       	ld.w	r11,r9[0x4]
800068ce:	e0 1b ff fc 	andl	r11,0xfffc
800068d2:	1c 39       	cp.w	r9,lr
800068d4:	c1 e1       	brne	80006910 <_free_r+0x68>
800068d6:	f6 08 00 08 	add	r8,r11,r8
800068da:	58 0c       	cp.w	r12,0
800068dc:	c0 81       	brne	800068ec <_free_r+0x44>
800068de:	6c 09       	ld.w	r9,r6[0x0]
800068e0:	12 16       	sub	r6,r9
800068e2:	12 08       	add	r8,r9
800068e4:	6c 3b       	ld.w	r11,r6[0xc]
800068e6:	6c 29       	ld.w	r9,r6[0x8]
800068e8:	97 29       	st.w	r11[0x8],r9
800068ea:	93 3b       	st.w	r9[0xc],r11
800068ec:	10 99       	mov	r9,r8
800068ee:	95 26       	st.w	r10[0x8],r6
800068f0:	a1 a9       	sbr	r9,0x0
800068f2:	8d 19       	st.w	r6[0x4],r9
800068f4:	e0 69 05 0c 	mov	r9,1292
800068f8:	72 09       	ld.w	r9,r9[0x0]
800068fa:	12 38       	cp.w	r8,r9
800068fc:	c0 63       	brcs	80006908 <_free_r+0x60>
800068fe:	e0 68 06 30 	mov	r8,1584
80006902:	0e 9c       	mov	r12,r7
80006904:	70 0b       	ld.w	r11,r8[0x0]
80006906:	c8 5f       	rcall	80006810 <_malloc_trim_r>
80006908:	0e 9c       	mov	r12,r7
8000690a:	e0 a0 04 bf 	rcall	80007288 <__malloc_unlock>
8000690e:	d8 22       	popm	r4-r7,pc
80006910:	93 1b       	st.w	r9[0x4],r11
80006912:	58 0c       	cp.w	r12,0
80006914:	c0 30       	breq	8000691a <_free_r+0x72>
80006916:	30 0c       	mov	r12,0
80006918:	c1 08       	rjmp	80006938 <_free_r+0x90>
8000691a:	6c 0e       	ld.w	lr,r6[0x0]
8000691c:	f4 c5 ff f8 	sub	r5,r10,-8
80006920:	1c 16       	sub	r6,lr
80006922:	1c 08       	add	r8,lr
80006924:	6c 2e       	ld.w	lr,r6[0x8]
80006926:	0a 3e       	cp.w	lr,r5
80006928:	f9 bc 00 01 	moveq	r12,1
8000692c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006930:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006934:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006938:	f2 0b 00 0e 	add	lr,r9,r11
8000693c:	7c 1e       	ld.w	lr,lr[0x4]
8000693e:	ed be 00 00 	bld	lr,0x0
80006942:	c1 40       	breq	8000696a <_free_r+0xc2>
80006944:	16 08       	add	r8,r11
80006946:	58 0c       	cp.w	r12,0
80006948:	c0 d1       	brne	80006962 <_free_r+0xba>
8000694a:	e0 6e 01 04 	mov	lr,260
8000694e:	72 2b       	ld.w	r11,r9[0x8]
80006950:	2f 8e       	sub	lr,-8
80006952:	1c 3b       	cp.w	r11,lr
80006954:	c0 71       	brne	80006962 <_free_r+0xba>
80006956:	97 36       	st.w	r11[0xc],r6
80006958:	97 26       	st.w	r11[0x8],r6
8000695a:	8d 2b       	st.w	r6[0x8],r11
8000695c:	8d 3b       	st.w	r6[0xc],r11
8000695e:	30 1c       	mov	r12,1
80006960:	c0 58       	rjmp	8000696a <_free_r+0xc2>
80006962:	72 2b       	ld.w	r11,r9[0x8]
80006964:	72 39       	ld.w	r9,r9[0xc]
80006966:	93 2b       	st.w	r9[0x8],r11
80006968:	97 39       	st.w	r11[0xc],r9
8000696a:	10 99       	mov	r9,r8
8000696c:	ec 08 09 08 	st.w	r6[r8],r8
80006970:	a1 a9       	sbr	r9,0x0
80006972:	8d 19       	st.w	r6[0x4],r9
80006974:	58 0c       	cp.w	r12,0
80006976:	c5 a1       	brne	80006a2a <_free_r+0x182>
80006978:	e0 48 01 ff 	cp.w	r8,511
8000697c:	e0 8b 00 13 	brhi	800069a2 <_free_r+0xfa>
80006980:	a3 98       	lsr	r8,0x3
80006982:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006986:	72 2b       	ld.w	r11,r9[0x8]
80006988:	8d 39       	st.w	r6[0xc],r9
8000698a:	8d 2b       	st.w	r6[0x8],r11
8000698c:	97 36       	st.w	r11[0xc],r6
8000698e:	93 26       	st.w	r9[0x8],r6
80006990:	a3 48       	asr	r8,0x2
80006992:	74 19       	ld.w	r9,r10[0x4]
80006994:	30 1b       	mov	r11,1
80006996:	f6 08 09 48 	lsl	r8,r11,r8
8000699a:	f3 e8 10 08 	or	r8,r9,r8
8000699e:	95 18       	st.w	r10[0x4],r8
800069a0:	c4 58       	rjmp	80006a2a <_free_r+0x182>
800069a2:	f0 0b 16 09 	lsr	r11,r8,0x9
800069a6:	58 4b       	cp.w	r11,4
800069a8:	e0 8b 00 06 	brhi	800069b4 <_free_r+0x10c>
800069ac:	f0 0b 16 06 	lsr	r11,r8,0x6
800069b0:	2c 8b       	sub	r11,-56
800069b2:	c2 08       	rjmp	800069f2 <_free_r+0x14a>
800069b4:	59 4b       	cp.w	r11,20
800069b6:	e0 8b 00 04 	brhi	800069be <_free_r+0x116>
800069ba:	2a 5b       	sub	r11,-91
800069bc:	c1 b8       	rjmp	800069f2 <_free_r+0x14a>
800069be:	e0 4b 00 54 	cp.w	r11,84
800069c2:	e0 8b 00 06 	brhi	800069ce <_free_r+0x126>
800069c6:	f0 0b 16 0c 	lsr	r11,r8,0xc
800069ca:	29 2b       	sub	r11,-110
800069cc:	c1 38       	rjmp	800069f2 <_free_r+0x14a>
800069ce:	e0 4b 01 54 	cp.w	r11,340
800069d2:	e0 8b 00 06 	brhi	800069de <_free_r+0x136>
800069d6:	f0 0b 16 0f 	lsr	r11,r8,0xf
800069da:	28 9b       	sub	r11,-119
800069dc:	c0 b8       	rjmp	800069f2 <_free_r+0x14a>
800069de:	e0 4b 05 54 	cp.w	r11,1364
800069e2:	e0 88 00 05 	brls	800069ec <_free_r+0x144>
800069e6:	37 eb       	mov	r11,126
800069e8:	c0 58       	rjmp	800069f2 <_free_r+0x14a>
800069ea:	d7 03       	nop
800069ec:	f0 0b 16 12 	lsr	r11,r8,0x12
800069f0:	28 4b       	sub	r11,-124
800069f2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800069f6:	78 29       	ld.w	r9,r12[0x8]
800069f8:	18 39       	cp.w	r9,r12
800069fa:	c0 e1       	brne	80006a16 <_free_r+0x16e>
800069fc:	74 18       	ld.w	r8,r10[0x4]
800069fe:	a3 4b       	asr	r11,0x2
80006a00:	30 1c       	mov	r12,1
80006a02:	f8 0b 09 4b 	lsl	r11,r12,r11
80006a06:	f1 eb 10 0b 	or	r11,r8,r11
80006a0a:	12 98       	mov	r8,r9
80006a0c:	95 1b       	st.w	r10[0x4],r11
80006a0e:	c0 a8       	rjmp	80006a22 <_free_r+0x17a>
80006a10:	72 29       	ld.w	r9,r9[0x8]
80006a12:	18 39       	cp.w	r9,r12
80006a14:	c0 60       	breq	80006a20 <_free_r+0x178>
80006a16:	72 1a       	ld.w	r10,r9[0x4]
80006a18:	e0 1a ff fc 	andl	r10,0xfffc
80006a1c:	14 38       	cp.w	r8,r10
80006a1e:	cf 93       	brcs	80006a10 <_free_r+0x168>
80006a20:	72 38       	ld.w	r8,r9[0xc]
80006a22:	8d 38       	st.w	r6[0xc],r8
80006a24:	8d 29       	st.w	r6[0x8],r9
80006a26:	93 36       	st.w	r9[0xc],r6
80006a28:	91 26       	st.w	r8[0x8],r6
80006a2a:	0e 9c       	mov	r12,r7
80006a2c:	e0 a0 04 2e 	rcall	80007288 <__malloc_unlock>
80006a30:	d8 22       	popm	r4-r7,pc
80006a32:	d7 03       	nop

80006a34 <__sfvwrite_r>:
80006a34:	d4 31       	pushm	r0-r7,lr
80006a36:	20 3d       	sub	sp,12
80006a38:	14 94       	mov	r4,r10
80006a3a:	18 95       	mov	r5,r12
80006a3c:	16 97       	mov	r7,r11
80006a3e:	74 28       	ld.w	r8,r10[0x8]
80006a40:	58 08       	cp.w	r8,0
80006a42:	e0 80 01 45 	breq	80006ccc <__sfvwrite_r+0x298>
80006a46:	96 68       	ld.sh	r8,r11[0xc]
80006a48:	ed b8 00 03 	bld	r8,0x3
80006a4c:	c0 41       	brne	80006a54 <__sfvwrite_r+0x20>
80006a4e:	76 48       	ld.w	r8,r11[0x10]
80006a50:	58 08       	cp.w	r8,0
80006a52:	c0 c1       	brne	80006a6a <__sfvwrite_r+0x36>
80006a54:	0e 9b       	mov	r11,r7
80006a56:	0a 9c       	mov	r12,r5
80006a58:	fe b0 f6 ca 	rcall	800057ec <__swsetup_r>
80006a5c:	c0 70       	breq	80006a6a <__sfvwrite_r+0x36>
80006a5e:	8e 68       	ld.sh	r8,r7[0xc]
80006a60:	a7 a8       	sbr	r8,0x6
80006a62:	ae 68       	st.h	r7[0xc],r8
80006a64:	30 98       	mov	r8,9
80006a66:	8b 38       	st.w	r5[0xc],r8
80006a68:	c3 09       	rjmp	80006cc8 <__sfvwrite_r+0x294>
80006a6a:	8e 63       	ld.sh	r3,r7[0xc]
80006a6c:	68 00       	ld.w	r0,r4[0x0]
80006a6e:	06 96       	mov	r6,r3
80006a70:	e2 16 00 02 	andl	r6,0x2,COH
80006a74:	c2 10       	breq	80006ab6 <__sfvwrite_r+0x82>
80006a76:	30 03       	mov	r3,0
80006a78:	e0 62 04 00 	mov	r2,1024
80006a7c:	06 96       	mov	r6,r3
80006a7e:	c0 48       	rjmp	80006a86 <__sfvwrite_r+0x52>
80006a80:	60 03       	ld.w	r3,r0[0x0]
80006a82:	60 16       	ld.w	r6,r0[0x4]
80006a84:	2f 80       	sub	r0,-8
80006a86:	58 06       	cp.w	r6,0
80006a88:	cf c0       	breq	80006a80 <__sfvwrite_r+0x4c>
80006a8a:	e0 46 04 00 	cp.w	r6,1024
80006a8e:	ec 09 17 80 	movls	r9,r6
80006a92:	e4 09 17 b0 	movhi	r9,r2
80006a96:	06 9a       	mov	r10,r3
80006a98:	6e a8       	ld.w	r8,r7[0x28]
80006a9a:	6e 8b       	ld.w	r11,r7[0x20]
80006a9c:	0a 9c       	mov	r12,r5
80006a9e:	5d 18       	icall	r8
80006aa0:	18 16       	sub	r6,r12
80006aa2:	58 0c       	cp.w	r12,0
80006aa4:	e0 8a 01 0f 	brle	80006cc2 <__sfvwrite_r+0x28e>
80006aa8:	68 28       	ld.w	r8,r4[0x8]
80006aaa:	18 18       	sub	r8,r12
80006aac:	89 28       	st.w	r4[0x8],r8
80006aae:	e0 80 01 0f 	breq	80006ccc <__sfvwrite_r+0x298>
80006ab2:	18 03       	add	r3,r12
80006ab4:	ce 9b       	rjmp	80006a86 <__sfvwrite_r+0x52>
80006ab6:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006aba:	c0 70       	breq	80006ac8 <__sfvwrite_r+0x94>
80006abc:	50 06       	stdsp	sp[0x0],r6
80006abe:	0c 93       	mov	r3,r6
80006ac0:	0c 91       	mov	r1,r6
80006ac2:	50 15       	stdsp	sp[0x4],r5
80006ac4:	08 92       	mov	r2,r4
80006ac6:	c9 e8       	rjmp	80006c02 <__sfvwrite_r+0x1ce>
80006ac8:	06 96       	mov	r6,r3
80006aca:	08 91       	mov	r1,r4
80006acc:	c0 48       	rjmp	80006ad4 <__sfvwrite_r+0xa0>
80006ace:	60 03       	ld.w	r3,r0[0x0]
80006ad0:	60 16       	ld.w	r6,r0[0x4]
80006ad2:	2f 80       	sub	r0,-8
80006ad4:	58 06       	cp.w	r6,0
80006ad6:	cf c0       	breq	80006ace <__sfvwrite_r+0x9a>
80006ad8:	8e 68       	ld.sh	r8,r7[0xc]
80006ada:	6e 24       	ld.w	r4,r7[0x8]
80006adc:	10 99       	mov	r9,r8
80006ade:	e2 19 02 00 	andl	r9,0x200,COH
80006ae2:	c5 50       	breq	80006b8c <__sfvwrite_r+0x158>
80006ae4:	08 36       	cp.w	r6,r4
80006ae6:	c4 33       	brcs	80006b6c <__sfvwrite_r+0x138>
80006ae8:	10 99       	mov	r9,r8
80006aea:	e2 19 04 80 	andl	r9,0x480,COH
80006aee:	c3 f0       	breq	80006b6c <__sfvwrite_r+0x138>
80006af0:	6e 4b       	ld.w	r11,r7[0x10]
80006af2:	6e 09       	ld.w	r9,r7[0x0]
80006af4:	16 19       	sub	r9,r11
80006af6:	50 09       	stdsp	sp[0x0],r9
80006af8:	6e 59       	ld.w	r9,r7[0x14]
80006afa:	10 9c       	mov	r12,r8
80006afc:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006b00:	30 28       	mov	r8,2
80006b02:	f4 08 0c 08 	divs	r8,r10,r8
80006b06:	fa e9 00 04 	st.d	sp[4],r8
80006b0a:	10 94       	mov	r4,r8
80006b0c:	40 09       	lddsp	r9,sp[0x0]
80006b0e:	e2 1c 04 00 	andl	r12,0x400,COH
80006b12:	2f f9       	sub	r9,-1
80006b14:	0c 09       	add	r9,r6
80006b16:	12 38       	cp.w	r8,r9
80006b18:	f2 04 17 30 	movlo	r4,r9
80006b1c:	58 0c       	cp.w	r12,0
80006b1e:	c1 00       	breq	80006b3e <__sfvwrite_r+0x10a>
80006b20:	08 9b       	mov	r11,r4
80006b22:	0a 9c       	mov	r12,r5
80006b24:	c6 8d       	rcall	80006df4 <_malloc_r>
80006b26:	18 92       	mov	r2,r12
80006b28:	c1 40       	breq	80006b50 <__sfvwrite_r+0x11c>
80006b2a:	40 0a       	lddsp	r10,sp[0x0]
80006b2c:	6e 4b       	ld.w	r11,r7[0x10]
80006b2e:	fe b0 e4 79 	rcall	80003420 <memcpy>
80006b32:	8e 68       	ld.sh	r8,r7[0xc]
80006b34:	e0 18 fb 7f 	andl	r8,0xfb7f
80006b38:	a7 b8       	sbr	r8,0x7
80006b3a:	ae 68       	st.h	r7[0xc],r8
80006b3c:	c0 d8       	rjmp	80006b56 <__sfvwrite_r+0x122>
80006b3e:	08 9a       	mov	r10,r4
80006b40:	0a 9c       	mov	r12,r5
80006b42:	e0 a0 06 8f 	rcall	80007860 <_realloc_r>
80006b46:	18 92       	mov	r2,r12
80006b48:	c0 71       	brne	80006b56 <__sfvwrite_r+0x122>
80006b4a:	6e 4b       	ld.w	r11,r7[0x10]
80006b4c:	0a 9c       	mov	r12,r5
80006b4e:	ca de       	rcall	800068a8 <_free_r>
80006b50:	30 c8       	mov	r8,12
80006b52:	8b 38       	st.w	r5[0xc],r8
80006b54:	cb 78       	rjmp	80006cc2 <__sfvwrite_r+0x28e>
80006b56:	40 0a       	lddsp	r10,sp[0x0]
80006b58:	40 09       	lddsp	r9,sp[0x0]
80006b5a:	e8 0a 01 0a 	sub	r10,r4,r10
80006b5e:	e4 09 00 08 	add	r8,r2,r9
80006b62:	8f 54       	st.w	r7[0x14],r4
80006b64:	8f 2a       	st.w	r7[0x8],r10
80006b66:	8f 08       	st.w	r7[0x0],r8
80006b68:	8f 42       	st.w	r7[0x10],r2
80006b6a:	0c 94       	mov	r4,r6
80006b6c:	08 36       	cp.w	r6,r4
80006b6e:	ec 04 17 30 	movlo	r4,r6
80006b72:	06 9b       	mov	r11,r3
80006b74:	08 9a       	mov	r10,r4
80006b76:	6e 0c       	ld.w	r12,r7[0x0]
80006b78:	e0 a0 03 61 	rcall	8000723a <memmove>
80006b7c:	6e 08       	ld.w	r8,r7[0x0]
80006b7e:	08 08       	add	r8,r4
80006b80:	8f 08       	st.w	r7[0x0],r8
80006b82:	6e 28       	ld.w	r8,r7[0x8]
80006b84:	08 18       	sub	r8,r4
80006b86:	0c 94       	mov	r4,r6
80006b88:	8f 28       	st.w	r7[0x8],r8
80006b8a:	c3 08       	rjmp	80006bea <__sfvwrite_r+0x1b6>
80006b8c:	08 36       	cp.w	r6,r4
80006b8e:	5f ba       	srhi	r10
80006b90:	6e 0c       	ld.w	r12,r7[0x0]
80006b92:	6e 48       	ld.w	r8,r7[0x10]
80006b94:	10 3c       	cp.w	r12,r8
80006b96:	5f b8       	srhi	r8
80006b98:	f5 e8 00 08 	and	r8,r10,r8
80006b9c:	f2 08 18 00 	cp.b	r8,r9
80006ba0:	c0 e0       	breq	80006bbc <__sfvwrite_r+0x188>
80006ba2:	06 9b       	mov	r11,r3
80006ba4:	08 9a       	mov	r10,r4
80006ba6:	e0 a0 03 4a 	rcall	8000723a <memmove>
80006baa:	6e 08       	ld.w	r8,r7[0x0]
80006bac:	08 08       	add	r8,r4
80006bae:	0e 9b       	mov	r11,r7
80006bb0:	8f 08       	st.w	r7[0x0],r8
80006bb2:	0a 9c       	mov	r12,r5
80006bb4:	fe b0 fd 08 	rcall	800065c4 <_fflush_r>
80006bb8:	c1 90       	breq	80006bea <__sfvwrite_r+0x1b6>
80006bba:	c8 48       	rjmp	80006cc2 <__sfvwrite_r+0x28e>
80006bbc:	6e 59       	ld.w	r9,r7[0x14]
80006bbe:	12 36       	cp.w	r6,r9
80006bc0:	c0 a3       	brcs	80006bd4 <__sfvwrite_r+0x1a0>
80006bc2:	6e a8       	ld.w	r8,r7[0x28]
80006bc4:	06 9a       	mov	r10,r3
80006bc6:	6e 8b       	ld.w	r11,r7[0x20]
80006bc8:	0a 9c       	mov	r12,r5
80006bca:	5d 18       	icall	r8
80006bcc:	18 94       	mov	r4,r12
80006bce:	e0 89 00 0e 	brgt	80006bea <__sfvwrite_r+0x1b6>
80006bd2:	c7 88       	rjmp	80006cc2 <__sfvwrite_r+0x28e>
80006bd4:	0c 9a       	mov	r10,r6
80006bd6:	06 9b       	mov	r11,r3
80006bd8:	e0 a0 03 31 	rcall	8000723a <memmove>
80006bdc:	6e 08       	ld.w	r8,r7[0x0]
80006bde:	0c 08       	add	r8,r6
80006be0:	0c 94       	mov	r4,r6
80006be2:	8f 08       	st.w	r7[0x0],r8
80006be4:	6e 28       	ld.w	r8,r7[0x8]
80006be6:	0c 18       	sub	r8,r6
80006be8:	8f 28       	st.w	r7[0x8],r8
80006bea:	62 28       	ld.w	r8,r1[0x8]
80006bec:	08 18       	sub	r8,r4
80006bee:	83 28       	st.w	r1[0x8],r8
80006bf0:	c6 e0       	breq	80006ccc <__sfvwrite_r+0x298>
80006bf2:	08 16       	sub	r6,r4
80006bf4:	08 03       	add	r3,r4
80006bf6:	c6 fb       	rjmp	80006ad4 <__sfvwrite_r+0xa0>
80006bf8:	60 03       	ld.w	r3,r0[0x0]
80006bfa:	60 11       	ld.w	r1,r0[0x4]
80006bfc:	30 08       	mov	r8,0
80006bfe:	2f 80       	sub	r0,-8
80006c00:	50 08       	stdsp	sp[0x0],r8
80006c02:	58 01       	cp.w	r1,0
80006c04:	cf a0       	breq	80006bf8 <__sfvwrite_r+0x1c4>
80006c06:	40 0a       	lddsp	r10,sp[0x0]
80006c08:	58 0a       	cp.w	r10,0
80006c0a:	c1 51       	brne	80006c34 <__sfvwrite_r+0x200>
80006c0c:	e2 c6 ff ff 	sub	r6,r1,-1
80006c10:	02 9a       	mov	r10,r1
80006c12:	30 ab       	mov	r11,10
80006c14:	06 9c       	mov	r12,r3
80006c16:	e0 a0 03 07 	rcall	80007224 <memchr>
80006c1a:	f8 c8 ff ff 	sub	r8,r12,-1
80006c1e:	58 0c       	cp.w	r12,0
80006c20:	f1 d3 e1 16 	subne	r6,r8,r3
80006c24:	f9 b9 01 01 	movne	r9,1
80006c28:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006c2c:	f9 b8 00 01 	moveq	r8,1
80006c30:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006c34:	02 36       	cp.w	r6,r1
80006c36:	ec 04 17 80 	movls	r4,r6
80006c3a:	e2 04 17 b0 	movhi	r4,r1
80006c3e:	6e 59       	ld.w	r9,r7[0x14]
80006c40:	6e 25       	ld.w	r5,r7[0x8]
80006c42:	f2 05 00 05 	add	r5,r9,r5
80006c46:	0a 34       	cp.w	r4,r5
80006c48:	5f 9a       	srgt	r10
80006c4a:	6e 0c       	ld.w	r12,r7[0x0]
80006c4c:	6e 48       	ld.w	r8,r7[0x10]
80006c4e:	10 3c       	cp.w	r12,r8
80006c50:	5f b8       	srhi	r8
80006c52:	f5 e8 00 08 	and	r8,r10,r8
80006c56:	30 0a       	mov	r10,0
80006c58:	f4 08 18 00 	cp.b	r8,r10
80006c5c:	c0 e0       	breq	80006c78 <__sfvwrite_r+0x244>
80006c5e:	06 9b       	mov	r11,r3
80006c60:	0a 9a       	mov	r10,r5
80006c62:	e0 a0 02 ec 	rcall	8000723a <memmove>
80006c66:	6e 08       	ld.w	r8,r7[0x0]
80006c68:	0a 08       	add	r8,r5
80006c6a:	0e 9b       	mov	r11,r7
80006c6c:	8f 08       	st.w	r7[0x0],r8
80006c6e:	40 1c       	lddsp	r12,sp[0x4]
80006c70:	fe b0 fc aa 	rcall	800065c4 <_fflush_r>
80006c74:	c1 80       	breq	80006ca4 <__sfvwrite_r+0x270>
80006c76:	c2 68       	rjmp	80006cc2 <__sfvwrite_r+0x28e>
80006c78:	12 34       	cp.w	r4,r9
80006c7a:	c0 a5       	brlt	80006c8e <__sfvwrite_r+0x25a>
80006c7c:	6e a8       	ld.w	r8,r7[0x28]
80006c7e:	06 9a       	mov	r10,r3
80006c80:	6e 8b       	ld.w	r11,r7[0x20]
80006c82:	40 1c       	lddsp	r12,sp[0x4]
80006c84:	5d 18       	icall	r8
80006c86:	18 95       	mov	r5,r12
80006c88:	e0 89 00 0e 	brgt	80006ca4 <__sfvwrite_r+0x270>
80006c8c:	c1 b8       	rjmp	80006cc2 <__sfvwrite_r+0x28e>
80006c8e:	08 9a       	mov	r10,r4
80006c90:	06 9b       	mov	r11,r3
80006c92:	e0 a0 02 d4 	rcall	8000723a <memmove>
80006c96:	6e 08       	ld.w	r8,r7[0x0]
80006c98:	08 08       	add	r8,r4
80006c9a:	08 95       	mov	r5,r4
80006c9c:	8f 08       	st.w	r7[0x0],r8
80006c9e:	6e 28       	ld.w	r8,r7[0x8]
80006ca0:	08 18       	sub	r8,r4
80006ca2:	8f 28       	st.w	r7[0x8],r8
80006ca4:	0a 16       	sub	r6,r5
80006ca6:	c0 71       	brne	80006cb4 <__sfvwrite_r+0x280>
80006ca8:	0e 9b       	mov	r11,r7
80006caa:	40 1c       	lddsp	r12,sp[0x4]
80006cac:	fe b0 fc 8c 	rcall	800065c4 <_fflush_r>
80006cb0:	c0 91       	brne	80006cc2 <__sfvwrite_r+0x28e>
80006cb2:	50 06       	stdsp	sp[0x0],r6
80006cb4:	64 28       	ld.w	r8,r2[0x8]
80006cb6:	0a 18       	sub	r8,r5
80006cb8:	85 28       	st.w	r2[0x8],r8
80006cba:	c0 90       	breq	80006ccc <__sfvwrite_r+0x298>
80006cbc:	0a 11       	sub	r1,r5
80006cbe:	0a 03       	add	r3,r5
80006cc0:	ca 1b       	rjmp	80006c02 <__sfvwrite_r+0x1ce>
80006cc2:	8e 68       	ld.sh	r8,r7[0xc]
80006cc4:	a7 a8       	sbr	r8,0x6
80006cc6:	ae 68       	st.h	r7[0xc],r8
80006cc8:	3f fc       	mov	r12,-1
80006cca:	c0 28       	rjmp	80006cce <__sfvwrite_r+0x29a>
80006ccc:	30 0c       	mov	r12,0
80006cce:	2f dd       	sub	sp,-12
80006cd0:	d8 32       	popm	r0-r7,pc
80006cd2:	d7 03       	nop

80006cd4 <_fwalk>:
80006cd4:	d4 31       	pushm	r0-r7,lr
80006cd6:	30 05       	mov	r5,0
80006cd8:	16 91       	mov	r1,r11
80006cda:	f8 c7 ff 28 	sub	r7,r12,-216
80006cde:	0a 92       	mov	r2,r5
80006ce0:	fe b0 fc f8 	rcall	800066d0 <__sfp_lock_acquire>
80006ce4:	3f f3       	mov	r3,-1
80006ce6:	c1 68       	rjmp	80006d12 <_fwalk+0x3e>
80006ce8:	6e 26       	ld.w	r6,r7[0x8]
80006cea:	6e 14       	ld.w	r4,r7[0x4]
80006cec:	2f 46       	sub	r6,-12
80006cee:	c0 c8       	rjmp	80006d06 <_fwalk+0x32>
80006cf0:	8c 08       	ld.sh	r8,r6[0x0]
80006cf2:	e4 08 19 00 	cp.h	r8,r2
80006cf6:	c0 70       	breq	80006d04 <_fwalk+0x30>
80006cf8:	8c 18       	ld.sh	r8,r6[0x2]
80006cfa:	e6 08 19 00 	cp.h	r8,r3
80006cfe:	c0 30       	breq	80006d04 <_fwalk+0x30>
80006d00:	5d 11       	icall	r1
80006d02:	18 45       	or	r5,r12
80006d04:	2a 46       	sub	r6,-92
80006d06:	20 14       	sub	r4,1
80006d08:	ec cc 00 0c 	sub	r12,r6,12
80006d0c:	58 04       	cp.w	r4,0
80006d0e:	cf 14       	brge	80006cf0 <_fwalk+0x1c>
80006d10:	6e 07       	ld.w	r7,r7[0x0]
80006d12:	58 07       	cp.w	r7,0
80006d14:	ce a1       	brne	80006ce8 <_fwalk+0x14>
80006d16:	fe b0 fc de 	rcall	800066d2 <__sfp_lock_release>
80006d1a:	0a 9c       	mov	r12,r5
80006d1c:	d8 32       	popm	r0-r7,pc
80006d1e:	d7 03       	nop

80006d20 <_localeconv_r>:
80006d20:	fe cc d7 18 	sub	r12,pc,-10472
80006d24:	5e fc       	retal	r12
80006d26:	d7 03       	nop

80006d28 <__smakebuf_r>:
80006d28:	d4 21       	pushm	r4-r7,lr
80006d2a:	20 fd       	sub	sp,60
80006d2c:	96 68       	ld.sh	r8,r11[0xc]
80006d2e:	16 97       	mov	r7,r11
80006d30:	18 96       	mov	r6,r12
80006d32:	e2 18 00 02 	andl	r8,0x2,COH
80006d36:	c3 c1       	brne	80006dae <__smakebuf_r+0x86>
80006d38:	96 7b       	ld.sh	r11,r11[0xe]
80006d3a:	f0 0b 19 00 	cp.h	r11,r8
80006d3e:	c0 55       	brlt	80006d48 <__smakebuf_r+0x20>
80006d40:	1a 9a       	mov	r10,sp
80006d42:	e0 a0 08 9d 	rcall	80007e7c <_fstat_r>
80006d46:	c0 f4       	brge	80006d64 <__smakebuf_r+0x3c>
80006d48:	8e 65       	ld.sh	r5,r7[0xc]
80006d4a:	0a 98       	mov	r8,r5
80006d4c:	ab b8       	sbr	r8,0xb
80006d4e:	e2 15 00 80 	andl	r5,0x80,COH
80006d52:	ae 68       	st.h	r7[0xc],r8
80006d54:	30 04       	mov	r4,0
80006d56:	e0 68 04 00 	mov	r8,1024
80006d5a:	f9 b5 01 40 	movne	r5,64
80006d5e:	f0 05 17 00 	moveq	r5,r8
80006d62:	c1 c8       	rjmp	80006d9a <__smakebuf_r+0x72>
80006d64:	40 18       	lddsp	r8,sp[0x4]
80006d66:	e2 18 f0 00 	andl	r8,0xf000,COH
80006d6a:	e0 48 20 00 	cp.w	r8,8192
80006d6e:	5f 04       	sreq	r4
80006d70:	e0 48 80 00 	cp.w	r8,32768
80006d74:	c0 e1       	brne	80006d90 <__smakebuf_r+0x68>
80006d76:	6e b9       	ld.w	r9,r7[0x2c]
80006d78:	fe c8 f1 e8 	sub	r8,pc,-3608
80006d7c:	10 39       	cp.w	r9,r8
80006d7e:	c0 91       	brne	80006d90 <__smakebuf_r+0x68>
80006d80:	8e 68       	ld.sh	r8,r7[0xc]
80006d82:	e0 65 04 00 	mov	r5,1024
80006d86:	ab a8       	sbr	r8,0xa
80006d88:	ef 45 00 50 	st.w	r7[80],r5
80006d8c:	ae 68       	st.h	r7[0xc],r8
80006d8e:	c0 68       	rjmp	80006d9a <__smakebuf_r+0x72>
80006d90:	8e 68       	ld.sh	r8,r7[0xc]
80006d92:	e0 65 04 00 	mov	r5,1024
80006d96:	ab b8       	sbr	r8,0xb
80006d98:	ae 68       	st.h	r7[0xc],r8
80006d9a:	0a 9b       	mov	r11,r5
80006d9c:	0c 9c       	mov	r12,r6
80006d9e:	c2 bc       	rcall	80006df4 <_malloc_r>
80006da0:	8e 68       	ld.sh	r8,r7[0xc]
80006da2:	c0 d1       	brne	80006dbc <__smakebuf_r+0x94>
80006da4:	ed b8 00 09 	bld	r8,0x9
80006da8:	c1 b0       	breq	80006dde <__smakebuf_r+0xb6>
80006daa:	a1 b8       	sbr	r8,0x1
80006dac:	ae 68       	st.h	r7[0xc],r8
80006dae:	ee c8 ff b9 	sub	r8,r7,-71
80006db2:	8f 48       	st.w	r7[0x10],r8
80006db4:	8f 08       	st.w	r7[0x0],r8
80006db6:	30 18       	mov	r8,1
80006db8:	8f 58       	st.w	r7[0x14],r8
80006dba:	c1 28       	rjmp	80006dde <__smakebuf_r+0xb6>
80006dbc:	a7 b8       	sbr	r8,0x7
80006dbe:	8f 4c       	st.w	r7[0x10],r12
80006dc0:	ae 68       	st.h	r7[0xc],r8
80006dc2:	8f 55       	st.w	r7[0x14],r5
80006dc4:	fe c8 06 f0 	sub	r8,pc,1776
80006dc8:	8f 0c       	st.w	r7[0x0],r12
80006dca:	8d a8       	st.w	r6[0x28],r8
80006dcc:	58 04       	cp.w	r4,0
80006dce:	c0 80       	breq	80006dde <__smakebuf_r+0xb6>
80006dd0:	8e 7c       	ld.sh	r12,r7[0xe]
80006dd2:	e0 a0 07 47 	rcall	80007c60 <isatty>
80006dd6:	c0 40       	breq	80006dde <__smakebuf_r+0xb6>
80006dd8:	8e 68       	ld.sh	r8,r7[0xc]
80006dda:	a1 a8       	sbr	r8,0x0
80006ddc:	ae 68       	st.h	r7[0xc],r8
80006dde:	2f 1d       	sub	sp,-60
80006de0:	d8 22       	popm	r4-r7,pc
80006de2:	d7 03       	nop

80006de4 <malloc>:
80006de4:	d4 01       	pushm	lr
80006de6:	e0 68 01 00 	mov	r8,256
80006dea:	18 9b       	mov	r11,r12
80006dec:	70 0c       	ld.w	r12,r8[0x0]
80006dee:	c0 3c       	rcall	80006df4 <_malloc_r>
80006df0:	d8 02       	popm	pc
80006df2:	d7 03       	nop

80006df4 <_malloc_r>:
80006df4:	d4 31       	pushm	r0-r7,lr
80006df6:	f6 c8 ff f5 	sub	r8,r11,-11
80006dfa:	18 95       	mov	r5,r12
80006dfc:	10 97       	mov	r7,r8
80006dfe:	e0 17 ff f8 	andl	r7,0xfff8
80006e02:	59 68       	cp.w	r8,22
80006e04:	f9 b7 08 10 	movls	r7,16
80006e08:	16 37       	cp.w	r7,r11
80006e0a:	5f 38       	srlo	r8
80006e0c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006e10:	c0 50       	breq	80006e1a <_malloc_r+0x26>
80006e12:	30 c8       	mov	r8,12
80006e14:	99 38       	st.w	r12[0xc],r8
80006e16:	e0 8f 01 f7 	bral	80007204 <_malloc_r+0x410>
80006e1a:	e0 a0 02 36 	rcall	80007286 <__malloc_lock>
80006e1e:	e0 47 01 f7 	cp.w	r7,503
80006e22:	e0 8b 00 1d 	brhi	80006e5c <_malloc_r+0x68>
80006e26:	ee 03 16 03 	lsr	r3,r7,0x3
80006e2a:	e0 68 01 04 	mov	r8,260
80006e2e:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006e32:	70 36       	ld.w	r6,r8[0xc]
80006e34:	10 36       	cp.w	r6,r8
80006e36:	c0 61       	brne	80006e42 <_malloc_r+0x4e>
80006e38:	ec c8 ff f8 	sub	r8,r6,-8
80006e3c:	70 36       	ld.w	r6,r8[0xc]
80006e3e:	10 36       	cp.w	r6,r8
80006e40:	c0 c0       	breq	80006e58 <_malloc_r+0x64>
80006e42:	6c 18       	ld.w	r8,r6[0x4]
80006e44:	e0 18 ff fc 	andl	r8,0xfffc
80006e48:	6c 3a       	ld.w	r10,r6[0xc]
80006e4a:	ec 08 00 09 	add	r9,r6,r8
80006e4e:	0a 9c       	mov	r12,r5
80006e50:	6c 28       	ld.w	r8,r6[0x8]
80006e52:	95 28       	st.w	r10[0x8],r8
80006e54:	91 3a       	st.w	r8[0xc],r10
80006e56:	c4 78       	rjmp	80006ee4 <_malloc_r+0xf0>
80006e58:	2f e3       	sub	r3,-2
80006e5a:	c4 d8       	rjmp	80006ef4 <_malloc_r+0x100>
80006e5c:	ee 03 16 09 	lsr	r3,r7,0x9
80006e60:	c0 41       	brne	80006e68 <_malloc_r+0x74>
80006e62:	ee 03 16 03 	lsr	r3,r7,0x3
80006e66:	c2 68       	rjmp	80006eb2 <_malloc_r+0xbe>
80006e68:	58 43       	cp.w	r3,4
80006e6a:	e0 8b 00 06 	brhi	80006e76 <_malloc_r+0x82>
80006e6e:	ee 03 16 06 	lsr	r3,r7,0x6
80006e72:	2c 83       	sub	r3,-56
80006e74:	c1 f8       	rjmp	80006eb2 <_malloc_r+0xbe>
80006e76:	59 43       	cp.w	r3,20
80006e78:	e0 8b 00 04 	brhi	80006e80 <_malloc_r+0x8c>
80006e7c:	2a 53       	sub	r3,-91
80006e7e:	c1 a8       	rjmp	80006eb2 <_malloc_r+0xbe>
80006e80:	e0 43 00 54 	cp.w	r3,84
80006e84:	e0 8b 00 06 	brhi	80006e90 <_malloc_r+0x9c>
80006e88:	ee 03 16 0c 	lsr	r3,r7,0xc
80006e8c:	29 23       	sub	r3,-110
80006e8e:	c1 28       	rjmp	80006eb2 <_malloc_r+0xbe>
80006e90:	e0 43 01 54 	cp.w	r3,340
80006e94:	e0 8b 00 06 	brhi	80006ea0 <_malloc_r+0xac>
80006e98:	ee 03 16 0f 	lsr	r3,r7,0xf
80006e9c:	28 93       	sub	r3,-119
80006e9e:	c0 a8       	rjmp	80006eb2 <_malloc_r+0xbe>
80006ea0:	e0 43 05 54 	cp.w	r3,1364
80006ea4:	e0 88 00 04 	brls	80006eac <_malloc_r+0xb8>
80006ea8:	37 e3       	mov	r3,126
80006eaa:	c0 48       	rjmp	80006eb2 <_malloc_r+0xbe>
80006eac:	ee 03 16 12 	lsr	r3,r7,0x12
80006eb0:	28 43       	sub	r3,-124
80006eb2:	e0 6a 01 04 	mov	r10,260
80006eb6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006eba:	74 36       	ld.w	r6,r10[0xc]
80006ebc:	c1 98       	rjmp	80006eee <_malloc_r+0xfa>
80006ebe:	6c 19       	ld.w	r9,r6[0x4]
80006ec0:	e0 19 ff fc 	andl	r9,0xfffc
80006ec4:	f2 07 01 0b 	sub	r11,r9,r7
80006ec8:	58 fb       	cp.w	r11,15
80006eca:	e0 8a 00 04 	brle	80006ed2 <_malloc_r+0xde>
80006ece:	20 13       	sub	r3,1
80006ed0:	c1 18       	rjmp	80006ef2 <_malloc_r+0xfe>
80006ed2:	6c 38       	ld.w	r8,r6[0xc]
80006ed4:	58 0b       	cp.w	r11,0
80006ed6:	c0 b5       	brlt	80006eec <_malloc_r+0xf8>
80006ed8:	6c 2a       	ld.w	r10,r6[0x8]
80006eda:	ec 09 00 09 	add	r9,r6,r9
80006ede:	0a 9c       	mov	r12,r5
80006ee0:	91 2a       	st.w	r8[0x8],r10
80006ee2:	95 38       	st.w	r10[0xc],r8
80006ee4:	72 18       	ld.w	r8,r9[0x4]
80006ee6:	a1 a8       	sbr	r8,0x0
80006ee8:	93 18       	st.w	r9[0x4],r8
80006eea:	cb c8       	rjmp	80007062 <_malloc_r+0x26e>
80006eec:	10 96       	mov	r6,r8
80006eee:	14 36       	cp.w	r6,r10
80006ef0:	ce 71       	brne	80006ebe <_malloc_r+0xca>
80006ef2:	2f f3       	sub	r3,-1
80006ef4:	e0 6a 01 04 	mov	r10,260
80006ef8:	f4 cc ff f8 	sub	r12,r10,-8
80006efc:	78 26       	ld.w	r6,r12[0x8]
80006efe:	18 36       	cp.w	r6,r12
80006f00:	c6 c0       	breq	80006fd8 <_malloc_r+0x1e4>
80006f02:	6c 19       	ld.w	r9,r6[0x4]
80006f04:	e0 19 ff fc 	andl	r9,0xfffc
80006f08:	f2 07 01 08 	sub	r8,r9,r7
80006f0c:	58 f8       	cp.w	r8,15
80006f0e:	e0 89 00 8f 	brgt	8000702c <_malloc_r+0x238>
80006f12:	99 3c       	st.w	r12[0xc],r12
80006f14:	99 2c       	st.w	r12[0x8],r12
80006f16:	58 08       	cp.w	r8,0
80006f18:	c0 55       	brlt	80006f22 <_malloc_r+0x12e>
80006f1a:	ec 09 00 09 	add	r9,r6,r9
80006f1e:	0a 9c       	mov	r12,r5
80006f20:	ce 2b       	rjmp	80006ee4 <_malloc_r+0xf0>
80006f22:	e0 49 01 ff 	cp.w	r9,511
80006f26:	e0 8b 00 13 	brhi	80006f4c <_malloc_r+0x158>
80006f2a:	a3 99       	lsr	r9,0x3
80006f2c:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006f30:	70 2b       	ld.w	r11,r8[0x8]
80006f32:	8d 38       	st.w	r6[0xc],r8
80006f34:	8d 2b       	st.w	r6[0x8],r11
80006f36:	97 36       	st.w	r11[0xc],r6
80006f38:	91 26       	st.w	r8[0x8],r6
80006f3a:	a3 49       	asr	r9,0x2
80006f3c:	74 18       	ld.w	r8,r10[0x4]
80006f3e:	30 1b       	mov	r11,1
80006f40:	f6 09 09 49 	lsl	r9,r11,r9
80006f44:	f1 e9 10 09 	or	r9,r8,r9
80006f48:	95 19       	st.w	r10[0x4],r9
80006f4a:	c4 78       	rjmp	80006fd8 <_malloc_r+0x1e4>
80006f4c:	f2 0a 16 09 	lsr	r10,r9,0x9
80006f50:	58 4a       	cp.w	r10,4
80006f52:	e0 8b 00 07 	brhi	80006f60 <_malloc_r+0x16c>
80006f56:	f2 0a 16 06 	lsr	r10,r9,0x6
80006f5a:	2c 8a       	sub	r10,-56
80006f5c:	c2 08       	rjmp	80006f9c <_malloc_r+0x1a8>
80006f5e:	d7 03       	nop
80006f60:	59 4a       	cp.w	r10,20
80006f62:	e0 8b 00 04 	brhi	80006f6a <_malloc_r+0x176>
80006f66:	2a 5a       	sub	r10,-91
80006f68:	c1 a8       	rjmp	80006f9c <_malloc_r+0x1a8>
80006f6a:	e0 4a 00 54 	cp.w	r10,84
80006f6e:	e0 8b 00 06 	brhi	80006f7a <_malloc_r+0x186>
80006f72:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006f76:	29 2a       	sub	r10,-110
80006f78:	c1 28       	rjmp	80006f9c <_malloc_r+0x1a8>
80006f7a:	e0 4a 01 54 	cp.w	r10,340
80006f7e:	e0 8b 00 06 	brhi	80006f8a <_malloc_r+0x196>
80006f82:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006f86:	28 9a       	sub	r10,-119
80006f88:	c0 a8       	rjmp	80006f9c <_malloc_r+0x1a8>
80006f8a:	e0 4a 05 54 	cp.w	r10,1364
80006f8e:	e0 88 00 04 	brls	80006f96 <_malloc_r+0x1a2>
80006f92:	37 ea       	mov	r10,126
80006f94:	c0 48       	rjmp	80006f9c <_malloc_r+0x1a8>
80006f96:	f2 0a 16 12 	lsr	r10,r9,0x12
80006f9a:	28 4a       	sub	r10,-124
80006f9c:	e0 6b 01 04 	mov	r11,260
80006fa0:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80006fa4:	68 28       	ld.w	r8,r4[0x8]
80006fa6:	08 38       	cp.w	r8,r4
80006fa8:	c0 e1       	brne	80006fc4 <_malloc_r+0x1d0>
80006faa:	76 19       	ld.w	r9,r11[0x4]
80006fac:	a3 4a       	asr	r10,0x2
80006fae:	30 1e       	mov	lr,1
80006fb0:	fc 0a 09 4a 	lsl	r10,lr,r10
80006fb4:	f3 ea 10 0a 	or	r10,r9,r10
80006fb8:	10 99       	mov	r9,r8
80006fba:	97 1a       	st.w	r11[0x4],r10
80006fbc:	c0 a8       	rjmp	80006fd0 <_malloc_r+0x1dc>
80006fbe:	70 28       	ld.w	r8,r8[0x8]
80006fc0:	08 38       	cp.w	r8,r4
80006fc2:	c0 60       	breq	80006fce <_malloc_r+0x1da>
80006fc4:	70 1a       	ld.w	r10,r8[0x4]
80006fc6:	e0 1a ff fc 	andl	r10,0xfffc
80006fca:	14 39       	cp.w	r9,r10
80006fcc:	cf 93       	brcs	80006fbe <_malloc_r+0x1ca>
80006fce:	70 39       	ld.w	r9,r8[0xc]
80006fd0:	8d 39       	st.w	r6[0xc],r9
80006fd2:	8d 28       	st.w	r6[0x8],r8
80006fd4:	91 36       	st.w	r8[0xc],r6
80006fd6:	93 26       	st.w	r9[0x8],r6
80006fd8:	e6 08 14 02 	asr	r8,r3,0x2
80006fdc:	30 1b       	mov	r11,1
80006fde:	e0 64 01 04 	mov	r4,260
80006fe2:	f6 08 09 4b 	lsl	r11,r11,r8
80006fe6:	68 18       	ld.w	r8,r4[0x4]
80006fe8:	10 3b       	cp.w	r11,r8
80006fea:	e0 8b 00 69 	brhi	800070bc <_malloc_r+0x2c8>
80006fee:	f7 e8 00 09 	and	r9,r11,r8
80006ff2:	c0 b1       	brne	80007008 <_malloc_r+0x214>
80006ff4:	e0 13 ff fc 	andl	r3,0xfffc
80006ff8:	a1 7b       	lsl	r11,0x1
80006ffa:	2f c3       	sub	r3,-4
80006ffc:	c0 38       	rjmp	80007002 <_malloc_r+0x20e>
80006ffe:	2f c3       	sub	r3,-4
80007000:	a1 7b       	lsl	r11,0x1
80007002:	f7 e8 00 09 	and	r9,r11,r8
80007006:	cf c0       	breq	80006ffe <_malloc_r+0x20a>
80007008:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000700c:	06 92       	mov	r2,r3
8000700e:	1c 91       	mov	r1,lr
80007010:	62 36       	ld.w	r6,r1[0xc]
80007012:	c2 d8       	rjmp	8000706c <_malloc_r+0x278>
80007014:	6c 1a       	ld.w	r10,r6[0x4]
80007016:	e0 1a ff fc 	andl	r10,0xfffc
8000701a:	f4 07 01 08 	sub	r8,r10,r7
8000701e:	58 f8       	cp.w	r8,15
80007020:	e0 8a 00 15 	brle	8000704a <_malloc_r+0x256>
80007024:	6c 3a       	ld.w	r10,r6[0xc]
80007026:	6c 29       	ld.w	r9,r6[0x8]
80007028:	95 29       	st.w	r10[0x8],r9
8000702a:	93 3a       	st.w	r9[0xc],r10
8000702c:	0e 99       	mov	r9,r7
8000702e:	ec 07 00 07 	add	r7,r6,r7
80007032:	a1 a9       	sbr	r9,0x0
80007034:	99 37       	st.w	r12[0xc],r7
80007036:	99 27       	st.w	r12[0x8],r7
80007038:	8d 19       	st.w	r6[0x4],r9
8000703a:	ee 08 09 08 	st.w	r7[r8],r8
8000703e:	8f 2c       	st.w	r7[0x8],r12
80007040:	8f 3c       	st.w	r7[0xc],r12
80007042:	a1 a8       	sbr	r8,0x0
80007044:	0a 9c       	mov	r12,r5
80007046:	8f 18       	st.w	r7[0x4],r8
80007048:	c0 d8       	rjmp	80007062 <_malloc_r+0x26e>
8000704a:	6c 39       	ld.w	r9,r6[0xc]
8000704c:	58 08       	cp.w	r8,0
8000704e:	c0 e5       	brlt	8000706a <_malloc_r+0x276>
80007050:	ec 0a 00 0a 	add	r10,r6,r10
80007054:	74 18       	ld.w	r8,r10[0x4]
80007056:	a1 a8       	sbr	r8,0x0
80007058:	0a 9c       	mov	r12,r5
8000705a:	95 18       	st.w	r10[0x4],r8
8000705c:	6c 28       	ld.w	r8,r6[0x8]
8000705e:	93 28       	st.w	r9[0x8],r8
80007060:	91 39       	st.w	r8[0xc],r9
80007062:	c1 3d       	rcall	80007288 <__malloc_unlock>
80007064:	ec cc ff f8 	sub	r12,r6,-8
80007068:	d8 32       	popm	r0-r7,pc
8000706a:	12 96       	mov	r6,r9
8000706c:	02 36       	cp.w	r6,r1
8000706e:	cd 31       	brne	80007014 <_malloc_r+0x220>
80007070:	2f f2       	sub	r2,-1
80007072:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007076:	c0 30       	breq	8000707c <_malloc_r+0x288>
80007078:	2f 81       	sub	r1,-8
8000707a:	cc bb       	rjmp	80007010 <_malloc_r+0x21c>
8000707c:	1c 98       	mov	r8,lr
8000707e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007082:	c0 81       	brne	80007092 <_malloc_r+0x29e>
80007084:	68 19       	ld.w	r9,r4[0x4]
80007086:	f6 08 11 ff 	rsub	r8,r11,-1
8000708a:	f3 e8 00 08 	and	r8,r9,r8
8000708e:	89 18       	st.w	r4[0x4],r8
80007090:	c0 78       	rjmp	8000709e <_malloc_r+0x2aa>
80007092:	f0 c9 00 08 	sub	r9,r8,8
80007096:	20 13       	sub	r3,1
80007098:	70 08       	ld.w	r8,r8[0x0]
8000709a:	12 38       	cp.w	r8,r9
8000709c:	cf 10       	breq	8000707e <_malloc_r+0x28a>
8000709e:	a1 7b       	lsl	r11,0x1
800070a0:	68 18       	ld.w	r8,r4[0x4]
800070a2:	10 3b       	cp.w	r11,r8
800070a4:	e0 8b 00 0c 	brhi	800070bc <_malloc_r+0x2c8>
800070a8:	58 0b       	cp.w	r11,0
800070aa:	c0 90       	breq	800070bc <_malloc_r+0x2c8>
800070ac:	04 93       	mov	r3,r2
800070ae:	c0 38       	rjmp	800070b4 <_malloc_r+0x2c0>
800070b0:	2f c3       	sub	r3,-4
800070b2:	a1 7b       	lsl	r11,0x1
800070b4:	f7 e8 00 09 	and	r9,r11,r8
800070b8:	ca 81       	brne	80007008 <_malloc_r+0x214>
800070ba:	cf bb       	rjmp	800070b0 <_malloc_r+0x2bc>
800070bc:	68 23       	ld.w	r3,r4[0x8]
800070be:	66 12       	ld.w	r2,r3[0x4]
800070c0:	e0 12 ff fc 	andl	r2,0xfffc
800070c4:	0e 32       	cp.w	r2,r7
800070c6:	5f 39       	srlo	r9
800070c8:	e4 07 01 08 	sub	r8,r2,r7
800070cc:	58 f8       	cp.w	r8,15
800070ce:	5f aa       	srle	r10
800070d0:	f5 e9 10 09 	or	r9,r10,r9
800070d4:	e0 80 00 9a 	breq	80007208 <_malloc_r+0x414>
800070d8:	e0 68 06 30 	mov	r8,1584
800070dc:	70 01       	ld.w	r1,r8[0x0]
800070de:	e0 68 05 10 	mov	r8,1296
800070e2:	2f 01       	sub	r1,-16
800070e4:	70 08       	ld.w	r8,r8[0x0]
800070e6:	0e 01       	add	r1,r7
800070e8:	5b f8       	cp.w	r8,-1
800070ea:	c0 40       	breq	800070f2 <_malloc_r+0x2fe>
800070ec:	28 11       	sub	r1,-127
800070ee:	e0 11 ff 80 	andl	r1,0xff80
800070f2:	02 9b       	mov	r11,r1
800070f4:	0a 9c       	mov	r12,r5
800070f6:	e0 a0 05 39 	rcall	80007b68 <_sbrk_r>
800070fa:	18 96       	mov	r6,r12
800070fc:	5b fc       	cp.w	r12,-1
800070fe:	c7 50       	breq	800071e8 <_malloc_r+0x3f4>
80007100:	e6 02 00 08 	add	r8,r3,r2
80007104:	10 3c       	cp.w	r12,r8
80007106:	c0 32       	brcc	8000710c <_malloc_r+0x318>
80007108:	08 33       	cp.w	r3,r4
8000710a:	c6 f1       	brne	800071e8 <_malloc_r+0x3f4>
8000710c:	e0 6a 06 34 	mov	r10,1588
80007110:	74 09       	ld.w	r9,r10[0x0]
80007112:	e2 09 00 09 	add	r9,r1,r9
80007116:	95 09       	st.w	r10[0x0],r9
80007118:	10 36       	cp.w	r6,r8
8000711a:	c0 a1       	brne	8000712e <_malloc_r+0x33a>
8000711c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007120:	c0 71       	brne	8000712e <_malloc_r+0x33a>
80007122:	e2 02 00 02 	add	r2,r1,r2
80007126:	68 28       	ld.w	r8,r4[0x8]
80007128:	a1 a2       	sbr	r2,0x0
8000712a:	91 12       	st.w	r8[0x4],r2
8000712c:	c4 f8       	rjmp	800071ca <_malloc_r+0x3d6>
8000712e:	e0 6a 05 10 	mov	r10,1296
80007132:	74 0b       	ld.w	r11,r10[0x0]
80007134:	5b fb       	cp.w	r11,-1
80007136:	c0 31       	brne	8000713c <_malloc_r+0x348>
80007138:	95 06       	st.w	r10[0x0],r6
8000713a:	c0 78       	rjmp	80007148 <_malloc_r+0x354>
8000713c:	ec 09 00 09 	add	r9,r6,r9
80007140:	e0 6a 06 34 	mov	r10,1588
80007144:	10 19       	sub	r9,r8
80007146:	95 09       	st.w	r10[0x0],r9
80007148:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000714c:	f0 09 11 08 	rsub	r9,r8,8
80007150:	58 08       	cp.w	r8,0
80007152:	f2 08 17 10 	movne	r8,r9
80007156:	ed d8 e1 06 	addne	r6,r6,r8
8000715a:	28 08       	sub	r8,-128
8000715c:	ec 01 00 01 	add	r1,r6,r1
80007160:	0a 9c       	mov	r12,r5
80007162:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007166:	f0 01 01 01 	sub	r1,r8,r1
8000716a:	02 9b       	mov	r11,r1
8000716c:	e0 a0 04 fe 	rcall	80007b68 <_sbrk_r>
80007170:	e0 68 06 34 	mov	r8,1588
80007174:	5b fc       	cp.w	r12,-1
80007176:	ec 0c 17 00 	moveq	r12,r6
8000717a:	f9 b1 00 00 	moveq	r1,0
8000717e:	70 09       	ld.w	r9,r8[0x0]
80007180:	0c 1c       	sub	r12,r6
80007182:	89 26       	st.w	r4[0x8],r6
80007184:	02 0c       	add	r12,r1
80007186:	12 01       	add	r1,r9
80007188:	a1 ac       	sbr	r12,0x0
8000718a:	91 01       	st.w	r8[0x0],r1
8000718c:	8d 1c       	st.w	r6[0x4],r12
8000718e:	08 33       	cp.w	r3,r4
80007190:	c1 d0       	breq	800071ca <_malloc_r+0x3d6>
80007192:	58 f2       	cp.w	r2,15
80007194:	e0 8b 00 05 	brhi	8000719e <_malloc_r+0x3aa>
80007198:	30 18       	mov	r8,1
8000719a:	8d 18       	st.w	r6[0x4],r8
8000719c:	c2 68       	rjmp	800071e8 <_malloc_r+0x3f4>
8000719e:	30 59       	mov	r9,5
800071a0:	20 c2       	sub	r2,12
800071a2:	e0 12 ff f8 	andl	r2,0xfff8
800071a6:	e6 02 00 08 	add	r8,r3,r2
800071aa:	91 29       	st.w	r8[0x8],r9
800071ac:	91 19       	st.w	r8[0x4],r9
800071ae:	66 18       	ld.w	r8,r3[0x4]
800071b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800071b4:	e5 e8 10 08 	or	r8,r2,r8
800071b8:	87 18       	st.w	r3[0x4],r8
800071ba:	58 f2       	cp.w	r2,15
800071bc:	e0 88 00 07 	brls	800071ca <_malloc_r+0x3d6>
800071c0:	e6 cb ff f8 	sub	r11,r3,-8
800071c4:	0a 9c       	mov	r12,r5
800071c6:	fe b0 fb 71 	rcall	800068a8 <_free_r>
800071ca:	e0 69 06 2c 	mov	r9,1580
800071ce:	72 0a       	ld.w	r10,r9[0x0]
800071d0:	e0 68 06 34 	mov	r8,1588
800071d4:	70 08       	ld.w	r8,r8[0x0]
800071d6:	14 38       	cp.w	r8,r10
800071d8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800071dc:	e0 69 06 28 	mov	r9,1576
800071e0:	72 0a       	ld.w	r10,r9[0x0]
800071e2:	14 38       	cp.w	r8,r10
800071e4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800071e8:	68 28       	ld.w	r8,r4[0x8]
800071ea:	70 18       	ld.w	r8,r8[0x4]
800071ec:	e0 18 ff fc 	andl	r8,0xfffc
800071f0:	0e 38       	cp.w	r8,r7
800071f2:	5f 39       	srlo	r9
800071f4:	0e 18       	sub	r8,r7
800071f6:	58 f8       	cp.w	r8,15
800071f8:	5f aa       	srle	r10
800071fa:	f5 e9 10 09 	or	r9,r10,r9
800071fe:	c0 50       	breq	80007208 <_malloc_r+0x414>
80007200:	0a 9c       	mov	r12,r5
80007202:	c4 3c       	rcall	80007288 <__malloc_unlock>
80007204:	d8 3a       	popm	r0-r7,pc,r12=0
80007206:	d7 03       	nop
80007208:	68 26       	ld.w	r6,r4[0x8]
8000720a:	a1 a8       	sbr	r8,0x0
8000720c:	0e 99       	mov	r9,r7
8000720e:	a1 a9       	sbr	r9,0x0
80007210:	8d 19       	st.w	r6[0x4],r9
80007212:	ec 07 00 07 	add	r7,r6,r7
80007216:	0a 9c       	mov	r12,r5
80007218:	89 27       	st.w	r4[0x8],r7
8000721a:	8f 18       	st.w	r7[0x4],r8
8000721c:	c3 6c       	rcall	80007288 <__malloc_unlock>
8000721e:	ec cc ff f8 	sub	r12,r6,-8
80007222:	d8 32       	popm	r0-r7,pc

80007224 <memchr>:
80007224:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007228:	c0 68       	rjmp	80007234 <memchr+0x10>
8000722a:	20 1a       	sub	r10,1
8000722c:	19 88       	ld.ub	r8,r12[0x0]
8000722e:	16 38       	cp.w	r8,r11
80007230:	5e 0c       	reteq	r12
80007232:	2f fc       	sub	r12,-1
80007234:	58 0a       	cp.w	r10,0
80007236:	cf a1       	brne	8000722a <memchr+0x6>
80007238:	5e fa       	retal	r10

8000723a <memmove>:
8000723a:	d4 01       	pushm	lr
8000723c:	18 3b       	cp.w	r11,r12
8000723e:	c1 92       	brcc	80007270 <memmove+0x36>
80007240:	f6 0a 00 09 	add	r9,r11,r10
80007244:	12 3c       	cp.w	r12,r9
80007246:	c1 52       	brcc	80007270 <memmove+0x36>
80007248:	f8 0a 00 0b 	add	r11,r12,r10
8000724c:	30 08       	mov	r8,0
8000724e:	c0 68       	rjmp	8000725a <memmove+0x20>
80007250:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007254:	20 1a       	sub	r10,1
80007256:	f6 08 0b 0e 	st.b	r11[r8],lr
8000725a:	20 18       	sub	r8,1
8000725c:	58 0a       	cp.w	r10,0
8000725e:	cf 91       	brne	80007250 <memmove+0x16>
80007260:	d8 02       	popm	pc
80007262:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007266:	20 1a       	sub	r10,1
80007268:	f8 08 0b 09 	st.b	r12[r8],r9
8000726c:	2f f8       	sub	r8,-1
8000726e:	c0 28       	rjmp	80007272 <memmove+0x38>
80007270:	30 08       	mov	r8,0
80007272:	58 0a       	cp.w	r10,0
80007274:	cf 71       	brne	80007262 <memmove+0x28>
80007276:	d8 02       	popm	pc

80007278 <memset>:
80007278:	18 98       	mov	r8,r12
8000727a:	c0 38       	rjmp	80007280 <memset+0x8>
8000727c:	10 cb       	st.b	r8++,r11
8000727e:	20 1a       	sub	r10,1
80007280:	58 0a       	cp.w	r10,0
80007282:	cf d1       	brne	8000727c <memset+0x4>
80007284:	5e fc       	retal	r12

80007286 <__malloc_lock>:
80007286:	5e fc       	retal	r12

80007288 <__malloc_unlock>:
80007288:	5e fc       	retal	r12

8000728a <__hi0bits>:
8000728a:	18 98       	mov	r8,r12
8000728c:	e0 1c 00 00 	andl	r12,0x0
80007290:	f0 09 15 10 	lsl	r9,r8,0x10
80007294:	58 0c       	cp.w	r12,0
80007296:	f2 08 17 00 	moveq	r8,r9
8000729a:	f9 bc 00 10 	moveq	r12,16
8000729e:	f9 bc 01 00 	movne	r12,0
800072a2:	10 9a       	mov	r10,r8
800072a4:	f0 09 15 08 	lsl	r9,r8,0x8
800072a8:	e6 1a ff 00 	andh	r10,0xff00,COH
800072ac:	f7 bc 00 f8 	subeq	r12,-8
800072b0:	f2 08 17 00 	moveq	r8,r9
800072b4:	10 9a       	mov	r10,r8
800072b6:	f0 09 15 04 	lsl	r9,r8,0x4
800072ba:	e6 1a f0 00 	andh	r10,0xf000,COH
800072be:	f7 bc 00 fc 	subeq	r12,-4
800072c2:	f2 08 17 00 	moveq	r8,r9
800072c6:	10 9a       	mov	r10,r8
800072c8:	f0 09 15 02 	lsl	r9,r8,0x2
800072cc:	e6 1a c0 00 	andh	r10,0xc000,COH
800072d0:	f7 bc 00 fe 	subeq	r12,-2
800072d4:	f2 08 17 00 	moveq	r8,r9
800072d8:	58 08       	cp.w	r8,0
800072da:	5e 5c       	retlt	r12
800072dc:	ed b8 00 1e 	bld	r8,0x1e
800072e0:	f9 bc 01 20 	movne	r12,32
800072e4:	f7 bc 00 ff 	subeq	r12,-1
800072e8:	5e fc       	retal	r12

800072ea <__lo0bits>:
800072ea:	18 99       	mov	r9,r12
800072ec:	78 08       	ld.w	r8,r12[0x0]
800072ee:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800072f2:	c1 50       	breq	8000731c <__lo0bits+0x32>
800072f4:	ed b8 00 00 	bld	r8,0x0
800072f8:	c0 21       	brne	800072fc <__lo0bits+0x12>
800072fa:	5e fd       	retal	0
800072fc:	10 9b       	mov	r11,r8
800072fe:	f0 0a 16 01 	lsr	r10,r8,0x1
80007302:	e2 1b 00 02 	andl	r11,0x2,COH
80007306:	a3 88       	lsr	r8,0x2
80007308:	58 0b       	cp.w	r11,0
8000730a:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000730e:	f9 bc 01 01 	movne	r12,1
80007312:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007316:	f9 bc 00 02 	moveq	r12,2
8000731a:	5e fc       	retal	r12
8000731c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007320:	f0 0b 16 10 	lsr	r11,r8,0x10
80007324:	58 0a       	cp.w	r10,0
80007326:	f6 08 17 00 	moveq	r8,r11
8000732a:	f9 bc 00 10 	moveq	r12,16
8000732e:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007332:	f0 0a 16 08 	lsr	r10,r8,0x8
80007336:	58 0b       	cp.w	r11,0
80007338:	f7 bc 00 f8 	subeq	r12,-8
8000733c:	f4 08 17 00 	moveq	r8,r10
80007340:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007344:	f0 0a 16 04 	lsr	r10,r8,0x4
80007348:	58 0b       	cp.w	r11,0
8000734a:	f7 bc 00 fc 	subeq	r12,-4
8000734e:	f4 08 17 00 	moveq	r8,r10
80007352:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007356:	f0 0a 16 02 	lsr	r10,r8,0x2
8000735a:	58 0b       	cp.w	r11,0
8000735c:	f7 bc 00 fe 	subeq	r12,-2
80007360:	f4 08 17 00 	moveq	r8,r10
80007364:	ed b8 00 00 	bld	r8,0x0
80007368:	c0 60       	breq	80007374 <__lo0bits+0x8a>
8000736a:	a1 98       	lsr	r8,0x1
8000736c:	c0 31       	brne	80007372 <__lo0bits+0x88>
8000736e:	32 0c       	mov	r12,32
80007370:	5e fc       	retal	r12
80007372:	2f fc       	sub	r12,-1
80007374:	93 08       	st.w	r9[0x0],r8
80007376:	5e fc       	retal	r12

80007378 <__mcmp>:
80007378:	d4 01       	pushm	lr
8000737a:	18 98       	mov	r8,r12
8000737c:	76 49       	ld.w	r9,r11[0x10]
8000737e:	78 4c       	ld.w	r12,r12[0x10]
80007380:	12 1c       	sub	r12,r9
80007382:	c1 31       	brne	800073a8 <__mcmp+0x30>
80007384:	2f b9       	sub	r9,-5
80007386:	a3 69       	lsl	r9,0x2
80007388:	12 0b       	add	r11,r9
8000738a:	f0 09 00 09 	add	r9,r8,r9
8000738e:	2e c8       	sub	r8,-20
80007390:	13 4e       	ld.w	lr,--r9
80007392:	17 4a       	ld.w	r10,--r11
80007394:	14 3e       	cp.w	lr,r10
80007396:	c0 60       	breq	800073a2 <__mcmp+0x2a>
80007398:	f9 bc 03 ff 	movlo	r12,-1
8000739c:	f9 bc 02 01 	movhs	r12,1
800073a0:	d8 02       	popm	pc
800073a2:	10 39       	cp.w	r9,r8
800073a4:	fe 9b ff f6 	brhi	80007390 <__mcmp+0x18>
800073a8:	d8 02       	popm	pc
800073aa:	d7 03       	nop

800073ac <_Bfree>:
800073ac:	d4 21       	pushm	r4-r7,lr
800073ae:	18 97       	mov	r7,r12
800073b0:	16 95       	mov	r5,r11
800073b2:	78 96       	ld.w	r6,r12[0x24]
800073b4:	58 06       	cp.w	r6,0
800073b6:	c0 91       	brne	800073c8 <_Bfree+0x1c>
800073b8:	31 0c       	mov	r12,16
800073ba:	fe b0 fd 15 	rcall	80006de4 <malloc>
800073be:	99 36       	st.w	r12[0xc],r6
800073c0:	8f 9c       	st.w	r7[0x24],r12
800073c2:	99 16       	st.w	r12[0x4],r6
800073c4:	99 26       	st.w	r12[0x8],r6
800073c6:	99 06       	st.w	r12[0x0],r6
800073c8:	58 05       	cp.w	r5,0
800073ca:	c0 90       	breq	800073dc <_Bfree+0x30>
800073cc:	6a 19       	ld.w	r9,r5[0x4]
800073ce:	6e 98       	ld.w	r8,r7[0x24]
800073d0:	70 38       	ld.w	r8,r8[0xc]
800073d2:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800073d6:	8b 0a       	st.w	r5[0x0],r10
800073d8:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800073dc:	d8 22       	popm	r4-r7,pc
800073de:	d7 03       	nop

800073e0 <_Balloc>:
800073e0:	d4 21       	pushm	r4-r7,lr
800073e2:	18 97       	mov	r7,r12
800073e4:	16 96       	mov	r6,r11
800073e6:	78 95       	ld.w	r5,r12[0x24]
800073e8:	58 05       	cp.w	r5,0
800073ea:	c0 91       	brne	800073fc <_Balloc+0x1c>
800073ec:	31 0c       	mov	r12,16
800073ee:	fe b0 fc fb 	rcall	80006de4 <malloc>
800073f2:	99 35       	st.w	r12[0xc],r5
800073f4:	8f 9c       	st.w	r7[0x24],r12
800073f6:	99 15       	st.w	r12[0x4],r5
800073f8:	99 25       	st.w	r12[0x8],r5
800073fa:	99 05       	st.w	r12[0x0],r5
800073fc:	6e 95       	ld.w	r5,r7[0x24]
800073fe:	6a 38       	ld.w	r8,r5[0xc]
80007400:	58 08       	cp.w	r8,0
80007402:	c0 b1       	brne	80007418 <_Balloc+0x38>
80007404:	31 0a       	mov	r10,16
80007406:	30 4b       	mov	r11,4
80007408:	0e 9c       	mov	r12,r7
8000740a:	e0 a0 04 93 	rcall	80007d30 <_calloc_r>
8000740e:	8b 3c       	st.w	r5[0xc],r12
80007410:	6e 98       	ld.w	r8,r7[0x24]
80007412:	70 3c       	ld.w	r12,r8[0xc]
80007414:	58 0c       	cp.w	r12,0
80007416:	c1 b0       	breq	8000744c <_Balloc+0x6c>
80007418:	6e 98       	ld.w	r8,r7[0x24]
8000741a:	70 38       	ld.w	r8,r8[0xc]
8000741c:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007420:	70 0c       	ld.w	r12,r8[0x0]
80007422:	58 0c       	cp.w	r12,0
80007424:	c0 40       	breq	8000742c <_Balloc+0x4c>
80007426:	78 09       	ld.w	r9,r12[0x0]
80007428:	91 09       	st.w	r8[0x0],r9
8000742a:	c0 e8       	rjmp	80007446 <_Balloc+0x66>
8000742c:	0e 9c       	mov	r12,r7
8000742e:	30 17       	mov	r7,1
80007430:	0e 9b       	mov	r11,r7
80007432:	ee 06 09 47 	lsl	r7,r7,r6
80007436:	ee ca ff fb 	sub	r10,r7,-5
8000743a:	a3 6a       	lsl	r10,0x2
8000743c:	e0 a0 04 7a 	rcall	80007d30 <_calloc_r>
80007440:	c0 60       	breq	8000744c <_Balloc+0x6c>
80007442:	99 16       	st.w	r12[0x4],r6
80007444:	99 27       	st.w	r12[0x8],r7
80007446:	30 08       	mov	r8,0
80007448:	99 38       	st.w	r12[0xc],r8
8000744a:	99 48       	st.w	r12[0x10],r8
8000744c:	d8 22       	popm	r4-r7,pc
8000744e:	d7 03       	nop

80007450 <__d2b>:
80007450:	d4 31       	pushm	r0-r7,lr
80007452:	20 2d       	sub	sp,8
80007454:	16 93       	mov	r3,r11
80007456:	12 96       	mov	r6,r9
80007458:	10 95       	mov	r5,r8
8000745a:	14 92       	mov	r2,r10
8000745c:	30 1b       	mov	r11,1
8000745e:	cc 1f       	rcall	800073e0 <_Balloc>
80007460:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007464:	50 09       	stdsp	sp[0x0],r9
80007466:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000746a:	b5 a9       	sbr	r9,0x14
8000746c:	f0 01 16 14 	lsr	r1,r8,0x14
80007470:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007474:	18 94       	mov	r4,r12
80007476:	58 02       	cp.w	r2,0
80007478:	c1 d0       	breq	800074b2 <__d2b+0x62>
8000747a:	fa cc ff f8 	sub	r12,sp,-8
8000747e:	18 d2       	st.w	--r12,r2
80007480:	c3 5f       	rcall	800072ea <__lo0bits>
80007482:	40 18       	lddsp	r8,sp[0x4]
80007484:	c0 d0       	breq	8000749e <__d2b+0x4e>
80007486:	40 09       	lddsp	r9,sp[0x0]
80007488:	f8 0a 11 20 	rsub	r10,r12,32
8000748c:	f2 0a 09 4a 	lsl	r10,r9,r10
80007490:	f5 e8 10 08 	or	r8,r10,r8
80007494:	89 58       	st.w	r4[0x14],r8
80007496:	f2 0c 0a 49 	lsr	r9,r9,r12
8000749a:	50 09       	stdsp	sp[0x0],r9
8000749c:	c0 28       	rjmp	800074a0 <__d2b+0x50>
8000749e:	89 58       	st.w	r4[0x14],r8
800074a0:	40 08       	lddsp	r8,sp[0x0]
800074a2:	58 08       	cp.w	r8,0
800074a4:	f9 b3 01 02 	movne	r3,2
800074a8:	f9 b3 00 01 	moveq	r3,1
800074ac:	89 68       	st.w	r4[0x18],r8
800074ae:	89 43       	st.w	r4[0x10],r3
800074b0:	c0 88       	rjmp	800074c0 <__d2b+0x70>
800074b2:	1a 9c       	mov	r12,sp
800074b4:	c1 bf       	rcall	800072ea <__lo0bits>
800074b6:	30 13       	mov	r3,1
800074b8:	40 08       	lddsp	r8,sp[0x0]
800074ba:	2e 0c       	sub	r12,-32
800074bc:	89 43       	st.w	r4[0x10],r3
800074be:	89 58       	st.w	r4[0x14],r8
800074c0:	58 01       	cp.w	r1,0
800074c2:	c0 90       	breq	800074d4 <__d2b+0x84>
800074c4:	e2 c1 04 33 	sub	r1,r1,1075
800074c8:	18 01       	add	r1,r12
800074ca:	8d 01       	st.w	r6[0x0],r1
800074cc:	f8 0c 11 35 	rsub	r12,r12,53
800074d0:	8b 0c       	st.w	r5[0x0],r12
800074d2:	c0 c8       	rjmp	800074ea <__d2b+0x9a>
800074d4:	e6 c8 ff fc 	sub	r8,r3,-4
800074d8:	f8 cc 04 32 	sub	r12,r12,1074
800074dc:	a5 73       	lsl	r3,0x5
800074de:	8d 0c       	st.w	r6[0x0],r12
800074e0:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800074e4:	cd 3e       	rcall	8000728a <__hi0bits>
800074e6:	18 13       	sub	r3,r12
800074e8:	8b 03       	st.w	r5[0x0],r3
800074ea:	08 9c       	mov	r12,r4
800074ec:	2f ed       	sub	sp,-8
800074ee:	d8 32       	popm	r0-r7,pc

800074f0 <__mdiff>:
800074f0:	d4 31       	pushm	r0-r7,lr
800074f2:	74 48       	ld.w	r8,r10[0x10]
800074f4:	76 45       	ld.w	r5,r11[0x10]
800074f6:	16 97       	mov	r7,r11
800074f8:	14 96       	mov	r6,r10
800074fa:	10 15       	sub	r5,r8
800074fc:	c1 31       	brne	80007522 <__mdiff+0x32>
800074fe:	2f b8       	sub	r8,-5
80007500:	ee ce ff ec 	sub	lr,r7,-20
80007504:	a3 68       	lsl	r8,0x2
80007506:	f4 08 00 0b 	add	r11,r10,r8
8000750a:	ee 08 00 08 	add	r8,r7,r8
8000750e:	11 4a       	ld.w	r10,--r8
80007510:	17 49       	ld.w	r9,--r11
80007512:	12 3a       	cp.w	r10,r9
80007514:	c0 30       	breq	8000751a <__mdiff+0x2a>
80007516:	c0 e2       	brcc	80007532 <__mdiff+0x42>
80007518:	c0 78       	rjmp	80007526 <__mdiff+0x36>
8000751a:	1c 38       	cp.w	r8,lr
8000751c:	fe 9b ff f9 	brhi	8000750e <__mdiff+0x1e>
80007520:	c4 98       	rjmp	800075b2 <__mdiff+0xc2>
80007522:	58 05       	cp.w	r5,0
80007524:	c0 64       	brge	80007530 <__mdiff+0x40>
80007526:	0e 98       	mov	r8,r7
80007528:	30 15       	mov	r5,1
8000752a:	0c 97       	mov	r7,r6
8000752c:	10 96       	mov	r6,r8
8000752e:	c0 28       	rjmp	80007532 <__mdiff+0x42>
80007530:	30 05       	mov	r5,0
80007532:	6e 1b       	ld.w	r11,r7[0x4]
80007534:	c5 6f       	rcall	800073e0 <_Balloc>
80007536:	6e 49       	ld.w	r9,r7[0x10]
80007538:	6c 44       	ld.w	r4,r6[0x10]
8000753a:	99 35       	st.w	r12[0xc],r5
8000753c:	2f b4       	sub	r4,-5
8000753e:	f2 c5 ff fb 	sub	r5,r9,-5
80007542:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007546:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000754a:	2e c6       	sub	r6,-20
8000754c:	2e c7       	sub	r7,-20
8000754e:	f8 c8 ff ec 	sub	r8,r12,-20
80007552:	30 0a       	mov	r10,0
80007554:	0f 0e       	ld.w	lr,r7++
80007556:	0d 0b       	ld.w	r11,r6++
80007558:	fc 02 16 10 	lsr	r2,lr,0x10
8000755c:	f6 03 16 10 	lsr	r3,r11,0x10
80007560:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007564:	e4 03 01 03 	sub	r3,r2,r3
80007568:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000756c:	fc 0b 01 0b 	sub	r11,lr,r11
80007570:	f6 0a 00 0a 	add	r10,r11,r10
80007574:	b0 1a       	st.h	r8[0x2],r10
80007576:	b1 4a       	asr	r10,0x10
80007578:	e6 0a 00 0a 	add	r10,r3,r10
8000757c:	b0 0a       	st.h	r8[0x0],r10
8000757e:	2f c8       	sub	r8,-4
80007580:	b1 4a       	asr	r10,0x10
80007582:	08 36       	cp.w	r6,r4
80007584:	ce 83       	brcs	80007554 <__mdiff+0x64>
80007586:	c0 d8       	rjmp	800075a0 <__mdiff+0xb0>
80007588:	0f 0b       	ld.w	r11,r7++
8000758a:	f6 0e 16 10 	lsr	lr,r11,0x10
8000758e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007592:	16 0a       	add	r10,r11
80007594:	b0 1a       	st.h	r8[0x2],r10
80007596:	b1 4a       	asr	r10,0x10
80007598:	1c 0a       	add	r10,lr
8000759a:	b0 0a       	st.h	r8[0x0],r10
8000759c:	2f c8       	sub	r8,-4
8000759e:	b1 4a       	asr	r10,0x10
800075a0:	0a 37       	cp.w	r7,r5
800075a2:	cf 33       	brcs	80007588 <__mdiff+0x98>
800075a4:	c0 28       	rjmp	800075a8 <__mdiff+0xb8>
800075a6:	20 19       	sub	r9,1
800075a8:	11 4a       	ld.w	r10,--r8
800075aa:	58 0a       	cp.w	r10,0
800075ac:	cf d0       	breq	800075a6 <__mdiff+0xb6>
800075ae:	99 49       	st.w	r12[0x10],r9
800075b0:	d8 32       	popm	r0-r7,pc
800075b2:	30 0b       	mov	r11,0
800075b4:	c1 6f       	rcall	800073e0 <_Balloc>
800075b6:	30 18       	mov	r8,1
800075b8:	99 48       	st.w	r12[0x10],r8
800075ba:	30 08       	mov	r8,0
800075bc:	99 58       	st.w	r12[0x14],r8
800075be:	d8 32       	popm	r0-r7,pc

800075c0 <__lshift>:
800075c0:	d4 31       	pushm	r0-r7,lr
800075c2:	16 97       	mov	r7,r11
800075c4:	76 46       	ld.w	r6,r11[0x10]
800075c6:	f4 02 14 05 	asr	r2,r10,0x5
800075ca:	2f f6       	sub	r6,-1
800075cc:	14 93       	mov	r3,r10
800075ce:	18 94       	mov	r4,r12
800075d0:	04 06       	add	r6,r2
800075d2:	76 1b       	ld.w	r11,r11[0x4]
800075d4:	6e 28       	ld.w	r8,r7[0x8]
800075d6:	c0 38       	rjmp	800075dc <__lshift+0x1c>
800075d8:	2f fb       	sub	r11,-1
800075da:	a1 78       	lsl	r8,0x1
800075dc:	10 36       	cp.w	r6,r8
800075de:	fe 99 ff fd 	brgt	800075d8 <__lshift+0x18>
800075e2:	08 9c       	mov	r12,r4
800075e4:	cf ee       	rcall	800073e0 <_Balloc>
800075e6:	30 09       	mov	r9,0
800075e8:	18 95       	mov	r5,r12
800075ea:	f8 c8 ff ec 	sub	r8,r12,-20
800075ee:	12 9a       	mov	r10,r9
800075f0:	c0 38       	rjmp	800075f6 <__lshift+0x36>
800075f2:	10 aa       	st.w	r8++,r10
800075f4:	2f f9       	sub	r9,-1
800075f6:	04 39       	cp.w	r9,r2
800075f8:	cf d5       	brlt	800075f2 <__lshift+0x32>
800075fa:	6e 4b       	ld.w	r11,r7[0x10]
800075fc:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007600:	2f bb       	sub	r11,-5
80007602:	ee c9 ff ec 	sub	r9,r7,-20
80007606:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000760a:	58 03       	cp.w	r3,0
8000760c:	c1 30       	breq	80007632 <__lshift+0x72>
8000760e:	e6 0c 11 20 	rsub	r12,r3,32
80007612:	30 0a       	mov	r10,0
80007614:	72 02       	ld.w	r2,r9[0x0]
80007616:	e4 03 09 42 	lsl	r2,r2,r3
8000761a:	04 4a       	or	r10,r2
8000761c:	10 aa       	st.w	r8++,r10
8000761e:	13 0a       	ld.w	r10,r9++
80007620:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007624:	16 39       	cp.w	r9,r11
80007626:	cf 73       	brcs	80007614 <__lshift+0x54>
80007628:	91 0a       	st.w	r8[0x0],r10
8000762a:	58 0a       	cp.w	r10,0
8000762c:	c0 70       	breq	8000763a <__lshift+0x7a>
8000762e:	2f f6       	sub	r6,-1
80007630:	c0 58       	rjmp	8000763a <__lshift+0x7a>
80007632:	13 0a       	ld.w	r10,r9++
80007634:	10 aa       	st.w	r8++,r10
80007636:	16 39       	cp.w	r9,r11
80007638:	cf d3       	brcs	80007632 <__lshift+0x72>
8000763a:	08 9c       	mov	r12,r4
8000763c:	20 16       	sub	r6,1
8000763e:	0e 9b       	mov	r11,r7
80007640:	8b 46       	st.w	r5[0x10],r6
80007642:	cb 5e       	rcall	800073ac <_Bfree>
80007644:	0a 9c       	mov	r12,r5
80007646:	d8 32       	popm	r0-r7,pc

80007648 <__multiply>:
80007648:	d4 31       	pushm	r0-r7,lr
8000764a:	20 2d       	sub	sp,8
8000764c:	76 49       	ld.w	r9,r11[0x10]
8000764e:	74 48       	ld.w	r8,r10[0x10]
80007650:	16 96       	mov	r6,r11
80007652:	14 95       	mov	r5,r10
80007654:	10 39       	cp.w	r9,r8
80007656:	ec 08 17 50 	movlt	r8,r6
8000765a:	ea 06 17 50 	movlt	r6,r5
8000765e:	f0 05 17 50 	movlt	r5,r8
80007662:	6c 28       	ld.w	r8,r6[0x8]
80007664:	76 43       	ld.w	r3,r11[0x10]
80007666:	74 42       	ld.w	r2,r10[0x10]
80007668:	76 1b       	ld.w	r11,r11[0x4]
8000766a:	e4 03 00 07 	add	r7,r2,r3
8000766e:	10 37       	cp.w	r7,r8
80007670:	f7 bb 09 ff 	subgt	r11,-1
80007674:	cb 6e       	rcall	800073e0 <_Balloc>
80007676:	ee c4 ff fb 	sub	r4,r7,-5
8000767a:	f8 c9 ff ec 	sub	r9,r12,-20
8000767e:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007682:	30 0a       	mov	r10,0
80007684:	12 98       	mov	r8,r9
80007686:	c0 28       	rjmp	8000768a <__multiply+0x42>
80007688:	10 aa       	st.w	r8++,r10
8000768a:	08 38       	cp.w	r8,r4
8000768c:	cf e3       	brcs	80007688 <__multiply+0x40>
8000768e:	2f b3       	sub	r3,-5
80007690:	2f b2       	sub	r2,-5
80007692:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007696:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000769a:	ec cb ff ec 	sub	r11,r6,-20
8000769e:	50 12       	stdsp	sp[0x4],r2
800076a0:	ea ca ff ec 	sub	r10,r5,-20
800076a4:	c4 48       	rjmp	8000772c <__multiply+0xe4>
800076a6:	94 95       	ld.uh	r5,r10[0x2]
800076a8:	58 05       	cp.w	r5,0
800076aa:	c2 00       	breq	800076ea <__multiply+0xa2>
800076ac:	12 98       	mov	r8,r9
800076ae:	16 96       	mov	r6,r11
800076b0:	30 0e       	mov	lr,0
800076b2:	50 09       	stdsp	sp[0x0],r9
800076b4:	0d 02       	ld.w	r2,r6++
800076b6:	e4 00 16 10 	lsr	r0,r2,0x10
800076ba:	70 01       	ld.w	r1,r8[0x0]
800076bc:	70 09       	ld.w	r9,r8[0x0]
800076be:	b1 81       	lsr	r1,0x10
800076c0:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800076c4:	e0 05 03 41 	mac	r1,r0,r5
800076c8:	ab 32       	mul	r2,r5
800076ca:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800076ce:	00 02       	add	r2,r0
800076d0:	e4 0e 00 0e 	add	lr,r2,lr
800076d4:	b0 1e       	st.h	r8[0x2],lr
800076d6:	b1 8e       	lsr	lr,0x10
800076d8:	1c 01       	add	r1,lr
800076da:	b0 01       	st.h	r8[0x0],r1
800076dc:	e2 0e 16 10 	lsr	lr,r1,0x10
800076e0:	2f c8       	sub	r8,-4
800076e2:	06 36       	cp.w	r6,r3
800076e4:	ce 83       	brcs	800076b4 <__multiply+0x6c>
800076e6:	40 09       	lddsp	r9,sp[0x0]
800076e8:	91 0e       	st.w	r8[0x0],lr
800076ea:	94 86       	ld.uh	r6,r10[0x0]
800076ec:	58 06       	cp.w	r6,0
800076ee:	c1 d0       	breq	80007728 <__multiply+0xe0>
800076f0:	72 02       	ld.w	r2,r9[0x0]
800076f2:	12 98       	mov	r8,r9
800076f4:	16 9e       	mov	lr,r11
800076f6:	30 05       	mov	r5,0
800076f8:	b0 12       	st.h	r8[0x2],r2
800076fa:	1d 01       	ld.w	r1,lr++
800076fc:	90 82       	ld.uh	r2,r8[0x0]
800076fe:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007702:	ad 30       	mul	r0,r6
80007704:	e0 02 00 02 	add	r2,r0,r2
80007708:	e4 05 00 05 	add	r5,r2,r5
8000770c:	b0 05       	st.h	r8[0x0],r5
8000770e:	b1 85       	lsr	r5,0x10
80007710:	b1 81       	lsr	r1,0x10
80007712:	2f c8       	sub	r8,-4
80007714:	ad 31       	mul	r1,r6
80007716:	90 92       	ld.uh	r2,r8[0x2]
80007718:	e2 02 00 02 	add	r2,r1,r2
8000771c:	0a 02       	add	r2,r5
8000771e:	e4 05 16 10 	lsr	r5,r2,0x10
80007722:	06 3e       	cp.w	lr,r3
80007724:	ce a3       	brcs	800076f8 <__multiply+0xb0>
80007726:	91 02       	st.w	r8[0x0],r2
80007728:	2f ca       	sub	r10,-4
8000772a:	2f c9       	sub	r9,-4
8000772c:	40 18       	lddsp	r8,sp[0x4]
8000772e:	10 3a       	cp.w	r10,r8
80007730:	cb b3       	brcs	800076a6 <__multiply+0x5e>
80007732:	c0 28       	rjmp	80007736 <__multiply+0xee>
80007734:	20 17       	sub	r7,1
80007736:	58 07       	cp.w	r7,0
80007738:	e0 8a 00 05 	brle	80007742 <__multiply+0xfa>
8000773c:	09 48       	ld.w	r8,--r4
8000773e:	58 08       	cp.w	r8,0
80007740:	cf a0       	breq	80007734 <__multiply+0xec>
80007742:	99 47       	st.w	r12[0x10],r7
80007744:	2f ed       	sub	sp,-8
80007746:	d8 32       	popm	r0-r7,pc

80007748 <__i2b>:
80007748:	d4 21       	pushm	r4-r7,lr
8000774a:	16 97       	mov	r7,r11
8000774c:	30 1b       	mov	r11,1
8000774e:	c4 9e       	rcall	800073e0 <_Balloc>
80007750:	30 19       	mov	r9,1
80007752:	99 57       	st.w	r12[0x14],r7
80007754:	99 49       	st.w	r12[0x10],r9
80007756:	d8 22       	popm	r4-r7,pc

80007758 <__multadd>:
80007758:	d4 31       	pushm	r0-r7,lr
8000775a:	30 08       	mov	r8,0
8000775c:	12 95       	mov	r5,r9
8000775e:	16 97       	mov	r7,r11
80007760:	18 96       	mov	r6,r12
80007762:	76 44       	ld.w	r4,r11[0x10]
80007764:	f6 c9 ff ec 	sub	r9,r11,-20
80007768:	72 0b       	ld.w	r11,r9[0x0]
8000776a:	f6 0c 16 10 	lsr	r12,r11,0x10
8000776e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007772:	f4 0c 02 4c 	mul	r12,r10,r12
80007776:	f4 0b 03 45 	mac	r5,r10,r11
8000777a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000777e:	b1 85       	lsr	r5,0x10
80007780:	18 05       	add	r5,r12
80007782:	ea 0c 15 10 	lsl	r12,r5,0x10
80007786:	f8 0b 00 0b 	add	r11,r12,r11
8000778a:	12 ab       	st.w	r9++,r11
8000778c:	2f f8       	sub	r8,-1
8000778e:	b1 85       	lsr	r5,0x10
80007790:	08 38       	cp.w	r8,r4
80007792:	ce b5       	brlt	80007768 <__multadd+0x10>
80007794:	58 05       	cp.w	r5,0
80007796:	c1 c0       	breq	800077ce <__multadd+0x76>
80007798:	6e 28       	ld.w	r8,r7[0x8]
8000779a:	10 34       	cp.w	r4,r8
8000779c:	c1 35       	brlt	800077c2 <__multadd+0x6a>
8000779e:	6e 1b       	ld.w	r11,r7[0x4]
800077a0:	0c 9c       	mov	r12,r6
800077a2:	2f fb       	sub	r11,-1
800077a4:	c1 ee       	rcall	800073e0 <_Balloc>
800077a6:	6e 4a       	ld.w	r10,r7[0x10]
800077a8:	ee cb ff f4 	sub	r11,r7,-12
800077ac:	18 93       	mov	r3,r12
800077ae:	2f ea       	sub	r10,-2
800077b0:	2f 4c       	sub	r12,-12
800077b2:	a3 6a       	lsl	r10,0x2
800077b4:	fe b0 de 36 	rcall	80003420 <memcpy>
800077b8:	0e 9b       	mov	r11,r7
800077ba:	0c 9c       	mov	r12,r6
800077bc:	fe b0 fd f8 	rcall	800073ac <_Bfree>
800077c0:	06 97       	mov	r7,r3
800077c2:	e8 c8 ff ff 	sub	r8,r4,-1
800077c6:	2f b4       	sub	r4,-5
800077c8:	8f 48       	st.w	r7[0x10],r8
800077ca:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
800077ce:	0e 9c       	mov	r12,r7
800077d0:	d8 32       	popm	r0-r7,pc
800077d2:	d7 03       	nop

800077d4 <__pow5mult>:
800077d4:	d4 31       	pushm	r0-r7,lr
800077d6:	14 96       	mov	r6,r10
800077d8:	18 97       	mov	r7,r12
800077da:	16 94       	mov	r4,r11
800077dc:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800077e0:	c0 90       	breq	800077f2 <__pow5mult+0x1e>
800077e2:	20 18       	sub	r8,1
800077e4:	fe c9 e1 9c 	sub	r9,pc,-7780
800077e8:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800077ec:	30 09       	mov	r9,0
800077ee:	cb 5f       	rcall	80007758 <__multadd>
800077f0:	18 94       	mov	r4,r12
800077f2:	a3 46       	asr	r6,0x2
800077f4:	c3 40       	breq	8000785c <__pow5mult+0x88>
800077f6:	6e 95       	ld.w	r5,r7[0x24]
800077f8:	58 05       	cp.w	r5,0
800077fa:	c0 91       	brne	8000780c <__pow5mult+0x38>
800077fc:	31 0c       	mov	r12,16
800077fe:	fe b0 fa f3 	rcall	80006de4 <malloc>
80007802:	99 35       	st.w	r12[0xc],r5
80007804:	8f 9c       	st.w	r7[0x24],r12
80007806:	99 15       	st.w	r12[0x4],r5
80007808:	99 25       	st.w	r12[0x8],r5
8000780a:	99 05       	st.w	r12[0x0],r5
8000780c:	6e 93       	ld.w	r3,r7[0x24]
8000780e:	66 25       	ld.w	r5,r3[0x8]
80007810:	58 05       	cp.w	r5,0
80007812:	c0 c1       	brne	8000782a <__pow5mult+0x56>
80007814:	e0 6b 02 71 	mov	r11,625
80007818:	0e 9c       	mov	r12,r7
8000781a:	c9 7f       	rcall	80007748 <__i2b>
8000781c:	87 2c       	st.w	r3[0x8],r12
8000781e:	30 08       	mov	r8,0
80007820:	18 95       	mov	r5,r12
80007822:	99 08       	st.w	r12[0x0],r8
80007824:	c0 38       	rjmp	8000782a <__pow5mult+0x56>
80007826:	06 9c       	mov	r12,r3
80007828:	18 95       	mov	r5,r12
8000782a:	ed b6 00 00 	bld	r6,0x0
8000782e:	c0 b1       	brne	80007844 <__pow5mult+0x70>
80007830:	08 9b       	mov	r11,r4
80007832:	0a 9a       	mov	r10,r5
80007834:	0e 9c       	mov	r12,r7
80007836:	c0 9f       	rcall	80007648 <__multiply>
80007838:	08 9b       	mov	r11,r4
8000783a:	18 93       	mov	r3,r12
8000783c:	0e 9c       	mov	r12,r7
8000783e:	06 94       	mov	r4,r3
80007840:	fe b0 fd b6 	rcall	800073ac <_Bfree>
80007844:	a1 56       	asr	r6,0x1
80007846:	c0 b0       	breq	8000785c <__pow5mult+0x88>
80007848:	6a 03       	ld.w	r3,r5[0x0]
8000784a:	58 03       	cp.w	r3,0
8000784c:	ce d1       	brne	80007826 <__pow5mult+0x52>
8000784e:	0a 9a       	mov	r10,r5
80007850:	0a 9b       	mov	r11,r5
80007852:	0e 9c       	mov	r12,r7
80007854:	cf ae       	rcall	80007648 <__multiply>
80007856:	8b 0c       	st.w	r5[0x0],r12
80007858:	99 03       	st.w	r12[0x0],r3
8000785a:	ce 7b       	rjmp	80007828 <__pow5mult+0x54>
8000785c:	08 9c       	mov	r12,r4
8000785e:	d8 32       	popm	r0-r7,pc

80007860 <_realloc_r>:
80007860:	d4 31       	pushm	r0-r7,lr
80007862:	20 1d       	sub	sp,4
80007864:	16 94       	mov	r4,r11
80007866:	18 92       	mov	r2,r12
80007868:	14 9b       	mov	r11,r10
8000786a:	58 04       	cp.w	r4,0
8000786c:	c0 51       	brne	80007876 <_realloc_r+0x16>
8000786e:	fe b0 fa c3 	rcall	80006df4 <_malloc_r>
80007872:	18 95       	mov	r5,r12
80007874:	c5 39       	rjmp	80007b1a <_realloc_r+0x2ba>
80007876:	50 0a       	stdsp	sp[0x0],r10
80007878:	fe b0 fd 07 	rcall	80007286 <__malloc_lock>
8000787c:	40 0b       	lddsp	r11,sp[0x0]
8000787e:	f6 c8 ff f5 	sub	r8,r11,-11
80007882:	e8 c1 00 08 	sub	r1,r4,8
80007886:	10 96       	mov	r6,r8
80007888:	62 1c       	ld.w	r12,r1[0x4]
8000788a:	e0 16 ff f8 	andl	r6,0xfff8
8000788e:	59 68       	cp.w	r8,22
80007890:	f9 b6 08 10 	movls	r6,16
80007894:	16 36       	cp.w	r6,r11
80007896:	5f 38       	srlo	r8
80007898:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000789c:	c0 50       	breq	800078a6 <_realloc_r+0x46>
8000789e:	30 c8       	mov	r8,12
800078a0:	30 05       	mov	r5,0
800078a2:	85 38       	st.w	r2[0xc],r8
800078a4:	c3 b9       	rjmp	80007b1a <_realloc_r+0x2ba>
800078a6:	18 90       	mov	r0,r12
800078a8:	e0 10 ff fc 	andl	r0,0xfffc
800078ac:	0c 30       	cp.w	r0,r6
800078ae:	e0 84 01 0b 	brge	80007ac4 <_realloc_r+0x264>
800078b2:	e0 68 01 04 	mov	r8,260
800078b6:	e2 00 00 09 	add	r9,r1,r0
800078ba:	70 25       	ld.w	r5,r8[0x8]
800078bc:	0a 39       	cp.w	r9,r5
800078be:	c0 90       	breq	800078d0 <_realloc_r+0x70>
800078c0:	72 1a       	ld.w	r10,r9[0x4]
800078c2:	a1 ca       	cbr	r10,0x0
800078c4:	f2 0a 00 0a 	add	r10,r9,r10
800078c8:	74 1a       	ld.w	r10,r10[0x4]
800078ca:	ed ba 00 00 	bld	r10,0x0
800078ce:	c2 20       	breq	80007912 <_realloc_r+0xb2>
800078d0:	72 1a       	ld.w	r10,r9[0x4]
800078d2:	e0 1a ff fc 	andl	r10,0xfffc
800078d6:	f4 00 00 03 	add	r3,r10,r0
800078da:	0a 39       	cp.w	r9,r5
800078dc:	c1 31       	brne	80007902 <_realloc_r+0xa2>
800078de:	ec c7 ff f0 	sub	r7,r6,-16
800078e2:	0e 33       	cp.w	r3,r7
800078e4:	c1 95       	brlt	80007916 <_realloc_r+0xb6>
800078e6:	e2 06 00 09 	add	r9,r1,r6
800078ea:	0c 13       	sub	r3,r6
800078ec:	a1 a3       	sbr	r3,0x0
800078ee:	93 13       	st.w	r9[0x4],r3
800078f0:	91 29       	st.w	r8[0x8],r9
800078f2:	04 9c       	mov	r12,r2
800078f4:	62 18       	ld.w	r8,r1[0x4]
800078f6:	08 95       	mov	r5,r4
800078f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800078fc:	10 46       	or	r6,r8
800078fe:	83 16       	st.w	r1[0x4],r6
80007900:	c0 b9       	rjmp	80007b16 <_realloc_r+0x2b6>
80007902:	0c 33       	cp.w	r3,r6
80007904:	c0 95       	brlt	80007916 <_realloc_r+0xb6>
80007906:	72 28       	ld.w	r8,r9[0x8]
80007908:	02 97       	mov	r7,r1
8000790a:	72 39       	ld.w	r9,r9[0xc]
8000790c:	93 28       	st.w	r9[0x8],r8
8000790e:	91 39       	st.w	r8[0xc],r9
80007910:	cd c8       	rjmp	80007ac8 <_realloc_r+0x268>
80007912:	30 0a       	mov	r10,0
80007914:	14 99       	mov	r9,r10
80007916:	ed bc 00 00 	bld	r12,0x0
8000791a:	e0 80 00 95 	breq	80007a44 <_realloc_r+0x1e4>
8000791e:	62 07       	ld.w	r7,r1[0x0]
80007920:	e2 07 01 07 	sub	r7,r1,r7
80007924:	6e 1c       	ld.w	r12,r7[0x4]
80007926:	e0 1c ff fc 	andl	r12,0xfffc
8000792a:	58 09       	cp.w	r9,0
8000792c:	c5 60       	breq	800079d8 <_realloc_r+0x178>
8000792e:	f8 00 00 03 	add	r3,r12,r0
80007932:	0a 39       	cp.w	r9,r5
80007934:	c4 81       	brne	800079c4 <_realloc_r+0x164>
80007936:	14 03       	add	r3,r10
80007938:	ec c9 ff f0 	sub	r9,r6,-16
8000793c:	12 33       	cp.w	r3,r9
8000793e:	c4 d5       	brlt	800079d8 <_realloc_r+0x178>
80007940:	6e 3a       	ld.w	r10,r7[0xc]
80007942:	6e 29       	ld.w	r9,r7[0x8]
80007944:	95 29       	st.w	r10[0x8],r9
80007946:	93 3a       	st.w	r9[0xc],r10
80007948:	ee c5 ff f8 	sub	r5,r7,-8
8000794c:	e0 ca 00 04 	sub	r10,r0,4
80007950:	e0 4a 00 24 	cp.w	r10,36
80007954:	e0 8b 00 25 	brhi	8000799e <_realloc_r+0x13e>
80007958:	0a 99       	mov	r9,r5
8000795a:	59 3a       	cp.w	r10,19
8000795c:	e0 88 00 1a 	brls	80007990 <_realloc_r+0x130>
80007960:	09 09       	ld.w	r9,r4++
80007962:	8b 09       	st.w	r5[0x0],r9
80007964:	09 09       	ld.w	r9,r4++
80007966:	8f 39       	st.w	r7[0xc],r9
80007968:	ee c9 ff f0 	sub	r9,r7,-16
8000796c:	59 ba       	cp.w	r10,27
8000796e:	e0 88 00 11 	brls	80007990 <_realloc_r+0x130>
80007972:	09 0b       	ld.w	r11,r4++
80007974:	93 0b       	st.w	r9[0x0],r11
80007976:	09 09       	ld.w	r9,r4++
80007978:	8f 59       	st.w	r7[0x14],r9
8000797a:	ee c9 ff e8 	sub	r9,r7,-24
8000797e:	e0 4a 00 24 	cp.w	r10,36
80007982:	c0 71       	brne	80007990 <_realloc_r+0x130>
80007984:	09 0a       	ld.w	r10,r4++
80007986:	93 0a       	st.w	r9[0x0],r10
80007988:	ee c9 ff e0 	sub	r9,r7,-32
8000798c:	09 0a       	ld.w	r10,r4++
8000798e:	8f 7a       	st.w	r7[0x1c],r10
80007990:	09 0a       	ld.w	r10,r4++
80007992:	12 aa       	st.w	r9++,r10
80007994:	68 0a       	ld.w	r10,r4[0x0]
80007996:	93 0a       	st.w	r9[0x0],r10
80007998:	68 1a       	ld.w	r10,r4[0x4]
8000799a:	93 1a       	st.w	r9[0x4],r10
8000799c:	c0 78       	rjmp	800079aa <_realloc_r+0x14a>
8000799e:	50 08       	stdsp	sp[0x0],r8
800079a0:	08 9b       	mov	r11,r4
800079a2:	0a 9c       	mov	r12,r5
800079a4:	fe b0 fc 4b 	rcall	8000723a <memmove>
800079a8:	40 08       	lddsp	r8,sp[0x0]
800079aa:	ee 06 00 09 	add	r9,r7,r6
800079ae:	0c 13       	sub	r3,r6
800079b0:	a1 a3       	sbr	r3,0x0
800079b2:	93 13       	st.w	r9[0x4],r3
800079b4:	91 29       	st.w	r8[0x8],r9
800079b6:	04 9c       	mov	r12,r2
800079b8:	6e 18       	ld.w	r8,r7[0x4]
800079ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079be:	10 46       	or	r6,r8
800079c0:	8f 16       	st.w	r7[0x4],r6
800079c2:	ca a8       	rjmp	80007b16 <_realloc_r+0x2b6>
800079c4:	14 03       	add	r3,r10
800079c6:	0c 33       	cp.w	r3,r6
800079c8:	c0 85       	brlt	800079d8 <_realloc_r+0x178>
800079ca:	72 28       	ld.w	r8,r9[0x8]
800079cc:	72 39       	ld.w	r9,r9[0xc]
800079ce:	93 28       	st.w	r9[0x8],r8
800079d0:	91 39       	st.w	r8[0xc],r9
800079d2:	6e 28       	ld.w	r8,r7[0x8]
800079d4:	6e 39       	ld.w	r9,r7[0xc]
800079d6:	c0 78       	rjmp	800079e4 <_realloc_r+0x184>
800079d8:	f8 00 00 03 	add	r3,r12,r0
800079dc:	0c 33       	cp.w	r3,r6
800079de:	c3 35       	brlt	80007a44 <_realloc_r+0x1e4>
800079e0:	6e 39       	ld.w	r9,r7[0xc]
800079e2:	6e 28       	ld.w	r8,r7[0x8]
800079e4:	93 28       	st.w	r9[0x8],r8
800079e6:	91 39       	st.w	r8[0xc],r9
800079e8:	e0 ca 00 04 	sub	r10,r0,4
800079ec:	ee cc ff f8 	sub	r12,r7,-8
800079f0:	e0 4a 00 24 	cp.w	r10,36
800079f4:	e0 8b 00 24 	brhi	80007a3c <_realloc_r+0x1dc>
800079f8:	59 3a       	cp.w	r10,19
800079fa:	e0 88 00 1a 	brls	80007a2e <_realloc_r+0x1ce>
800079fe:	09 08       	ld.w	r8,r4++
80007a00:	99 08       	st.w	r12[0x0],r8
80007a02:	09 08       	ld.w	r8,r4++
80007a04:	8f 38       	st.w	r7[0xc],r8
80007a06:	ee cc ff f0 	sub	r12,r7,-16
80007a0a:	59 ba       	cp.w	r10,27
80007a0c:	e0 88 00 11 	brls	80007a2e <_realloc_r+0x1ce>
80007a10:	09 08       	ld.w	r8,r4++
80007a12:	99 08       	st.w	r12[0x0],r8
80007a14:	09 08       	ld.w	r8,r4++
80007a16:	8f 58       	st.w	r7[0x14],r8
80007a18:	ee cc ff e8 	sub	r12,r7,-24
80007a1c:	e0 4a 00 24 	cp.w	r10,36
80007a20:	c0 71       	brne	80007a2e <_realloc_r+0x1ce>
80007a22:	09 08       	ld.w	r8,r4++
80007a24:	99 08       	st.w	r12[0x0],r8
80007a26:	ee cc ff e0 	sub	r12,r7,-32
80007a2a:	09 08       	ld.w	r8,r4++
80007a2c:	8f 78       	st.w	r7[0x1c],r8
80007a2e:	09 08       	ld.w	r8,r4++
80007a30:	18 a8       	st.w	r12++,r8
80007a32:	68 08       	ld.w	r8,r4[0x0]
80007a34:	99 08       	st.w	r12[0x0],r8
80007a36:	68 18       	ld.w	r8,r4[0x4]
80007a38:	99 18       	st.w	r12[0x4],r8
80007a3a:	c4 78       	rjmp	80007ac8 <_realloc_r+0x268>
80007a3c:	08 9b       	mov	r11,r4
80007a3e:	fe b0 fb fe 	rcall	8000723a <memmove>
80007a42:	c4 38       	rjmp	80007ac8 <_realloc_r+0x268>
80007a44:	04 9c       	mov	r12,r2
80007a46:	fe b0 f9 d7 	rcall	80006df4 <_malloc_r>
80007a4a:	18 95       	mov	r5,r12
80007a4c:	c3 a0       	breq	80007ac0 <_realloc_r+0x260>
80007a4e:	62 18       	ld.w	r8,r1[0x4]
80007a50:	f8 c9 00 08 	sub	r9,r12,8
80007a54:	a1 c8       	cbr	r8,0x0
80007a56:	e2 08 00 08 	add	r8,r1,r8
80007a5a:	10 39       	cp.w	r9,r8
80007a5c:	c0 71       	brne	80007a6a <_realloc_r+0x20a>
80007a5e:	72 13       	ld.w	r3,r9[0x4]
80007a60:	02 97       	mov	r7,r1
80007a62:	e0 13 ff fc 	andl	r3,0xfffc
80007a66:	00 03       	add	r3,r0
80007a68:	c3 08       	rjmp	80007ac8 <_realloc_r+0x268>
80007a6a:	e0 ca 00 04 	sub	r10,r0,4
80007a6e:	e0 4a 00 24 	cp.w	r10,36
80007a72:	e0 8b 00 20 	brhi	80007ab2 <_realloc_r+0x252>
80007a76:	08 99       	mov	r9,r4
80007a78:	18 98       	mov	r8,r12
80007a7a:	59 3a       	cp.w	r10,19
80007a7c:	e0 88 00 14 	brls	80007aa4 <_realloc_r+0x244>
80007a80:	13 0b       	ld.w	r11,r9++
80007a82:	10 ab       	st.w	r8++,r11
80007a84:	13 0b       	ld.w	r11,r9++
80007a86:	10 ab       	st.w	r8++,r11
80007a88:	59 ba       	cp.w	r10,27
80007a8a:	e0 88 00 0d 	brls	80007aa4 <_realloc_r+0x244>
80007a8e:	13 0b       	ld.w	r11,r9++
80007a90:	10 ab       	st.w	r8++,r11
80007a92:	13 0b       	ld.w	r11,r9++
80007a94:	10 ab       	st.w	r8++,r11
80007a96:	e0 4a 00 24 	cp.w	r10,36
80007a9a:	c0 51       	brne	80007aa4 <_realloc_r+0x244>
80007a9c:	13 0a       	ld.w	r10,r9++
80007a9e:	10 aa       	st.w	r8++,r10
80007aa0:	13 0a       	ld.w	r10,r9++
80007aa2:	10 aa       	st.w	r8++,r10
80007aa4:	13 0a       	ld.w	r10,r9++
80007aa6:	10 aa       	st.w	r8++,r10
80007aa8:	72 0a       	ld.w	r10,r9[0x0]
80007aaa:	91 0a       	st.w	r8[0x0],r10
80007aac:	72 19       	ld.w	r9,r9[0x4]
80007aae:	91 19       	st.w	r8[0x4],r9
80007ab0:	c0 48       	rjmp	80007ab8 <_realloc_r+0x258>
80007ab2:	08 9b       	mov	r11,r4
80007ab4:	fe b0 fb c3 	rcall	8000723a <memmove>
80007ab8:	08 9b       	mov	r11,r4
80007aba:	04 9c       	mov	r12,r2
80007abc:	fe b0 f6 f6 	rcall	800068a8 <_free_r>
80007ac0:	04 9c       	mov	r12,r2
80007ac2:	c2 a8       	rjmp	80007b16 <_realloc_r+0x2b6>
80007ac4:	00 93       	mov	r3,r0
80007ac6:	02 97       	mov	r7,r1
80007ac8:	e6 06 01 09 	sub	r9,r3,r6
80007acc:	6e 18       	ld.w	r8,r7[0x4]
80007ace:	58 f9       	cp.w	r9,15
80007ad0:	e0 88 00 16 	brls	80007afc <_realloc_r+0x29c>
80007ad4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ad8:	ed e8 10 08 	or	r8,r6,r8
80007adc:	8f 18       	st.w	r7[0x4],r8
80007ade:	12 98       	mov	r8,r9
80007ae0:	a1 a8       	sbr	r8,0x0
80007ae2:	ee 06 00 0b 	add	r11,r7,r6
80007ae6:	f6 09 00 09 	add	r9,r11,r9
80007aea:	97 18       	st.w	r11[0x4],r8
80007aec:	72 18       	ld.w	r8,r9[0x4]
80007aee:	a1 a8       	sbr	r8,0x0
80007af0:	2f 8b       	sub	r11,-8
80007af2:	93 18       	st.w	r9[0x4],r8
80007af4:	04 9c       	mov	r12,r2
80007af6:	fe b0 f6 d9 	rcall	800068a8 <_free_r>
80007afa:	c0 b8       	rjmp	80007b10 <_realloc_r+0x2b0>
80007afc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b00:	e7 e8 10 08 	or	r8,r3,r8
80007b04:	8f 18       	st.w	r7[0x4],r8
80007b06:	ee 03 00 03 	add	r3,r7,r3
80007b0a:	66 18       	ld.w	r8,r3[0x4]
80007b0c:	a1 a8       	sbr	r8,0x0
80007b0e:	87 18       	st.w	r3[0x4],r8
80007b10:	04 9c       	mov	r12,r2
80007b12:	ee c5 ff f8 	sub	r5,r7,-8
80007b16:	fe b0 fb b9 	rcall	80007288 <__malloc_unlock>
80007b1a:	0a 9c       	mov	r12,r5
80007b1c:	2f fd       	sub	sp,-4
80007b1e:	d8 32       	popm	r0-r7,pc

80007b20 <__isinfd>:
80007b20:	14 98       	mov	r8,r10
80007b22:	fc 19 7f f0 	movh	r9,0x7ff0
80007b26:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b2a:	f0 0b 11 00 	rsub	r11,r8,0
80007b2e:	f7 e8 10 08 	or	r8,r11,r8
80007b32:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007b36:	f2 08 01 08 	sub	r8,r9,r8
80007b3a:	f0 0c 11 00 	rsub	r12,r8,0
80007b3e:	f9 e8 10 08 	or	r8,r12,r8
80007b42:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007b46:	2f fc       	sub	r12,-1
80007b48:	5e fc       	retal	r12

80007b4a <__isnand>:
80007b4a:	14 98       	mov	r8,r10
80007b4c:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b50:	f0 0c 11 00 	rsub	r12,r8,0
80007b54:	10 4c       	or	r12,r8
80007b56:	fc 18 7f f0 	movh	r8,0x7ff0
80007b5a:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007b5e:	f0 0c 01 0c 	sub	r12,r8,r12
80007b62:	bf 9c       	lsr	r12,0x1f
80007b64:	5e fc       	retal	r12
80007b66:	d7 03       	nop

80007b68 <_sbrk_r>:
80007b68:	d4 21       	pushm	r4-r7,lr
80007b6a:	30 08       	mov	r8,0
80007b6c:	18 97       	mov	r7,r12
80007b6e:	e0 66 06 70 	mov	r6,1648
80007b72:	16 9c       	mov	r12,r11
80007b74:	8d 08       	st.w	r6[0x0],r8
80007b76:	ca fc       	rcall	80007cd4 <_sbrk>
80007b78:	5b fc       	cp.w	r12,-1
80007b7a:	c0 51       	brne	80007b84 <_sbrk_r+0x1c>
80007b7c:	6c 08       	ld.w	r8,r6[0x0]
80007b7e:	58 08       	cp.w	r8,0
80007b80:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007b84:	d8 22       	popm	r4-r7,pc
80007b86:	d7 03       	nop

80007b88 <__sclose>:
80007b88:	d4 01       	pushm	lr
80007b8a:	96 7b       	ld.sh	r11,r11[0xe]
80007b8c:	cf ec       	rcall	80007d88 <_close_r>
80007b8e:	d8 02       	popm	pc

80007b90 <__sseek>:
80007b90:	d4 21       	pushm	r4-r7,lr
80007b92:	16 97       	mov	r7,r11
80007b94:	96 7b       	ld.sh	r11,r11[0xe]
80007b96:	c8 5d       	rcall	80007ea0 <_lseek_r>
80007b98:	8e 68       	ld.sh	r8,r7[0xc]
80007b9a:	10 99       	mov	r9,r8
80007b9c:	ad c8       	cbr	r8,0xc
80007b9e:	ad a9       	sbr	r9,0xc
80007ba0:	5b fc       	cp.w	r12,-1
80007ba2:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007ba6:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007baa:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007bae:	d8 22       	popm	r4-r7,pc

80007bb0 <__swrite>:
80007bb0:	d4 21       	pushm	r4-r7,lr
80007bb2:	96 68       	ld.sh	r8,r11[0xc]
80007bb4:	16 97       	mov	r7,r11
80007bb6:	14 95       	mov	r5,r10
80007bb8:	12 94       	mov	r4,r9
80007bba:	e2 18 01 00 	andl	r8,0x100,COH
80007bbe:	18 96       	mov	r6,r12
80007bc0:	c0 50       	breq	80007bca <__swrite+0x1a>
80007bc2:	30 29       	mov	r9,2
80007bc4:	30 0a       	mov	r10,0
80007bc6:	96 7b       	ld.sh	r11,r11[0xe]
80007bc8:	c6 cd       	rcall	80007ea0 <_lseek_r>
80007bca:	8e 68       	ld.sh	r8,r7[0xc]
80007bcc:	ad c8       	cbr	r8,0xc
80007bce:	08 99       	mov	r9,r4
80007bd0:	0a 9a       	mov	r10,r5
80007bd2:	8e 7b       	ld.sh	r11,r7[0xe]
80007bd4:	0c 9c       	mov	r12,r6
80007bd6:	ae 68       	st.h	r7[0xc],r8
80007bd8:	c9 ac       	rcall	80007d0c <_write_r>
80007bda:	d8 22       	popm	r4-r7,pc

80007bdc <__sread>:
80007bdc:	d4 21       	pushm	r4-r7,lr
80007bde:	16 97       	mov	r7,r11
80007be0:	96 7b       	ld.sh	r11,r11[0xe]
80007be2:	c7 1d       	rcall	80007ec4 <_read_r>
80007be4:	c0 65       	brlt	80007bf0 <__sread+0x14>
80007be6:	6f 58       	ld.w	r8,r7[0x54]
80007be8:	18 08       	add	r8,r12
80007bea:	ef 48 00 54 	st.w	r7[84],r8
80007bee:	d8 22       	popm	r4-r7,pc
80007bf0:	8e 68       	ld.sh	r8,r7[0xc]
80007bf2:	ad c8       	cbr	r8,0xc
80007bf4:	ae 68       	st.h	r7[0xc],r8
80007bf6:	d8 22       	popm	r4-r7,pc

80007bf8 <strlen>:
80007bf8:	30 09       	mov	r9,0
80007bfa:	18 98       	mov	r8,r12
80007bfc:	c0 28       	rjmp	80007c00 <strlen+0x8>
80007bfe:	2f f8       	sub	r8,-1
80007c00:	11 8a       	ld.ub	r10,r8[0x0]
80007c02:	f2 0a 18 00 	cp.b	r10,r9
80007c06:	cf c1       	brne	80007bfe <strlen+0x6>
80007c08:	f0 0c 01 0c 	sub	r12,r8,r12
80007c0c:	5e fc       	retal	r12
80007c0e:	d7 03       	nop

80007c10 <_close>:
80007c10:	30 28       	mov	r8,2
80007c12:	d6 73       	breakpoint
80007c14:	3f fc       	mov	r12,-1
80007c16:	35 8b       	mov	r11,88
80007c18:	58 0c       	cp.w	r12,0
80007c1a:	5e 4c       	retge	r12
80007c1c:	e0 6a 06 70 	mov	r10,1648
80007c20:	95 0b       	st.w	r10[0x0],r11
80007c22:	5e fc       	retal	r12

80007c24 <_lseek>:
80007c24:	30 58       	mov	r8,5
80007c26:	d6 73       	breakpoint
80007c28:	3f fc       	mov	r12,-1
80007c2a:	35 8b       	mov	r11,88
80007c2c:	58 0c       	cp.w	r12,0
80007c2e:	5e 4c       	retge	r12
80007c30:	e0 6a 06 70 	mov	r10,1648
80007c34:	95 0b       	st.w	r10[0x0],r11
80007c36:	5e fc       	retal	r12

80007c38 <_read>:
80007c38:	30 38       	mov	r8,3
80007c3a:	d6 73       	breakpoint
80007c3c:	3f fc       	mov	r12,-1
80007c3e:	35 8b       	mov	r11,88
80007c40:	58 0c       	cp.w	r12,0
80007c42:	5e 4c       	retge	r12
80007c44:	e0 6a 06 70 	mov	r10,1648
80007c48:	95 0b       	st.w	r10[0x0],r11
80007c4a:	5e fc       	retal	r12

80007c4c <_write>:
80007c4c:	30 48       	mov	r8,4
80007c4e:	d6 73       	breakpoint
80007c50:	3f fc       	mov	r12,-1
80007c52:	35 8b       	mov	r11,88
80007c54:	58 0c       	cp.w	r12,0
80007c56:	5e 4c       	retge	r12
80007c58:	e0 6a 06 70 	mov	r10,1648
80007c5c:	95 0b       	st.w	r10[0x0],r11
80007c5e:	5e fc       	retal	r12

80007c60 <isatty>:
80007c60:	30 b8       	mov	r8,11
80007c62:	d6 73       	breakpoint
80007c64:	3f fc       	mov	r12,-1
80007c66:	35 8b       	mov	r11,88
80007c68:	58 0c       	cp.w	r12,0
80007c6a:	5e 4c       	retge	r12
80007c6c:	e0 6a 06 70 	mov	r10,1648
80007c70:	95 0b       	st.w	r10[0x0],r11
80007c72:	5e fc       	retal	r12

80007c74 <_fstat_host>:
80007c74:	30 98       	mov	r8,9
80007c76:	d6 73       	breakpoint
80007c78:	3f fc       	mov	r12,-1
80007c7a:	35 8b       	mov	r11,88
80007c7c:	58 0c       	cp.w	r12,0
80007c7e:	5e 4c       	retge	r12
80007c80:	e0 6a 06 70 	mov	r10,1648
80007c84:	95 0b       	st.w	r10[0x0],r11
80007c86:	5e fc       	retal	r12

80007c88 <_fstat>:
80007c88:	d4 21       	pushm	r4-r7,lr
80007c8a:	21 0d       	sub	sp,64
80007c8c:	16 97       	mov	r7,r11
80007c8e:	1a 9b       	mov	r11,sp
80007c90:	cf 2f       	rcall	80007c74 <_fstat_host>
80007c92:	c0 34       	brge	80007c98 <_fstat+0x10>
80007c94:	3f fc       	mov	r12,-1
80007c96:	c1 c8       	rjmp	80007cce <_fstat+0x46>
80007c98:	40 08       	lddsp	r8,sp[0x0]
80007c9a:	ae 08       	st.h	r7[0x0],r8
80007c9c:	40 18       	lddsp	r8,sp[0x4]
80007c9e:	ae 18       	st.h	r7[0x2],r8
80007ca0:	40 28       	lddsp	r8,sp[0x8]
80007ca2:	8f 18       	st.w	r7[0x4],r8
80007ca4:	40 38       	lddsp	r8,sp[0xc]
80007ca6:	ae 48       	st.h	r7[0x8],r8
80007ca8:	40 48       	lddsp	r8,sp[0x10]
80007caa:	ae 58       	st.h	r7[0xa],r8
80007cac:	40 58       	lddsp	r8,sp[0x14]
80007cae:	ae 68       	st.h	r7[0xc],r8
80007cb0:	40 68       	lddsp	r8,sp[0x18]
80007cb2:	ae 78       	st.h	r7[0xe],r8
80007cb4:	40 88       	lddsp	r8,sp[0x20]
80007cb6:	8f 48       	st.w	r7[0x10],r8
80007cb8:	40 a8       	lddsp	r8,sp[0x28]
80007cba:	8f b8       	st.w	r7[0x2c],r8
80007cbc:	40 c8       	lddsp	r8,sp[0x30]
80007cbe:	8f c8       	st.w	r7[0x30],r8
80007cc0:	40 d8       	lddsp	r8,sp[0x34]
80007cc2:	8f 58       	st.w	r7[0x14],r8
80007cc4:	40 e8       	lddsp	r8,sp[0x38]
80007cc6:	30 0c       	mov	r12,0
80007cc8:	8f 78       	st.w	r7[0x1c],r8
80007cca:	40 f8       	lddsp	r8,sp[0x3c]
80007ccc:	8f 98       	st.w	r7[0x24],r8
80007cce:	2f 0d       	sub	sp,-64
80007cd0:	d8 22       	popm	r4-r7,pc
80007cd2:	d7 03       	nop

80007cd4 <_sbrk>:
80007cd4:	d4 01       	pushm	lr
80007cd6:	e0 68 06 5c 	mov	r8,1628
80007cda:	70 09       	ld.w	r9,r8[0x0]
80007cdc:	58 09       	cp.w	r9,0
80007cde:	c0 41       	brne	80007ce6 <_sbrk+0x12>
80007ce0:	e0 69 06 78 	mov	r9,1656
80007ce4:	91 09       	st.w	r8[0x0],r9
80007ce6:	e0 69 06 5c 	mov	r9,1628
80007cea:	e0 6a f0 00 	mov	r10,61440
80007cee:	72 08       	ld.w	r8,r9[0x0]
80007cf0:	f0 0c 00 0c 	add	r12,r8,r12
80007cf4:	14 3c       	cp.w	r12,r10
80007cf6:	e0 8b 00 04 	brhi	80007cfe <_sbrk+0x2a>
80007cfa:	93 0c       	st.w	r9[0x0],r12
80007cfc:	c0 58       	rjmp	80007d06 <_sbrk+0x32>
80007cfe:	c5 5c       	rcall	80007da8 <__errno>
80007d00:	30 c8       	mov	r8,12
80007d02:	99 08       	st.w	r12[0x0],r8
80007d04:	3f f8       	mov	r8,-1
80007d06:	10 9c       	mov	r12,r8
80007d08:	d8 02       	popm	pc
80007d0a:	d7 03       	nop

80007d0c <_write_r>:
80007d0c:	d4 21       	pushm	r4-r7,lr
80007d0e:	16 98       	mov	r8,r11
80007d10:	18 97       	mov	r7,r12
80007d12:	10 9c       	mov	r12,r8
80007d14:	30 08       	mov	r8,0
80007d16:	14 9b       	mov	r11,r10
80007d18:	e0 66 06 70 	mov	r6,1648
80007d1c:	12 9a       	mov	r10,r9
80007d1e:	8d 08       	st.w	r6[0x0],r8
80007d20:	c9 6f       	rcall	80007c4c <_write>
80007d22:	5b fc       	cp.w	r12,-1
80007d24:	c0 51       	brne	80007d2e <_write_r+0x22>
80007d26:	6c 08       	ld.w	r8,r6[0x0]
80007d28:	58 08       	cp.w	r8,0
80007d2a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d2e:	d8 22       	popm	r4-r7,pc

80007d30 <_calloc_r>:
80007d30:	d4 21       	pushm	r4-r7,lr
80007d32:	f4 0b 02 4b 	mul	r11,r10,r11
80007d36:	fe b0 f8 5f 	rcall	80006df4 <_malloc_r>
80007d3a:	18 97       	mov	r7,r12
80007d3c:	c2 30       	breq	80007d82 <_calloc_r+0x52>
80007d3e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007d42:	e0 1a ff fc 	andl	r10,0xfffc
80007d46:	20 4a       	sub	r10,4
80007d48:	e0 4a 00 24 	cp.w	r10,36
80007d4c:	e0 8b 00 18 	brhi	80007d7c <_calloc_r+0x4c>
80007d50:	18 98       	mov	r8,r12
80007d52:	59 3a       	cp.w	r10,19
80007d54:	e0 88 00 0f 	brls	80007d72 <_calloc_r+0x42>
80007d58:	30 09       	mov	r9,0
80007d5a:	10 a9       	st.w	r8++,r9
80007d5c:	10 a9       	st.w	r8++,r9
80007d5e:	59 ba       	cp.w	r10,27
80007d60:	e0 88 00 09 	brls	80007d72 <_calloc_r+0x42>
80007d64:	10 a9       	st.w	r8++,r9
80007d66:	10 a9       	st.w	r8++,r9
80007d68:	e0 4a 00 24 	cp.w	r10,36
80007d6c:	c0 31       	brne	80007d72 <_calloc_r+0x42>
80007d6e:	10 a9       	st.w	r8++,r9
80007d70:	10 a9       	st.w	r8++,r9
80007d72:	30 09       	mov	r9,0
80007d74:	10 a9       	st.w	r8++,r9
80007d76:	91 19       	st.w	r8[0x4],r9
80007d78:	91 09       	st.w	r8[0x0],r9
80007d7a:	c0 48       	rjmp	80007d82 <_calloc_r+0x52>
80007d7c:	30 0b       	mov	r11,0
80007d7e:	fe b0 fa 7d 	rcall	80007278 <memset>
80007d82:	0e 9c       	mov	r12,r7
80007d84:	d8 22       	popm	r4-r7,pc
80007d86:	d7 03       	nop

80007d88 <_close_r>:
80007d88:	d4 21       	pushm	r4-r7,lr
80007d8a:	30 08       	mov	r8,0
80007d8c:	18 97       	mov	r7,r12
80007d8e:	e0 66 06 70 	mov	r6,1648
80007d92:	16 9c       	mov	r12,r11
80007d94:	8d 08       	st.w	r6[0x0],r8
80007d96:	c3 df       	rcall	80007c10 <_close>
80007d98:	5b fc       	cp.w	r12,-1
80007d9a:	c0 51       	brne	80007da4 <_close_r+0x1c>
80007d9c:	6c 08       	ld.w	r8,r6[0x0]
80007d9e:	58 08       	cp.w	r8,0
80007da0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007da4:	d8 22       	popm	r4-r7,pc
80007da6:	d7 03       	nop

80007da8 <__errno>:
80007da8:	e0 68 01 00 	mov	r8,256
80007dac:	70 0c       	ld.w	r12,r8[0x0]
80007dae:	2f 4c       	sub	r12,-12
80007db0:	5e fc       	retal	r12
80007db2:	d7 03       	nop

80007db4 <_fclose_r>:
80007db4:	d4 21       	pushm	r4-r7,lr
80007db6:	18 96       	mov	r6,r12
80007db8:	16 97       	mov	r7,r11
80007dba:	58 0b       	cp.w	r11,0
80007dbc:	c0 31       	brne	80007dc2 <_fclose_r+0xe>
80007dbe:	16 95       	mov	r5,r11
80007dc0:	c5 38       	rjmp	80007e66 <_fclose_r+0xb2>
80007dc2:	fe b0 f4 87 	rcall	800066d0 <__sfp_lock_acquire>
80007dc6:	58 06       	cp.w	r6,0
80007dc8:	c0 70       	breq	80007dd6 <_fclose_r+0x22>
80007dca:	6c 68       	ld.w	r8,r6[0x18]
80007dcc:	58 08       	cp.w	r8,0
80007dce:	c0 41       	brne	80007dd6 <_fclose_r+0x22>
80007dd0:	0c 9c       	mov	r12,r6
80007dd2:	fe b0 f4 d1 	rcall	80006774 <__sinit>
80007dd6:	fe c8 e8 2e 	sub	r8,pc,-6098
80007dda:	10 37       	cp.w	r7,r8
80007ddc:	c0 31       	brne	80007de2 <_fclose_r+0x2e>
80007dde:	6c 07       	ld.w	r7,r6[0x0]
80007de0:	c0 c8       	rjmp	80007df8 <_fclose_r+0x44>
80007de2:	fe c8 e8 1a 	sub	r8,pc,-6118
80007de6:	10 37       	cp.w	r7,r8
80007de8:	c0 31       	brne	80007dee <_fclose_r+0x3a>
80007dea:	6c 17       	ld.w	r7,r6[0x4]
80007dec:	c0 68       	rjmp	80007df8 <_fclose_r+0x44>
80007dee:	fe c8 e8 06 	sub	r8,pc,-6138
80007df2:	10 37       	cp.w	r7,r8
80007df4:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007df8:	8e 69       	ld.sh	r9,r7[0xc]
80007dfa:	30 08       	mov	r8,0
80007dfc:	f0 09 19 00 	cp.h	r9,r8
80007e00:	c0 51       	brne	80007e0a <_fclose_r+0x56>
80007e02:	fe b0 f4 68 	rcall	800066d2 <__sfp_lock_release>
80007e06:	30 05       	mov	r5,0
80007e08:	c2 f8       	rjmp	80007e66 <_fclose_r+0xb2>
80007e0a:	0e 9b       	mov	r11,r7
80007e0c:	0c 9c       	mov	r12,r6
80007e0e:	fe b0 f3 db 	rcall	800065c4 <_fflush_r>
80007e12:	6e c8       	ld.w	r8,r7[0x30]
80007e14:	18 95       	mov	r5,r12
80007e16:	58 08       	cp.w	r8,0
80007e18:	c0 60       	breq	80007e24 <_fclose_r+0x70>
80007e1a:	6e 8b       	ld.w	r11,r7[0x20]
80007e1c:	0c 9c       	mov	r12,r6
80007e1e:	5d 18       	icall	r8
80007e20:	f9 b5 05 ff 	movlt	r5,-1
80007e24:	8e 68       	ld.sh	r8,r7[0xc]
80007e26:	ed b8 00 07 	bld	r8,0x7
80007e2a:	c0 51       	brne	80007e34 <_fclose_r+0x80>
80007e2c:	6e 4b       	ld.w	r11,r7[0x10]
80007e2e:	0c 9c       	mov	r12,r6
80007e30:	fe b0 f5 3c 	rcall	800068a8 <_free_r>
80007e34:	6e db       	ld.w	r11,r7[0x34]
80007e36:	58 0b       	cp.w	r11,0
80007e38:	c0 a0       	breq	80007e4c <_fclose_r+0x98>
80007e3a:	ee c8 ff bc 	sub	r8,r7,-68
80007e3e:	10 3b       	cp.w	r11,r8
80007e40:	c0 40       	breq	80007e48 <_fclose_r+0x94>
80007e42:	0c 9c       	mov	r12,r6
80007e44:	fe b0 f5 32 	rcall	800068a8 <_free_r>
80007e48:	30 08       	mov	r8,0
80007e4a:	8f d8       	st.w	r7[0x34],r8
80007e4c:	6f 2b       	ld.w	r11,r7[0x48]
80007e4e:	58 0b       	cp.w	r11,0
80007e50:	c0 70       	breq	80007e5e <_fclose_r+0xaa>
80007e52:	0c 9c       	mov	r12,r6
80007e54:	fe b0 f5 2a 	rcall	800068a8 <_free_r>
80007e58:	30 08       	mov	r8,0
80007e5a:	ef 48 00 48 	st.w	r7[72],r8
80007e5e:	30 08       	mov	r8,0
80007e60:	ae 68       	st.h	r7[0xc],r8
80007e62:	fe b0 f4 38 	rcall	800066d2 <__sfp_lock_release>
80007e66:	0a 9c       	mov	r12,r5
80007e68:	d8 22       	popm	r4-r7,pc
80007e6a:	d7 03       	nop

80007e6c <fclose>:
80007e6c:	d4 01       	pushm	lr
80007e6e:	e0 68 01 00 	mov	r8,256
80007e72:	18 9b       	mov	r11,r12
80007e74:	70 0c       	ld.w	r12,r8[0x0]
80007e76:	c9 ff       	rcall	80007db4 <_fclose_r>
80007e78:	d8 02       	popm	pc
80007e7a:	d7 03       	nop

80007e7c <_fstat_r>:
80007e7c:	d4 21       	pushm	r4-r7,lr
80007e7e:	16 98       	mov	r8,r11
80007e80:	18 97       	mov	r7,r12
80007e82:	10 9c       	mov	r12,r8
80007e84:	30 08       	mov	r8,0
80007e86:	e0 66 06 70 	mov	r6,1648
80007e8a:	14 9b       	mov	r11,r10
80007e8c:	8d 08       	st.w	r6[0x0],r8
80007e8e:	cf de       	rcall	80007c88 <_fstat>
80007e90:	5b fc       	cp.w	r12,-1
80007e92:	c0 51       	brne	80007e9c <_fstat_r+0x20>
80007e94:	6c 08       	ld.w	r8,r6[0x0]
80007e96:	58 08       	cp.w	r8,0
80007e98:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e9c:	d8 22       	popm	r4-r7,pc
80007e9e:	d7 03       	nop

80007ea0 <_lseek_r>:
80007ea0:	d4 21       	pushm	r4-r7,lr
80007ea2:	16 98       	mov	r8,r11
80007ea4:	18 97       	mov	r7,r12
80007ea6:	10 9c       	mov	r12,r8
80007ea8:	30 08       	mov	r8,0
80007eaa:	14 9b       	mov	r11,r10
80007eac:	e0 66 06 70 	mov	r6,1648
80007eb0:	12 9a       	mov	r10,r9
80007eb2:	8d 08       	st.w	r6[0x0],r8
80007eb4:	cb 8e       	rcall	80007c24 <_lseek>
80007eb6:	5b fc       	cp.w	r12,-1
80007eb8:	c0 51       	brne	80007ec2 <_lseek_r+0x22>
80007eba:	6c 08       	ld.w	r8,r6[0x0]
80007ebc:	58 08       	cp.w	r8,0
80007ebe:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ec2:	d8 22       	popm	r4-r7,pc

80007ec4 <_read_r>:
80007ec4:	d4 21       	pushm	r4-r7,lr
80007ec6:	16 98       	mov	r8,r11
80007ec8:	18 97       	mov	r7,r12
80007eca:	10 9c       	mov	r12,r8
80007ecc:	30 08       	mov	r8,0
80007ece:	14 9b       	mov	r11,r10
80007ed0:	e0 66 06 70 	mov	r6,1648
80007ed4:	12 9a       	mov	r10,r9
80007ed6:	8d 08       	st.w	r6[0x0],r8
80007ed8:	cb 0e       	rcall	80007c38 <_read>
80007eda:	5b fc       	cp.w	r12,-1
80007edc:	c0 51       	brne	80007ee6 <_read_r+0x22>
80007ede:	6c 08       	ld.w	r8,r6[0x0]
80007ee0:	58 08       	cp.w	r8,0
80007ee2:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ee6:	d8 22       	popm	r4-r7,pc

80007ee8 <__avr32_f64_mul>:
80007ee8:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007eec:	e0 80 00 dc 	breq	800080a4 <__avr32_f64_mul_op1_zero>
80007ef0:	d4 21       	pushm	r4-r7,lr
80007ef2:	f7 e9 20 0e 	eor	lr,r11,r9
80007ef6:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007efa:	30 15       	mov	r5,1
80007efc:	c4 30       	breq	80007f82 <__avr32_f64_mul_op1_subnormal>
80007efe:	ab 6b       	lsl	r11,0xa
80007f00:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007f04:	ab 6a       	lsl	r10,0xa
80007f06:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007f0a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80007f0e:	c5 c0       	breq	80007fc6 <__avr32_f64_mul_op2_subnormal>
80007f10:	a1 78       	lsl	r8,0x1
80007f12:	5c f9       	rol	r9
80007f14:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007f18:	e0 47 07 ff 	cp.w	r7,2047
80007f1c:	c7 70       	breq	8000800a <__avr32_f64_mul_op_nan_or_inf>
80007f1e:	e0 46 07 ff 	cp.w	r6,2047
80007f22:	c7 40       	breq	8000800a <__avr32_f64_mul_op_nan_or_inf>
80007f24:	ee 06 00 0c 	add	r12,r7,r6
80007f28:	e0 2c 03 fe 	sub	r12,1022
80007f2c:	f6 08 06 44 	mulu.d	r4,r11,r8
80007f30:	f4 09 07 44 	macu.d	r4,r10,r9
80007f34:	f4 08 06 46 	mulu.d	r6,r10,r8
80007f38:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007f3c:	08 07       	add	r7,r4
80007f3e:	f4 05 00 4a 	adc	r10,r10,r5
80007f42:	5c 0b       	acr	r11
80007f44:	ed bb 00 14 	bld	r11,0x14
80007f48:	c0 50       	breq	80007f52 <__avr32_f64_mul+0x6a>
80007f4a:	a1 77       	lsl	r7,0x1
80007f4c:	5c fa       	rol	r10
80007f4e:	5c fb       	rol	r11
80007f50:	20 1c       	sub	r12,1
80007f52:	58 0c       	cp.w	r12,0
80007f54:	e0 8a 00 6f 	brle	80008032 <__avr32_f64_mul_res_subnormal>
80007f58:	e0 4c 07 ff 	cp.w	r12,2047
80007f5c:	e0 84 00 9c 	brge	80008094 <__avr32_f64_mul_res_inf>
80007f60:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007f64:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007f68:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007f6c:	ee 17 80 00 	eorh	r7,0x8000
80007f70:	f1 b7 04 20 	satu	r7,0x1
80007f74:	0e 0a       	add	r10,r7
80007f76:	5c 0b       	acr	r11
80007f78:	ed be 00 1f 	bld	lr,0x1f
80007f7c:	ef bb 00 1f 	bst	r11,0x1f
80007f80:	d8 22       	popm	r4-r7,pc

80007f82 <__avr32_f64_mul_op1_subnormal>:
80007f82:	e4 1b 00 0f 	andh	r11,0xf
80007f86:	f4 0c 12 00 	clz	r12,r10
80007f8a:	f6 06 12 00 	clz	r6,r11
80007f8e:	f7 bc 03 e1 	sublo	r12,-31
80007f92:	f8 06 17 30 	movlo	r6,r12
80007f96:	f7 b6 02 01 	subhs	r6,1
80007f9a:	e0 46 00 20 	cp.w	r6,32
80007f9e:	c0 d4       	brge	80007fb8 <__avr32_f64_mul_op1_subnormal+0x36>
80007fa0:	ec 0c 11 20 	rsub	r12,r6,32
80007fa4:	f6 06 09 4b 	lsl	r11,r11,r6
80007fa8:	f4 0c 0a 4c 	lsr	r12,r10,r12
80007fac:	18 4b       	or	r11,r12
80007fae:	f4 06 09 4a 	lsl	r10,r10,r6
80007fb2:	20 b6       	sub	r6,11
80007fb4:	0c 17       	sub	r7,r6
80007fb6:	ca ab       	rjmp	80007f0a <__avr32_f64_mul+0x22>
80007fb8:	f4 06 09 4b 	lsl	r11,r10,r6
80007fbc:	c6 40       	breq	80008084 <__avr32_f64_mul_res_zero>
80007fbe:	30 0a       	mov	r10,0
80007fc0:	20 b6       	sub	r6,11
80007fc2:	0c 17       	sub	r7,r6
80007fc4:	ca 3b       	rjmp	80007f0a <__avr32_f64_mul+0x22>

80007fc6 <__avr32_f64_mul_op2_subnormal>:
80007fc6:	e4 19 00 0f 	andh	r9,0xf
80007fca:	f0 0c 12 00 	clz	r12,r8
80007fce:	f2 05 12 00 	clz	r5,r9
80007fd2:	f7 bc 03 ea 	sublo	r12,-22
80007fd6:	f8 05 17 30 	movlo	r5,r12
80007fda:	f7 b5 02 0a 	subhs	r5,10
80007fde:	e0 45 00 20 	cp.w	r5,32
80007fe2:	c0 d4       	brge	80007ffc <__avr32_f64_mul_op2_subnormal+0x36>
80007fe4:	ea 0c 11 20 	rsub	r12,r5,32
80007fe8:	f2 05 09 49 	lsl	r9,r9,r5
80007fec:	f0 0c 0a 4c 	lsr	r12,r8,r12
80007ff0:	18 49       	or	r9,r12
80007ff2:	f0 05 09 48 	lsl	r8,r8,r5
80007ff6:	20 25       	sub	r5,2
80007ff8:	0a 16       	sub	r6,r5
80007ffa:	c8 fb       	rjmp	80007f18 <__avr32_f64_mul+0x30>
80007ffc:	f0 05 09 49 	lsl	r9,r8,r5
80008000:	c4 20       	breq	80008084 <__avr32_f64_mul_res_zero>
80008002:	30 08       	mov	r8,0
80008004:	20 25       	sub	r5,2
80008006:	0a 16       	sub	r6,r5
80008008:	c8 8b       	rjmp	80007f18 <__avr32_f64_mul+0x30>

8000800a <__avr32_f64_mul_op_nan_or_inf>:
8000800a:	e4 19 00 0f 	andh	r9,0xf
8000800e:	e4 1b 00 0f 	andh	r11,0xf
80008012:	14 4b       	or	r11,r10
80008014:	10 49       	or	r9,r8
80008016:	e0 47 07 ff 	cp.w	r7,2047
8000801a:	c0 91       	brne	8000802c <__avr32_f64_mul_op1_not_naninf>
8000801c:	58 0b       	cp.w	r11,0
8000801e:	c3 81       	brne	8000808e <__avr32_f64_mul_res_nan>
80008020:	e0 46 07 ff 	cp.w	r6,2047
80008024:	c3 81       	brne	80008094 <__avr32_f64_mul_res_inf>
80008026:	58 09       	cp.w	r9,0
80008028:	c3 60       	breq	80008094 <__avr32_f64_mul_res_inf>
8000802a:	c3 28       	rjmp	8000808e <__avr32_f64_mul_res_nan>

8000802c <__avr32_f64_mul_op1_not_naninf>:
8000802c:	58 09       	cp.w	r9,0
8000802e:	c3 30       	breq	80008094 <__avr32_f64_mul_res_inf>
80008030:	c2 f8       	rjmp	8000808e <__avr32_f64_mul_res_nan>

80008032 <__avr32_f64_mul_res_subnormal>:
80008032:	5c 3c       	neg	r12
80008034:	2f fc       	sub	r12,-1
80008036:	f1 bc 04 c0 	satu	r12,0x6
8000803a:	e0 4c 00 20 	cp.w	r12,32
8000803e:	c1 14       	brge	80008060 <__avr32_f64_mul_res_subnormal+0x2e>
80008040:	f8 08 11 20 	rsub	r8,r12,32
80008044:	0e 46       	or	r6,r7
80008046:	ee 0c 0a 47 	lsr	r7,r7,r12
8000804a:	f4 08 09 49 	lsl	r9,r10,r8
8000804e:	12 47       	or	r7,r9
80008050:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008054:	f6 08 09 49 	lsl	r9,r11,r8
80008058:	12 4a       	or	r10,r9
8000805a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000805e:	c8 3b       	rjmp	80007f64 <__avr32_f64_mul+0x7c>
80008060:	f8 08 11 20 	rsub	r8,r12,32
80008064:	f9 b9 00 00 	moveq	r9,0
80008068:	c0 30       	breq	8000806e <__avr32_f64_mul_res_subnormal+0x3c>
8000806a:	f6 08 09 49 	lsl	r9,r11,r8
8000806e:	0e 46       	or	r6,r7
80008070:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008074:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008078:	f3 ea 10 07 	or	r7,r9,r10
8000807c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008080:	30 0b       	mov	r11,0
80008082:	c7 1b       	rjmp	80007f64 <__avr32_f64_mul+0x7c>

80008084 <__avr32_f64_mul_res_zero>:
80008084:	1c 9b       	mov	r11,lr
80008086:	e6 1b 80 00 	andh	r11,0x8000,COH
8000808a:	30 0a       	mov	r10,0
8000808c:	d8 22       	popm	r4-r7,pc

8000808e <__avr32_f64_mul_res_nan>:
8000808e:	3f fb       	mov	r11,-1
80008090:	3f fa       	mov	r10,-1
80008092:	d8 22       	popm	r4-r7,pc

80008094 <__avr32_f64_mul_res_inf>:
80008094:	f0 6b 00 00 	mov	r11,-1048576
80008098:	ed be 00 1f 	bld	lr,0x1f
8000809c:	ef bb 00 1f 	bst	r11,0x1f
800080a0:	30 0a       	mov	r10,0
800080a2:	d8 22       	popm	r4-r7,pc

800080a4 <__avr32_f64_mul_op1_zero>:
800080a4:	f7 e9 20 0b 	eor	r11,r11,r9
800080a8:	e6 1b 80 00 	andh	r11,0x8000,COH
800080ac:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800080b0:	e0 4c 07 ff 	cp.w	r12,2047
800080b4:	5e 1c       	retne	r12
800080b6:	3f fa       	mov	r10,-1
800080b8:	3f fb       	mov	r11,-1
800080ba:	5e fc       	retal	r12

800080bc <__avr32_f64_sub_from_add>:
800080bc:	ee 19 80 00 	eorh	r9,0x8000

800080c0 <__avr32_f64_sub>:
800080c0:	f7 e9 20 0c 	eor	r12,r11,r9
800080c4:	e0 86 00 ca 	brmi	80008258 <__avr32_f64_add_from_sub>
800080c8:	eb cd 40 e0 	pushm	r5-r7,lr
800080cc:	16 9c       	mov	r12,r11
800080ce:	e6 1c 80 00 	andh	r12,0x8000,COH
800080d2:	bf db       	cbr	r11,0x1f
800080d4:	bf d9       	cbr	r9,0x1f
800080d6:	10 3a       	cp.w	r10,r8
800080d8:	f2 0b 13 00 	cpc	r11,r9
800080dc:	c0 92       	brcc	800080ee <__avr32_f64_sub+0x2e>
800080de:	16 97       	mov	r7,r11
800080e0:	12 9b       	mov	r11,r9
800080e2:	0e 99       	mov	r9,r7
800080e4:	14 97       	mov	r7,r10
800080e6:	10 9a       	mov	r10,r8
800080e8:	0e 98       	mov	r8,r7
800080ea:	ee 1c 80 00 	eorh	r12,0x8000
800080ee:	f6 07 16 14 	lsr	r7,r11,0x14
800080f2:	ab 7b       	lsl	r11,0xb
800080f4:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800080f8:	ab 7a       	lsl	r10,0xb
800080fa:	bf bb       	sbr	r11,0x1f
800080fc:	f2 06 16 14 	lsr	r6,r9,0x14
80008100:	c4 40       	breq	80008188 <__avr32_f64_sub_opL_subnormal>
80008102:	ab 79       	lsl	r9,0xb
80008104:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008108:	ab 78       	lsl	r8,0xb
8000810a:	bf b9       	sbr	r9,0x1f

8000810c <__avr32_f64_sub_opL_subnormal_done>:
8000810c:	e0 47 07 ff 	cp.w	r7,2047
80008110:	c4 f0       	breq	800081ae <__avr32_f64_sub_opH_nan_or_inf>
80008112:	0e 26       	rsub	r6,r7
80008114:	c1 20       	breq	80008138 <__avr32_f64_sub_shift_done>
80008116:	ec 05 11 20 	rsub	r5,r6,32
8000811a:	e0 46 00 20 	cp.w	r6,32
8000811e:	c7 c2       	brcc	80008216 <__avr32_f64_sub_longshift>
80008120:	f0 05 09 4e 	lsl	lr,r8,r5
80008124:	f2 05 09 45 	lsl	r5,r9,r5
80008128:	f0 06 0a 48 	lsr	r8,r8,r6
8000812c:	f2 06 0a 49 	lsr	r9,r9,r6
80008130:	0a 48       	or	r8,r5
80008132:	58 0e       	cp.w	lr,0
80008134:	5f 1e       	srne	lr
80008136:	1c 48       	or	r8,lr

80008138 <__avr32_f64_sub_shift_done>:
80008138:	10 1a       	sub	r10,r8
8000813a:	f6 09 01 4b 	sbc	r11,r11,r9
8000813e:	f6 06 12 00 	clz	r6,r11
80008142:	c0 e0       	breq	8000815e <__avr32_f64_sub_longnormalize_done>
80008144:	c7 83       	brcs	80008234 <__avr32_f64_sub_longnormalize>
80008146:	ec 0e 11 20 	rsub	lr,r6,32
8000814a:	f6 06 09 4b 	lsl	r11,r11,r6
8000814e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008152:	1c 4b       	or	r11,lr
80008154:	f4 06 09 4a 	lsl	r10,r10,r6
80008158:	0c 17       	sub	r7,r6
8000815a:	e0 8a 00 39 	brle	800081cc <__avr32_f64_sub_subnormal_result>

8000815e <__avr32_f64_sub_longnormalize_done>:
8000815e:	f4 09 15 15 	lsl	r9,r10,0x15
80008162:	ab 9a       	lsr	r10,0xb
80008164:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008168:	ab 9b       	lsr	r11,0xb
8000816a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000816e:	18 4b       	or	r11,r12

80008170 <__avr32_f64_sub_round>:
80008170:	fc 17 80 00 	movh	r7,0x8000
80008174:	ed ba 00 00 	bld	r10,0x0
80008178:	f7 b7 01 ff 	subne	r7,-1
8000817c:	0e 39       	cp.w	r9,r7
8000817e:	5f 29       	srhs	r9
80008180:	12 0a       	add	r10,r9
80008182:	5c 0b       	acr	r11
80008184:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008188 <__avr32_f64_sub_opL_subnormal>:
80008188:	ab 79       	lsl	r9,0xb
8000818a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000818e:	ab 78       	lsl	r8,0xb
80008190:	f3 e8 10 0e 	or	lr,r9,r8
80008194:	f9 b6 01 01 	movne	r6,1
80008198:	ee 0e 11 00 	rsub	lr,r7,0
8000819c:	f9 b7 00 01 	moveq	r7,1
800081a0:	ef bb 00 1f 	bst	r11,0x1f
800081a4:	f7 ea 10 0e 	or	lr,r11,r10
800081a8:	f9 b7 00 00 	moveq	r7,0
800081ac:	cb 0b       	rjmp	8000810c <__avr32_f64_sub_opL_subnormal_done>

800081ae <__avr32_f64_sub_opH_nan_or_inf>:
800081ae:	bf db       	cbr	r11,0x1f
800081b0:	f7 ea 10 0e 	or	lr,r11,r10
800081b4:	c0 81       	brne	800081c4 <__avr32_f64_sub_return_nan>
800081b6:	e0 46 07 ff 	cp.w	r6,2047
800081ba:	c0 50       	breq	800081c4 <__avr32_f64_sub_return_nan>
800081bc:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800081c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081c4 <__avr32_f64_sub_return_nan>:
800081c4:	3f fa       	mov	r10,-1
800081c6:	3f fb       	mov	r11,-1
800081c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081cc <__avr32_f64_sub_subnormal_result>:
800081cc:	5c 37       	neg	r7
800081ce:	2f f7       	sub	r7,-1
800081d0:	f1 b7 04 c0 	satu	r7,0x6
800081d4:	e0 47 00 20 	cp.w	r7,32
800081d8:	c1 14       	brge	800081fa <__avr32_f64_sub_subnormal_result+0x2e>
800081da:	ee 08 11 20 	rsub	r8,r7,32
800081de:	f4 08 09 49 	lsl	r9,r10,r8
800081e2:	5f 16       	srne	r6
800081e4:	f4 07 0a 4a 	lsr	r10,r10,r7
800081e8:	0c 4a       	or	r10,r6
800081ea:	f6 08 09 49 	lsl	r9,r11,r8
800081ee:	f5 e9 10 0a 	or	r10,r10,r9
800081f2:	f4 07 0a 4b 	lsr	r11,r10,r7
800081f6:	30 07       	mov	r7,0
800081f8:	cb 3b       	rjmp	8000815e <__avr32_f64_sub_longnormalize_done>
800081fa:	ee 08 11 40 	rsub	r8,r7,64
800081fe:	f6 08 09 49 	lsl	r9,r11,r8
80008202:	14 49       	or	r9,r10
80008204:	5f 16       	srne	r6
80008206:	f6 07 0a 4a 	lsr	r10,r11,r7
8000820a:	0c 4a       	or	r10,r6
8000820c:	30 0b       	mov	r11,0
8000820e:	30 07       	mov	r7,0
80008210:	ca 7b       	rjmp	8000815e <__avr32_f64_sub_longnormalize_done>
80008212:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008216 <__avr32_f64_sub_longshift>:
80008216:	f1 b6 04 c0 	satu	r6,0x6
8000821a:	f0 0e 17 00 	moveq	lr,r8
8000821e:	c0 40       	breq	80008226 <__avr32_f64_sub_longshift+0x10>
80008220:	f2 05 09 4e 	lsl	lr,r9,r5
80008224:	10 4e       	or	lr,r8
80008226:	f2 06 0a 48 	lsr	r8,r9,r6
8000822a:	30 09       	mov	r9,0
8000822c:	58 0e       	cp.w	lr,0
8000822e:	5f 1e       	srne	lr
80008230:	1c 48       	or	r8,lr
80008232:	c8 3b       	rjmp	80008138 <__avr32_f64_sub_shift_done>

80008234 <__avr32_f64_sub_longnormalize>:
80008234:	f4 06 12 00 	clz	r6,r10
80008238:	f9 b7 03 00 	movlo	r7,0
8000823c:	f9 b6 03 00 	movlo	r6,0
80008240:	f9 bc 03 00 	movlo	r12,0
80008244:	f7 b6 02 e0 	subhs	r6,-32
80008248:	f4 06 09 4b 	lsl	r11,r10,r6
8000824c:	30 0a       	mov	r10,0
8000824e:	0c 17       	sub	r7,r6
80008250:	fe 9a ff be 	brle	800081cc <__avr32_f64_sub_subnormal_result>
80008254:	c8 5b       	rjmp	8000815e <__avr32_f64_sub_longnormalize_done>
80008256:	d7 03       	nop

80008258 <__avr32_f64_add_from_sub>:
80008258:	ee 19 80 00 	eorh	r9,0x8000

8000825c <__avr32_f64_add>:
8000825c:	f7 e9 20 0c 	eor	r12,r11,r9
80008260:	fe 96 ff 2e 	brmi	800080bc <__avr32_f64_sub_from_add>
80008264:	eb cd 40 e0 	pushm	r5-r7,lr
80008268:	16 9c       	mov	r12,r11
8000826a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000826e:	bf db       	cbr	r11,0x1f
80008270:	bf d9       	cbr	r9,0x1f
80008272:	12 3b       	cp.w	r11,r9
80008274:	c0 72       	brcc	80008282 <__avr32_f64_add+0x26>
80008276:	16 97       	mov	r7,r11
80008278:	12 9b       	mov	r11,r9
8000827a:	0e 99       	mov	r9,r7
8000827c:	14 97       	mov	r7,r10
8000827e:	10 9a       	mov	r10,r8
80008280:	0e 98       	mov	r8,r7
80008282:	30 0e       	mov	lr,0
80008284:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008288:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000828c:	b5 ab       	sbr	r11,0x14
8000828e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008292:	c6 20       	breq	80008356 <__avr32_f64_add_op2_subnormal>
80008294:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008298:	b5 a9       	sbr	r9,0x14
8000829a:	e0 47 07 ff 	cp.w	r7,2047
8000829e:	c2 80       	breq	800082ee <__avr32_f64_add_opH_nan_or_inf>
800082a0:	0e 26       	rsub	r6,r7
800082a2:	c1 20       	breq	800082c6 <__avr32_f64_add_shift_done>
800082a4:	e0 46 00 36 	cp.w	r6,54
800082a8:	c1 52       	brcc	800082d2 <__avr32_f64_add_res_of_done>
800082aa:	ec 05 11 20 	rsub	r5,r6,32
800082ae:	e0 46 00 20 	cp.w	r6,32
800082b2:	c3 52       	brcc	8000831c <__avr32_f64_add_longshift>
800082b4:	f0 05 09 4e 	lsl	lr,r8,r5
800082b8:	f2 05 09 45 	lsl	r5,r9,r5
800082bc:	f0 06 0a 48 	lsr	r8,r8,r6
800082c0:	f2 06 0a 49 	lsr	r9,r9,r6
800082c4:	0a 48       	or	r8,r5

800082c6 <__avr32_f64_add_shift_done>:
800082c6:	10 0a       	add	r10,r8
800082c8:	f6 09 00 4b 	adc	r11,r11,r9
800082cc:	ed bb 00 15 	bld	r11,0x15
800082d0:	c3 40       	breq	80008338 <__avr32_f64_add_res_of>

800082d2 <__avr32_f64_add_res_of_done>:
800082d2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800082d6:	18 4b       	or	r11,r12

800082d8 <__avr32_f64_add_round>:
800082d8:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800082dc:	18 4e       	or	lr,r12
800082de:	ee 1e 80 00 	eorh	lr,0x8000
800082e2:	f1 be 04 20 	satu	lr,0x1
800082e6:	1c 0a       	add	r10,lr
800082e8:	5c 0b       	acr	r11
800082ea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800082ee <__avr32_f64_add_opH_nan_or_inf>:
800082ee:	b5 cb       	cbr	r11,0x14
800082f0:	f7 ea 10 0e 	or	lr,r11,r10
800082f4:	c1 01       	brne	80008314 <__avr32_f64_add_return_nan>
800082f6:	e0 46 07 ff 	cp.w	r6,2047
800082fa:	c0 30       	breq	80008300 <__avr32_f64_add_opL_nan_or_inf>
800082fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008300 <__avr32_f64_add_opL_nan_or_inf>:
80008300:	b5 c9       	cbr	r9,0x14
80008302:	f3 e8 10 0e 	or	lr,r9,r8
80008306:	c0 71       	brne	80008314 <__avr32_f64_add_return_nan>
80008308:	30 0a       	mov	r10,0
8000830a:	fc 1b 7f f0 	movh	r11,0x7ff0
8000830e:	18 4b       	or	r11,r12
80008310:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008314 <__avr32_f64_add_return_nan>:
80008314:	3f fa       	mov	r10,-1
80008316:	3f fb       	mov	r11,-1
80008318:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000831c <__avr32_f64_add_longshift>:
8000831c:	f1 b6 04 c0 	satu	r6,0x6
80008320:	f0 0e 17 00 	moveq	lr,r8
80008324:	c0 60       	breq	80008330 <__avr32_f64_add_longshift+0x14>
80008326:	f2 05 09 4e 	lsl	lr,r9,r5
8000832a:	58 08       	cp.w	r8,0
8000832c:	5f 18       	srne	r8
8000832e:	10 4e       	or	lr,r8
80008330:	f2 06 0a 48 	lsr	r8,r9,r6
80008334:	30 09       	mov	r9,0
80008336:	cc 8b       	rjmp	800082c6 <__avr32_f64_add_shift_done>

80008338 <__avr32_f64_add_res_of>:
80008338:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000833c:	a1 9b       	lsr	r11,0x1
8000833e:	5d 0a       	ror	r10
80008340:	5d 0e       	ror	lr
80008342:	2f f7       	sub	r7,-1
80008344:	e0 47 07 ff 	cp.w	r7,2047
80008348:	f9 ba 00 00 	moveq	r10,0
8000834c:	f9 bb 00 00 	moveq	r11,0
80008350:	f9 be 00 00 	moveq	lr,0
80008354:	cb fb       	rjmp	800082d2 <__avr32_f64_add_res_of_done>

80008356 <__avr32_f64_add_op2_subnormal>:
80008356:	30 16       	mov	r6,1
80008358:	58 07       	cp.w	r7,0
8000835a:	ca 01       	brne	8000829a <__avr32_f64_add+0x3e>
8000835c:	b5 cb       	cbr	r11,0x14
8000835e:	10 0a       	add	r10,r8
80008360:	f6 09 00 4b 	adc	r11,r11,r9
80008364:	18 4b       	or	r11,r12
80008366:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000836a:	d7 03       	nop

8000836c <__avr32_f64_to_u32>:
8000836c:	58 0b       	cp.w	r11,0
8000836e:	5e 6d       	retmi	0

80008370 <__avr32_f64_to_s32>:
80008370:	f6 0c 15 01 	lsl	r12,r11,0x1
80008374:	b5 9c       	lsr	r12,0x15
80008376:	e0 2c 03 ff 	sub	r12,1023
8000837a:	5e 3d       	retlo	0
8000837c:	f8 0c 11 1f 	rsub	r12,r12,31
80008380:	16 99       	mov	r9,r11
80008382:	ab 7b       	lsl	r11,0xb
80008384:	bf bb       	sbr	r11,0x1f
80008386:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000838a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000838e:	a1 79       	lsl	r9,0x1
80008390:	5e 2b       	reths	r11
80008392:	5c 3b       	neg	r11
80008394:	5e fb       	retal	r11

80008396 <__avr32_u32_to_f64>:
80008396:	f8 cb 00 00 	sub	r11,r12,0
8000839a:	30 0c       	mov	r12,0
8000839c:	c0 38       	rjmp	800083a2 <__avr32_s32_to_f64+0x4>

8000839e <__avr32_s32_to_f64>:
8000839e:	18 9b       	mov	r11,r12
800083a0:	5c 4b       	abs	r11
800083a2:	30 0a       	mov	r10,0
800083a4:	5e 0b       	reteq	r11
800083a6:	d4 01       	pushm	lr
800083a8:	e0 69 04 1e 	mov	r9,1054
800083ac:	f6 08 12 00 	clz	r8,r11
800083b0:	c1 70       	breq	800083de <__avr32_s32_to_f64+0x40>
800083b2:	c0 c3       	brcs	800083ca <__avr32_s32_to_f64+0x2c>
800083b4:	f0 0e 11 20 	rsub	lr,r8,32
800083b8:	f6 08 09 4b 	lsl	r11,r11,r8
800083bc:	f4 0e 0a 4e 	lsr	lr,r10,lr
800083c0:	1c 4b       	or	r11,lr
800083c2:	f4 08 09 4a 	lsl	r10,r10,r8
800083c6:	10 19       	sub	r9,r8
800083c8:	c0 b8       	rjmp	800083de <__avr32_s32_to_f64+0x40>
800083ca:	f4 08 12 00 	clz	r8,r10
800083ce:	f9 b8 03 00 	movlo	r8,0
800083d2:	f7 b8 02 e0 	subhs	r8,-32
800083d6:	f4 08 09 4b 	lsl	r11,r10,r8
800083da:	30 0a       	mov	r10,0
800083dc:	10 19       	sub	r9,r8
800083de:	58 09       	cp.w	r9,0
800083e0:	e0 89 00 30 	brgt	80008440 <__avr32_s32_to_f64+0xa2>
800083e4:	5c 39       	neg	r9
800083e6:	2f f9       	sub	r9,-1
800083e8:	e0 49 00 36 	cp.w	r9,54
800083ec:	c0 43       	brcs	800083f4 <__avr32_s32_to_f64+0x56>
800083ee:	30 0b       	mov	r11,0
800083f0:	30 0a       	mov	r10,0
800083f2:	c2 68       	rjmp	8000843e <__avr32_s32_to_f64+0xa0>
800083f4:	2f 69       	sub	r9,-10
800083f6:	f2 08 11 20 	rsub	r8,r9,32
800083fa:	e0 49 00 20 	cp.w	r9,32
800083fe:	c0 b2       	brcc	80008414 <__avr32_s32_to_f64+0x76>
80008400:	f4 08 09 4e 	lsl	lr,r10,r8
80008404:	f6 08 09 48 	lsl	r8,r11,r8
80008408:	f4 09 0a 4a 	lsr	r10,r10,r9
8000840c:	f6 09 0a 4b 	lsr	r11,r11,r9
80008410:	10 4b       	or	r11,r8
80008412:	c0 88       	rjmp	80008422 <__avr32_s32_to_f64+0x84>
80008414:	f6 08 09 4e 	lsl	lr,r11,r8
80008418:	14 4e       	or	lr,r10
8000841a:	16 9a       	mov	r10,r11
8000841c:	30 0b       	mov	r11,0
8000841e:	f4 09 0a 4a 	lsr	r10,r10,r9
80008422:	ed ba 00 00 	bld	r10,0x0
80008426:	c0 92       	brcc	80008438 <__avr32_s32_to_f64+0x9a>
80008428:	1c 7e       	tst	lr,lr
8000842a:	c0 41       	brne	80008432 <__avr32_s32_to_f64+0x94>
8000842c:	ed ba 00 01 	bld	r10,0x1
80008430:	c0 42       	brcc	80008438 <__avr32_s32_to_f64+0x9a>
80008432:	2f fa       	sub	r10,-1
80008434:	f7 bb 02 ff 	subhs	r11,-1
80008438:	5c fc       	rol	r12
8000843a:	5d 0b       	ror	r11
8000843c:	5d 0a       	ror	r10
8000843e:	d8 02       	popm	pc
80008440:	e0 68 03 ff 	mov	r8,1023
80008444:	ed ba 00 0b 	bld	r10,0xb
80008448:	f7 b8 00 ff 	subeq	r8,-1
8000844c:	10 0a       	add	r10,r8
8000844e:	5c 0b       	acr	r11
80008450:	f7 b9 03 fe 	sublo	r9,-2
80008454:	e0 49 07 ff 	cp.w	r9,2047
80008458:	c0 55       	brlt	80008462 <__avr32_s32_to_f64+0xc4>
8000845a:	30 0a       	mov	r10,0
8000845c:	fc 1b ff e0 	movh	r11,0xffe0
80008460:	c0 c8       	rjmp	80008478 <__floatsidf_return_op1>
80008462:	ed bb 00 1f 	bld	r11,0x1f
80008466:	f7 b9 01 01 	subne	r9,1
8000846a:	ab 9a       	lsr	r10,0xb
8000846c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008470:	a1 7b       	lsl	r11,0x1
80008472:	ab 9b       	lsr	r11,0xb
80008474:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80008478 <__floatsidf_return_op1>:
80008478:	a1 7c       	lsl	r12,0x1
8000847a:	5d 0b       	ror	r11
8000847c:	d8 02       	popm	pc

8000847e <__avr32_f64_cmp_eq>:
8000847e:	10 3a       	cp.w	r10,r8
80008480:	f2 0b 13 00 	cpc	r11,r9
80008484:	c0 80       	breq	80008494 <__avr32_f64_cmp_eq+0x16>
80008486:	a1 7b       	lsl	r11,0x1
80008488:	a1 79       	lsl	r9,0x1
8000848a:	14 4b       	or	r11,r10
8000848c:	12 4b       	or	r11,r9
8000848e:	10 4b       	or	r11,r8
80008490:	5e 0f       	reteq	1
80008492:	5e fd       	retal	0
80008494:	a1 7b       	lsl	r11,0x1
80008496:	fc 1c ff e0 	movh	r12,0xffe0
8000849a:	58 0a       	cp.w	r10,0
8000849c:	f8 0b 13 00 	cpc	r11,r12
800084a0:	5e 8f       	retls	1
800084a2:	5e fd       	retal	0

800084a4 <__avr32_f64_cmp_ge>:
800084a4:	1a de       	st.w	--sp,lr
800084a6:	1a d7       	st.w	--sp,r7
800084a8:	a1 7b       	lsl	r11,0x1
800084aa:	5f 3c       	srlo	r12
800084ac:	a1 79       	lsl	r9,0x1
800084ae:	5f 37       	srlo	r7
800084b0:	5c fc       	rol	r12
800084b2:	fc 1e ff e0 	movh	lr,0xffe0
800084b6:	58 0a       	cp.w	r10,0
800084b8:	fc 0b 13 00 	cpc	r11,lr
800084bc:	e0 8b 00 1d 	brhi	800084f6 <__avr32_f64_cmp_ge+0x52>
800084c0:	58 08       	cp.w	r8,0
800084c2:	fc 09 13 00 	cpc	r9,lr
800084c6:	e0 8b 00 18 	brhi	800084f6 <__avr32_f64_cmp_ge+0x52>
800084ca:	58 0b       	cp.w	r11,0
800084cc:	f5 ba 00 00 	subfeq	r10,0
800084d0:	c1 50       	breq	800084fa <__avr32_f64_cmp_ge+0x56>
800084d2:	1b 07       	ld.w	r7,sp++
800084d4:	1b 0e       	ld.w	lr,sp++
800084d6:	58 3c       	cp.w	r12,3
800084d8:	c0 a0       	breq	800084ec <__avr32_f64_cmp_ge+0x48>
800084da:	58 1c       	cp.w	r12,1
800084dc:	c0 33       	brcs	800084e2 <__avr32_f64_cmp_ge+0x3e>
800084de:	5e 0f       	reteq	1
800084e0:	5e 1d       	retne	0
800084e2:	10 3a       	cp.w	r10,r8
800084e4:	f2 0b 13 00 	cpc	r11,r9
800084e8:	5e 2f       	reths	1
800084ea:	5e 3d       	retlo	0
800084ec:	14 38       	cp.w	r8,r10
800084ee:	f6 09 13 00 	cpc	r9,r11
800084f2:	5e 2f       	reths	1
800084f4:	5e 3d       	retlo	0
800084f6:	1b 07       	ld.w	r7,sp++
800084f8:	d8 0a       	popm	pc,r12=0
800084fa:	58 17       	cp.w	r7,1
800084fc:	5f 0c       	sreq	r12
800084fe:	58 09       	cp.w	r9,0
80008500:	f5 b8 00 00 	subfeq	r8,0
80008504:	1b 07       	ld.w	r7,sp++
80008506:	1b 0e       	ld.w	lr,sp++
80008508:	5e 0f       	reteq	1
8000850a:	5e fc       	retal	r12

8000850c <__avr32_f64_cmp_lt>:
8000850c:	1a de       	st.w	--sp,lr
8000850e:	1a d7       	st.w	--sp,r7
80008510:	a1 7b       	lsl	r11,0x1
80008512:	5f 3c       	srlo	r12
80008514:	a1 79       	lsl	r9,0x1
80008516:	5f 37       	srlo	r7
80008518:	5c fc       	rol	r12
8000851a:	fc 1e ff e0 	movh	lr,0xffe0
8000851e:	58 0a       	cp.w	r10,0
80008520:	fc 0b 13 00 	cpc	r11,lr
80008524:	e0 8b 00 1d 	brhi	8000855e <__avr32_f64_cmp_lt+0x52>
80008528:	58 08       	cp.w	r8,0
8000852a:	fc 09 13 00 	cpc	r9,lr
8000852e:	e0 8b 00 18 	brhi	8000855e <__avr32_f64_cmp_lt+0x52>
80008532:	58 0b       	cp.w	r11,0
80008534:	f5 ba 00 00 	subfeq	r10,0
80008538:	c1 50       	breq	80008562 <__avr32_f64_cmp_lt+0x56>
8000853a:	1b 07       	ld.w	r7,sp++
8000853c:	1b 0e       	ld.w	lr,sp++
8000853e:	58 3c       	cp.w	r12,3
80008540:	c0 a0       	breq	80008554 <__avr32_f64_cmp_lt+0x48>
80008542:	58 1c       	cp.w	r12,1
80008544:	c0 33       	brcs	8000854a <__avr32_f64_cmp_lt+0x3e>
80008546:	5e 0d       	reteq	0
80008548:	5e 1f       	retne	1
8000854a:	10 3a       	cp.w	r10,r8
8000854c:	f2 0b 13 00 	cpc	r11,r9
80008550:	5e 2d       	reths	0
80008552:	5e 3f       	retlo	1
80008554:	14 38       	cp.w	r8,r10
80008556:	f6 09 13 00 	cpc	r9,r11
8000855a:	5e 2d       	reths	0
8000855c:	5e 3f       	retlo	1
8000855e:	1b 07       	ld.w	r7,sp++
80008560:	d8 0a       	popm	pc,r12=0
80008562:	58 17       	cp.w	r7,1
80008564:	5f 1c       	srne	r12
80008566:	58 09       	cp.w	r9,0
80008568:	f5 b8 00 00 	subfeq	r8,0
8000856c:	1b 07       	ld.w	r7,sp++
8000856e:	1b 0e       	ld.w	lr,sp++
80008570:	5e 0d       	reteq	0
80008572:	5e fc       	retal	r12

80008574 <__avr32_f64_div>:
80008574:	eb cd 40 ff 	pushm	r0-r7,lr
80008578:	f7 e9 20 0e 	eor	lr,r11,r9
8000857c:	f6 07 16 14 	lsr	r7,r11,0x14
80008580:	a9 7b       	lsl	r11,0x9
80008582:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008586:	a9 7a       	lsl	r10,0x9
80008588:	bd bb       	sbr	r11,0x1d
8000858a:	e4 1b 3f ff 	andh	r11,0x3fff
8000858e:	ab d7       	cbr	r7,0xb
80008590:	e0 80 00 cc 	breq	80008728 <__avr32_f64_div_round_subnormal+0x54>
80008594:	e0 47 07 ff 	cp.w	r7,2047
80008598:	e0 84 00 b5 	brge	80008702 <__avr32_f64_div_round_subnormal+0x2e>
8000859c:	f2 06 16 14 	lsr	r6,r9,0x14
800085a0:	a9 79       	lsl	r9,0x9
800085a2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800085a6:	a9 78       	lsl	r8,0x9
800085a8:	bd b9       	sbr	r9,0x1d
800085aa:	e4 19 3f ff 	andh	r9,0x3fff
800085ae:	ab d6       	cbr	r6,0xb
800085b0:	e0 80 00 e2 	breq	80008774 <__avr32_f64_div_round_subnormal+0xa0>
800085b4:	e0 46 07 ff 	cp.w	r6,2047
800085b8:	e0 84 00 b2 	brge	8000871c <__avr32_f64_div_round_subnormal+0x48>
800085bc:	0c 17       	sub	r7,r6
800085be:	fe 37 fc 01 	sub	r7,-1023
800085c2:	fc 1c 80 00 	movh	r12,0x8000
800085c6:	f8 03 16 01 	lsr	r3,r12,0x1
800085ca:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800085ce:	5c d4       	com	r4
800085d0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800085d4:	e6 09 06 44 	mulu.d	r4,r3,r9
800085d8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085dc:	e6 05 06 44 	mulu.d	r4,r3,r5
800085e0:	ea 03 15 02 	lsl	r3,r5,0x2
800085e4:	e6 09 06 44 	mulu.d	r4,r3,r9
800085e8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085ec:	e6 05 06 44 	mulu.d	r4,r3,r5
800085f0:	ea 03 15 02 	lsl	r3,r5,0x2
800085f4:	e6 09 06 44 	mulu.d	r4,r3,r9
800085f8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085fc:	e6 05 06 44 	mulu.d	r4,r3,r5
80008600:	ea 03 15 02 	lsl	r3,r5,0x2
80008604:	e6 08 06 40 	mulu.d	r0,r3,r8
80008608:	e4 09 07 40 	macu.d	r0,r2,r9
8000860c:	e6 09 06 44 	mulu.d	r4,r3,r9
80008610:	02 04       	add	r4,r1
80008612:	5c 05       	acr	r5
80008614:	a3 65       	lsl	r5,0x2
80008616:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000861a:	a3 64       	lsl	r4,0x2
8000861c:	5c 34       	neg	r4
8000861e:	f8 05 01 45 	sbc	r5,r12,r5
80008622:	e6 04 06 40 	mulu.d	r0,r3,r4
80008626:	e4 05 07 40 	macu.d	r0,r2,r5
8000862a:	e6 05 06 44 	mulu.d	r4,r3,r5
8000862e:	02 04       	add	r4,r1
80008630:	5c 05       	acr	r5
80008632:	ea 03 15 02 	lsl	r3,r5,0x2
80008636:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000863a:	e8 02 15 02 	lsl	r2,r4,0x2
8000863e:	e6 08 06 40 	mulu.d	r0,r3,r8
80008642:	e4 09 07 40 	macu.d	r0,r2,r9
80008646:	e6 09 06 44 	mulu.d	r4,r3,r9
8000864a:	02 04       	add	r4,r1
8000864c:	5c 05       	acr	r5
8000864e:	a3 65       	lsl	r5,0x2
80008650:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008654:	a3 64       	lsl	r4,0x2
80008656:	5c 34       	neg	r4
80008658:	f8 05 01 45 	sbc	r5,r12,r5
8000865c:	e6 04 06 40 	mulu.d	r0,r3,r4
80008660:	e4 05 07 40 	macu.d	r0,r2,r5
80008664:	e6 05 06 44 	mulu.d	r4,r3,r5
80008668:	02 04       	add	r4,r1
8000866a:	5c 05       	acr	r5
8000866c:	ea 03 15 02 	lsl	r3,r5,0x2
80008670:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008674:	e8 02 15 02 	lsl	r2,r4,0x2
80008678:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000867c:	e4 0b 07 40 	macu.d	r0,r2,r11
80008680:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008684:	02 02       	add	r2,r1
80008686:	5c 03       	acr	r3
80008688:	ed b3 00 1c 	bld	r3,0x1c
8000868c:	c0 90       	breq	8000869e <__avr32_f64_div+0x12a>
8000868e:	a1 72       	lsl	r2,0x1
80008690:	5c f3       	rol	r3
80008692:	20 17       	sub	r7,1
80008694:	a3 9a       	lsr	r10,0x3
80008696:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000869a:	a3 9b       	lsr	r11,0x3
8000869c:	c0 58       	rjmp	800086a6 <__avr32_f64_div+0x132>
8000869e:	a5 8a       	lsr	r10,0x4
800086a0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800086a4:	a5 8b       	lsr	r11,0x4
800086a6:	58 07       	cp.w	r7,0
800086a8:	e0 8a 00 8b 	brle	800087be <__avr32_f64_div_res_subnormal>
800086ac:	e0 12 ff 00 	andl	r2,0xff00
800086b0:	e8 12 00 80 	orl	r2,0x80
800086b4:	e6 08 06 40 	mulu.d	r0,r3,r8
800086b8:	e4 09 07 40 	macu.d	r0,r2,r9
800086bc:	e4 08 06 44 	mulu.d	r4,r2,r8
800086c0:	e6 09 06 48 	mulu.d	r8,r3,r9
800086c4:	00 05       	add	r5,r0
800086c6:	f0 01 00 48 	adc	r8,r8,r1
800086ca:	5c 09       	acr	r9
800086cc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800086d0:	58 04       	cp.w	r4,0
800086d2:	5c 25       	cpc	r5

800086d4 <__avr32_f64_div_round_subnormal>:
800086d4:	f4 08 13 00 	cpc	r8,r10
800086d8:	f6 09 13 00 	cpc	r9,r11
800086dc:	5f 36       	srlo	r6
800086de:	f8 06 17 00 	moveq	r6,r12
800086e2:	e4 0a 16 08 	lsr	r10,r2,0x8
800086e6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800086ea:	e6 0b 16 08 	lsr	r11,r3,0x8
800086ee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800086f2:	ed be 00 1f 	bld	lr,0x1f
800086f6:	ef bb 00 1f 	bst	r11,0x1f
800086fa:	0c 0a       	add	r10,r6
800086fc:	5c 0b       	acr	r11
800086fe:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008702:	e4 1b 00 0f 	andh	r11,0xf
80008706:	14 4b       	or	r11,r10
80008708:	e0 81 00 a7 	brne	80008856 <__avr32_f64_div_res_subnormal+0x98>
8000870c:	f2 06 16 14 	lsr	r6,r9,0x14
80008710:	ab d6       	cbr	r6,0xb
80008712:	e0 46 07 ff 	cp.w	r6,2047
80008716:	e0 81 00 a4 	brne	8000885e <__avr32_f64_div_res_subnormal+0xa0>
8000871a:	c9 e8       	rjmp	80008856 <__avr32_f64_div_res_subnormal+0x98>
8000871c:	e4 19 00 0f 	andh	r9,0xf
80008720:	10 49       	or	r9,r8
80008722:	e0 81 00 9a 	brne	80008856 <__avr32_f64_div_res_subnormal+0x98>
80008726:	c9 28       	rjmp	8000884a <__avr32_f64_div_res_subnormal+0x8c>
80008728:	a3 7b       	lsl	r11,0x3
8000872a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000872e:	a3 7a       	lsl	r10,0x3
80008730:	f5 eb 10 04 	or	r4,r10,r11
80008734:	e0 80 00 a0 	breq	80008874 <__avr32_f64_div_op1_zero>
80008738:	f6 04 12 00 	clz	r4,r11
8000873c:	c1 70       	breq	8000876a <__avr32_f64_div_round_subnormal+0x96>
8000873e:	c0 c3       	brcs	80008756 <__avr32_f64_div_round_subnormal+0x82>
80008740:	e8 05 11 20 	rsub	r5,r4,32
80008744:	f6 04 09 4b 	lsl	r11,r11,r4
80008748:	f4 05 0a 45 	lsr	r5,r10,r5
8000874c:	0a 4b       	or	r11,r5
8000874e:	f4 04 09 4a 	lsl	r10,r10,r4
80008752:	08 17       	sub	r7,r4
80008754:	c0 b8       	rjmp	8000876a <__avr32_f64_div_round_subnormal+0x96>
80008756:	f4 04 12 00 	clz	r4,r10
8000875a:	f9 b4 03 00 	movlo	r4,0
8000875e:	f7 b4 02 e0 	subhs	r4,-32
80008762:	f4 04 09 4b 	lsl	r11,r10,r4
80008766:	30 0a       	mov	r10,0
80008768:	08 17       	sub	r7,r4
8000876a:	a3 8a       	lsr	r10,0x2
8000876c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008770:	a3 8b       	lsr	r11,0x2
80008772:	c1 1b       	rjmp	80008594 <__avr32_f64_div+0x20>
80008774:	a3 79       	lsl	r9,0x3
80008776:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000877a:	a3 78       	lsl	r8,0x3
8000877c:	f3 e8 10 04 	or	r4,r9,r8
80008780:	c6 f0       	breq	8000885e <__avr32_f64_div_res_subnormal+0xa0>
80008782:	f2 04 12 00 	clz	r4,r9
80008786:	c1 70       	breq	800087b4 <__avr32_f64_div_round_subnormal+0xe0>
80008788:	c0 c3       	brcs	800087a0 <__avr32_f64_div_round_subnormal+0xcc>
8000878a:	e8 05 11 20 	rsub	r5,r4,32
8000878e:	f2 04 09 49 	lsl	r9,r9,r4
80008792:	f0 05 0a 45 	lsr	r5,r8,r5
80008796:	0a 49       	or	r9,r5
80008798:	f0 04 09 48 	lsl	r8,r8,r4
8000879c:	08 16       	sub	r6,r4
8000879e:	c0 b8       	rjmp	800087b4 <__avr32_f64_div_round_subnormal+0xe0>
800087a0:	f0 04 12 00 	clz	r4,r8
800087a4:	f9 b4 03 00 	movlo	r4,0
800087a8:	f7 b4 02 e0 	subhs	r4,-32
800087ac:	f0 04 09 49 	lsl	r9,r8,r4
800087b0:	30 08       	mov	r8,0
800087b2:	08 16       	sub	r6,r4
800087b4:	a3 88       	lsr	r8,0x2
800087b6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800087ba:	a3 89       	lsr	r9,0x2
800087bc:	cf ca       	rjmp	800085b4 <__avr32_f64_div+0x40>

800087be <__avr32_f64_div_res_subnormal>:
800087be:	5c 37       	neg	r7
800087c0:	2f f7       	sub	r7,-1
800087c2:	f1 b7 04 c0 	satu	r7,0x6
800087c6:	e0 47 00 20 	cp.w	r7,32
800087ca:	c1 54       	brge	800087f4 <__avr32_f64_div_res_subnormal+0x36>
800087cc:	ee 06 11 20 	rsub	r6,r7,32
800087d0:	e4 07 0a 42 	lsr	r2,r2,r7
800087d4:	e6 06 09 4c 	lsl	r12,r3,r6
800087d8:	18 42       	or	r2,r12
800087da:	e6 07 0a 43 	lsr	r3,r3,r7
800087de:	f4 06 09 41 	lsl	r1,r10,r6
800087e2:	f4 07 0a 4a 	lsr	r10,r10,r7
800087e6:	f6 06 09 4c 	lsl	r12,r11,r6
800087ea:	18 4a       	or	r10,r12
800087ec:	f6 07 0a 4b 	lsr	r11,r11,r7
800087f0:	30 00       	mov	r0,0
800087f2:	c1 58       	rjmp	8000881c <__avr32_f64_div_res_subnormal+0x5e>
800087f4:	ee 06 11 20 	rsub	r6,r7,32
800087f8:	f9 b0 00 00 	moveq	r0,0
800087fc:	f9 bc 00 00 	moveq	r12,0
80008800:	c0 50       	breq	8000880a <__avr32_f64_div_res_subnormal+0x4c>
80008802:	f4 06 09 40 	lsl	r0,r10,r6
80008806:	f6 06 09 4c 	lsl	r12,r11,r6
8000880a:	e6 07 0a 42 	lsr	r2,r3,r7
8000880e:	30 03       	mov	r3,0
80008810:	f4 07 0a 41 	lsr	r1,r10,r7
80008814:	18 41       	or	r1,r12
80008816:	f6 07 0a 4a 	lsr	r10,r11,r7
8000881a:	30 0b       	mov	r11,0
8000881c:	e0 12 ff 00 	andl	r2,0xff00
80008820:	e8 12 00 80 	orl	r2,0x80
80008824:	e6 08 06 46 	mulu.d	r6,r3,r8
80008828:	e4 09 07 46 	macu.d	r6,r2,r9
8000882c:	e4 08 06 44 	mulu.d	r4,r2,r8
80008830:	e6 09 06 48 	mulu.d	r8,r3,r9
80008834:	0c 05       	add	r5,r6
80008836:	f0 07 00 48 	adc	r8,r8,r7
8000883a:	5c 09       	acr	r9
8000883c:	30 07       	mov	r7,0
8000883e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008842:	00 34       	cp.w	r4,r0
80008844:	e2 05 13 00 	cpc	r5,r1
80008848:	c4 6b       	rjmp	800086d4 <__avr32_f64_div_round_subnormal>
8000884a:	1c 9b       	mov	r11,lr
8000884c:	e6 1b 80 00 	andh	r11,0x8000,COH
80008850:	30 0a       	mov	r10,0
80008852:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008856:	3f fb       	mov	r11,-1
80008858:	30 0a       	mov	r10,0
8000885a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000885e:	f5 eb 10 04 	or	r4,r10,r11
80008862:	c0 90       	breq	80008874 <__avr32_f64_div_op1_zero>
80008864:	1c 9b       	mov	r11,lr
80008866:	e6 1b 80 00 	andh	r11,0x8000,COH
8000886a:	ea 1b 7f f0 	orh	r11,0x7ff0
8000886e:	30 0a       	mov	r10,0
80008870:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008874 <__avr32_f64_div_op1_zero>:
80008874:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008878:	ce f0       	breq	80008856 <__avr32_f64_div_res_subnormal+0x98>
8000887a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000887e:	e0 44 07 ff 	cp.w	r4,2047
80008882:	ce 41       	brne	8000884a <__avr32_f64_div_res_subnormal+0x8c>
80008884:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008888:	ce 10       	breq	8000884a <__avr32_f64_div_res_subnormal+0x8c>
8000888a:	ce 6b       	rjmp	80008856 <__avr32_f64_div_res_subnormal+0x98>

8000888c <__avr32_udiv64>:
8000888c:	d4 31       	pushm	r0-r7,lr
8000888e:	1a 97       	mov	r7,sp
80008890:	20 3d       	sub	sp,12
80008892:	10 9c       	mov	r12,r8
80008894:	12 9e       	mov	lr,r9
80008896:	14 93       	mov	r3,r10
80008898:	58 09       	cp.w	r9,0
8000889a:	e0 81 00 bd 	brne	80008a14 <__avr32_udiv64+0x188>
8000889e:	16 38       	cp.w	r8,r11
800088a0:	e0 88 00 40 	brls	80008920 <__avr32_udiv64+0x94>
800088a4:	f0 08 12 00 	clz	r8,r8
800088a8:	c0 d0       	breq	800088c2 <__avr32_udiv64+0x36>
800088aa:	f6 08 09 4b 	lsl	r11,r11,r8
800088ae:	f0 09 11 20 	rsub	r9,r8,32
800088b2:	f8 08 09 4c 	lsl	r12,r12,r8
800088b6:	f4 09 0a 49 	lsr	r9,r10,r9
800088ba:	f4 08 09 43 	lsl	r3,r10,r8
800088be:	f3 eb 10 0b 	or	r11,r9,r11
800088c2:	f8 0e 16 10 	lsr	lr,r12,0x10
800088c6:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800088ca:	f6 0e 0d 00 	divu	r0,r11,lr
800088ce:	e6 0b 16 10 	lsr	r11,r3,0x10
800088d2:	00 99       	mov	r9,r0
800088d4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800088d8:	e0 0a 02 48 	mul	r8,r0,r10
800088dc:	10 3b       	cp.w	r11,r8
800088de:	c0 a2       	brcc	800088f2 <__avr32_udiv64+0x66>
800088e0:	20 19       	sub	r9,1
800088e2:	18 0b       	add	r11,r12
800088e4:	18 3b       	cp.w	r11,r12
800088e6:	c0 63       	brcs	800088f2 <__avr32_udiv64+0x66>
800088e8:	10 3b       	cp.w	r11,r8
800088ea:	f7 b9 03 01 	sublo	r9,1
800088ee:	f7 dc e3 0b 	addcs	r11,r11,r12
800088f2:	f6 08 01 01 	sub	r1,r11,r8
800088f6:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800088fa:	e2 0e 0d 00 	divu	r0,r1,lr
800088fe:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008902:	00 98       	mov	r8,r0
80008904:	e0 0a 02 4a 	mul	r10,r0,r10
80008908:	14 33       	cp.w	r3,r10
8000890a:	c0 82       	brcc	8000891a <__avr32_udiv64+0x8e>
8000890c:	20 18       	sub	r8,1
8000890e:	18 03       	add	r3,r12
80008910:	18 33       	cp.w	r3,r12
80008912:	c0 43       	brcs	8000891a <__avr32_udiv64+0x8e>
80008914:	14 33       	cp.w	r3,r10
80008916:	f7 b8 03 01 	sublo	r8,1
8000891a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000891e:	cd f8       	rjmp	80008adc <__avr32_udiv64+0x250>
80008920:	58 08       	cp.w	r8,0
80008922:	c0 51       	brne	8000892c <__avr32_udiv64+0xa0>
80008924:	30 19       	mov	r9,1
80008926:	f2 08 0d 08 	divu	r8,r9,r8
8000892a:	10 9c       	mov	r12,r8
8000892c:	f8 06 12 00 	clz	r6,r12
80008930:	c0 41       	brne	80008938 <__avr32_udiv64+0xac>
80008932:	18 1b       	sub	r11,r12
80008934:	30 19       	mov	r9,1
80008936:	c4 08       	rjmp	800089b6 <__avr32_udiv64+0x12a>
80008938:	ec 01 11 20 	rsub	r1,r6,32
8000893c:	f4 01 0a 49 	lsr	r9,r10,r1
80008940:	f8 06 09 4c 	lsl	r12,r12,r6
80008944:	f6 06 09 48 	lsl	r8,r11,r6
80008948:	f6 01 0a 41 	lsr	r1,r11,r1
8000894c:	f3 e8 10 08 	or	r8,r9,r8
80008950:	f8 03 16 10 	lsr	r3,r12,0x10
80008954:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008958:	e2 03 0d 00 	divu	r0,r1,r3
8000895c:	f0 0b 16 10 	lsr	r11,r8,0x10
80008960:	00 9e       	mov	lr,r0
80008962:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008966:	e0 05 02 49 	mul	r9,r0,r5
8000896a:	12 3b       	cp.w	r11,r9
8000896c:	c0 a2       	brcc	80008980 <__avr32_udiv64+0xf4>
8000896e:	20 1e       	sub	lr,1
80008970:	18 0b       	add	r11,r12
80008972:	18 3b       	cp.w	r11,r12
80008974:	c0 63       	brcs	80008980 <__avr32_udiv64+0xf4>
80008976:	12 3b       	cp.w	r11,r9
80008978:	f7 be 03 01 	sublo	lr,1
8000897c:	f7 dc e3 0b 	addcs	r11,r11,r12
80008980:	12 1b       	sub	r11,r9
80008982:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008986:	f6 03 0d 02 	divu	r2,r11,r3
8000898a:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000898e:	04 99       	mov	r9,r2
80008990:	e4 05 02 4b 	mul	r11,r2,r5
80008994:	16 38       	cp.w	r8,r11
80008996:	c0 a2       	brcc	800089aa <__avr32_udiv64+0x11e>
80008998:	20 19       	sub	r9,1
8000899a:	18 08       	add	r8,r12
8000899c:	18 38       	cp.w	r8,r12
8000899e:	c0 63       	brcs	800089aa <__avr32_udiv64+0x11e>
800089a0:	16 38       	cp.w	r8,r11
800089a2:	f7 b9 03 01 	sublo	r9,1
800089a6:	f1 dc e3 08 	addcs	r8,r8,r12
800089aa:	f4 06 09 43 	lsl	r3,r10,r6
800089ae:	f0 0b 01 0b 	sub	r11,r8,r11
800089b2:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800089b6:	f8 06 16 10 	lsr	r6,r12,0x10
800089ba:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800089be:	f6 06 0d 00 	divu	r0,r11,r6
800089c2:	e6 0b 16 10 	lsr	r11,r3,0x10
800089c6:	00 9a       	mov	r10,r0
800089c8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800089cc:	e0 0e 02 48 	mul	r8,r0,lr
800089d0:	10 3b       	cp.w	r11,r8
800089d2:	c0 a2       	brcc	800089e6 <__avr32_udiv64+0x15a>
800089d4:	20 1a       	sub	r10,1
800089d6:	18 0b       	add	r11,r12
800089d8:	18 3b       	cp.w	r11,r12
800089da:	c0 63       	brcs	800089e6 <__avr32_udiv64+0x15a>
800089dc:	10 3b       	cp.w	r11,r8
800089de:	f7 ba 03 01 	sublo	r10,1
800089e2:	f7 dc e3 0b 	addcs	r11,r11,r12
800089e6:	f6 08 01 01 	sub	r1,r11,r8
800089ea:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800089ee:	e2 06 0d 00 	divu	r0,r1,r6
800089f2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800089f6:	00 98       	mov	r8,r0
800089f8:	e0 0e 02 4b 	mul	r11,r0,lr
800089fc:	16 33       	cp.w	r3,r11
800089fe:	c0 82       	brcc	80008a0e <__avr32_udiv64+0x182>
80008a00:	20 18       	sub	r8,1
80008a02:	18 03       	add	r3,r12
80008a04:	18 33       	cp.w	r3,r12
80008a06:	c0 43       	brcs	80008a0e <__avr32_udiv64+0x182>
80008a08:	16 33       	cp.w	r3,r11
80008a0a:	f7 b8 03 01 	sublo	r8,1
80008a0e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008a12:	c6 98       	rjmp	80008ae4 <__avr32_udiv64+0x258>
80008a14:	16 39       	cp.w	r9,r11
80008a16:	e0 8b 00 65 	brhi	80008ae0 <__avr32_udiv64+0x254>
80008a1a:	f2 09 12 00 	clz	r9,r9
80008a1e:	c0 b1       	brne	80008a34 <__avr32_udiv64+0x1a8>
80008a20:	10 3a       	cp.w	r10,r8
80008a22:	5f 2a       	srhs	r10
80008a24:	1c 3b       	cp.w	r11,lr
80008a26:	5f b8       	srhi	r8
80008a28:	10 4a       	or	r10,r8
80008a2a:	f2 0a 18 00 	cp.b	r10,r9
80008a2e:	c5 90       	breq	80008ae0 <__avr32_udiv64+0x254>
80008a30:	30 18       	mov	r8,1
80008a32:	c5 98       	rjmp	80008ae4 <__avr32_udiv64+0x258>
80008a34:	f0 09 09 46 	lsl	r6,r8,r9
80008a38:	f2 03 11 20 	rsub	r3,r9,32
80008a3c:	fc 09 09 4e 	lsl	lr,lr,r9
80008a40:	f0 03 0a 48 	lsr	r8,r8,r3
80008a44:	f6 09 09 4c 	lsl	r12,r11,r9
80008a48:	f4 03 0a 42 	lsr	r2,r10,r3
80008a4c:	ef 46 ff f4 	st.w	r7[-12],r6
80008a50:	f6 03 0a 43 	lsr	r3,r11,r3
80008a54:	18 42       	or	r2,r12
80008a56:	f1 ee 10 0c 	or	r12,r8,lr
80008a5a:	f8 01 16 10 	lsr	r1,r12,0x10
80008a5e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008a62:	e6 01 0d 04 	divu	r4,r3,r1
80008a66:	e4 03 16 10 	lsr	r3,r2,0x10
80008a6a:	08 9e       	mov	lr,r4
80008a6c:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008a70:	e8 06 02 48 	mul	r8,r4,r6
80008a74:	10 33       	cp.w	r3,r8
80008a76:	c0 a2       	brcc	80008a8a <__avr32_udiv64+0x1fe>
80008a78:	20 1e       	sub	lr,1
80008a7a:	18 03       	add	r3,r12
80008a7c:	18 33       	cp.w	r3,r12
80008a7e:	c0 63       	brcs	80008a8a <__avr32_udiv64+0x1fe>
80008a80:	10 33       	cp.w	r3,r8
80008a82:	f7 be 03 01 	sublo	lr,1
80008a86:	e7 dc e3 03 	addcs	r3,r3,r12
80008a8a:	10 13       	sub	r3,r8
80008a8c:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008a90:	e6 01 0d 00 	divu	r0,r3,r1
80008a94:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008a98:	00 98       	mov	r8,r0
80008a9a:	e0 06 02 46 	mul	r6,r0,r6
80008a9e:	0c 3b       	cp.w	r11,r6
80008aa0:	c0 a2       	brcc	80008ab4 <__avr32_udiv64+0x228>
80008aa2:	20 18       	sub	r8,1
80008aa4:	18 0b       	add	r11,r12
80008aa6:	18 3b       	cp.w	r11,r12
80008aa8:	c0 63       	brcs	80008ab4 <__avr32_udiv64+0x228>
80008aaa:	0c 3b       	cp.w	r11,r6
80008aac:	f7 dc e3 0b 	addcs	r11,r11,r12
80008ab0:	f7 b8 03 01 	sublo	r8,1
80008ab4:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008ab8:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008abc:	0c 1b       	sub	r11,r6
80008abe:	f0 04 06 42 	mulu.d	r2,r8,r4
80008ac2:	06 95       	mov	r5,r3
80008ac4:	16 35       	cp.w	r5,r11
80008ac6:	e0 8b 00 0a 	brhi	80008ada <__avr32_udiv64+0x24e>
80008aca:	5f 0b       	sreq	r11
80008acc:	f4 09 09 49 	lsl	r9,r10,r9
80008ad0:	12 32       	cp.w	r2,r9
80008ad2:	5f b9       	srhi	r9
80008ad4:	f7 e9 00 09 	and	r9,r11,r9
80008ad8:	c0 60       	breq	80008ae4 <__avr32_udiv64+0x258>
80008ada:	20 18       	sub	r8,1
80008adc:	30 09       	mov	r9,0
80008ade:	c0 38       	rjmp	80008ae4 <__avr32_udiv64+0x258>
80008ae0:	30 09       	mov	r9,0
80008ae2:	12 98       	mov	r8,r9
80008ae4:	10 9a       	mov	r10,r8
80008ae6:	12 93       	mov	r3,r9
80008ae8:	10 92       	mov	r2,r8
80008aea:	12 9b       	mov	r11,r9
80008aec:	2f dd       	sub	sp,-12
80008aee:	d8 32       	popm	r0-r7,pc

80008af0 <__avr32_umod64>:
80008af0:	d4 31       	pushm	r0-r7,lr
80008af2:	1a 97       	mov	r7,sp
80008af4:	20 3d       	sub	sp,12
80008af6:	10 9c       	mov	r12,r8
80008af8:	12 95       	mov	r5,r9
80008afa:	14 9e       	mov	lr,r10
80008afc:	16 91       	mov	r1,r11
80008afe:	16 96       	mov	r6,r11
80008b00:	58 09       	cp.w	r9,0
80008b02:	e0 81 00 81 	brne	80008c04 <__avr32_umod64+0x114>
80008b06:	16 38       	cp.w	r8,r11
80008b08:	e0 88 00 12 	brls	80008b2c <__avr32_umod64+0x3c>
80008b0c:	f0 08 12 00 	clz	r8,r8
80008b10:	c4 e0       	breq	80008bac <__avr32_umod64+0xbc>
80008b12:	f6 08 09 46 	lsl	r6,r11,r8
80008b16:	f8 08 09 4c 	lsl	r12,r12,r8
80008b1a:	f0 0b 11 20 	rsub	r11,r8,32
80008b1e:	f4 08 09 4e 	lsl	lr,r10,r8
80008b22:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008b26:	f7 e6 10 06 	or	r6,r11,r6
80008b2a:	c4 18       	rjmp	80008bac <__avr32_umod64+0xbc>
80008b2c:	58 08       	cp.w	r8,0
80008b2e:	c0 51       	brne	80008b38 <__avr32_umod64+0x48>
80008b30:	30 19       	mov	r9,1
80008b32:	f2 08 0d 08 	divu	r8,r9,r8
80008b36:	10 9c       	mov	r12,r8
80008b38:	f8 08 12 00 	clz	r8,r12
80008b3c:	c0 31       	brne	80008b42 <__avr32_umod64+0x52>
80008b3e:	18 16       	sub	r6,r12
80008b40:	c3 68       	rjmp	80008bac <__avr32_umod64+0xbc>
80008b42:	f0 03 11 20 	rsub	r3,r8,32
80008b46:	f4 03 0a 4b 	lsr	r11,r10,r3
80008b4a:	f8 08 09 4c 	lsl	r12,r12,r8
80008b4e:	ec 08 09 49 	lsl	r9,r6,r8
80008b52:	ec 03 0a 43 	lsr	r3,r6,r3
80008b56:	f7 e9 10 09 	or	r9,r11,r9
80008b5a:	f8 05 16 10 	lsr	r5,r12,0x10
80008b5e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008b62:	e6 05 0d 02 	divu	r2,r3,r5
80008b66:	f2 0e 16 10 	lsr	lr,r9,0x10
80008b6a:	ec 02 02 4b 	mul	r11,r6,r2
80008b6e:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008b72:	16 3e       	cp.w	lr,r11
80008b74:	c0 72       	brcc	80008b82 <__avr32_umod64+0x92>
80008b76:	18 0e       	add	lr,r12
80008b78:	18 3e       	cp.w	lr,r12
80008b7a:	c0 43       	brcs	80008b82 <__avr32_umod64+0x92>
80008b7c:	16 3e       	cp.w	lr,r11
80008b7e:	fd dc e3 0e 	addcs	lr,lr,r12
80008b82:	fc 0b 01 03 	sub	r3,lr,r11
80008b86:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008b8a:	e6 05 0d 02 	divu	r2,r3,r5
80008b8e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008b92:	a5 36       	mul	r6,r2
80008b94:	0c 39       	cp.w	r9,r6
80008b96:	c0 72       	brcc	80008ba4 <__avr32_umod64+0xb4>
80008b98:	18 09       	add	r9,r12
80008b9a:	18 39       	cp.w	r9,r12
80008b9c:	c0 43       	brcs	80008ba4 <__avr32_umod64+0xb4>
80008b9e:	0c 39       	cp.w	r9,r6
80008ba0:	f3 dc e3 09 	addcs	r9,r9,r12
80008ba4:	f2 06 01 06 	sub	r6,r9,r6
80008ba8:	f4 08 09 4e 	lsl	lr,r10,r8
80008bac:	f8 0a 16 10 	lsr	r10,r12,0x10
80008bb0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008bb4:	ec 0a 0d 02 	divu	r2,r6,r10
80008bb8:	fc 09 16 10 	lsr	r9,lr,0x10
80008bbc:	ea 02 02 4b 	mul	r11,r5,r2
80008bc0:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008bc4:	16 39       	cp.w	r9,r11
80008bc6:	c0 72       	brcc	80008bd4 <__avr32_umod64+0xe4>
80008bc8:	18 09       	add	r9,r12
80008bca:	18 39       	cp.w	r9,r12
80008bcc:	c0 43       	brcs	80008bd4 <__avr32_umod64+0xe4>
80008bce:	16 39       	cp.w	r9,r11
80008bd0:	f3 dc e3 09 	addcs	r9,r9,r12
80008bd4:	f2 0b 01 0b 	sub	r11,r9,r11
80008bd8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008bdc:	f6 0a 0d 0a 	divu	r10,r11,r10
80008be0:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008be4:	ea 0a 02 4a 	mul	r10,r5,r10
80008be8:	14 3e       	cp.w	lr,r10
80008bea:	c0 72       	brcc	80008bf8 <__avr32_umod64+0x108>
80008bec:	18 0e       	add	lr,r12
80008bee:	18 3e       	cp.w	lr,r12
80008bf0:	c0 43       	brcs	80008bf8 <__avr32_umod64+0x108>
80008bf2:	14 3e       	cp.w	lr,r10
80008bf4:	fd dc e3 0e 	addcs	lr,lr,r12
80008bf8:	fc 0a 01 0a 	sub	r10,lr,r10
80008bfc:	30 0b       	mov	r11,0
80008bfe:	f4 08 0a 4a 	lsr	r10,r10,r8
80008c02:	c7 b8       	rjmp	80008cf8 <__avr32_umod64+0x208>
80008c04:	16 39       	cp.w	r9,r11
80008c06:	e0 8b 00 79 	brhi	80008cf8 <__avr32_umod64+0x208>
80008c0a:	f2 09 12 00 	clz	r9,r9
80008c0e:	c1 21       	brne	80008c32 <__avr32_umod64+0x142>
80008c10:	10 3a       	cp.w	r10,r8
80008c12:	5f 2b       	srhs	r11
80008c14:	0a 31       	cp.w	r1,r5
80008c16:	5f ba       	srhi	r10
80008c18:	f7 ea 10 0a 	or	r10,r11,r10
80008c1c:	f2 0a 18 00 	cp.b	r10,r9
80008c20:	c0 60       	breq	80008c2c <__avr32_umod64+0x13c>
80008c22:	fc 08 01 0c 	sub	r12,lr,r8
80008c26:	e2 05 01 46 	sbc	r6,r1,r5
80008c2a:	18 9e       	mov	lr,r12
80008c2c:	0c 9b       	mov	r11,r6
80008c2e:	1c 9a       	mov	r10,lr
80008c30:	c6 48       	rjmp	80008cf8 <__avr32_umod64+0x208>
80008c32:	ea 09 09 4c 	lsl	r12,r5,r9
80008c36:	f2 06 11 20 	rsub	r6,r9,32
80008c3a:	f6 09 09 4b 	lsl	r11,r11,r9
80008c3e:	f0 09 09 42 	lsl	r2,r8,r9
80008c42:	ef 46 ff f4 	st.w	r7[-12],r6
80008c46:	f0 06 0a 48 	lsr	r8,r8,r6
80008c4a:	18 48       	or	r8,r12
80008c4c:	e2 06 0a 4c 	lsr	r12,r1,r6
80008c50:	f4 09 09 43 	lsl	r3,r10,r9
80008c54:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008c58:	f4 06 0a 4a 	lsr	r10,r10,r6
80008c5c:	16 4a       	or	r10,r11
80008c5e:	f0 0b 16 10 	lsr	r11,r8,0x10
80008c62:	f8 0b 0d 04 	divu	r4,r12,r11
80008c66:	f4 0c 16 10 	lsr	r12,r10,0x10
80008c6a:	08 91       	mov	r1,r4
80008c6c:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008c70:	e8 0e 02 46 	mul	r6,r4,lr
80008c74:	0c 3c       	cp.w	r12,r6
80008c76:	c0 a2       	brcc	80008c8a <__avr32_umod64+0x19a>
80008c78:	20 11       	sub	r1,1
80008c7a:	10 0c       	add	r12,r8
80008c7c:	10 3c       	cp.w	r12,r8
80008c7e:	c0 63       	brcs	80008c8a <__avr32_umod64+0x19a>
80008c80:	0c 3c       	cp.w	r12,r6
80008c82:	f7 b1 03 01 	sublo	r1,1
80008c86:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008c8a:	0c 1c       	sub	r12,r6
80008c8c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008c90:	f8 0b 0d 04 	divu	r4,r12,r11
80008c94:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008c98:	08 96       	mov	r6,r4
80008c9a:	e8 0e 02 4e 	mul	lr,r4,lr
80008c9e:	1c 3b       	cp.w	r11,lr
80008ca0:	c0 a2       	brcc	80008cb4 <__avr32_umod64+0x1c4>
80008ca2:	20 16       	sub	r6,1
80008ca4:	10 0b       	add	r11,r8
80008ca6:	10 3b       	cp.w	r11,r8
80008ca8:	c0 63       	brcs	80008cb4 <__avr32_umod64+0x1c4>
80008caa:	1c 3b       	cp.w	r11,lr
80008cac:	f7 b6 03 01 	sublo	r6,1
80008cb0:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008cb4:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008cb8:	1c 1b       	sub	r11,lr
80008cba:	e2 02 06 40 	mulu.d	r0,r1,r2
80008cbe:	00 9e       	mov	lr,r0
80008cc0:	02 9c       	mov	r12,r1
80008cc2:	16 3c       	cp.w	r12,r11
80008cc4:	e0 8b 00 08 	brhi	80008cd4 <__avr32_umod64+0x1e4>
80008cc8:	5f 06       	sreq	r6
80008cca:	06 30       	cp.w	r0,r3
80008ccc:	5f ba       	srhi	r10
80008cce:	ed ea 00 0a 	and	r10,r6,r10
80008cd2:	c0 60       	breq	80008cde <__avr32_umod64+0x1ee>
80008cd4:	fc 02 01 04 	sub	r4,lr,r2
80008cd8:	f8 08 01 4c 	sbc	r12,r12,r8
80008cdc:	08 9e       	mov	lr,r4
80008cde:	e6 0e 01 0a 	sub	r10,r3,lr
80008ce2:	f6 0c 01 4c 	sbc	r12,r11,r12
80008ce6:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008cea:	f8 09 0a 4b 	lsr	r11,r12,r9
80008cee:	f4 09 0a 4a 	lsr	r10,r10,r9
80008cf2:	f8 01 09 4c 	lsl	r12,r12,r1
80008cf6:	18 4a       	or	r10,r12
80008cf8:	2f dd       	sub	sp,-12
80008cfa:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80008e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008e00:	c0 08       	rjmp	80008e00 <_evba>
	...

80008e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008e04:	c0 08       	rjmp	80008e04 <_handle_TLB_Multiple_Hit>
	...

80008e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008e08:	c0 08       	rjmp	80008e08 <_handle_Bus_Error_Data_Fetch>
	...

80008e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80008e0c:	c0 08       	rjmp	80008e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008e10:	c0 08       	rjmp	80008e10 <_handle_NMI>
	...

80008e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008e14:	c0 08       	rjmp	80008e14 <_handle_Instruction_Address>
	...

80008e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008e18:	c0 08       	rjmp	80008e18 <_handle_ITLB_Protection>
	...

80008e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80008e1c:	c0 08       	rjmp	80008e1c <_handle_Breakpoint>
	...

80008e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008e20:	c0 08       	rjmp	80008e20 <_handle_Illegal_Opcode>
	...

80008e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008e24:	c0 08       	rjmp	80008e24 <_handle_Unimplemented_Instruction>
	...

80008e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008e28:	c0 08       	rjmp	80008e28 <_handle_Privilege_Violation>
	...

80008e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80008e2c:	c0 08       	rjmp	80008e2c <_handle_Floating_Point>
	...

80008e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008e30:	c0 08       	rjmp	80008e30 <_handle_Coprocessor_Absent>
	...

80008e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008e34:	c0 08       	rjmp	80008e34 <_handle_Data_Address_Read>
	...

80008e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008e38:	c0 08       	rjmp	80008e38 <_handle_Data_Address_Write>
	...

80008e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80008e3c:	c0 08       	rjmp	80008e3c <_handle_DTLB_Protection_Read>
	...

80008e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008e40:	c0 08       	rjmp	80008e40 <_handle_DTLB_Protection_Write>
	...

80008e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008e44:	c0 08       	rjmp	80008e44 <_handle_DTLB_Modified>
	...

80008e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008e50:	c0 08       	rjmp	80008e50 <_handle_ITLB_Miss>
	...

80008e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008e60:	c0 08       	rjmp	80008e60 <_handle_DTLB_Miss_Read>
	...

80008e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008e70:	c0 08       	rjmp	80008e70 <_handle_DTLB_Miss_Write>
	...

80008f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008f00:	c0 08       	rjmp	80008f00 <_handle_Supervisor_Call>
80008f02:	d7 03       	nop

80008f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f04:	30 0c       	mov	r12,0
80008f06:	fe b0 cc 63 	rcall	800027cc <_get_interrupt_handler>
80008f0a:	58 0c       	cp.w	r12,0
80008f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f10:	d6 03       	rete

80008f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f12:	30 1c       	mov	r12,1
80008f14:	fe b0 cc 5c 	rcall	800027cc <_get_interrupt_handler>
80008f18:	58 0c       	cp.w	r12,0
80008f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f1e:	d6 03       	rete

80008f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f20:	30 2c       	mov	r12,2
80008f22:	fe b0 cc 55 	rcall	800027cc <_get_interrupt_handler>
80008f26:	58 0c       	cp.w	r12,0
80008f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f2c:	d6 03       	rete

80008f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f2e:	30 3c       	mov	r12,3
80008f30:	fe b0 cc 4e 	rcall	800027cc <_get_interrupt_handler>
80008f34:	58 0c       	cp.w	r12,0
80008f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f3a:	d6 03       	rete
80008f3c:	d7 03       	nop
80008f3e:	d7 03       	nop
80008f40:	d7 03       	nop
80008f42:	d7 03       	nop
80008f44:	d7 03       	nop
80008f46:	d7 03       	nop
80008f48:	d7 03       	nop
80008f4a:	d7 03       	nop
80008f4c:	d7 03       	nop
80008f4e:	d7 03       	nop
80008f50:	d7 03       	nop
80008f52:	d7 03       	nop
80008f54:	d7 03       	nop
80008f56:	d7 03       	nop
80008f58:	d7 03       	nop
80008f5a:	d7 03       	nop
80008f5c:	d7 03       	nop
80008f5e:	d7 03       	nop
80008f60:	d7 03       	nop
80008f62:	d7 03       	nop
80008f64:	d7 03       	nop
80008f66:	d7 03       	nop
80008f68:	d7 03       	nop
80008f6a:	d7 03       	nop
80008f6c:	d7 03       	nop
80008f6e:	d7 03       	nop
80008f70:	d7 03       	nop
80008f72:	d7 03       	nop
80008f74:	d7 03       	nop
80008f76:	d7 03       	nop
80008f78:	d7 03       	nop
80008f7a:	d7 03       	nop
80008f7c:	d7 03       	nop
80008f7e:	d7 03       	nop
80008f80:	d7 03       	nop
80008f82:	d7 03       	nop
80008f84:	d7 03       	nop
80008f86:	d7 03       	nop
80008f88:	d7 03       	nop
80008f8a:	d7 03       	nop
80008f8c:	d7 03       	nop
80008f8e:	d7 03       	nop
80008f90:	d7 03       	nop
80008f92:	d7 03       	nop
80008f94:	d7 03       	nop
80008f96:	d7 03       	nop
80008f98:	d7 03       	nop
80008f9a:	d7 03       	nop
80008f9c:	d7 03       	nop
80008f9e:	d7 03       	nop
80008fa0:	d7 03       	nop
80008fa2:	d7 03       	nop
80008fa4:	d7 03       	nop
80008fa6:	d7 03       	nop
80008fa8:	d7 03       	nop
80008faa:	d7 03       	nop
80008fac:	d7 03       	nop
80008fae:	d7 03       	nop
80008fb0:	d7 03       	nop
80008fb2:	d7 03       	nop
80008fb4:	d7 03       	nop
80008fb6:	d7 03       	nop
80008fb8:	d7 03       	nop
80008fba:	d7 03       	nop
80008fbc:	d7 03       	nop
80008fbe:	d7 03       	nop
80008fc0:	d7 03       	nop
80008fc2:	d7 03       	nop
80008fc4:	d7 03       	nop
80008fc6:	d7 03       	nop
80008fc8:	d7 03       	nop
80008fca:	d7 03       	nop
80008fcc:	d7 03       	nop
80008fce:	d7 03       	nop
80008fd0:	d7 03       	nop
80008fd2:	d7 03       	nop
80008fd4:	d7 03       	nop
80008fd6:	d7 03       	nop
80008fd8:	d7 03       	nop
80008fda:	d7 03       	nop
80008fdc:	d7 03       	nop
80008fde:	d7 03       	nop
80008fe0:	d7 03       	nop
80008fe2:	d7 03       	nop
80008fe4:	d7 03       	nop
80008fe6:	d7 03       	nop
80008fe8:	d7 03       	nop
80008fea:	d7 03       	nop
80008fec:	d7 03       	nop
80008fee:	d7 03       	nop
80008ff0:	d7 03       	nop
80008ff2:	d7 03       	nop
80008ff4:	d7 03       	nop
80008ff6:	d7 03       	nop
80008ff8:	d7 03       	nop
80008ffa:	d7 03       	nop
80008ffc:	d7 03       	nop
80008ffe:	d7 03       	nop
