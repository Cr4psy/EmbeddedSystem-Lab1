
DIP204_EXAMPLE1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fcc  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000754  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009954  80009954  00009d54  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80009958  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80009e64  0000a514  2**0
                  ALLOC
  9 .bss          00000160  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000a514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000da0  00000000  00000000  0000a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000018d9  00000000  00000000  0000b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0002068c  00000000  00000000  0000cbc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000540a  00000000  00000000  0002d24d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000e66e  00000000  00000000  00032657  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001fac  00000000  00000000  00040cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000418e  00000000  00000000  00042c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00009e3a  00000000  00000000  00046e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00a250e0  00000000  00000000  00050c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000f68  00000000  00000000  00a75d20  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cc 7c 	sub	pc,pc,-13188

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ec 80 	sub	pc,pc,-4992

Disassembly of section .text:

80002008 <adc_configure>:
80002008:	78 18       	ld.w	r8,r12[0x4]
8000200a:	ea 18 0f 00 	orh	r8,0xf00
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
8000200e:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002010:	78 18       	ld.w	r8,r12[0x4]
80002012:	ea 18 00 1f 	orh	r8,0x1f
80002016:	99 18       	st.w	r12[0x4],r8
}
80002018:	5e fc       	retal	r12

8000201a <adc_start>:
void adc_start(volatile avr32_adc_t *adc)
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
8000201a:	30 28       	mov	r8,2
8000201c:	99 08       	st.w	r12[0x0],r8
}
8000201e:	5e fc       	retal	r12

80002020 <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002020:	30 18       	mov	r8,1
80002022:	f0 0b 09 48 	lsl	r8,r8,r11
80002026:	99 48       	st.w	r12[0x10],r8
}
80002028:	5e fc       	retal	r12

8000202a <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
8000202a:	78 78       	ld.w	r8,r12[0x1c]
8000202c:	30 19       	mov	r9,1
8000202e:	f2 0b 09 49 	lsl	r9,r9,r11
80002032:	f3 e8 00 08 	and	r8,r9,r8
}
80002036:	5f 1c       	srne	r12
80002038:	5e fc       	retal	r12
8000203a:	d7 03       	nop

8000203c <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
8000203c:	eb cd 40 e0 	pushm	r5-r7,lr
80002040:	18 97       	mov	r7,r12
80002042:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002044:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002048:	0c 9b       	mov	r11,r6
8000204a:	0e 9c       	mov	r12,r7
8000204c:	f0 1f 00 05 	mcall	80002060 <adc_get_value+0x24>
80002050:	cf c0       	breq	80002048 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80002052:	2d 07       	sub	r7,-48
80002054:	5c 75       	castu.h	r5
}
80002056:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
8000205a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000205e:	00 00       	add	r0,r0
80002060:	80 00       	ld.sh	r0,r0[0x0]
80002062:	20 2a       	sub	r10,2

80002064 <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
80002064:	30 08       	mov	r8,0
80002066:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002068:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
8000206a:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
8000206c:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
8000206e:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002070:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
80002072:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
80002074:	b8 f8       	st.b	r12[0x7],r8
}
80002076:	5e fc       	retal	r12

80002078 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002078:	eb cd 40 80 	pushm	r7,lr
8000207c:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
8000207e:	49 68       	lddpc	r8,800020d4 <config_dpi204+0x5c>
80002080:	1a 97       	mov	r7,sp
80002082:	f0 ea 00 00 	ld.d	r10,r8[0]
80002086:	fa eb 00 00 	st.d	sp[0],r10
8000208a:	f0 e8 00 08 	ld.d	r8,r8[8]
8000208e:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80002092:	30 4b       	mov	r11,4
80002094:	49 1c       	lddpc	r12,800020d8 <config_dpi204+0x60>
80002096:	f0 1f 00 12 	mcall	800020dc <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
8000209a:	1a 9b       	mov	r11,sp
8000209c:	fe 7c 28 00 	mov	r12,-55296
800020a0:	f0 1f 00 10 	mcall	800020e0 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
800020a4:	30 09       	mov	r9,0
800020a6:	12 9a       	mov	r10,r9
800020a8:	12 9b       	mov	r11,r9
800020aa:	fe 7c 28 00 	mov	r12,-55296
800020ae:	f0 1f 00 0e 	mcall	800020e4 <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
800020b2:	fe 7c 28 00 	mov	r12,-55296
800020b6:	f0 1f 00 0d 	mcall	800020e8 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
800020ba:	e0 6a 1b 00 	mov	r10,6912
800020be:	ea 1a 00 b7 	orh	r10,0xb7
800020c2:	1a 9b       	mov	r11,sp
800020c4:	fe 7c 28 00 	mov	r12,-55296
800020c8:	f0 1f 00 09 	mcall	800020ec <config_dpi204+0x74>
}
800020cc:	2f cd       	sub	sp,-16
800020ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800020d2:	00 00       	add	r0,r0
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	92 30       	ld.sh	r0,r9[0x6]
800020d8:	80 00       	ld.sh	r0,r0[0x0]
800020da:	92 40       	ld.sh	r0,r9[0x8]
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	2f 4c       	sub	r12,-12
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	31 aa       	mov	r10,26
800020e4:	80 00       	ld.sh	r0,r0[0x0]
800020e6:	31 e2       	mov	r2,30
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	33 38       	mov	r8,51
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	32 80       	mov	r0,40

800020f0 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
800020f0:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
800020f2:	18 9b       	mov	r11,r12
800020f4:	fe 7c 24 00 	mov	r12,-56320
800020f8:	f0 1f 00 02 	mcall	80002100 <mASSERT_CS+0x10>
}
800020fc:	d8 02       	popm	pc
800020fe:	00 00       	add	r0,r0
80002100:	80 00       	ld.sh	r0,r0[0x0]
80002102:	32 0e       	mov	lr,32

80002104 <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
80002104:	eb cd 40 80 	pushm	r7,lr
80002108:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
8000210a:	49 88       	lddpc	r8,80002168 <config_SPI_SPARE+0x64>
8000210c:	1a 97       	mov	r7,sp
8000210e:	f0 ea 00 00 	ld.d	r10,r8[0]
80002112:	fa eb 00 00 	st.d	sp[0],r10
80002116:	f0 e8 00 08 	ld.d	r8,r8[8]
8000211a:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
8000211e:	30 4b       	mov	r11,4
80002120:	49 3c       	lddpc	r12,8000216c <config_SPI_SPARE+0x68>
80002122:	f0 1f 00 14 	mcall	80002170 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
80002126:	1a 9b       	mov	r11,sp
80002128:	fe 7c 24 00 	mov	r12,-56320
8000212c:	f0 1f 00 12 	mcall	80002174 <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
80002130:	30 09       	mov	r9,0
80002132:	12 9a       	mov	r10,r9
80002134:	12 9b       	mov	r11,r9
80002136:	fe 7c 24 00 	mov	r12,-56320
8000213a:	f0 1f 00 10 	mcall	80002178 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
8000213e:	30 0b       	mov	r11,0
80002140:	fe 7c 24 00 	mov	r12,-56320
80002144:	f0 1f 00 0e 	mcall	8000217c <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002148:	e0 6a 1b 00 	mov	r10,6912
8000214c:	ea 1a 00 b7 	orh	r10,0xb7
80002150:	1a 9b       	mov	r11,sp
80002152:	fe 7c 24 00 	mov	r12,-56320
80002156:	f0 1f 00 0b 	mcall	80002180 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
8000215a:	fe 7c 24 00 	mov	r12,-56320
8000215e:	f0 1f 00 0a 	mcall	80002184 <config_SPI_SPARE+0x80>
}
80002162:	2f cd       	sub	sp,-16
80002164:	e3 cd 80 80 	ldm	sp++,r7,pc
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	92 20       	ld.sh	r0,r9[0x4]
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	92 00       	ld.sh	r0,r9[0x0]
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	2f 4c       	sub	r12,-12
80002174:	80 00       	ld.sh	r0,r0[0x0]
80002176:	31 aa       	mov	r10,26
80002178:	80 00       	ld.sh	r0,r0[0x0]
8000217a:	31 e2       	mov	r2,30
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	32 0e       	mov	lr,32
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	32 80       	mov	r0,40
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	33 38       	mov	r8,51

80002188 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002188:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
8000218a:	fe 7c 24 00 	mov	r12,-56320
8000218e:	f0 1f 00 02 	mcall	80002194 <XferSPI_send+0xc>
	return 0;
}
80002192:	d8 0a       	popm	pc,r12=0
80002194:	80 00       	ld.sh	r0,r0[0x0]
80002196:	33 3e       	mov	lr,51

80002198 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
80002198:	d4 01       	pushm	lr
8000219a:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
8000219c:	30 0b       	mov	r11,0
8000219e:	fe 7c 24 00 	mov	r12,-56320
800021a2:	f0 1f 00 0e 	mcall	800021d8 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
800021a6:	e0 6b 00 a0 	mov	r11,160
800021aa:	fe 7c 24 00 	mov	r12,-56320
800021ae:	f0 1f 00 0c 	mcall	800021dc <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
800021b2:	30 0b       	mov	r11,0
800021b4:	fe 7c 24 00 	mov	r12,-56320
800021b8:	f0 1f 00 09 	mcall	800021dc <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800021bc:	fa cb ff fe 	sub	r11,sp,-2
800021c0:	fe 7c 24 00 	mov	r12,-56320
800021c4:	f0 1f 00 07 	mcall	800021e0 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
800021c8:	30 0b       	mov	r11,0
800021ca:	fe 7c 24 00 	mov	r12,-56320
800021ce:	f0 1f 00 06 	mcall	800021e4 <ReadStatus2515+0x4c>

	return spidataread_temp;
}
800021d2:	1b bc       	ld.ub	r12,sp[0x3]
800021d4:	2f fd       	sub	sp,-4
800021d6:	d8 02       	popm	pc
800021d8:	80 00       	ld.sh	r0,r0[0x0]
800021da:	32 0e       	mov	lr,32
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	33 3e       	mov	lr,51
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	33 62       	mov	r2,54
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	32 5a       	mov	r10,37

800021e8 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
800021e8:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
800021ea:	f0 1f 00 04 	mcall	800021f8 <CANRxReady+0x10>
800021ee:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
800021f2:	5f 1c       	srne	r12
800021f4:	d8 02       	popm	pc
800021f6:	00 00       	add	r0,r0
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 98       	sub	r8,25

800021fc <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
800021fc:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
800021fe:	f0 1f 00 04 	mcall	8000220c <CANTxReady+0x10>
80002202:	ec 1c 00 04 	eorl	r12,0x4
}
80002206:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
8000220a:	d8 02       	popm	pc
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	21 98       	sub	r8,25

80002210 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
80002210:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
80002212:	18 9b       	mov	r11,r12
80002214:	fe 7c 24 00 	mov	r12,-56320
80002218:	f0 1f 00 02 	mcall	80002220 <mDEASSERT_CS+0x10>
}
8000221c:	d8 02       	popm	pc
8000221e:	00 00       	add	r0,r0
80002220:	80 00       	ld.sh	r0,r0[0x0]
80002222:	32 5a       	mov	r10,37

80002224 <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
80002224:	d4 21       	pushm	r4-r7,lr
80002226:	18 97       	mov	r7,r12
80002228:	16 95       	mov	r5,r11
8000222a:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
8000222c:	18 96       	mov	r6,r12
8000222e:	5c 56       	castu.b	r6
80002230:	0c 9c       	mov	r12,r6
80002232:	f0 1f 00 0a 	mcall	80002258 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
80002236:	30 2b       	mov	r11,2
80002238:	0e 9c       	mov	r12,r7
8000223a:	f0 1f 00 09 	mcall	8000225c <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
8000223e:	0a 9b       	mov	r11,r5
80002240:	0e 9c       	mov	r12,r7
80002242:	f0 1f 00 07 	mcall	8000225c <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
80002246:	08 9b       	mov	r11,r4
80002248:	0e 9c       	mov	r12,r7
8000224a:	f0 1f 00 05 	mcall	8000225c <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
8000224e:	0c 9c       	mov	r12,r6
80002250:	f0 1f 00 04 	mcall	80002260 <CAN2515ByteWrite+0x3c>
}
80002254:	d8 22       	popm	r4-r7,pc
80002256:	00 00       	add	r0,r0
80002258:	80 00       	ld.sh	r0,r0[0x0]
8000225a:	20 f0       	sub	r0,15
8000225c:	80 00       	ld.sh	r0,r0[0x0]
8000225e:	21 88       	sub	r8,24
80002260:	80 00       	ld.sh	r0,r0[0x0]
80002262:	22 10       	sub	r0,33

80002264 <CAN2515SetRXB1Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB1Filters(Channel, 0, &Flt[2]);
 ********************************************************************/
void CAN2515SetRXB1Filters(int Channel, UINT16 Mask1, UINT16* pFlt2_5 )
{
80002264:	eb cd 40 e0 	pushm	r5-r7,lr
80002268:	18 97       	mov	r7,r12
8000226a:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 3);
8000226c:	16 96       	mov	r6,r11
8000226e:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
80002272:	32 4b       	mov	r11,36
80002274:	f0 1f 00 26 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXM1SIDL, Mask1 << 5);
80002278:	ec 0a 15 05 	lsl	r10,r6,0x5
8000227c:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002280:	32 5b       	mov	r11,37
80002282:	0e 9c       	mov	r12,r7
80002284:	f0 1f 00 22 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>

	// Set Four filters associated with RXB1

	CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 3);
80002288:	8a 8a       	ld.uh	r10,r5[0x0]
8000228a:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000228e:	30 8b       	mov	r11,8
80002290:	0e 9c       	mov	r12,r7
80002292:	f0 1f 00 1f 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002296:	0b 2a       	ld.uh	r10,r5++
80002298:	a5 7a       	lsl	r10,0x5
8000229a:	a3 ba       	sbr	r10,0x3
8000229c:	e2 1a 00 e8 	andl	r10,0xe8,COH
800022a0:	30 9b       	mov	r11,9
800022a2:	0e 9c       	mov	r12,r7
800022a4:	f0 1f 00 1a 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 3);
800022a8:	8a 8a       	ld.uh	r10,r5[0x0]
800022aa:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022ae:	31 0b       	mov	r11,16
800022b0:	0e 9c       	mov	r12,r7
800022b2:	f0 1f 00 17 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
800022b6:	0b 2a       	ld.uh	r10,r5++
800022b8:	a5 7a       	lsl	r10,0x5
800022ba:	a3 ba       	sbr	r10,0x3
800022bc:	e2 1a 00 e8 	andl	r10,0xe8,COH
800022c0:	30 9b       	mov	r11,9
800022c2:	0e 9c       	mov	r12,r7
800022c4:	f0 1f 00 12 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 3);
800022c8:	8a 8a       	ld.uh	r10,r5[0x0]
800022ca:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022ce:	31 4b       	mov	r11,20
800022d0:	0e 9c       	mov	r12,r7
800022d2:	f0 1f 00 0f 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
800022d6:	0b 2a       	ld.uh	r10,r5++
800022d8:	a5 7a       	lsl	r10,0x5
800022da:	a3 ba       	sbr	r10,0x3
800022dc:	e2 1a 00 e8 	andl	r10,0xe8,COH
800022e0:	30 9b       	mov	r11,9
800022e2:	0e 9c       	mov	r12,r7
800022e4:	f0 1f 00 0a 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 3);
800022e8:	8a 8a       	ld.uh	r10,r5[0x0]
800022ea:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022ee:	31 8b       	mov	r11,24
800022f0:	0e 9c       	mov	r12,r7
800022f2:	f0 1f 00 07 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
800022f6:	8a 8a       	ld.uh	r10,r5[0x0]
800022f8:	a5 7a       	lsl	r10,0x5
800022fa:	a3 ba       	sbr	r10,0x3
800022fc:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002300:	30 9b       	mov	r11,9
80002302:	0e 9c       	mov	r12,r7
80002304:	f0 1f 00 02 	mcall	8000230c <CAN2515SetRXB1Filters+0xa8>
}
80002308:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	22 24       	sub	r4,34

80002310 <CAN2515SetRXB0Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0Filters(int Channel, UINT16 Mask0, UINT16* pFlt0_1 )
{
80002310:	eb cd 40 e0 	pushm	r5-r7,lr
80002314:	18 97       	mov	r7,r12
80002316:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 3);
80002318:	16 96       	mov	r6,r11
8000231a:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
8000231e:	32 0b       	mov	r11,32
80002320:	f0 1f 00 15 	mcall	80002374 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXM0SIDL, Mask0 << 5);
80002324:	ec 0a 15 05 	lsl	r10,r6,0x5
80002328:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000232c:	32 1b       	mov	r11,33
8000232e:	0e 9c       	mov	r12,r7
80002330:	f0 1f 00 11 	mcall	80002374 <CAN2515SetRXB0Filters+0x64>

	// Set two filters associated with RXB0

	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 3);
80002334:	8a 8a       	ld.uh	r10,r5[0x0]
80002336:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000233a:	30 0b       	mov	r11,0
8000233c:	0e 9c       	mov	r12,r7
8000233e:	f0 1f 00 0e 	mcall	80002374 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF0SIDL, *pFlt0_1 << 5);
80002342:	0b 1a       	ld.sh	r10,r5++
80002344:	a5 7a       	lsl	r10,0x5
80002346:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000234a:	30 1b       	mov	r11,1
8000234c:	0e 9c       	mov	r12,r7
8000234e:	f0 1f 00 0a 	mcall	80002374 <CAN2515SetRXB0Filters+0x64>


	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 3);
80002352:	8a 8a       	ld.uh	r10,r5[0x0]
80002354:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002358:	30 4b       	mov	r11,4
8000235a:	0e 9c       	mov	r12,r7
8000235c:	f0 1f 00 06 	mcall	80002374 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF1SIDL, *pFlt0_1 << 5);
80002360:	0b 9a       	ld.ub	r10,r5[0x1]
80002362:	a5 7a       	lsl	r10,0x5
80002364:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002368:	30 5b       	mov	r11,5
8000236a:	0e 9c       	mov	r12,r7
8000236c:	f0 1f 00 02 	mcall	80002374 <CAN2515SetRXB0Filters+0x64>

}
80002370:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	22 24       	sub	r4,34

80002378 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002378:	eb cd 40 c0 	pushm	r6-r7,lr
8000237c:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
8000237e:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
80002382:	0e 9c       	mov	r12,r7
80002384:	f0 1f 00 06 	mcall	8000239c <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
80002388:	e0 6b 00 c0 	mov	r11,192
8000238c:	0c 9c       	mov	r12,r6
8000238e:	f0 1f 00 05 	mcall	800023a0 <CANReset+0x28>
	mDEASSERT_CS(Channel);
80002392:	0e 9c       	mov	r12,r7
80002394:	f0 1f 00 04 	mcall	800023a4 <CANReset+0x2c>
}
80002398:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000239c:	80 00       	ld.sh	r0,r0[0x0]
8000239e:	20 f0       	sub	r0,15
800023a0:	80 00       	ld.sh	r0,r0[0x0]
800023a2:	21 88       	sub	r8,24
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	22 10       	sub	r0,33

800023a8 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
800023a8:	eb cd 40 e0 	pushm	r5-r7,lr
800023ac:	20 1d       	sub	sp,4
800023ae:	18 97       	mov	r7,r12
800023b0:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
800023b2:	18 96       	mov	r6,r12
800023b4:	5c 56       	castu.b	r6
800023b6:	0c 9c       	mov	r12,r6
800023b8:	f0 1f 00 13 	mcall	80002404 <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
800023bc:	30 3b       	mov	r11,3
800023be:	0e 9c       	mov	r12,r7
800023c0:	f0 1f 00 12 	mcall	80002408 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
800023c4:	0a 9b       	mov	r11,r5
800023c6:	0e 9c       	mov	r12,r7
800023c8:	f0 1f 00 10 	mcall	80002408 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
800023cc:	30 0b       	mov	r11,0
800023ce:	fe 7c 24 00 	mov	r12,-56320
800023d2:	f0 1f 00 0f 	mcall	8000240c <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800023d6:	fe 77 24 00 	mov	r7,-56320
800023da:	c0 28       	rjmp	800023de <CAN2515ByteRead+0x36>
		asm("NOP;");
800023dc:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800023de:	0e 9c       	mov	r12,r7
800023e0:	f0 1f 00 0c 	mcall	80002410 <CAN2515ByteRead+0x68>
800023e4:	cf c0       	breq	800023dc <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800023e6:	fa cb ff fe 	sub	r11,sp,-2
800023ea:	fe 7c 24 00 	mov	r12,-56320
800023ee:	f0 1f 00 0a 	mcall	80002414 <CAN2515ByteRead+0x6c>
	return spidataread_temp;
800023f2:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
800023f4:	0c 9c       	mov	r12,r6
800023f6:	f0 1f 00 09 	mcall	80002418 <CAN2515ByteRead+0x70>

	return tempdata;
}
800023fa:	0e 9c       	mov	r12,r7
800023fc:	2f fd       	sub	sp,-4
800023fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002402:	00 00       	add	r0,r0
80002404:	80 00       	ld.sh	r0,r0[0x0]
80002406:	20 f0       	sub	r0,15
80002408:	80 00       	ld.sh	r0,r0[0x0]
8000240a:	21 88       	sub	r8,24
8000240c:	80 00       	ld.sh	r0,r0[0x0]
8000240e:	33 3e       	mov	lr,51
80002410:	80 00       	ld.sh	r0,r0[0x0]
80002412:	33 5a       	mov	r10,53
80002414:	80 00       	ld.sh	r0,r0[0x0]
80002416:	33 62       	mov	r2,54
80002418:	80 00       	ld.sh	r0,r0[0x0]
8000241a:	22 10       	sub	r0,33

8000241c <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
8000241c:	eb cd 40 80 	pushm	r7,lr
80002420:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
80002422:	58 ab       	cp.w	r11,10
80002424:	c1 11       	brne	80002446 <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
80002426:	30 3a       	mov	r10,3
80002428:	32 ab       	mov	r11,42
8000242a:	f0 1f 00 30 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000242e:	e0 6a 00 ac 	mov	r10,172
80002432:	32 9b       	mov	r11,41
80002434:	0e 9c       	mov	r12,r7
80002436:	f0 1f 00 2d 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000243a:	30 7a       	mov	r10,7
8000243c:	32 8b       	mov	r11,40
8000243e:	0e 9c       	mov	r12,r7
80002440:	f0 1f 00 2a 	mcall	800024e8 <CANEnable+0xcc>
80002444:	c3 68       	rjmp	800024b0 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
80002446:	58 7b       	cp.w	r11,7
80002448:	c1 11       	brne	8000246a <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
8000244a:	30 1a       	mov	r10,1
8000244c:	32 ab       	mov	r11,42
8000244e:	f0 1f 00 27 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002452:	e0 6a 00 ac 	mov	r10,172
80002456:	32 9b       	mov	r11,41
80002458:	0e 9c       	mov	r12,r7
8000245a:	f0 1f 00 24 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000245e:	30 7a       	mov	r10,7
80002460:	32 8b       	mov	r11,40
80002462:	0e 9c       	mov	r12,r7
80002464:	f0 1f 00 21 	mcall	800024e8 <CANEnable+0xcc>
80002468:	c2 48       	rjmp	800024b0 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
8000246a:	58 5b       	cp.w	r11,5
8000246c:	c1 11       	brne	8000248e <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
8000246e:	30 0a       	mov	r10,0
80002470:	32 ab       	mov	r11,42
80002472:	f0 1f 00 1e 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002476:	e0 6a 00 ac 	mov	r10,172
8000247a:	32 9b       	mov	r11,41
8000247c:	0e 9c       	mov	r12,r7
8000247e:	f0 1f 00 1b 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002482:	30 7a       	mov	r10,7
80002484:	32 8b       	mov	r11,40
80002486:	0e 9c       	mov	r12,r7
80002488:	f0 1f 00 18 	mcall	800024e8 <CANEnable+0xcc>
8000248c:	c1 28       	rjmp	800024b0 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
8000248e:	58 1b       	cp.w	r11,1
80002490:	c1 01       	brne	800024b0 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002492:	30 0a       	mov	r10,0
80002494:	32 ab       	mov	r11,42
80002496:	f0 1f 00 15 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
8000249a:	e0 6a 00 91 	mov	r10,145
8000249e:	32 9b       	mov	r11,41
800024a0:	0e 9c       	mov	r12,r7
800024a2:	f0 1f 00 12 	mcall	800024e8 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
800024a6:	30 3a       	mov	r10,3
800024a8:	32 8b       	mov	r11,40
800024aa:	0e 9c       	mov	r12,r7
800024ac:	f0 1f 00 0f 	mcall	800024e8 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
800024b0:	30 3a       	mov	r10,3
800024b2:	32 bb       	mov	r11,43
800024b4:	0e 9c       	mov	r12,r7
800024b6:	f0 1f 00 0d 	mcall	800024e8 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
800024ba:	30 4a       	mov	r10,4
800024bc:	30 fb       	mov	r11,15
800024be:	0e 9c       	mov	r12,r7
800024c0:	f0 1f 00 0a 	mcall	800024e8 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
800024c4:	30 eb       	mov	r11,14
800024c6:	0e 9c       	mov	r12,r7
800024c8:	f0 1f 00 09 	mcall	800024ec <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
800024cc:	30 eb       	mov	r11,14
800024ce:	0e 9c       	mov	r12,r7
800024d0:	f0 1f 00 07 	mcall	800024ec <CANEnable+0xd0>
800024d4:	e2 1c 00 e0 	andl	r12,0xe0,COH
800024d8:	c0 60       	breq	800024e4 <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
800024da:	30 4a       	mov	r10,4
800024dc:	30 fb       	mov	r11,15
800024de:	0e 9c       	mov	r12,r7
800024e0:	f0 1f 00 02 	mcall	800024e8 <CANEnable+0xcc>
800024e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800024e8:	80 00       	ld.sh	r0,r0[0x0]
800024ea:	22 24       	sub	r4,34
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	23 a8       	sub	r8,58

800024f0 <InitializeCAN>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps)
 ********************************************************************/
void InitializeCAN( int Channel , int BusSpeed, UINT16 Mask, UINT16 Flt[6])
{
800024f0:	d4 21       	pushm	r4-r7,lr
800024f2:	18 97       	mov	r7,r12
800024f4:	16 94       	mov	r4,r11
800024f6:	14 96       	mov	r6,r10
800024f8:	12 95       	mov	r5,r9
	CANReset(Channel);
800024fa:	f0 1f 00 0a 	mcall	80002520 <InitializeCAN+0x30>
	CAN2515SetRXB0Filters(Channel, Mask, Flt);
800024fe:	5c 76       	castu.h	r6
80002500:	0a 9a       	mov	r10,r5
80002502:	0c 9b       	mov	r11,r6
80002504:	0e 9c       	mov	r12,r7
80002506:	f0 1f 00 08 	mcall	80002524 <InitializeCAN+0x34>
	CAN2515SetRXB1Filters(Channel, Mask, &Flt[2]);
8000250a:	ea ca ff fc 	sub	r10,r5,-4
8000250e:	0c 9b       	mov	r11,r6
80002510:	0e 9c       	mov	r12,r7
80002512:	f0 1f 00 06 	mcall	80002528 <InitializeCAN+0x38>
	CANEnable(Channel, BusSpeed);
80002516:	08 9b       	mov	r11,r4
80002518:	0e 9c       	mov	r12,r7
8000251a:	f0 1f 00 05 	mcall	8000252c <InitializeCAN+0x3c>
}
8000251e:	d8 22       	popm	r4-r7,pc
80002520:	80 00       	ld.sh	r0,r0[0x0]
80002522:	23 78       	sub	r8,55
80002524:	80 00       	ld.sh	r0,r0[0x0]
80002526:	23 10       	sub	r0,49
80002528:	80 00       	ld.sh	r0,r0[0x0]
8000252a:	22 64       	sub	r4,38
8000252c:	80 00       	ld.sh	r0,r0[0x0]
8000252e:	24 1c       	sub	r12,65

80002530 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80002530:	eb cd 40 fe 	pushm	r1-r7,lr
80002534:	18 96       	mov	r6,r12
80002536:	16 93       	mov	r3,r11
80002538:	14 94       	mov	r4,r10
8000253a:	12 92       	mov	r2,r9
8000253c:	10 91       	mov	r1,r8
8000253e:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002540:	33 05       	mov	r5,48
80002542:	c1 78       	rjmp	80002570 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002544:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002548:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000254c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002550:	14 38       	cp.w	r8,r10
80002552:	e0 88 00 08 	brls	80002562 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002556:	12 38       	cp.w	r8,r9
80002558:	fe 98 ff fa 	brls	8000254c <CANSendMsg+0x1c>
8000255c:	12 3a       	cp.w	r10,r9
8000255e:	c7 63       	brcs	8000264a <CANSendMsg+0x11a>
80002560:	cf 6b       	rjmp	8000254c <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002562:	12 38       	cp.w	r8,r9
80002564:	e0 8b 00 73 	brhi	8000264a <CANSendMsg+0x11a>
80002568:	12 3a       	cp.w	r10,r9
8000256a:	c7 03       	brcs	8000264a <CANSendMsg+0x11a>
8000256c:	cf 0b       	rjmp	8000254c <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000256e:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002570:	0a 9b       	mov	r11,r5
80002572:	0c 9c       	mov	r12,r6
80002574:	f0 1f 00 38 	mcall	80002654 <CANSendMsg+0x124>
80002578:	e2 1c 00 08 	andl	r12,0x8,COH
8000257c:	ce 41       	brne	80002544 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
8000257e:	e6 08 16 0b 	lsr	r8,r3,0xb
80002582:	c1 01       	brne	800025a2 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
80002584:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
80002588:	33 1b       	mov	r11,49
8000258a:	0c 9c       	mov	r12,r6
8000258c:	f0 1f 00 33 	mcall	80002658 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
80002590:	e6 0a 15 05 	lsl	r10,r3,0x5
80002594:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002598:	33 2b       	mov	r11,50
8000259a:	0c 9c       	mov	r12,r6
8000259c:	f0 1f 00 2f 	mcall	80002658 <CANSendMsg+0x128>
800025a0:	c2 18       	rjmp	800025e2 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
800025a2:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
800025a6:	33 1b       	mov	r11,49
800025a8:	0c 9c       	mov	r12,r6
800025aa:	f0 1f 00 2c 	mcall	80002658 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
800025ae:	e6 08 16 0d 	lsr	r8,r3,0xd
800025b2:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
800025b6:	e2 18 00 e0 	andl	r8,0xe0,COH
800025ba:	10 4a       	or	r10,r8
800025bc:	a3 ba       	sbr	r10,0x3
800025be:	e2 1a 00 eb 	andl	r10,0xeb,COH
800025c2:	33 2b       	mov	r11,50
800025c4:	0c 9c       	mov	r12,r6
800025c6:	f0 1f 00 25 	mcall	80002658 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
800025ca:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
800025ce:	33 3b       	mov	r11,51
800025d0:	0c 9c       	mov	r12,r6
800025d2:	f0 1f 00 22 	mcall	80002658 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
800025d6:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
800025da:	33 4b       	mov	r11,52
800025dc:	0c 9c       	mov	r12,r6
800025de:	f0 1f 00 1f 	mcall	80002658 <CANSendMsg+0x128>
800025e2:	30 85       	mov	r5,8
800025e4:	ea 02 18 00 	cp.b	r2,r5
800025e8:	e4 05 17 80 	movls	r5,r2
800025ec:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
800025f0:	e0 41 00 52 	cp.w	r1,82
800025f4:	c1 01       	brne	80002614 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
800025f6:	a7 a5       	sbr	r5,0x6
800025f8:	5c 55       	castu.b	r5
800025fa:	0a 9a       	mov	r10,r5
800025fc:	33 5b       	mov	r11,53
800025fe:	0c 9c       	mov	r12,r6
80002600:	f0 1f 00 16 	mcall	80002658 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80002604:	30 4b       	mov	r11,4
80002606:	31 1c       	mov	r12,17
80002608:	f0 1f 00 15 	mcall	8000265c <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
8000260c:	49 5c       	lddpc	r12,80002660 <CANSendMsg+0x130>
8000260e:	f0 1f 00 16 	mcall	80002664 <CANSendMsg+0x134>
80002612:	c0 68       	rjmp	8000261e <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
80002614:	0a 9a       	mov	r10,r5
80002616:	33 5b       	mov	r11,53
80002618:	0c 9c       	mov	r12,r6
8000261a:	f0 1f 00 10 	mcall	80002658 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
8000261e:	58 05       	cp.w	r5,0
80002620:	e0 8a 00 0e 	brle	8000263c <CANSendMsg+0x10c>
80002624:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
80002626:	0e 9b       	mov	r11,r7
80002628:	2c ab       	sub	r11,-54
8000262a:	e8 07 07 0a 	ld.ub	r10,r4[r7]
8000262e:	5c 5b       	castu.b	r11
80002630:	0c 9c       	mov	r12,r6
80002632:	f0 1f 00 0a 	mcall	80002658 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002636:	2f f7       	sub	r7,-1
80002638:	0a 37       	cp.w	r7,r5
8000263a:	cf 65       	brlt	80002626 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
8000263c:	30 8a       	mov	r10,8
8000263e:	33 0b       	mov	r11,48
80002640:	0c 9c       	mov	r12,r6
80002642:	f0 1f 00 06 	mcall	80002658 <CANSendMsg+0x128>
80002646:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000264a:	e0 47 00 64 	cp.w	r7,100
8000264e:	c9 01       	brne	8000256e <CANSendMsg+0x3e>
80002650:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002654:	80 00       	ld.sh	r0,r0[0x0]
80002656:	23 a8       	sub	r8,58
80002658:	80 00       	ld.sh	r0,r0[0x0]
8000265a:	22 24       	sub	r4,34
8000265c:	80 00       	ld.sh	r0,r0[0x0]
8000265e:	2b e8       	sub	r8,-66
80002660:	80 00       	ld.sh	r0,r0[0x0]
80002662:	92 74       	ld.sh	r4,r9[0xe]
80002664:	80 00       	ld.sh	r0,r0[0x0]
80002666:	2b 50       	sub	r0,-75

80002668 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002668:	d4 31       	pushm	r0-r7,lr
8000266a:	18 95       	mov	r5,r12
8000266c:	16 92       	mov	r2,r11
8000266e:	14 93       	mov	r3,r10
80002670:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
80002672:	f0 1f 00 5c 	mcall	800027e0 <CANGetMsg+0x178>

        if( (temp & 3) == 0 )
80002676:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8000267a:	e0 80 00 b1 	breq	800027dc <CANGetMsg+0x174>
            return FALSE;
        temp&=0x03;
        if(temp==1){
8000267e:	58 1c       	cp.w	r12,1
80002680:	c0 31       	brne	80002686 <CANGetMsg+0x1e>
80002682:	36 16       	mov	r6,97
80002684:	c0 58       	rjmp	8000268e <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
80002686:	58 2c       	cp.w	r12,2
80002688:	e0 81 00 aa 	brne	800027dc <CANGetMsg+0x174>
8000268c:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
8000268e:	0c 9b       	mov	r11,r6
80002690:	0a 9c       	mov	r12,r5
80002692:	f0 1f 00 55 	mcall	800027e4 <CANGetMsg+0x17c>
80002696:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
80002698:	ec cb ff ff 	sub	r11,r6,-1
8000269c:	5c 5b       	castu.b	r11
8000269e:	0a 9c       	mov	r12,r5
800026a0:	f0 1f 00 51 	mcall	800027e4 <CANGetMsg+0x17c>
800026a4:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
800026a6:	ec cb ff fe 	sub	r11,r6,-2
800026aa:	5c 5b       	castu.b	r11
800026ac:	0a 9c       	mov	r12,r5
800026ae:	f0 1f 00 4e 	mcall	800027e4 <CANGetMsg+0x17c>
800026b2:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
800026b4:	ec cb ff fd 	sub	r11,r6,-3
800026b8:	5c 5b       	castu.b	r11
800026ba:	0a 9c       	mov	r12,r5
800026bc:	f0 1f 00 4a 	mcall	800027e4 <CANGetMsg+0x17c>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
800026c0:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
800026c4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800026c8:	c1 41       	brne	800026f0 <CANGetMsg+0x88>
        {
            *pIdentifier = S1<<3 | S2>>5;
800026ca:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
800026ce:	ef e1 10 31 	or	r1,r7,r1<<0x3
800026d2:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
800026d4:	30 1c       	mov	r12,1
800026d6:	f0 1f 00 45 	mcall	800027e8 <CANGetMsg+0x180>
            LED_Off(LED1);
800026da:	30 2c       	mov	r12,2
800026dc:	f0 1f 00 44 	mcall	800027ec <CANGetMsg+0x184>

             dip204_set_cursor_position(1,4);
800026e0:	30 4b       	mov	r11,4
800026e2:	30 1c       	mov	r12,1
800026e4:	f0 1f 00 43 	mcall	800027f0 <CANGetMsg+0x188>
             dip204_printf_string("St Id");
800026e8:	4c 3c       	lddpc	r12,800027f4 <CANGetMsg+0x18c>
800026ea:	f0 1f 00 44 	mcall	800027f8 <CANGetMsg+0x190>
800026ee:	c1 b8       	rjmp	80002724 <CANGetMsg+0xbc>
        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
800026f0:	a9 60       	lsl	r0,0x8
800026f2:	e1 e1 11 51 	or	r1,r0,r1<<0x15
800026f6:	e3 ec 10 0c 	or	r12,r1,r12
800026fa:	e2 18 00 1c 	andl	r8,0x1c,COH
800026fe:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80002702:	0e 48       	or	r8,r7
80002704:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
80002708:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
8000270a:	30 2c       	mov	r12,2
8000270c:	f0 1f 00 37 	mcall	800027e8 <CANGetMsg+0x180>
            LED_Off(LED0);
80002710:	30 1c       	mov	r12,1
80002712:	f0 1f 00 37 	mcall	800027ec <CANGetMsg+0x184>

            dip204_set_cursor_position(1,4);
80002716:	30 4b       	mov	r11,4
80002718:	30 1c       	mov	r12,1
8000271a:	f0 1f 00 36 	mcall	800027f0 <CANGetMsg+0x188>
            dip204_printf_string("Ex Id");
8000271e:	4b 8c       	lddpc	r12,800027fc <CANGetMsg+0x194>
80002720:	f0 1f 00 36 	mcall	800027f8 <CANGetMsg+0x190>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80002724:	ec cb ff fc 	sub	r11,r6,-4
80002728:	5c 5b       	castu.b	r11
8000272a:	0a 9c       	mov	r12,r5
8000272c:	f0 1f 00 2e 	mcall	800027e4 <CANGetMsg+0x17c>
80002730:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002734:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
80002736:	30 88       	mov	r8,8
80002738:	f0 0c 18 00 	cp.b	r12,r8
8000273c:	e0 88 00 07 	brls	8000274a <CANGetMsg+0xe2>
            *pMsgSize = 8;
80002740:	a8 88       	st.b	r4[0x0],r8
80002742:	2f b6       	sub	r6,-5
80002744:	5c 56       	castu.b	r6
80002746:	30 07       	mov	r7,0
80002748:	c0 58       	rjmp	80002752 <CANGetMsg+0xea>

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000274a:	58 0c       	cp.w	r12,0
8000274c:	fe 99 ff fb 	brgt	80002742 <CANGetMsg+0xda>
80002750:	c0 e8       	rjmp	8000276c <CANGetMsg+0x104>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
80002752:	0c 9b       	mov	r11,r6
80002754:	0a 9c       	mov	r12,r5
80002756:	f0 1f 00 24 	mcall	800027e4 <CANGetMsg+0x17c>
8000275a:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000275e:	2f f7       	sub	r7,-1
80002760:	2f f6       	sub	r6,-1
80002762:	5c 56       	castu.b	r6
80002764:	09 88       	ld.ub	r8,r4[0x0]
80002766:	0e 38       	cp.w	r8,r7
80002768:	fe 99 ff f5 	brgt	80002752 <CANGetMsg+0xea>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
8000276c:	30 4c       	mov	r12,4
8000276e:	f0 1f 00 20 	mcall	800027ec <CANGetMsg+0x184>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80002772:	36 0b       	mov	r11,96
80002774:	0a 9c       	mov	r12,r5
80002776:	f0 1f 00 1c 	mcall	800027e4 <CANGetMsg+0x17c>
8000277a:	e2 1c 00 08 	andl	r12,0x8,COH
8000277e:	c0 81       	brne	8000278e <CANGetMsg+0x126>
80002780:	37 0b       	mov	r11,112
80002782:	0a 9c       	mov	r12,r5
80002784:	f0 1f 00 18 	mcall	800027e4 <CANGetMsg+0x17c>
80002788:	e2 1c 00 08 	andl	r12,0x8,COH
8000278c:	c1 d0       	breq	800027c6 <CANGetMsg+0x15e>
8000278e:	64 08       	ld.w	r8,r2[0x0]
80002790:	58 18       	cp.w	r8,1
80002792:	c1 a1       	brne	800027c6 <CANGetMsg+0x15e>
                    {
                    Msg[0] = 0;
80002794:	30 08       	mov	r8,0
80002796:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
80002798:	30 18       	mov	r8,1
8000279a:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
8000279c:	30 28       	mov	r8,2
8000279e:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
800027a0:	30 38       	mov	r8,3
800027a2:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
800027a4:	30 08       	mov	r8,0
800027a6:	30 49       	mov	r9,4
800027a8:	06 9a       	mov	r10,r3
800027aa:	64 0b       	ld.w	r11,r2[0x0]
800027ac:	0a 9c       	mov	r12,r5
800027ae:	f0 1f 00 15 	mcall	80002800 <CANGetMsg+0x198>
                    dip204_set_cursor_position(17,4);
800027b2:	30 4b       	mov	r11,4
800027b4:	31 1c       	mov	r12,17
800027b6:	f0 1f 00 0f 	mcall	800027f0 <CANGetMsg+0x188>
                    dip204_printf_string("Re F");
800027ba:	49 3c       	lddpc	r12,80002804 <CANGetMsg+0x19c>
800027bc:	f0 1f 00 0f 	mcall	800027f8 <CANGetMsg+0x190>
                    LED_On(LED2);
800027c0:	30 4c       	mov	r12,4
800027c2:	f0 1f 00 0a 	mcall	800027e8 <CANGetMsg+0x180>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
800027c6:	30 0a       	mov	r10,0
800027c8:	32 cb       	mov	r11,44
800027ca:	14 9c       	mov	r12,r10
800027cc:	f0 1f 00 0f 	mcall	80002808 <CANGetMsg+0x1a0>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
800027d0:	30 0a       	mov	r10,0
800027d2:	32 cb       	mov	r11,44
800027d4:	14 9c       	mov	r12,r10
800027d6:	f0 1f 00 0d 	mcall	80002808 <CANGetMsg+0x1a0>
800027da:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
800027dc:	d8 3a       	popm	r0-r7,pc,r12=0
800027de:	00 00       	add	r0,r0
800027e0:	80 00       	ld.sh	r0,r0[0x0]
800027e2:	21 98       	sub	r8,25
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	23 a8       	sub	r8,58
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	29 bc       	sub	r12,-101
800027ec:	80 00       	ld.sh	r0,r0[0x0]
800027ee:	2a 0c       	sub	r12,-96
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	2b e8       	sub	r8,-66
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	92 7c       	ld.sh	r12,r9[0xe]
800027f8:	80 00       	ld.sh	r0,r0[0x0]
800027fa:	2b 50       	sub	r0,-75
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	92 84       	ld.uh	r4,r9[0x0]
80002800:	80 00       	ld.sh	r0,r0[0x0]
80002802:	25 30       	sub	r0,83
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	92 74       	ld.sh	r4,r9[0xe]
80002808:	80 00       	ld.sh	r0,r0[0x0]
8000280a:	22 24       	sub	r4,34

8000280c <main>:
	{EXAMPLE_ADC_POTENTIOMETER_PIN, EXAMPLE_ADC_POTENTIOMETER_FUNCTION}
};



int main(void) {
8000280c:	d4 31       	pushm	r0-r7,lr
8000280e:	20 3d       	sub	sp,12
	signed short adc_value_pot   = -1;
	/* Init system clocks */
	sysclk_init();
80002810:	f0 1f 00 4b 	mcall	8000293c <main+0x130>

	/* Assign and enable GPIO pins to the ADC function. */
	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) /
80002814:	30 1b       	mov	r11,1
80002816:	4c bc       	lddpc	r12,80002940 <main+0x134>
80002818:	f0 1f 00 4b 	mcall	80002944 <main+0x138>
			sizeof(ADC_GPIO_MAP[0]));

	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
8000281c:	fe 77 3c 00 	mov	r7,-50176
80002820:	6e 18       	ld.w	r8,r7[0x4]
80002822:	a9 a8       	sbr	r8,0x8
80002824:	8f 18       	st.w	r7[0x4],r8
	adc_configure(&AVR32_ADC);
80002826:	0e 9c       	mov	r12,r7
80002828:	f0 1f 00 48 	mcall	80002948 <main+0x13c>

	adc_enable(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
8000282c:	30 1b       	mov	r11,1
8000282e:	0e 9c       	mov	r12,r7
80002830:	f0 1f 00 47 	mcall	8000294c <main+0x140>

	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002834:	30 3a       	mov	r10,3
80002836:	e0 6b 1b 00 	mov	r11,6912
8000283a:	ea 1b 00 b7 	orh	r11,0xb7
8000283e:	fe 7c 0c 00 	mov	r12,-62464
80002842:	f0 1f 00 44 	mcall	80002950 <main+0x144>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
80002846:	f0 1f 00 44 	mcall	80002954 <main+0x148>

	// Enables receive interrupts.
	Disable_global_interrupt();
8000284a:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
8000284c:	f0 1f 00 43 	mcall	80002958 <main+0x14c>
	Enable_global_interrupt();
80002850:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
80002852:	f0 1f 00 43 	mcall	8000295c <main+0x150>
	dip204_init(100,1);
80002856:	30 1b       	mov	r11,1
80002858:	36 4c       	mov	r12,100
8000285a:	f0 1f 00 42 	mcall	80002960 <main+0x154>
	dip204_clear_display();
8000285e:	f0 1f 00 42 	mcall	80002964 <main+0x158>
	
	UINT16 Mask = 0; 
	UINT16 flt = 0;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
80002862:	30 08       	mov	r8,0
80002864:	ba 08       	st.h	sp[0x0],r8
80002866:	ba 18       	st.h	sp[0x2],r8
80002868:	ba 28       	st.h	sp[0x4],r8
8000286a:	ba 38       	st.h	sp[0x6],r8
8000286c:	ba 48       	st.h	sp[0x8],r8
8000286e:	ba 58       	st.h	sp[0xa],r8
	InitializeCAN(0, CAN_250kbps, Mask, Flt);
80002870:	1a 99       	mov	r9,sp
80002872:	30 0a       	mov	r10,0
80002874:	30 7b       	mov	r11,7
80002876:	14 9c       	mov	r12,r10
80002878:	f0 1f 00 3c 	mcall	80002968 <main+0x15c>
	
	dip204_set_cursor_position(1,1);
8000287c:	30 1b       	mov	r11,1
8000287e:	16 9c       	mov	r12,r11
80002880:	f0 1f 00 3b 	mcall	8000296c <main+0x160>
	dip204_printf_string("ES42 CAN EXAMPLE");
80002884:	4b bc       	lddpc	r12,80002970 <main+0x164>
80002886:	f0 1f 00 3c 	mcall	80002974 <main+0x168>
	dip204_hide_cursor();
8000288a:	f0 1f 00 3c 	mcall	80002978 <main+0x16c>
	float velocity;
	while(1){
		adc_start(&AVR32_ADC);
8000288e:	0e 94       	mov	r4,r7
		/* Get value for the potentiometer adc channel */
		adc_value_pot = adc_get_value(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
80002890:	30 13       	mov	r3,1
		/* Display value to user */
		velocity = ((float)adc_value_pot/1023)*100;
80002892:	e0 62 c0 00 	mov	r2,49152
80002896:	ea 12 44 7f 	orh	r2,0x447f
8000289a:	fc 11 42 c8 	movh	r1,0x42c8
		dip204_set_cursor_position(1,1);
		dip204_printf_string("%f", velocity);
8000289e:	4b 80       	lddpc	r0,8000297c <main+0x170>
		
		//Clear memory contents
		ClearMessages(msg);
800028a0:	4b 87       	lddpc	r7,80002980 <main+0x174>
		//Read any message available
		if(CANRxReady(0)){
800028a2:	30 06       	mov	r6,0
	dip204_set_cursor_position(1,1);
	dip204_printf_string("ES42 CAN EXAMPLE");
	dip204_hide_cursor();
	float velocity;
	while(1){
		adc_start(&AVR32_ADC);
800028a4:	08 9c       	mov	r12,r4
800028a6:	f0 1f 00 38 	mcall	80002984 <main+0x178>
		/* Get value for the potentiometer adc channel */
		adc_value_pot = adc_get_value(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
800028aa:	06 9b       	mov	r11,r3
800028ac:	08 9c       	mov	r12,r4
800028ae:	f0 1f 00 37 	mcall	80002988 <main+0x17c>
		/* Display value to user */
		velocity = ((float)adc_value_pot/1023)*100;
800028b2:	5c 8c       	casts.h	r12
800028b4:	f0 1f 00 36 	mcall	8000298c <main+0x180>
800028b8:	04 9b       	mov	r11,r2
800028ba:	f0 1f 00 36 	mcall	80002990 <main+0x184>
800028be:	02 9b       	mov	r11,r1
800028c0:	f0 1f 00 35 	mcall	80002994 <main+0x188>
800028c4:	18 95       	mov	r5,r12
		dip204_set_cursor_position(1,1);
800028c6:	06 9b       	mov	r11,r3
800028c8:	06 9c       	mov	r12,r3
800028ca:	f0 1f 00 29 	mcall	8000296c <main+0x160>
		dip204_printf_string("%f", velocity);
800028ce:	0a 9c       	mov	r12,r5
800028d0:	f0 1f 00 32 	mcall	80002998 <main+0x18c>
800028d4:	bb 2b       	st.d	--sp,r10
800028d6:	00 9c       	mov	r12,r0
800028d8:	f0 1f 00 27 	mcall	80002974 <main+0x168>
		
		//Clear memory contents
		ClearMessages(msg);
800028dc:	0e 9c       	mov	r12,r7
800028de:	f0 1f 00 30 	mcall	8000299c <main+0x190>
		//Read any message available
		if(CANRxReady(0)){
800028e2:	0c 9c       	mov	r12,r6
800028e4:	f0 1f 00 2f 	mcall	800029a0 <main+0x194>
800028e8:	2f ed       	sub	sp,-8
800028ea:	58 0c       	cp.w	r12,0
800028ec:	c0 c0       	breq	80002904 <main+0xf8>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
800028ee:	4a e9       	lddpc	r9,800029a4 <main+0x198>
800028f0:	0e 9a       	mov	r10,r7
800028f2:	4a eb       	lddpc	r11,800029a8 <main+0x19c>
800028f4:	0c 9c       	mov	r12,r6
800028f6:	f0 1f 00 2e 	mcall	800029ac <main+0x1a0>
800028fa:	c0 50       	breq	80002904 <main+0xf8>
			{	
				// Evk1100PrintDisplay prints 4 message values, the Identifier and the data size on the display
				dip204_clear_display();
800028fc:	f0 1f 00 1a 	mcall	80002964 <main+0x158>
				//Evk1100PrintDisp(&Ident, msg, &mSize );
				//delay_ms(1000);
				dip204_clear_display();
80002900:	f0 1f 00 19 	mcall	80002964 <main+0x158>
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
80002904:	0c 9c       	mov	r12,r6
80002906:	f0 1f 00 2b 	mcall	800029b0 <main+0x1a4>
8000290a:	cc d0       	breq	800028a4 <main+0x98>
		{
			msg[0]=0;
8000290c:	30 08       	mov	r8,0
8000290e:	ae 88       	st.b	r7[0x0],r8
			msg[1]=0;
80002910:	ae 98       	st.b	r7[0x1],r8
			msg[2]=0;
80002912:	ae a8       	st.b	r7[0x2],r8
			msg[3]=0;
80002914:	ae b8       	st.b	r7[0x3],r8
			msg[4]=0;
80002916:	ae c8       	st.b	r7[0x4],r8
			msg[5]=0;
80002918:	ae d8       	st.b	r7[0x5],r8
			msg[6]=0;
8000291a:	ae e8       	st.b	r7[0x6],r8
			msg[7]=velocity;
8000291c:	0a 9c       	mov	r12,r5
8000291e:	f0 1f 00 26 	mcall	800029b4 <main+0x1a8>
80002922:	ae fc       	st.b	r7[0x7],r12
			// Channel, Identifier (max 0x1fffffff (29 bits)), Message, Number of bytes, R //or 0 (Remote frame or no remote frame).
			CANSendMsg( 0, 0x0cfe6cee, msg, 8, 0 );
80002924:	0c 98       	mov	r8,r6
80002926:	30 89       	mov	r9,8
80002928:	0e 9a       	mov	r10,r7
8000292a:	e0 6b 6c ee 	mov	r11,27886
8000292e:	ea 1b 0c fe 	orh	r11,0xcfe
80002932:	0c 9c       	mov	r12,r6
80002934:	f0 1f 00 21 	mcall	800029b8 <main+0x1ac>
80002938:	cb 6b       	rjmp	800028a4 <main+0x98>
8000293a:	00 00       	add	r0,r0
8000293c:	80 00       	ld.sh	r0,r0[0x0]
8000293e:	33 c4       	mov	r4,60
80002940:	80 00       	ld.sh	r0,r0[0x0]
80002942:	92 8c       	ld.uh	r12,r9[0x0]
80002944:	80 00       	ld.sh	r0,r0[0x0]
80002946:	2f 4c       	sub	r12,-12
80002948:	80 00       	ld.sh	r0,r0[0x0]
8000294a:	20 08       	sub	r8,0
8000294c:	80 00       	ld.sh	r0,r0[0x0]
8000294e:	20 20       	sub	r0,2
80002950:	80 00       	ld.sh	r0,r0[0x0]
80002952:	30 d0       	mov	r0,13
80002954:	80 00       	ld.sh	r0,r0[0x0]
80002956:	21 04       	sub	r4,16
80002958:	80 00       	ld.sh	r0,r0[0x0]
8000295a:	2f b8       	sub	r8,-5
8000295c:	80 00       	ld.sh	r0,r0[0x0]
8000295e:	20 78       	sub	r8,7
80002960:	80 00       	ld.sh	r0,r0[0x0]
80002962:	2c d0       	sub	r0,-51
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	2c 74       	sub	r4,-57
80002968:	80 00       	ld.sh	r0,r0[0x0]
8000296a:	24 f0       	sub	r0,79
8000296c:	80 00       	ld.sh	r0,r0[0x0]
8000296e:	2b e8       	sub	r8,-66
80002970:	80 00       	ld.sh	r0,r0[0x0]
80002972:	92 94       	ld.uh	r4,r9[0x2]
80002974:	80 00       	ld.sh	r0,r0[0x0]
80002976:	2b 50       	sub	r0,-75
80002978:	80 00       	ld.sh	r0,r0[0x0]
8000297a:	2c 44       	sub	r4,-60
8000297c:	80 00       	ld.sh	r0,r0[0x0]
8000297e:	92 a8       	ld.uh	r8,r9[0x4]
80002980:	00 00       	add	r0,r0
80002982:	06 60       	and	r0,r3
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	20 1a       	sub	r10,1
80002988:	80 00       	ld.sh	r0,r0[0x0]
8000298a:	20 3c       	sub	r12,3
8000298c:	80 00       	ld.sh	r0,r0[0x0]
8000298e:	36 0a       	mov	r10,96
80002990:	80 00       	ld.sh	r0,r0[0x0]
80002992:	33 c8       	mov	r8,60
80002994:	80 00       	ld.sh	r0,r0[0x0]
80002996:	35 28       	mov	r8,82
80002998:	80 00       	ld.sh	r0,r0[0x0]
8000299a:	36 98       	mov	r8,105
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	20 64       	sub	r4,6
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	21 e8       	sub	r8,30
800029a4:	00 00       	add	r0,r0
800029a6:	06 68       	and	r8,r3
800029a8:	00 00       	add	r0,r0
800029aa:	06 6c       	and	r12,r3
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	26 68       	sub	r8,102
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	21 fc       	sub	r12,31
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	36 7e       	mov	lr,103
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	25 30       	sub	r0,83

800029bc <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800029bc:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
800029c0:	49 18       	lddpc	r8,80002a04 <LED_On+0x48>
800029c2:	70 09       	ld.w	r9,r8[0x0]
800029c4:	f9 e9 10 09 	or	r9,r12,r9
800029c8:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800029ca:	58 0c       	cp.w	r12,0
800029cc:	5e 0c       	reteq	r12
800029ce:	48 f8       	lddpc	r8,80002a08 <LED_On+0x4c>
800029d0:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
800029d2:	18 9a       	mov	r10,r12
800029d4:	5c 9a       	brev	r10
800029d6:	f4 0a 12 00 	clz	r10,r10
800029da:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
800029dc:	f4 09 15 04 	lsl	r9,r10,0x4
800029e0:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800029e2:	70 09       	ld.w	r9,r8[0x0]
800029e4:	a9 69       	lsl	r9,0x8
800029e6:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800029ea:	70 1b       	ld.w	r11,r8[0x4]
800029ec:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800029f0:	70 1b       	ld.w	r11,r8[0x4]
800029f2:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800029f6:	70 1b       	ld.w	r11,r8[0x4]
800029f8:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800029fa:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800029fe:	ce a1       	brne	800029d2 <LED_On+0x16>
80002a00:	5e fc       	retal	r12
80002a02:	00 00       	add	r0,r0
80002a04:	00 00       	add	r0,r0
80002a06:	00 08       	add	r8,r0
80002a08:	80 00       	ld.sh	r0,r0[0x0]
80002a0a:	92 ac       	ld.uh	r12,r9[0x4]

80002a0c <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002a0c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002a10:	49 28       	lddpc	r8,80002a58 <LED_Off+0x4c>
80002a12:	70 09       	ld.w	r9,r8[0x0]
80002a14:	f8 0a 11 ff 	rsub	r10,r12,-1
80002a18:	f5 e9 00 09 	and	r9,r10,r9
80002a1c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002a1e:	58 0c       	cp.w	r12,0
80002a20:	5e 0c       	reteq	r12
80002a22:	48 f8       	lddpc	r8,80002a5c <LED_Off+0x50>
80002a24:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002a26:	18 9a       	mov	r10,r12
80002a28:	5c 9a       	brev	r10
80002a2a:	f4 0a 12 00 	clz	r10,r10
80002a2e:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002a30:	f4 09 15 04 	lsl	r9,r10,0x4
80002a34:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002a36:	70 09       	ld.w	r9,r8[0x0]
80002a38:	a9 69       	lsl	r9,0x8
80002a3a:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002a3e:	70 1b       	ld.w	r11,r8[0x4]
80002a40:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002a44:	70 1b       	ld.w	r11,r8[0x4]
80002a46:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002a4a:	70 1b       	ld.w	r11,r8[0x4]
80002a4c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002a4e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002a52:	ce a1       	brne	80002a26 <LED_Off+0x1a>
80002a54:	5e fc       	retal	r12
80002a56:	00 00       	add	r0,r0
80002a58:	00 00       	add	r0,r0
80002a5a:	00 08       	add	r8,r0
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	92 ac       	ld.uh	r12,r9[0x4]

80002a60 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002a60:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002a62:	30 2b       	mov	r11,2
80002a64:	fe 7c 28 00 	mov	r12,-55296
80002a68:	f0 1f 00 02 	mcall	80002a70 <dip204_select+0x10>
}
80002a6c:	d8 02       	popm	pc
80002a6e:	00 00       	add	r0,r0
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	32 0e       	mov	lr,32

80002a74 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002a74:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002a78:	f8 c8 ff f8 	sub	r8,r12,-8
80002a7c:	30 69       	mov	r9,6
80002a7e:	f2 08 18 00 	cp.b	r8,r9
80002a82:	e0 8b 00 0f 	brhi	80002aa0 <dip204_write_byte+0x2c>
80002a86:	30 19       	mov	r9,1
80002a88:	f2 08 09 48 	lsl	r8,r9,r8
80002a8c:	e2 18 00 55 	andl	r8,0x55,COH
80002a90:	c0 80       	breq	80002aa0 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002a92:	18 9b       	mov	r11,r12
80002a94:	fe 7c 28 00 	mov	r12,-55296
80002a98:	f0 1f 00 0c 	mcall	80002ac8 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002a9c:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002aa0:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002aa2:	f8 07 16 18 	lsr	r7,r12,0x18
80002aa6:	0e 9b       	mov	r11,r7
80002aa8:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002aac:	fe 7c 28 00 	mov	r12,-55296
80002ab0:	f0 1f 00 06 	mcall	80002ac8 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002ab4:	ee 0b 15 04 	lsl	r11,r7,0x4
80002ab8:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002abc:	fe 7c 28 00 	mov	r12,-55296
80002ac0:	f0 1f 00 02 	mcall	80002ac8 <dip204_write_byte+0x54>
80002ac4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ac8:	80 00       	ld.sh	r0,r0[0x0]
80002aca:	33 3e       	mov	lr,51

80002acc <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002acc:	eb cd 40 c0 	pushm	r6-r7,lr
80002ad0:	20 1d       	sub	sp,4
80002ad2:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002ad4:	fa c7 ff fc 	sub	r7,sp,-4
80002ad8:	30 08       	mov	r8,0
80002ada:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002adc:	30 0b       	mov	r11,0
80002ade:	fe 7c 28 00 	mov	r12,-55296
80002ae2:	f0 1f 00 08 	mcall	80002b00 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002ae6:	0e 9b       	mov	r11,r7
80002ae8:	fe 7c 28 00 	mov	r12,-55296
80002aec:	f0 1f 00 06 	mcall	80002b04 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002af0:	1b b8       	ld.ub	r8,sp[0x3]
80002af2:	5c 98       	brev	r8
80002af4:	b9 88       	lsr	r8,0x18
80002af6:	ac 88       	st.b	r6[0x0],r8
}
80002af8:	2f fd       	sub	sp,-4
80002afa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002afe:	00 00       	add	r0,r0
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	33 3e       	mov	lr,51
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	33 62       	mov	r2,54

80002b08 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002b08:	eb cd 40 c0 	pushm	r6-r7,lr
80002b0c:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002b0e:	fa c7 ff fc 	sub	r7,sp,-4
80002b12:	30 08       	mov	r8,0
80002b14:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002b16:	e0 6c 00 fc 	mov	r12,252
80002b1a:	f0 1f 00 07 	mcall	80002b34 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002b1e:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002b20:	0e 9c       	mov	r12,r7
80002b22:	f0 1f 00 06 	mcall	80002b38 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002b26:	1b b8       	ld.ub	r8,sp[0x3]
80002b28:	ec 08 18 00 	cp.b	r8,r6
80002b2c:	cf a5       	brlt	80002b20 <dip204_wait_busy+0x18>
}
80002b2e:	2f fd       	sub	sp,-4
80002b30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	2a 74       	sub	r4,-89
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	2a cc       	sub	r12,-84

80002b3c <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002b3c:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002b3e:	30 2b       	mov	r11,2
80002b40:	fe 7c 28 00 	mov	r12,-55296
80002b44:	f0 1f 00 02 	mcall	80002b4c <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002b48:	d8 02       	popm	pc
80002b4a:	00 00       	add	r0,r0
80002b4c:	80 00       	ld.sh	r0,r0[0x0]
80002b4e:	32 5a       	mov	r10,37

80002b50 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002b50:	d4 21       	pushm	r4-r7,lr
80002b52:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002b54:	fa ca ff d4 	sub	r10,sp,-44
80002b58:	18 9b       	mov	r11,r12
80002b5a:	1a 9c       	mov	r12,sp
80002b5c:	f0 1f 00 1e 	mcall	80002bd4 <dip204_printf_string+0x84>
80002b60:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002b62:	31 38       	mov	r8,19
80002b64:	f0 0c 18 00 	cp.b	r12,r8
80002b68:	e0 8b 00 0e 	brhi	80002b84 <dip204_printf_string+0x34>
80002b6c:	30 0a       	mov	r10,0
80002b6e:	31 49       	mov	r9,20
80002b70:	fa c8 ff e8 	sub	r8,sp,-24
80002b74:	18 08       	add	r8,r12
80002b76:	f1 6a ff e8 	st.b	r8[-24],r10
80002b7a:	2f fc       	sub	r12,-1
80002b7c:	5c 5c       	castu.b	r12
80002b7e:	f2 0c 18 00 	cp.b	r12,r9
80002b82:	cf 71       	brne	80002b70 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002b84:	f0 1f 00 15 	mcall	80002bd8 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002b88:	30 08       	mov	r8,0
80002b8a:	1b 89       	ld.ub	r9,sp[0x0]
80002b8c:	f0 09 18 00 	cp.b	r9,r8
80002b90:	c1 e0       	breq	80002bcc <dip204_printf_string+0x7c>
80002b92:	30 06       	mov	r6,0
80002b94:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002b96:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002b9a:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002b9c:	08 9c       	mov	r12,r4
80002b9e:	f0 1f 00 10 	mcall	80002bdc <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002ba2:	fa c8 ff e8 	sub	r8,sp,-24
80002ba6:	f0 06 00 06 	add	r6,r8,r6
80002baa:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002bae:	f0 1f 00 0c 	mcall	80002bdc <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002bb2:	2f f7       	sub	r7,-1
80002bb4:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002bb6:	f0 1f 00 0b 	mcall	80002be0 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002bba:	0e 96       	mov	r6,r7
80002bbc:	fa c8 ff e8 	sub	r8,sp,-24
80002bc0:	0e 08       	add	r8,r7
80002bc2:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002bc6:	ea 08 18 00 	cp.b	r8,r5
80002bca:	ce 91       	brne	80002b9c <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002bcc:	f0 1f 00 06 	mcall	80002be4 <dip204_printf_string+0x94>
}
80002bd0:	2f ad       	sub	sp,-24
80002bd2:	d8 22       	popm	r4-r7,pc
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	38 6c       	mov	r12,-122
80002bd8:	80 00       	ld.sh	r0,r0[0x0]
80002bda:	2a 60       	sub	r0,-90
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	2a 74       	sub	r4,-89
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	2b 08       	sub	r8,-80
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	2b 3c       	sub	r12,-77

80002be8 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002be8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bec:	18 96       	mov	r6,r12
80002bee:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002bf0:	f0 1f 00 11 	mcall	80002c34 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002bf4:	31 48       	mov	r8,20
80002bf6:	f0 06 18 00 	cp.b	r6,r8
80002bfa:	5f 89       	srls	r9
80002bfc:	30 48       	mov	r8,4
80002bfe:	f0 07 18 00 	cp.b	r7,r8
80002c02:	5f 88       	srls	r8
80002c04:	f3 e8 00 08 	and	r8,r9,r8
80002c08:	c0 31       	brne	80002c0e <dip204_set_cursor_position+0x26>
80002c0a:	30 06       	mov	r6,0
80002c0c:	c0 68       	rjmp	80002c18 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002c0e:	28 16       	sub	r6,-127
80002c10:	20 17       	sub	r7,1
80002c12:	a5 77       	lsl	r7,0x5
80002c14:	0e 06       	add	r6,r7
80002c16:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c18:	e0 6c 00 f8 	mov	r12,248
80002c1c:	f0 1f 00 07 	mcall	80002c38 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002c20:	0c 9c       	mov	r12,r6
80002c22:	f0 1f 00 06 	mcall	80002c38 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002c26:	f0 1f 00 06 	mcall	80002c3c <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002c2a:	f0 1f 00 06 	mcall	80002c40 <dip204_set_cursor_position+0x58>
}
80002c2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c32:	00 00       	add	r0,r0
80002c34:	80 00       	ld.sh	r0,r0[0x0]
80002c36:	2a 60       	sub	r0,-90
80002c38:	80 00       	ld.sh	r0,r0[0x0]
80002c3a:	2a 74       	sub	r4,-89
80002c3c:	80 00       	ld.sh	r0,r0[0x0]
80002c3e:	2b 08       	sub	r8,-80
80002c40:	80 00       	ld.sh	r0,r0[0x0]
80002c42:	2b 3c       	sub	r12,-77

80002c44 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002c44:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002c46:	f0 1f 00 08 	mcall	80002c64 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c4a:	e0 6c 00 f8 	mov	r12,248
80002c4e:	f0 1f 00 07 	mcall	80002c68 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002c52:	30 cc       	mov	r12,12
80002c54:	f0 1f 00 05 	mcall	80002c68 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002c58:	f0 1f 00 05 	mcall	80002c6c <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002c5c:	f0 1f 00 05 	mcall	80002c70 <dip204_hide_cursor+0x2c>
}
80002c60:	d8 02       	popm	pc
80002c62:	00 00       	add	r0,r0
80002c64:	80 00       	ld.sh	r0,r0[0x0]
80002c66:	2a 60       	sub	r0,-90
80002c68:	80 00       	ld.sh	r0,r0[0x0]
80002c6a:	2a 74       	sub	r4,-89
80002c6c:	80 00       	ld.sh	r0,r0[0x0]
80002c6e:	2b 08       	sub	r8,-80
80002c70:	80 00       	ld.sh	r0,r0[0x0]
80002c72:	2b 3c       	sub	r12,-77

80002c74 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002c74:	d4 01       	pushm	lr
  dip204_select();
80002c76:	f0 1f 00 13 	mcall	80002cc0 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c7a:	e0 6c 00 f8 	mov	r12,248
80002c7e:	f0 1f 00 12 	mcall	80002cc4 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002c82:	30 1c       	mov	r12,1
80002c84:	f0 1f 00 10 	mcall	80002cc4 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c88:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c8c:	e0 69 bb 80 	mov	r9,48000
80002c90:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c94:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c98:	14 38       	cp.w	r8,r10
80002c9a:	e0 88 00 08 	brls	80002caa <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c9e:	12 38       	cp.w	r8,r9
80002ca0:	fe 98 ff fa 	brls	80002c94 <dip204_clear_display+0x20>
80002ca4:	12 3a       	cp.w	r10,r9
80002ca6:	c0 73       	brcs	80002cb4 <dip204_clear_display+0x40>
80002ca8:	cf 6b       	rjmp	80002c94 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002caa:	12 38       	cp.w	r8,r9
80002cac:	e0 8b 00 04 	brhi	80002cb4 <dip204_clear_display+0x40>
80002cb0:	12 3a       	cp.w	r10,r9
80002cb2:	cf 12       	brcc	80002c94 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002cb4:	f0 1f 00 05 	mcall	80002cc8 <dip204_clear_display+0x54>
  dip204_unselect();
80002cb8:	f0 1f 00 05 	mcall	80002ccc <dip204_clear_display+0x58>
}
80002cbc:	d8 02       	popm	pc
80002cbe:	00 00       	add	r0,r0
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	2a 60       	sub	r0,-90
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	2a 74       	sub	r4,-89
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b 08       	sub	r8,-80
80002ccc:	80 00       	ld.sh	r0,r0[0x0]
80002cce:	2b 3c       	sub	r12,-77

80002cd0 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002cd0:	eb cd 40 80 	pushm	r7,lr
80002cd4:	20 4d       	sub	sp,16
80002cd6:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002cd8:	58 1c       	cp.w	r12,1
80002cda:	c3 01       	brne	80002d3a <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002cdc:	30 69       	mov	r9,6
80002cde:	4f a8       	lddpc	r8,80002ec4 <dip204_init+0x1f4>
80002ce0:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002ce2:	30 2b       	mov	r11,2
80002ce4:	33 2c       	mov	r12,50
80002ce6:	f0 1f 00 79 	mcall	80002ec8 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80002cea:	30 08       	mov	r8,0
80002cec:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002cee:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002cf0:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002cf2:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002cf4:	1a 9c       	mov	r12,sp
80002cf6:	f0 1f 00 76 	mcall	80002ecc <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002cfa:	58 07       	cp.w	r7,0
80002cfc:	f9 b7 01 31 	movne	r7,49
80002d00:	f9 b7 00 01 	moveq	r7,1
80002d04:	4f 38       	lddpc	r8,80002ed0 <dip204_init+0x200>
80002d06:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002d08:	4f 3b       	lddpc	r11,80002ed4 <dip204_init+0x204>
80002d0a:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002d0c:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002d10:	ab a8       	sbr	r8,0xa
80002d12:	30 89       	mov	r9,8
80002d14:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002d18:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80002d1a:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002d1c:	33 28       	mov	r8,50
80002d1e:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002d20:	30 08       	mov	r8,0
80002d22:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002d24:	4e 87       	lddpc	r7,80002ec4 <dip204_init+0x1f4>
80002d26:	6e 0c       	ld.w	r12,r7[0x0]
80002d28:	f0 1f 00 6c 	mcall	80002ed8 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002d2c:	6e 08       	ld.w	r8,r7[0x0]
80002d2e:	30 1c       	mov	r12,1
80002d30:	f8 08 09 4c 	lsl	r12,r12,r8
80002d34:	f0 1f 00 6a 	mcall	80002edc <dip204_init+0x20c>
80002d38:	c0 a8       	rjmp	80002d4c <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
80002d3a:	58 0b       	cp.w	r11,0
80002d3c:	c0 50       	breq	80002d46 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80002d3e:	33 2c       	mov	r12,50
80002d40:	f0 1f 00 68 	mcall	80002ee0 <dip204_init+0x210>
80002d44:	c0 48       	rjmp	80002d4c <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002d46:	33 2c       	mov	r12,50
80002d48:	f0 1f 00 67 	mcall	80002ee4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d4c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d50:	e2 79 a9 80 	mov	r9,240000
80002d54:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d58:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d5c:	14 38       	cp.w	r8,r10
80002d5e:	e0 88 00 08 	brls	80002d6e <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d62:	12 38       	cp.w	r8,r9
80002d64:	fe 98 ff fa 	brls	80002d58 <dip204_init+0x88>
80002d68:	12 3a       	cp.w	r10,r9
80002d6a:	c6 e3       	brcs	80002e46 <dip204_init+0x176>
80002d6c:	cf 6b       	rjmp	80002d58 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d6e:	12 38       	cp.w	r8,r9
80002d70:	e0 8b 00 6b 	brhi	80002e46 <dip204_init+0x176>
80002d74:	12 3a       	cp.w	r10,r9
80002d76:	c6 83       	brcs	80002e46 <dip204_init+0x176>
80002d78:	cf 0b       	rjmp	80002d58 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d7a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d7e:	14 38       	cp.w	r8,r10
80002d80:	e0 88 00 08 	brls	80002d90 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d84:	12 38       	cp.w	r8,r9
80002d86:	fe 98 ff fa 	brls	80002d7a <dip204_init+0xaa>
80002d8a:	12 3a       	cp.w	r10,r9
80002d8c:	c6 b3       	brcs	80002e62 <dip204_init+0x192>
80002d8e:	cf 6b       	rjmp	80002d7a <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d90:	12 38       	cp.w	r8,r9
80002d92:	e0 8b 00 68 	brhi	80002e62 <dip204_init+0x192>
80002d96:	12 3a       	cp.w	r10,r9
80002d98:	c6 53       	brcs	80002e62 <dip204_init+0x192>
80002d9a:	cf 0b       	rjmp	80002d7a <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d9c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002da0:	14 38       	cp.w	r8,r10
80002da2:	e0 88 00 08 	brls	80002db2 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002da6:	12 38       	cp.w	r8,r9
80002da8:	fe 98 ff fa 	brls	80002d9c <dip204_init+0xcc>
80002dac:	12 3a       	cp.w	r10,r9
80002dae:	c6 23       	brcs	80002e72 <dip204_init+0x1a2>
80002db0:	cf 6b       	rjmp	80002d9c <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002db2:	12 38       	cp.w	r8,r9
80002db4:	e0 8b 00 5f 	brhi	80002e72 <dip204_init+0x1a2>
80002db8:	12 3a       	cp.w	r10,r9
80002dba:	c5 c3       	brcs	80002e72 <dip204_init+0x1a2>
80002dbc:	cf 0b       	rjmp	80002d9c <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002dbe:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002dc2:	14 38       	cp.w	r8,r10
80002dc4:	e0 88 00 08 	brls	80002dd4 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002dc8:	12 38       	cp.w	r8,r9
80002dca:	fe 98 ff fa 	brls	80002dbe <dip204_init+0xee>
80002dce:	12 3a       	cp.w	r10,r9
80002dd0:	c5 93       	brcs	80002e82 <dip204_init+0x1b2>
80002dd2:	cf 6b       	rjmp	80002dbe <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dd4:	12 38       	cp.w	r8,r9
80002dd6:	e0 8b 00 56 	brhi	80002e82 <dip204_init+0x1b2>
80002dda:	12 3a       	cp.w	r10,r9
80002ddc:	c5 33       	brcs	80002e82 <dip204_init+0x1b2>
80002dde:	cf 0b       	rjmp	80002dbe <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002de0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002de4:	14 38       	cp.w	r8,r10
80002de6:	e0 88 00 08 	brls	80002df6 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002dea:	12 38       	cp.w	r8,r9
80002dec:	fe 98 ff fa 	brls	80002de0 <dip204_init+0x110>
80002df0:	12 3a       	cp.w	r10,r9
80002df2:	c5 03       	brcs	80002e92 <dip204_init+0x1c2>
80002df4:	cf 6b       	rjmp	80002de0 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002df6:	12 38       	cp.w	r8,r9
80002df8:	e0 8b 00 4d 	brhi	80002e92 <dip204_init+0x1c2>
80002dfc:	12 3a       	cp.w	r10,r9
80002dfe:	c4 a3       	brcs	80002e92 <dip204_init+0x1c2>
80002e00:	cf 0b       	rjmp	80002de0 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e02:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e06:	14 38       	cp.w	r8,r10
80002e08:	e0 88 00 08 	brls	80002e18 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e0c:	12 38       	cp.w	r8,r9
80002e0e:	fe 98 ff fa 	brls	80002e02 <dip204_init+0x132>
80002e12:	12 3a       	cp.w	r10,r9
80002e14:	c4 93       	brcs	80002ea6 <dip204_init+0x1d6>
80002e16:	cf 6b       	rjmp	80002e02 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e18:	12 38       	cp.w	r8,r9
80002e1a:	e0 8b 00 46 	brhi	80002ea6 <dip204_init+0x1d6>
80002e1e:	12 3a       	cp.w	r10,r9
80002e20:	c4 33       	brcs	80002ea6 <dip204_init+0x1d6>
80002e22:	cf 0b       	rjmp	80002e02 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e24:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e28:	14 38       	cp.w	r8,r10
80002e2a:	e0 88 00 08 	brls	80002e3a <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e2e:	12 38       	cp.w	r8,r9
80002e30:	fe 98 ff fa 	brls	80002e24 <dip204_init+0x154>
80002e34:	12 3a       	cp.w	r10,r9
80002e36:	c4 03       	brcs	80002eb6 <dip204_init+0x1e6>
80002e38:	cf 6b       	rjmp	80002e24 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e3a:	12 38       	cp.w	r8,r9
80002e3c:	e0 8b 00 3d 	brhi	80002eb6 <dip204_init+0x1e6>
80002e40:	12 3a       	cp.w	r10,r9
80002e42:	c3 a3       	brcs	80002eb6 <dip204_init+0x1e6>
80002e44:	cf 0b       	rjmp	80002e24 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002e46:	f0 1f 00 29 	mcall	80002ee8 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002e4a:	e0 6c 00 f8 	mov	r12,248
80002e4e:	f0 1f 00 28 	mcall	80002eec <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002e52:	33 4c       	mov	r12,52
80002e54:	f0 1f 00 26 	mcall	80002eec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e58:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e5c:	f0 ca d1 20 	sub	r10,r8,-12000
80002e60:	c8 db       	rjmp	80002d7a <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002e62:	30 9c       	mov	r12,9
80002e64:	f0 1f 00 22 	mcall	80002eec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e68:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e6c:	f0 ca d1 20 	sub	r10,r8,-12000
80002e70:	c9 6b       	rjmp	80002d9c <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002e72:	33 0c       	mov	r12,48
80002e74:	f0 1f 00 1e 	mcall	80002eec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e78:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e7c:	f0 ca d1 20 	sub	r10,r8,-12000
80002e80:	c9 fb       	rjmp	80002dbe <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002e82:	30 fc       	mov	r12,15
80002e84:	f0 1f 00 1a 	mcall	80002eec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e88:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e8c:	f0 ca d1 20 	sub	r10,r8,-12000
80002e90:	ca 8b       	rjmp	80002de0 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002e92:	30 1c       	mov	r12,1
80002e94:	f0 1f 00 16 	mcall	80002eec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e98:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e9c:	e0 69 ea 60 	mov	r9,60000
80002ea0:	f0 09 00 0a 	add	r10,r8,r9
80002ea4:	ca fb       	rjmp	80002e02 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002ea6:	30 6c       	mov	r12,6
80002ea8:	f0 1f 00 11 	mcall	80002eec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002eac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002eb0:	f0 ca d1 20 	sub	r10,r8,-12000
80002eb4:	cb 8b       	rjmp	80002e24 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002eb6:	f0 1f 00 0f 	mcall	80002ef0 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
80002eba:	f0 1f 00 0f 	mcall	80002ef4 <dip204_init+0x224>
}
80002ebe:	2f cd       	sub	sp,-16
80002ec0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ec4:	00 00       	add	r0,r0
80002ec6:	00 0c       	add	r12,r0
80002ec8:	80 00       	ld.sh	r0,r0[0x0]
80002eca:	2e f8       	sub	r8,-17
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	31 44       	mov	r4,20
80002ed0:	00 00       	add	r0,r0
80002ed2:	05 38       	ld.ub	r8,r2++
80002ed4:	00 00       	add	r0,r0
80002ed6:	05 18       	ld.sh	r8,r2++
80002ed8:	80 00       	ld.sh	r0,r0[0x0]
80002eda:	30 fc       	mov	r12,15
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	31 32       	mov	r2,19
80002ee0:	80 00       	ld.sh	r0,r0[0x0]
80002ee2:	2f 98       	sub	r8,-7
80002ee4:	80 00       	ld.sh	r0,r0[0x0]
80002ee6:	2f 7c       	sub	r12,-9
80002ee8:	80 00       	ld.sh	r0,r0[0x0]
80002eea:	2a 60       	sub	r0,-90
80002eec:	80 00       	ld.sh	r0,r0[0x0]
80002eee:	2a 74       	sub	r4,-89
80002ef0:	80 00       	ld.sh	r0,r0[0x0]
80002ef2:	2b 08       	sub	r8,-80
80002ef4:	80 00       	ld.sh	r0,r0[0x0]
80002ef6:	2b 3c       	sub	r12,-77

80002ef8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002ef8:	f8 08 16 05 	lsr	r8,r12,0x5
80002efc:	a9 68       	lsl	r8,0x8
80002efe:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002f02:	58 1b       	cp.w	r11,1
80002f04:	c0 d0       	breq	80002f1e <gpio_enable_module_pin+0x26>
80002f06:	c0 63       	brcs	80002f12 <gpio_enable_module_pin+0x1a>
80002f08:	58 2b       	cp.w	r11,2
80002f0a:	c1 00       	breq	80002f2a <gpio_enable_module_pin+0x32>
80002f0c:	58 3b       	cp.w	r11,3
80002f0e:	c1 40       	breq	80002f36 <gpio_enable_module_pin+0x3e>
80002f10:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f12:	30 19       	mov	r9,1
80002f14:	f2 0c 09 49 	lsl	r9,r9,r12
80002f18:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f1a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002f1c:	c1 28       	rjmp	80002f40 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f1e:	30 19       	mov	r9,1
80002f20:	f2 0c 09 49 	lsl	r9,r9,r12
80002f24:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f26:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002f28:	c0 c8       	rjmp	80002f40 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f2a:	30 19       	mov	r9,1
80002f2c:	f2 0c 09 49 	lsl	r9,r9,r12
80002f30:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f32:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002f34:	c0 68       	rjmp	80002f40 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f36:	30 19       	mov	r9,1
80002f38:	f2 0c 09 49 	lsl	r9,r9,r12
80002f3c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f3e:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002f40:	30 19       	mov	r9,1
80002f42:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f46:	91 2c       	st.w	r8[0x8],r12
80002f48:	5e fd       	retal	0
80002f4a:	d7 03       	nop

80002f4c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002f4c:	d4 21       	pushm	r4-r7,lr
80002f4e:	18 97       	mov	r7,r12
80002f50:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002f52:	58 0b       	cp.w	r11,0
80002f54:	c0 31       	brne	80002f5a <gpio_enable_module+0xe>
80002f56:	30 05       	mov	r5,0
80002f58:	c0 d8       	rjmp	80002f72 <gpio_enable_module+0x26>
80002f5a:	30 06       	mov	r6,0
80002f5c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002f5e:	6e 1b       	ld.w	r11,r7[0x4]
80002f60:	6e 0c       	ld.w	r12,r7[0x0]
80002f62:	f0 1f 00 06 	mcall	80002f78 <gpio_enable_module+0x2c>
80002f66:	18 45       	or	r5,r12
		gpiomap++;
80002f68:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002f6a:	2f f6       	sub	r6,-1
80002f6c:	0c 34       	cp.w	r4,r6
80002f6e:	fe 9b ff f8 	brhi	80002f5e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002f72:	0a 9c       	mov	r12,r5
80002f74:	d8 22       	popm	r4-r7,pc
80002f76:	00 00       	add	r0,r0
80002f78:	80 00       	ld.sh	r0,r0[0x0]
80002f7a:	2e f8       	sub	r8,-17

80002f7c <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f7c:	f8 08 16 05 	lsr	r8,r12,0x5
80002f80:	a9 68       	lsl	r8,0x8
80002f82:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002f86:	30 19       	mov	r9,1
80002f88:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f8c:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002f90:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002f94:	91 1c       	st.w	r8[0x4],r12
}
80002f96:	5e fc       	retal	r12

80002f98 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f98:	f8 08 16 05 	lsr	r8,r12,0x5
80002f9c:	a9 68       	lsl	r8,0x8
80002f9e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002fa2:	30 19       	mov	r9,1
80002fa4:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fa8:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002fac:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002fb0:	91 1c       	st.w	r8[0x4],r12
}
80002fb2:	5e fc       	retal	r12

80002fb4 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002fb4:	c0 08       	rjmp	80002fb4 <_unhandled_interrupt>
80002fb6:	d7 03       	nop

80002fb8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002fb8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002fba:	49 18       	lddpc	r8,80002ffc <INTC_init_interrupts+0x44>
80002fbc:	e3 b8 00 01 	mtsr	0x4,r8
80002fc0:	49 0e       	lddpc	lr,80003000 <INTC_init_interrupts+0x48>
80002fc2:	30 07       	mov	r7,0
80002fc4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002fc6:	49 0c       	lddpc	r12,80003004 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002fc8:	49 05       	lddpc	r5,80003008 <INTC_init_interrupts+0x50>
80002fca:	10 15       	sub	r5,r8
80002fcc:	fe 76 08 00 	mov	r6,-63488
80002fd0:	c1 08       	rjmp	80002ff0 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002fd2:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002fd4:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002fd6:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002fd8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002fdc:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002fde:	10 3a       	cp.w	r10,r8
80002fe0:	fe 9b ff fc 	brhi	80002fd8 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002fe4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002fe8:	2f f7       	sub	r7,-1
80002fea:	2f 8e       	sub	lr,-8
80002fec:	59 47       	cp.w	r7,20
80002fee:	c0 50       	breq	80002ff8 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002ff0:	7c 08       	ld.w	r8,lr[0x0]
80002ff2:	58 08       	cp.w	r8,0
80002ff4:	ce f1       	brne	80002fd2 <INTC_init_interrupts+0x1a>
80002ff6:	cf 7b       	rjmp	80002fe4 <INTC_init_interrupts+0x2c>
80002ff8:	d8 22       	popm	r4-r7,pc
80002ffa:	00 00       	add	r0,r0
80002ffc:	80 00       	ld.sh	r0,r0[0x0]
80002ffe:	90 00       	ld.sh	r0,r8[0x0]
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	93 2c       	st.w	r9[0x8],r12
80003004:	80 00       	ld.sh	r0,r0[0x0]
80003006:	2f b4       	sub	r4,-5
80003008:	80 00       	ld.sh	r0,r0[0x0]
8000300a:	91 04       	st.w	r8[0x0],r4

8000300c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000300c:	fe 78 08 00 	mov	r8,-63488
80003010:	e0 69 00 83 	mov	r9,131
80003014:	f2 0c 01 0c 	sub	r12,r9,r12
80003018:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000301c:	f2 ca ff c0 	sub	r10,r9,-64
80003020:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003024:	58 08       	cp.w	r8,0
80003026:	c0 21       	brne	8000302a <_get_interrupt_handler+0x1e>
80003028:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000302a:	f0 08 12 00 	clz	r8,r8
8000302e:	48 5a       	lddpc	r10,80003040 <_get_interrupt_handler+0x34>
80003030:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003034:	f0 08 11 1f 	rsub	r8,r8,31
80003038:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000303a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000303e:	5e fc       	retal	r12
80003040:	80 00       	ld.sh	r0,r0[0x0]
80003042:	93 2c       	st.w	r9[0x8],r12

80003044 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003044:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80003046:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000304a:	99 a8       	st.w	r12[0x28],r8
}
8000304c:	5e fc       	retal	r12
8000304e:	d7 03       	nop

80003050 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80003050:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80003052:	ec 5b bb 9f 	cp.w	r11,899999
80003056:	e0 8b 00 04 	brhi	8000305e <pm_enable_osc0_crystal+0xe>
8000305a:	30 4b       	mov	r11,4
8000305c:	c1 38       	rjmp	80003082 <pm_enable_osc0_crystal+0x32>
8000305e:	e0 68 c6 bf 	mov	r8,50879
80003062:	ea 18 00 2d 	orh	r8,0x2d
80003066:	10 3b       	cp.w	r11,r8
80003068:	e0 8b 00 04 	brhi	80003070 <pm_enable_osc0_crystal+0x20>
8000306c:	30 5b       	mov	r11,5
8000306e:	c0 a8       	rjmp	80003082 <pm_enable_osc0_crystal+0x32>
80003070:	e0 68 12 00 	mov	r8,4608
80003074:	ea 18 00 7a 	orh	r8,0x7a
80003078:	10 3b       	cp.w	r11,r8
8000307a:	f9 bb 03 06 	movlo	r11,6
8000307e:	f9 bb 02 07 	movhs	r11,7
80003082:	f0 1f 00 02 	mcall	80003088 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80003086:	d8 02       	popm	pc
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	30 44       	mov	r4,4

8000308c <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000308c:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000308e:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003092:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80003094:	78 08       	ld.w	r8,r12[0x0]
80003096:	a3 a8       	sbr	r8,0x2
80003098:	99 08       	st.w	r12[0x0],r8
}
8000309a:	5e fc       	retal	r12

8000309c <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000309c:	79 58       	ld.w	r8,r12[0x54]
8000309e:	e2 18 00 80 	andl	r8,0x80,COH
800030a2:	cf d0       	breq	8000309c <pm_wait_for_clk0_ready>
}
800030a4:	5e fc       	retal	r12
800030a6:	d7 03       	nop

800030a8 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800030a8:	eb cd 40 80 	pushm	r7,lr
800030ac:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800030ae:	f0 1f 00 04 	mcall	800030bc <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800030b2:	0e 9c       	mov	r12,r7
800030b4:	f0 1f 00 03 	mcall	800030c0 <pm_enable_clk0+0x18>
}
800030b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	30 8c       	mov	r12,8
800030c0:	80 00       	ld.sh	r0,r0[0x0]
800030c2:	30 9c       	mov	r12,9

800030c4 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800030c4:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800030c6:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800030ca:	99 08       	st.w	r12[0x0],r8
}
800030cc:	5e fc       	retal	r12
800030ce:	d7 03       	nop

800030d0 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800030d0:	eb cd 40 c0 	pushm	r6-r7,lr
800030d4:	18 97       	mov	r7,r12
800030d6:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800030d8:	f0 1f 00 06 	mcall	800030f0 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800030dc:	0c 9b       	mov	r11,r6
800030de:	0e 9c       	mov	r12,r7
800030e0:	f0 1f 00 05 	mcall	800030f4 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800030e4:	30 1b       	mov	r11,1
800030e6:	0e 9c       	mov	r12,r7
800030e8:	f0 1f 00 04 	mcall	800030f8 <pm_switch_to_osc0+0x28>
}
800030ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	30 50       	mov	r0,5
800030f4:	80 00       	ld.sh	r0,r0[0x0]
800030f6:	30 a8       	mov	r8,10
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	30 c4       	mov	r4,12

800030fc <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
800030fc:	58 0b       	cp.w	r11,0
800030fe:	c1 90       	breq	80003130 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003100:	58 6c       	cp.w	r12,6
80003102:	e0 8b 00 17 	brhi	80003130 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003106:	76 0a       	ld.w	r10,r11[0x0]
80003108:	fe 78 30 00 	mov	r8,-53248
8000310c:	f8 c9 ff f0 	sub	r9,r12,-16
80003110:	a5 79       	lsl	r9,0x5
80003112:	f0 09 00 09 	add	r9,r8,r9
80003116:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003118:	76 19       	ld.w	r9,r11[0x4]
8000311a:	a5 7c       	lsl	r12,0x5
8000311c:	f0 0c 00 0c 	add	r12,r8,r12
80003120:	f8 c8 fd fc 	sub	r8,r12,-516
80003124:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003126:	76 28       	ld.w	r8,r11[0x8]
80003128:	f8 cc fd f8 	sub	r12,r12,-520
8000312c:	99 08       	st.w	r12[0x0],r8
8000312e:	5e fd       	retal	0

  return PWM_SUCCESS;
80003130:	5e ff       	retal	1

80003132 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003132:	18 98       	mov	r8,r12
80003134:	e0 18 ff 80 	andl	r8,0xff80
80003138:	c0 20       	breq	8000313c <pwm_start_channels+0xa>
8000313a:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000313c:	fe 78 30 00 	mov	r8,-53248
80003140:	91 1c       	st.w	r8[0x4],r12
80003142:	5e fd       	retal	0

80003144 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003144:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80003148:	58 0c       	cp.w	r12,0
8000314a:	c0 21       	brne	8000314e <pwm_init+0xa>
8000314c:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000314e:	e6 18 00 01 	andh	r8,0x1,COH
80003152:	c0 91       	brne	80003164 <pwm_init+0x20>
80003154:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003156:	fe 78 30 00 	mov	r8,-53248
8000315a:	37 f9       	mov	r9,127
8000315c:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000315e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003160:	d5 03       	csrf	0x10
80003162:	c0 68       	rjmp	8000316e <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003164:	fe 78 30 00 	mov	r8,-53248
80003168:	37 f9       	mov	r9,127
8000316a:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000316c:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000316e:	78 08       	ld.w	r8,r12[0x0]
80003170:	78 39       	ld.w	r9,r12[0xc]
80003172:	a9 69       	lsl	r9,0x8
80003174:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003178:	78 18       	ld.w	r8,r12[0x4]
8000317a:	10 49       	or	r9,r8
8000317c:	78 28       	ld.w	r8,r12[0x8]
8000317e:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80003182:	fe 78 30 00 	mov	r8,-53248
80003186:	91 09       	st.w	r8[0x0],r9
80003188:	5e fd       	retal	0

8000318a <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000318a:	f8 c8 00 01 	sub	r8,r12,1
8000318e:	f0 0b 00 0b 	add	r11,r8,r11
80003192:	f6 0c 0d 0a 	divu	r10,r11,r12
80003196:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80003198:	f4 c8 00 01 	sub	r8,r10,1
8000319c:	e0 48 00 fe 	cp.w	r8,254
800031a0:	e0 88 00 03 	brls	800031a6 <getBaudDiv+0x1c>
800031a4:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800031a6:	5c 8c       	casts.h	r12
}
800031a8:	5e fc       	retal	r12

800031aa <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800031aa:	f7 39 00 0d 	ld.ub	r9,r11[13]
800031ae:	30 18       	mov	r8,1
800031b0:	f0 09 18 00 	cp.b	r9,r8
800031b4:	e0 88 00 04 	brls	800031bc <spi_initMaster+0x12>
800031b8:	30 2c       	mov	r12,2
800031ba:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800031bc:	e0 68 00 80 	mov	r8,128
800031c0:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800031c2:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800031c4:	30 19       	mov	r9,1
800031c6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800031ca:	f7 39 00 0d 	ld.ub	r9,r11[13]
800031ce:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800031d2:	30 09       	mov	r9,0
800031d4:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800031d8:	30 fa       	mov	r10,15
800031da:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800031de:	99 18       	st.w	r12[0x4],r8
800031e0:	5e f9       	retal	r9

800031e2 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800031e2:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800031e4:	30 18       	mov	r8,1
800031e6:	f0 0b 18 00 	cp.b	r11,r8
800031ea:	5f be       	srhi	lr
800031ec:	f0 0a 18 00 	cp.b	r10,r8
800031f0:	5f b8       	srhi	r8
800031f2:	fd e8 10 08 	or	r8,lr,r8
800031f6:	c0 30       	breq	800031fc <spi_selectionMode+0x1a>
800031f8:	30 2c       	mov	r12,2
800031fa:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800031fc:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800031fe:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003202:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003206:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000320a:	99 18       	st.w	r12[0x4],r8
8000320c:	d8 0a       	popm	pc,r12=0

8000320e <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000320e:	78 18       	ld.w	r8,r12[0x4]
80003210:	ea 18 00 0f 	orh	r8,0xf
80003214:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003216:	78 18       	ld.w	r8,r12[0x4]
80003218:	e2 18 00 04 	andl	r8,0x4,COH
8000321c:	c0 f0       	breq	8000323a <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000321e:	30 e8       	mov	r8,14
80003220:	f0 0b 18 00 	cp.b	r11,r8
80003224:	e0 8b 00 19 	brhi	80003256 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003228:	78 18       	ld.w	r8,r12[0x4]
8000322a:	b1 6b       	lsl	r11,0x10
8000322c:	ea 1b ff f0 	orh	r11,0xfff0
80003230:	e8 1b ff ff 	orl	r11,0xffff
80003234:	10 6b       	and	r11,r8
80003236:	99 1b       	st.w	r12[0x4],r11
80003238:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000323a:	30 38       	mov	r8,3
8000323c:	f0 0b 18 00 	cp.b	r11,r8
80003240:	e0 8b 00 0b 	brhi	80003256 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003244:	78 18       	ld.w	r8,r12[0x4]
80003246:	2f 0b       	sub	r11,-16
80003248:	30 19       	mov	r9,1
8000324a:	f2 0b 09 4b 	lsl	r11,r9,r11
8000324e:	5c db       	com	r11
80003250:	10 6b       	and	r11,r8
80003252:	99 1b       	st.w	r12[0x4],r11
80003254:	5e fd       	retal	0
80003256:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80003258:	5e fc       	retal	r12

8000325a <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000325a:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000325e:	c0 58       	rjmp	80003268 <spi_unselectChip+0xe>
		if (!timeout--) {
80003260:	58 08       	cp.w	r8,0
80003262:	c0 21       	brne	80003266 <spi_unselectChip+0xc>
80003264:	5e ff       	retal	1
80003266:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003268:	78 49       	ld.w	r9,r12[0x10]
8000326a:	e2 19 02 00 	andl	r9,0x200,COH
8000326e:	cf 90       	breq	80003260 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003270:	78 18       	ld.w	r8,r12[0x4]
80003272:	ea 18 00 0f 	orh	r8,0xf
80003276:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003278:	fc 18 01 00 	movh	r8,0x100
8000327c:	99 08       	st.w	r12[0x0],r8
8000327e:	5e fd       	retal	0

80003280 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003280:	eb cd 40 f8 	pushm	r3-r7,lr
80003284:	18 95       	mov	r5,r12
80003286:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003288:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000328c:	30 38       	mov	r8,3
8000328e:	f0 06 18 00 	cp.b	r6,r8
80003292:	e0 8b 00 4d 	brhi	8000332c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003296:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000329a:	30 18       	mov	r8,1
8000329c:	f0 04 18 00 	cp.b	r4,r8
800032a0:	e0 8b 00 46 	brhi	8000332c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800032a4:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032a8:	30 78       	mov	r8,7
800032aa:	f0 03 18 00 	cp.b	r3,r8
800032ae:	e0 88 00 3f 	brls	8000332c <spi_setupChipReg+0xac>
800032b2:	31 08       	mov	r8,16
800032b4:	f0 03 18 00 	cp.b	r3,r8
800032b8:	e0 8b 00 3a 	brhi	8000332c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800032bc:	14 9b       	mov	r11,r10
800032be:	6e 1c       	ld.w	r12,r7[0x4]
800032c0:	f0 1f 00 1d 	mcall	80003334 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800032c4:	c3 45       	brlt	8000332c <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800032c6:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800032c8:	ec 09 16 01 	lsr	r9,r6,0x1
800032cc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800032d0:	ec 16 00 01 	eorl	r6,0x1
800032d4:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800032d8:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800032dc:	20 83       	sub	r3,8
800032de:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800032e2:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800032e6:	ef 39 00 09 	ld.ub	r9,r7[9]
800032ea:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800032ee:	ef 39 00 0a 	ld.ub	r9,r7[10]
800032f2:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800032f6:	0f 89       	ld.ub	r9,r7[0x0]
800032f8:	30 1a       	mov	r10,1
800032fa:	f4 09 18 00 	cp.b	r9,r10
800032fe:	c0 e0       	breq	8000331a <spi_setupChipReg+0x9a>
80003300:	c0 a3       	brcs	80003314 <spi_setupChipReg+0x94>
80003302:	30 2a       	mov	r10,2
80003304:	f4 09 18 00 	cp.b	r9,r10
80003308:	c0 c0       	breq	80003320 <spi_setupChipReg+0xa0>
8000330a:	30 3a       	mov	r10,3
8000330c:	f4 09 18 00 	cp.b	r9,r10
80003310:	c0 e1       	brne	8000332c <spi_setupChipReg+0xac>
80003312:	c0 a8       	rjmp	80003326 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003314:	8b c8       	st.w	r5[0x30],r8
80003316:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000331a:	8b d8       	st.w	r5[0x34],r8
8000331c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003320:	8b e8       	st.w	r5[0x38],r8
80003322:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003326:	8b f8       	st.w	r5[0x3c],r8
80003328:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
8000332c:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000332e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003332:	00 00       	add	r0,r0
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	31 8a       	mov	r10,24

80003338 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003338:	30 18       	mov	r8,1
8000333a:	99 08       	st.w	r12[0x0],r8
}
8000333c:	5e fc       	retal	r12

8000333e <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000333e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003342:	c0 58       	rjmp	8000334c <spi_write+0xe>
		if (!timeout--) {
80003344:	58 08       	cp.w	r8,0
80003346:	c0 21       	brne	8000334a <spi_write+0xc>
80003348:	5e ff       	retal	1
8000334a:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000334c:	78 49       	ld.w	r9,r12[0x10]
8000334e:	e2 19 00 02 	andl	r9,0x2,COH
80003352:	cf 90       	breq	80003344 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003354:	5c 7b       	castu.h	r11
80003356:	99 3b       	st.w	r12[0xc],r11
80003358:	5e fd       	retal	0

8000335a <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
8000335a:	78 4c       	ld.w	r12,r12[0x10]
}
8000335c:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003360:	5e fc       	retal	r12

80003362 <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003362:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003366:	c0 58       	rjmp	80003370 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003368:	58 08       	cp.w	r8,0
8000336a:	c0 21       	brne	8000336e <spi_read+0xc>
8000336c:	5e ff       	retal	1
8000336e:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003370:	78 49       	ld.w	r9,r12[0x10]
80003372:	e2 19 02 01 	andl	r9,0x201,COH
80003376:	e0 49 02 01 	cp.w	r9,513
8000337a:	cf 71       	brne	80003368 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000337c:	78 28       	ld.w	r8,r12[0x8]
8000337e:	b6 08       	st.h	r11[0x0],r8
80003380:	5e fd       	retal	0
80003382:	d7 03       	nop

80003384 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003384:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003388:	fe c0 a3 88 	sub	r0,pc,-23672

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000338c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003390:	d5 53       	csrf	0x15
  cp      r0, r1
80003392:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003394:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003398:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000339a:	c0 72       	brcc	800033a8 <idata_load_loop_end>
  cp      r0, r1
8000339c:	fe c2 9a 44 	sub	r2,pc,-26044

800033a0 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800033a0:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800033a2:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800033a4:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800033a6:	cf d3       	brcs	800033a0 <idata_load_loop>

800033a8 <idata_load_loop_end>:
  mov     r2, 0
800033a8:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800033ac:	e0 61 06 78 	mov	r1,1656
  cp      r0, r1
  brlo    udata_clear_loop
800033b0:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800033b2:	c0 62       	brcc	800033be <udata_clear_loop_end>
800033b4:	30 02       	mov	r2,0
800033b6:	30 03       	mov	r3,0

800033b8 <udata_clear_loop>:
800033b8:	a1 22       	st.d	r0++,r2
800033ba:	02 30       	cp.w	r0,r1
800033bc:	cf e3       	brcs	800033b8 <udata_clear_loop>

800033be <udata_clear_loop_end>:
800033be:	fe cf 0b b2 	sub	pc,pc,2994
800033c2:	d7 03       	nop

800033c4 <sysclk_init>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800033c4:	5e fc       	retal	r12
800033c6:	d7 03       	nop

800033c8 <__avr32_f32_div>:
800033c8:	f7 ec 20 08 	eor	r8,r11,r12
800033cc:	a1 7c       	lsl	r12,0x1
800033ce:	a1 7b       	lsl	r11,0x1
800033d0:	c7 a0       	breq	800034c4 <__divsf_return_op1+0x16>
800033d2:	18 7c       	tst	r12,r12
800033d4:	f9 b9 00 00 	moveq	r9,0
800033d8:	c0 90       	breq	800033ea <__avr32_f32_div+0x22>
800033da:	f8 09 16 18 	lsr	r9,r12,0x18
800033de:	c7 e0       	breq	800034da <__divsf_return_op1+0x2c>
800033e0:	e0 49 00 ff 	cp.w	r9,255
800033e4:	c6 82       	brcc	800034b4 <__divsf_return_op1+0x6>
800033e6:	a7 7c       	lsl	r12,0x7
800033e8:	bf bc       	sbr	r12,0x1f
800033ea:	f6 0a 16 18 	lsr	r10,r11,0x18
800033ee:	c7 e0       	breq	800034ea <__divsf_return_op1+0x3c>
800033f0:	e0 4a 00 ff 	cp.w	r10,255
800033f4:	c6 62       	brcc	800034c0 <__divsf_return_op1+0x12>
800033f6:	a7 7b       	lsl	r11,0x7
800033f8:	bf bb       	sbr	r11,0x1f
800033fa:	58 09       	cp.w	r9,0
800033fc:	f5 bc 00 00 	subfeq	r12,0
80003400:	5e 0d       	reteq	0
80003402:	1a d5       	st.w	--sp,r5
80003404:	bb 27       	st.d	--sp,r6
80003406:	14 19       	sub	r9,r10
80003408:	28 19       	sub	r9,-127
8000340a:	fc 1a 80 00 	movh	r10,0x8000
8000340e:	a3 8c       	lsr	r12,0x2
80003410:	f6 05 16 02 	lsr	r5,r11,0x2
80003414:	f4 0b 16 01 	lsr	r11,r10,0x1
80003418:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000341c:	5c d6       	com	r6
8000341e:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80003422:	f6 05 06 46 	mulu.d	r6,r11,r5
80003426:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000342a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000342e:	ee 0b 15 02 	lsl	r11,r7,0x2
80003432:	f6 05 06 46 	mulu.d	r6,r11,r5
80003436:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000343a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000343e:	ee 0b 15 02 	lsl	r11,r7,0x2
80003442:	f6 05 06 46 	mulu.d	r6,r11,r5
80003446:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000344a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000344e:	ee 0b 15 02 	lsl	r11,r7,0x2
80003452:	f6 05 06 46 	mulu.d	r6,r11,r5
80003456:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000345a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000345e:	ee 0b 15 02 	lsl	r11,r7,0x2
80003462:	f6 0c 06 46 	mulu.d	r6,r11,r12
80003466:	a5 8c       	lsr	r12,0x4
80003468:	ed b7 00 1c 	bld	r7,0x1c
8000346c:	c0 40       	breq	80003474 <__avr32_f32_div+0xac>
8000346e:	a1 77       	lsl	r7,0x1
80003470:	20 19       	sub	r9,1
80003472:	a1 7c       	lsl	r12,0x1
80003474:	58 09       	cp.w	r9,0
80003476:	e0 8a 00 42 	brle	800034fa <__avr32_f32_div_res_subnormal>
8000347a:	e0 17 ff e0 	andl	r7,0xffe0
8000347e:	e8 17 00 10 	orl	r7,0x10
80003482:	ea 07 06 4a 	mulu.d	r10,r5,r7
80003486:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000348a:	58 0a       	cp.w	r10,0

8000348c <__avr32_f32_div_round_subnormal>:
8000348c:	f8 0b 13 00 	cpc	r11,r12
80003490:	5f 3b       	srlo	r11
80003492:	ea 0b 17 00 	moveq	r11,r5
80003496:	ee 0c 16 05 	lsr	r12,r7,0x5
8000349a:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000349e:	bb 07       	ld.d	r6,sp++
800034a0:	1b 05       	ld.w	r5,sp++
800034a2:	ed b8 00 1f 	bld	r8,0x1f
800034a6:	ef bc 00 1f 	bst	r12,0x1f
800034aa:	16 0c       	add	r12,r11
800034ac:	5e fc       	retal	r12

800034ae <__divsf_return_op1>:
800034ae:	a1 78       	lsl	r8,0x1
800034b0:	5d 0c       	ror	r12
800034b2:	5e fc       	retal	r12
800034b4:	5e 1e       	retne	-1
800034b6:	fc 19 ff 00 	movh	r9,0xff00
800034ba:	12 3b       	cp.w	r11,r9
800034bc:	cf 93       	brcs	800034ae <__divsf_return_op1>
800034be:	5e fe       	retal	-1
800034c0:	5e 0d       	reteq	0
800034c2:	5e fe       	retal	-1
800034c4:	18 7c       	tst	r12,r12
800034c6:	5e 0e       	reteq	-1
800034c8:	f8 09 16 18 	lsr	r9,r12,0x18
800034cc:	c0 70       	breq	800034da <__divsf_return_op1+0x2c>
800034ce:	e0 49 00 ff 	cp.w	r9,255
800034d2:	cf 12       	brcc	800034b4 <__divsf_return_op1+0x6>
800034d4:	fc 1c ff 00 	movh	r12,0xff00
800034d8:	ce bb       	rjmp	800034ae <__divsf_return_op1>
800034da:	a7 7c       	lsl	r12,0x7
800034dc:	f8 09 12 00 	clz	r9,r12
800034e0:	f8 09 09 4c 	lsl	r12,r12,r9
800034e4:	f2 09 11 01 	rsub	r9,r9,1
800034e8:	c8 1b       	rjmp	800033ea <__avr32_f32_div+0x22>
800034ea:	a7 7b       	lsl	r11,0x7
800034ec:	f6 0a 12 00 	clz	r10,r11
800034f0:	f6 0a 09 4b 	lsl	r11,r11,r10
800034f4:	f4 0a 11 01 	rsub	r10,r10,1
800034f8:	c8 5b       	rjmp	80003402 <__avr32_f32_div+0x3a>

800034fa <__avr32_f32_div_res_subnormal>:
800034fa:	5c 39       	neg	r9
800034fc:	2f f9       	sub	r9,-1
800034fe:	f1 b9 04 a0 	satu	r9,0x5
80003502:	f2 0a 11 20 	rsub	r10,r9,32
80003506:	ee 09 0a 47 	lsr	r7,r7,r9
8000350a:	f8 0a 09 46 	lsl	r6,r12,r10
8000350e:	f8 09 0a 4c 	lsr	r12,r12,r9
80003512:	e0 17 ff e0 	andl	r7,0xffe0
80003516:	e8 17 00 10 	orl	r7,0x10
8000351a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000351e:	30 09       	mov	r9,0
80003520:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80003524:	0c 3a       	cp.w	r10,r6
80003526:	cb 3b       	rjmp	8000348c <__avr32_f32_div_round_subnormal>

80003528 <__avr32_f32_mul>:
80003528:	18 98       	mov	r8,r12
8000352a:	16 5c       	eor	r12,r11
8000352c:	e6 1c 80 00 	andh	r12,0x8000,COH
80003530:	bf d8       	cbr	r8,0x1f
80003532:	c6 60       	breq	800035fe <__avr32_f32_mul_op1_zero>
80003534:	bf db       	cbr	r11,0x1f
80003536:	f0 0b 0c 4a 	max	r10,r8,r11
8000353a:	f0 0b 0d 49 	min	r9,r8,r11
8000353e:	f4 08 15 08 	lsl	r8,r10,0x8
80003542:	bf b8       	sbr	r8,0x1f
80003544:	b7 9a       	lsr	r10,0x17
80003546:	e0 4a 00 ff 	cp.w	r10,255
8000354a:	c3 d0       	breq	800035c4 <__avr32_f32_mul_op1_nan_or_inf>
8000354c:	f2 0b 15 08 	lsl	r11,r9,0x8
80003550:	bf bb       	sbr	r11,0x1f
80003552:	b7 99       	lsr	r9,0x17
80003554:	c2 40       	breq	8000359c <__avr32_f32_mul_op2_subnormal>
80003556:	14 09       	add	r9,r10
80003558:	f0 0b 06 4a 	mulu.d	r10,r8,r11
8000355c:	f6 08 15 01 	lsl	r8,r11,0x1
80003560:	f0 0b 17 20 	movhs	r11,r8
80003564:	f7 b9 02 01 	subhs	r9,1
80003568:	a9 8a       	lsr	r10,0x8
8000356a:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000356e:	27 e9       	sub	r9,126
80003570:	e0 8a 00 39 	brle	800035e2 <__avr32_f32_mul_res_subnormal>
80003574:	e0 49 00 ff 	cp.w	r9,255
80003578:	c0 f4       	brge	80003596 <__avr32_f32_mul_round+0x14>
8000357a:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000357e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80003582 <__avr32_f32_mul_round>:
80003582:	fc 18 80 00 	movh	r8,0x8000
80003586:	ed bc 00 00 	bld	r12,0x0
8000358a:	f7 b8 01 ff 	subne	r8,-1
8000358e:	10 3a       	cp.w	r10,r8
80003590:	f7 bc 02 ff 	subhs	r12,-1
80003594:	5e fc       	retal	r12
80003596:	ea 1c 7f 80 	orh	r12,0x7f80
8000359a:	5e fc       	retal	r12

8000359c <__avr32_f32_mul_op2_subnormal>:
8000359c:	bf db       	cbr	r11,0x1f
8000359e:	f6 09 12 00 	clz	r9,r11
800035a2:	5e 3d       	retlo	0
800035a4:	20 89       	sub	r9,8
800035a6:	f6 09 09 4b 	lsl	r11,r11,r9
800035aa:	f2 09 11 01 	rsub	r9,r9,1
800035ae:	14 7a       	tst	r10,r10
800035b0:	cd 31       	brne	80003556 <__avr32_f32_mul+0x2e>
800035b2:	bf d8       	cbr	r8,0x1f
800035b4:	f6 0a 12 00 	clz	r10,r11
800035b8:	5e 3d       	retlo	0
800035ba:	f0 0a 09 48 	lsl	r8,r8,r10
800035be:	f4 0a 11 01 	rsub	r10,r10,1
800035c2:	cc ab       	rjmp	80003556 <__avr32_f32_mul+0x2e>

800035c4 <__avr32_f32_mul_op1_nan_or_inf>:
800035c4:	f0 0b 15 01 	lsl	r11,r8,0x1
800035c8:	5e 1e       	retne	-1
800035ca:	12 79       	tst	r9,r9
800035cc:	5e 0e       	reteq	-1
800035ce:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800035d2:	f2 0b 16 17 	lsr	r11,r9,0x17
800035d6:	e0 4b 00 ff 	cp.w	r11,255
800035da:	5e 1c       	retne	r12
800035dc:	a9 79       	lsl	r9,0x9
800035de:	5e 0c       	reteq	r12
800035e0:	5e fe       	retal	-1

800035e2 <__avr32_f32_mul_res_subnormal>:
800035e2:	f2 09 11 09 	rsub	r9,r9,9
800035e6:	f2 08 11 20 	rsub	r8,r9,32
800035ea:	5e 3d       	retlo	0
800035ec:	f6 09 0a 49 	lsr	r9,r11,r9
800035f0:	12 4c       	or	r12,r9
800035f2:	f6 08 09 4b 	lsl	r11,r11,r8
800035f6:	e4 1a 00 ff 	andh	r10,0xff
800035fa:	16 4a       	or	r10,r11
800035fc:	cc 3b       	rjmp	80003582 <__avr32_f32_mul_round>

800035fe <__avr32_f32_mul_op1_zero>:
800035fe:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80003602:	e0 4a 00 ff 	cp.w	r10,255
80003606:	5e 1c       	retne	r12
80003608:	5e 0e       	reteq	-1

8000360a <__avr32_s32_to_f32>:
8000360a:	58 0c       	cp.w	r12,0
8000360c:	5e 0c       	reteq	r12
8000360e:	18 9b       	mov	r11,r12
80003610:	5c 4c       	abs	r12
80003612:	e0 6a 00 9e 	mov	r10,158
80003616:	f8 09 12 00 	clz	r9,r12
8000361a:	12 1a       	sub	r10,r9
8000361c:	f8 09 09 4c 	lsl	r12,r12,r9
80003620:	58 0a       	cp.w	r10,0
80003622:	e0 8a 00 15 	brle	8000364c <__avr32_s32_to_f32_subnormal>
80003626:	37 f9       	mov	r9,127
80003628:	ed bc 00 08 	bld	r12,0x8
8000362c:	f7 b9 00 ff 	subeq	r9,-1
80003630:	12 0c       	add	r12,r9
80003632:	f7 ba 03 fe 	sublo	r10,-2
80003636:	ed bc 00 1f 	bld	r12,0x1f
8000363a:	f7 ba 01 01 	subne	r10,1
8000363e:	f8 0c 16 07 	lsr	r12,r12,0x7
80003642:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80003646:	a1 7b       	lsl	r11,0x1
80003648:	5d 0c       	ror	r12
8000364a:	5e fc       	retal	r12

8000364c <__avr32_s32_to_f32_subnormal>:
8000364c:	f4 0a 11 01 	rsub	r10,r10,1
80003650:	59 9a       	cp.w	r10,25
80003652:	f9 bc 02 00 	movhs	r12,0
80003656:	c1 32       	brcc	8000367c <__avr32_s32_to_f32_subnormal+0x30>
80003658:	f4 09 11 20 	rsub	r9,r10,32
8000365c:	f8 09 09 49 	lsl	r9,r12,r9
80003660:	5f 19       	srne	r9
80003662:	f8 0a 0a 4c 	lsr	r12,r12,r10
80003666:	12 4c       	or	r12,r9
80003668:	37 f9       	mov	r9,127
8000366a:	ed bc 00 08 	bld	r12,0x8
8000366e:	f7 b9 00 ff 	subeq	r9,-1
80003672:	12 0c       	add	r12,r9
80003674:	f8 0c 16 07 	lsr	r12,r12,0x7
80003678:	a1 7b       	lsl	r11,0x1
8000367a:	5d 0c       	ror	r12
8000367c:	5e fc       	retal	r12

8000367e <__avr32_f32_to_u32>:
8000367e:	58 0c       	cp.w	r12,0
80003680:	5e 6d       	retmi	0
80003682:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80003686:	27 fb       	sub	r11,127
80003688:	5e 3d       	retlo	0
8000368a:	f6 0b 11 1f 	rsub	r11,r11,31
8000368e:	a9 6c       	lsl	r12,0x8
80003690:	bf bc       	sbr	r12,0x1f
80003692:	f8 0b 0a 4c 	lsr	r12,r12,r11
80003696:	5e fc       	retal	r12

80003698 <__avr32_f32_to_f64>:
80003698:	f8 0b 15 01 	lsl	r11,r12,0x1
8000369c:	f9 ba 00 00 	moveq	r10,0
800036a0:	5e 0b       	reteq	r11
800036a2:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800036a6:	e0 49 00 ff 	cp.w	r9,255
800036aa:	c1 e0       	breq	800036e6 <__extendsfdf_return_op1+0x6>
800036ac:	a7 7b       	lsl	r11,0x7
800036ae:	30 0a       	mov	r10,0
800036b0:	58 09       	cp.w	r9,0
800036b2:	f7 b9 00 ff 	subeq	r9,-1
800036b6:	5f 18       	srne	r8
800036b8:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
800036bc:	fe 39 fc 80 	sub	r9,-896
800036c0:	f6 08 12 00 	clz	r8,r11
800036c4:	10 19       	sub	r9,r8
800036c6:	f6 08 09 4b 	lsl	r11,r11,r8
800036ca:	ed bb 00 1f 	bld	r11,0x1f
800036ce:	f7 b9 01 01 	subne	r9,1
800036d2:	ab 9a       	lsr	r10,0xb
800036d4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800036d8:	a1 7b       	lsl	r11,0x1
800036da:	ab 9b       	lsr	r11,0xb
800036dc:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800036e0 <__extendsfdf_return_op1>:
800036e0:	a1 7c       	lsl	r12,0x1
800036e2:	5d 0b       	ror	r11
800036e4:	5e fb       	retal	r11
800036e6:	fc 1a ff e0 	movh	r10,0xffe0
800036ea:	a9 6b       	lsl	r11,0x8
800036ec:	f9 bb 01 ff 	movne	r11,-1
800036f0:	f4 0b 17 00 	moveq	r11,r10
800036f4:	30 0a       	mov	r10,0
800036f6:	cf 5b       	rjmp	800036e0 <__extendsfdf_return_op1>

800036f8 <memcpy>:
800036f8:	58 8a       	cp.w	r10,8
800036fa:	c2 f5       	brlt	80003758 <memcpy+0x60>
800036fc:	f9 eb 10 09 	or	r9,r12,r11
80003700:	e2 19 00 03 	andl	r9,0x3,COH
80003704:	e0 81 00 97 	brne	80003832 <memcpy+0x13a>
80003708:	e0 4a 00 20 	cp.w	r10,32
8000370c:	c3 b4       	brge	80003782 <memcpy+0x8a>
8000370e:	f4 08 14 02 	asr	r8,r10,0x2
80003712:	f0 09 11 08 	rsub	r9,r8,8
80003716:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000371a:	76 69       	ld.w	r9,r11[0x18]
8000371c:	99 69       	st.w	r12[0x18],r9
8000371e:	76 59       	ld.w	r9,r11[0x14]
80003720:	99 59       	st.w	r12[0x14],r9
80003722:	76 49       	ld.w	r9,r11[0x10]
80003724:	99 49       	st.w	r12[0x10],r9
80003726:	76 39       	ld.w	r9,r11[0xc]
80003728:	99 39       	st.w	r12[0xc],r9
8000372a:	76 29       	ld.w	r9,r11[0x8]
8000372c:	99 29       	st.w	r12[0x8],r9
8000372e:	76 19       	ld.w	r9,r11[0x4]
80003730:	99 19       	st.w	r12[0x4],r9
80003732:	76 09       	ld.w	r9,r11[0x0]
80003734:	99 09       	st.w	r12[0x0],r9
80003736:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000373a:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000373e:	e0 1a 00 03 	andl	r10,0x3
80003742:	f4 0a 11 04 	rsub	r10,r10,4
80003746:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000374a:	17 a9       	ld.ub	r9,r11[0x2]
8000374c:	b0 a9       	st.b	r8[0x2],r9
8000374e:	17 99       	ld.ub	r9,r11[0x1]
80003750:	b0 99       	st.b	r8[0x1],r9
80003752:	17 89       	ld.ub	r9,r11[0x0]
80003754:	b0 89       	st.b	r8[0x0],r9
80003756:	5e fc       	retal	r12
80003758:	f4 0a 11 09 	rsub	r10,r10,9
8000375c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003760:	17 f9       	ld.ub	r9,r11[0x7]
80003762:	b8 f9       	st.b	r12[0x7],r9
80003764:	17 e9       	ld.ub	r9,r11[0x6]
80003766:	b8 e9       	st.b	r12[0x6],r9
80003768:	17 d9       	ld.ub	r9,r11[0x5]
8000376a:	b8 d9       	st.b	r12[0x5],r9
8000376c:	17 c9       	ld.ub	r9,r11[0x4]
8000376e:	b8 c9       	st.b	r12[0x4],r9
80003770:	17 b9       	ld.ub	r9,r11[0x3]
80003772:	b8 b9       	st.b	r12[0x3],r9
80003774:	17 a9       	ld.ub	r9,r11[0x2]
80003776:	b8 a9       	st.b	r12[0x2],r9
80003778:	17 99       	ld.ub	r9,r11[0x1]
8000377a:	b8 99       	st.b	r12[0x1],r9
8000377c:	17 89       	ld.ub	r9,r11[0x0]
8000377e:	b8 89       	st.b	r12[0x0],r9
80003780:	5e fc       	retal	r12
80003782:	eb cd 40 c0 	pushm	r6-r7,lr
80003786:	18 99       	mov	r9,r12
80003788:	22 0a       	sub	r10,32
8000378a:	b7 07       	ld.d	r6,r11++
8000378c:	b3 26       	st.d	r9++,r6
8000378e:	b7 07       	ld.d	r6,r11++
80003790:	b3 26       	st.d	r9++,r6
80003792:	b7 07       	ld.d	r6,r11++
80003794:	b3 26       	st.d	r9++,r6
80003796:	b7 07       	ld.d	r6,r11++
80003798:	b3 26       	st.d	r9++,r6
8000379a:	22 0a       	sub	r10,32
8000379c:	cf 74       	brge	8000378a <memcpy+0x92>
8000379e:	2f 0a       	sub	r10,-16
800037a0:	c0 65       	brlt	800037ac <memcpy+0xb4>
800037a2:	b7 07       	ld.d	r6,r11++
800037a4:	b3 26       	st.d	r9++,r6
800037a6:	b7 07       	ld.d	r6,r11++
800037a8:	b3 26       	st.d	r9++,r6
800037aa:	21 0a       	sub	r10,16
800037ac:	5c 3a       	neg	r10
800037ae:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800037b2:	d7 03       	nop
800037b4:	d7 03       	nop
800037b6:	f7 36 00 0e 	ld.ub	r6,r11[14]
800037ba:	f3 66 00 0e 	st.b	r9[14],r6
800037be:	f7 36 00 0d 	ld.ub	r6,r11[13]
800037c2:	f3 66 00 0d 	st.b	r9[13],r6
800037c6:	f7 36 00 0c 	ld.ub	r6,r11[12]
800037ca:	f3 66 00 0c 	st.b	r9[12],r6
800037ce:	f7 36 00 0b 	ld.ub	r6,r11[11]
800037d2:	f3 66 00 0b 	st.b	r9[11],r6
800037d6:	f7 36 00 0a 	ld.ub	r6,r11[10]
800037da:	f3 66 00 0a 	st.b	r9[10],r6
800037de:	f7 36 00 09 	ld.ub	r6,r11[9]
800037e2:	f3 66 00 09 	st.b	r9[9],r6
800037e6:	f7 36 00 08 	ld.ub	r6,r11[8]
800037ea:	f3 66 00 08 	st.b	r9[8],r6
800037ee:	f7 36 00 07 	ld.ub	r6,r11[7]
800037f2:	f3 66 00 07 	st.b	r9[7],r6
800037f6:	f7 36 00 06 	ld.ub	r6,r11[6]
800037fa:	f3 66 00 06 	st.b	r9[6],r6
800037fe:	f7 36 00 05 	ld.ub	r6,r11[5]
80003802:	f3 66 00 05 	st.b	r9[5],r6
80003806:	f7 36 00 04 	ld.ub	r6,r11[4]
8000380a:	f3 66 00 04 	st.b	r9[4],r6
8000380e:	f7 36 00 03 	ld.ub	r6,r11[3]
80003812:	f3 66 00 03 	st.b	r9[3],r6
80003816:	f7 36 00 02 	ld.ub	r6,r11[2]
8000381a:	f3 66 00 02 	st.b	r9[2],r6
8000381e:	f7 36 00 01 	ld.ub	r6,r11[1]
80003822:	f3 66 00 01 	st.b	r9[1],r6
80003826:	f7 36 00 00 	ld.ub	r6,r11[0]
8000382a:	f3 66 00 00 	st.b	r9[0],r6
8000382e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003832:	20 1a       	sub	r10,1
80003834:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003838:	f8 0a 0b 09 	st.b	r12[r10],r9
8000383c:	cf b1       	brne	80003832 <memcpy+0x13a>
8000383e:	5e fc       	retal	r12

80003840 <_vsprintf_r>:
80003840:	d4 01       	pushm	lr
80003842:	21 7d       	sub	sp,92
80003844:	e0 68 ff ff 	mov	r8,65535
80003848:	ea 18 7f ff 	orh	r8,0x7fff
8000384c:	50 58       	stdsp	sp[0x14],r8
8000384e:	50 28       	stdsp	sp[0x8],r8
80003850:	e0 68 02 08 	mov	r8,520
80003854:	ba 68       	st.h	sp[0xc],r8
80003856:	3f f8       	mov	r8,-1
80003858:	50 4b       	stdsp	sp[0x10],r11
8000385a:	50 0b       	stdsp	sp[0x0],r11
8000385c:	ba 78       	st.h	sp[0xe],r8
8000385e:	1a 9b       	mov	r11,sp
80003860:	ca 8d       	rcall	80003bb0 <_vfprintf_r>
80003862:	30 09       	mov	r9,0
80003864:	40 08       	lddsp	r8,sp[0x0]
80003866:	b0 89       	st.b	r8[0x0],r9
80003868:	2e 9d       	sub	sp,-92
8000386a:	d8 02       	popm	pc

8000386c <vsprintf>:
8000386c:	d4 01       	pushm	lr
8000386e:	e0 68 01 00 	mov	r8,256
80003872:	14 99       	mov	r9,r10
80003874:	16 9a       	mov	r10,r11
80003876:	18 9b       	mov	r11,r12
80003878:	70 0c       	ld.w	r12,r8[0x0]
8000387a:	ce 3f       	rcall	80003840 <_vsprintf_r>
8000387c:	d8 02       	popm	pc
8000387e:	d7 03       	nop

80003880 <get_arg>:
80003880:	d4 31       	pushm	r0-r7,lr
80003882:	20 8d       	sub	sp,32
80003884:	fa c4 ff bc 	sub	r4,sp,-68
80003888:	50 4b       	stdsp	sp[0x10],r11
8000388a:	68 2e       	ld.w	lr,r4[0x8]
8000388c:	50 58       	stdsp	sp[0x14],r8
8000388e:	12 96       	mov	r6,r9
80003890:	7c 0b       	ld.w	r11,lr[0x0]
80003892:	70 05       	ld.w	r5,r8[0x0]
80003894:	50 6e       	stdsp	sp[0x18],lr
80003896:	58 0b       	cp.w	r11,0
80003898:	f4 0b 17 00 	moveq	r11,r10
8000389c:	68 03       	ld.w	r3,r4[0x0]
8000389e:	68 11       	ld.w	r1,r4[0x4]
800038a0:	40 49       	lddsp	r9,sp[0x10]
800038a2:	30 08       	mov	r8,0
800038a4:	c2 89       	rjmp	80003af4 <get_arg+0x274>
800038a6:	2f fb       	sub	r11,-1
800038a8:	32 5c       	mov	r12,37
800038aa:	17 8a       	ld.ub	r10,r11[0x0]
800038ac:	f8 0a 18 00 	cp.b	r10,r12
800038b0:	5f 1e       	srne	lr
800038b2:	f0 0a 18 00 	cp.b	r10,r8
800038b6:	5f 1c       	srne	r12
800038b8:	fd ec 00 0c 	and	r12,lr,r12
800038bc:	f0 0c 18 00 	cp.b	r12,r8
800038c0:	cf 31       	brne	800038a6 <get_arg+0x26>
800038c2:	58 0a       	cp.w	r10,0
800038c4:	e0 80 01 25 	breq	80003b0e <get_arg+0x28e>
800038c8:	30 0c       	mov	r12,0
800038ca:	3f fa       	mov	r10,-1
800038cc:	18 90       	mov	r0,r12
800038ce:	50 3a       	stdsp	sp[0xc],r10
800038d0:	18 94       	mov	r4,r12
800038d2:	18 92       	mov	r2,r12
800038d4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800038d8:	16 97       	mov	r7,r11
800038da:	50 7c       	stdsp	sp[0x1c],r12
800038dc:	fe cc a2 34 	sub	r12,pc,-24012
800038e0:	0f 3a       	ld.ub	r10,r7++
800038e2:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800038e6:	40 7c       	lddsp	r12,sp[0x1c]
800038e8:	1c 0c       	add	r12,lr
800038ea:	fe ce a3 0a 	sub	lr,pc,-23798
800038ee:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800038f2:	20 1e       	sub	lr,1
800038f4:	50 0e       	stdsp	sp[0x0],lr
800038f6:	fe ce a3 82 	sub	lr,pc,-23678
800038fa:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800038fe:	50 7c       	stdsp	sp[0x1c],r12
80003900:	40 0c       	lddsp	r12,sp[0x0]
80003902:	58 7c       	cp.w	r12,7
80003904:	e0 8b 00 f1 	brhi	80003ae6 <get_arg+0x266>
80003908:	fe ce a5 34 	sub	lr,pc,-23244
8000390c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003910:	36 8b       	mov	r11,104
80003912:	f6 0a 18 00 	cp.b	r10,r11
80003916:	e0 80 00 e8 	breq	80003ae6 <get_arg+0x266>
8000391a:	37 1b       	mov	r11,113
8000391c:	f6 0a 18 00 	cp.b	r10,r11
80003920:	c0 70       	breq	8000392e <get_arg+0xae>
80003922:	34 cb       	mov	r11,76
80003924:	f6 0a 18 00 	cp.b	r10,r11
80003928:	c0 51       	brne	80003932 <get_arg+0xb2>
8000392a:	a3 b4       	sbr	r4,0x3
8000392c:	cd d8       	rjmp	80003ae6 <get_arg+0x266>
8000392e:	a5 b4       	sbr	r4,0x5
80003930:	cd b8       	rjmp	80003ae6 <get_arg+0x266>
80003932:	08 9a       	mov	r10,r4
80003934:	0e 9b       	mov	r11,r7
80003936:	a5 aa       	sbr	r10,0x4
80003938:	17 3c       	ld.ub	r12,r11++
8000393a:	a5 b4       	sbr	r4,0x5
8000393c:	36 ce       	mov	lr,108
8000393e:	fc 0c 18 00 	cp.b	r12,lr
80003942:	e0 80 00 d3 	breq	80003ae8 <get_arg+0x268>
80003946:	14 94       	mov	r4,r10
80003948:	cc f8       	rjmp	80003ae6 <get_arg+0x266>
8000394a:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000394e:	36 7c       	mov	r12,103
80003950:	f8 0a 18 00 	cp.b	r10,r12
80003954:	e0 8b 00 27 	brhi	800039a2 <get_arg+0x122>
80003958:	36 5b       	mov	r11,101
8000395a:	f6 0a 18 00 	cp.b	r10,r11
8000395e:	c4 82       	brcc	800039ee <get_arg+0x16e>
80003960:	34 fb       	mov	r11,79
80003962:	f6 0a 18 00 	cp.b	r10,r11
80003966:	c4 80       	breq	800039f6 <get_arg+0x176>
80003968:	e0 8b 00 0c 	brhi	80003980 <get_arg+0x100>
8000396c:	34 5b       	mov	r11,69
8000396e:	f6 0a 18 00 	cp.b	r10,r11
80003972:	c3 e0       	breq	800039ee <get_arg+0x16e>
80003974:	34 7b       	mov	r11,71
80003976:	f6 0a 18 00 	cp.b	r10,r11
8000397a:	c3 a0       	breq	800039ee <get_arg+0x16e>
8000397c:	34 4b       	mov	r11,68
8000397e:	c0 88       	rjmp	8000398e <get_arg+0x10e>
80003980:	35 8b       	mov	r11,88
80003982:	f6 0a 18 00 	cp.b	r10,r11
80003986:	c2 c0       	breq	800039de <get_arg+0x15e>
80003988:	e0 8b 00 07 	brhi	80003996 <get_arg+0x116>
8000398c:	35 5b       	mov	r11,85
8000398e:	f6 0a 18 00 	cp.b	r10,r11
80003992:	c3 51       	brne	800039fc <get_arg+0x17c>
80003994:	c3 18       	rjmp	800039f6 <get_arg+0x176>
80003996:	36 3b       	mov	r11,99
80003998:	f6 0a 18 00 	cp.b	r10,r11
8000399c:	c2 f0       	breq	800039fa <get_arg+0x17a>
8000399e:	36 4b       	mov	r11,100
800039a0:	c0 e8       	rjmp	800039bc <get_arg+0x13c>
800039a2:	37 0b       	mov	r11,112
800039a4:	f6 0a 18 00 	cp.b	r10,r11
800039a8:	c2 50       	breq	800039f2 <get_arg+0x172>
800039aa:	e0 8b 00 0d 	brhi	800039c4 <get_arg+0x144>
800039ae:	36 eb       	mov	r11,110
800039b0:	f6 0a 18 00 	cp.b	r10,r11
800039b4:	c1 f0       	breq	800039f2 <get_arg+0x172>
800039b6:	e0 8b 00 14 	brhi	800039de <get_arg+0x15e>
800039ba:	36 9b       	mov	r11,105
800039bc:	f6 0a 18 00 	cp.b	r10,r11
800039c0:	c1 e1       	brne	800039fc <get_arg+0x17c>
800039c2:	c0 e8       	rjmp	800039de <get_arg+0x15e>
800039c4:	37 5b       	mov	r11,117
800039c6:	f6 0a 18 00 	cp.b	r10,r11
800039ca:	c0 a0       	breq	800039de <get_arg+0x15e>
800039cc:	37 8b       	mov	r11,120
800039ce:	f6 0a 18 00 	cp.b	r10,r11
800039d2:	c0 60       	breq	800039de <get_arg+0x15e>
800039d4:	37 3b       	mov	r11,115
800039d6:	f6 0a 18 00 	cp.b	r10,r11
800039da:	c1 11       	brne	800039fc <get_arg+0x17c>
800039dc:	c0 b8       	rjmp	800039f2 <get_arg+0x172>
800039de:	ed b4 00 04 	bld	r4,0x4
800039e2:	c0 a0       	breq	800039f6 <get_arg+0x176>
800039e4:	ed b4 00 05 	bld	r4,0x5
800039e8:	c0 91       	brne	800039fa <get_arg+0x17a>
800039ea:	30 20       	mov	r0,2
800039ec:	c0 88       	rjmp	800039fc <get_arg+0x17c>
800039ee:	30 40       	mov	r0,4
800039f0:	c0 68       	rjmp	800039fc <get_arg+0x17c>
800039f2:	30 30       	mov	r0,3
800039f4:	c0 48       	rjmp	800039fc <get_arg+0x17c>
800039f6:	30 10       	mov	r0,1
800039f8:	c0 28       	rjmp	800039fc <get_arg+0x17c>
800039fa:	30 00       	mov	r0,0
800039fc:	40 3b       	lddsp	r11,sp[0xc]
800039fe:	5b fb       	cp.w	r11,-1
80003a00:	c0 40       	breq	80003a08 <get_arg+0x188>
80003a02:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003a06:	c7 08       	rjmp	80003ae6 <get_arg+0x266>
80003a08:	58 60       	cp.w	r0,6
80003a0a:	e0 8b 00 6e 	brhi	80003ae6 <get_arg+0x266>
80003a0e:	6c 0a       	ld.w	r10,r6[0x0]
80003a10:	ea cc ff ff 	sub	r12,r5,-1
80003a14:	fe ce a6 20 	sub	lr,pc,-23008
80003a18:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003a1c:	f4 cb ff f8 	sub	r11,r10,-8
80003a20:	8d 0b       	st.w	r6[0x0],r11
80003a22:	f4 ea 00 00 	ld.d	r10,r10[0]
80003a26:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003a2a:	c0 f8       	rjmp	80003a48 <get_arg+0x1c8>
80003a2c:	f4 cb ff fc 	sub	r11,r10,-4
80003a30:	8d 0b       	st.w	r6[0x0],r11
80003a32:	74 0a       	ld.w	r10,r10[0x0]
80003a34:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003a38:	c0 88       	rjmp	80003a48 <get_arg+0x1c8>
80003a3a:	f4 cb ff f8 	sub	r11,r10,-8
80003a3e:	8d 0b       	st.w	r6[0x0],r11
80003a40:	f4 ea 00 00 	ld.d	r10,r10[0]
80003a44:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003a48:	0e 9b       	mov	r11,r7
80003a4a:	18 95       	mov	r5,r12
80003a4c:	c4 e8       	rjmp	80003ae8 <get_arg+0x268>
80003a4e:	62 0a       	ld.w	r10,r1[0x0]
80003a50:	5b fa       	cp.w	r10,-1
80003a52:	c0 b1       	brne	80003a68 <get_arg+0x1e8>
80003a54:	50 19       	stdsp	sp[0x4],r9
80003a56:	50 28       	stdsp	sp[0x8],r8
80003a58:	e0 6a 00 80 	mov	r10,128
80003a5c:	30 0b       	mov	r11,0
80003a5e:	02 9c       	mov	r12,r1
80003a60:	e0 a0 1d 78 	rcall	80007550 <memset>
80003a64:	40 28       	lddsp	r8,sp[0x8]
80003a66:	40 19       	lddsp	r9,sp[0x4]
80003a68:	e4 cc 00 01 	sub	r12,r2,1
80003a6c:	0e 9b       	mov	r11,r7
80003a6e:	50 3c       	stdsp	sp[0xc],r12
80003a70:	f2 0c 0c 49 	max	r9,r9,r12
80003a74:	c3 a8       	rjmp	80003ae8 <get_arg+0x268>
80003a76:	62 0a       	ld.w	r10,r1[0x0]
80003a78:	5b fa       	cp.w	r10,-1
80003a7a:	c0 b1       	brne	80003a90 <get_arg+0x210>
80003a7c:	50 19       	stdsp	sp[0x4],r9
80003a7e:	50 28       	stdsp	sp[0x8],r8
80003a80:	e0 6a 00 80 	mov	r10,128
80003a84:	30 0b       	mov	r11,0
80003a86:	02 9c       	mov	r12,r1
80003a88:	e0 a0 1d 64 	rcall	80007550 <memset>
80003a8c:	40 28       	lddsp	r8,sp[0x8]
80003a8e:	40 19       	lddsp	r9,sp[0x4]
80003a90:	20 12       	sub	r2,1
80003a92:	30 0a       	mov	r10,0
80003a94:	0e 9b       	mov	r11,r7
80003a96:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003a9a:	f2 02 0c 49 	max	r9,r9,r2
80003a9e:	c2 58       	rjmp	80003ae8 <get_arg+0x268>
80003aa0:	16 97       	mov	r7,r11
80003aa2:	6c 0a       	ld.w	r10,r6[0x0]
80003aa4:	f4 cb ff fc 	sub	r11,r10,-4
80003aa8:	8d 0b       	st.w	r6[0x0],r11
80003aaa:	74 0a       	ld.w	r10,r10[0x0]
80003aac:	0e 9b       	mov	r11,r7
80003aae:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003ab2:	2f f5       	sub	r5,-1
80003ab4:	c1 a8       	rjmp	80003ae8 <get_arg+0x268>
80003ab6:	f4 c2 00 30 	sub	r2,r10,48
80003aba:	c0 68       	rjmp	80003ac6 <get_arg+0x246>
80003abc:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003ac0:	2f f7       	sub	r7,-1
80003ac2:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003ac6:	0f 8a       	ld.ub	r10,r7[0x0]
80003ac8:	58 0a       	cp.w	r10,0
80003aca:	c0 e0       	breq	80003ae6 <get_arg+0x266>
80003acc:	23 0a       	sub	r10,48
80003ace:	58 9a       	cp.w	r10,9
80003ad0:	fe 98 ff f6 	brls	80003abc <get_arg+0x23c>
80003ad4:	c0 98       	rjmp	80003ae6 <get_arg+0x266>
80003ad6:	2f f7       	sub	r7,-1
80003ad8:	0f 8a       	ld.ub	r10,r7[0x0]
80003ada:	58 0a       	cp.w	r10,0
80003adc:	c0 50       	breq	80003ae6 <get_arg+0x266>
80003ade:	23 0a       	sub	r10,48
80003ae0:	58 9a       	cp.w	r10,9
80003ae2:	fe 98 ff fa 	brls	80003ad6 <get_arg+0x256>
80003ae6:	0e 9b       	mov	r11,r7
80003ae8:	40 7c       	lddsp	r12,sp[0x1c]
80003aea:	30 ba       	mov	r10,11
80003aec:	f4 0c 18 00 	cp.b	r12,r10
80003af0:	fe 91 fe f2 	brne	800038d4 <get_arg+0x54>
80003af4:	40 42       	lddsp	r2,sp[0x10]
80003af6:	17 8c       	ld.ub	r12,r11[0x0]
80003af8:	0a 32       	cp.w	r2,r5
80003afa:	5f 4a       	srge	r10
80003afc:	f0 0c 18 00 	cp.b	r12,r8
80003b00:	5f 1c       	srne	r12
80003b02:	f9 ea 00 0a 	and	r10,r12,r10
80003b06:	f0 0a 18 00 	cp.b	r10,r8
80003b0a:	fe 91 fe cf 	brne	800038a8 <get_arg+0x28>
80003b0e:	30 08       	mov	r8,0
80003b10:	40 4e       	lddsp	lr,sp[0x10]
80003b12:	17 8a       	ld.ub	r10,r11[0x0]
80003b14:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003b18:	f0 0a 18 00 	cp.b	r10,r8
80003b1c:	fc 09 17 10 	movne	r9,lr
80003b20:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003b24:	06 9e       	mov	lr,r3
80003b26:	c2 a8       	rjmp	80003b7a <get_arg+0x2fa>
80003b28:	62 0a       	ld.w	r10,r1[0x0]
80003b2a:	58 3a       	cp.w	r10,3
80003b2c:	c1 e0       	breq	80003b68 <get_arg+0x2e8>
80003b2e:	e0 89 00 07 	brgt	80003b3c <get_arg+0x2bc>
80003b32:	58 1a       	cp.w	r10,1
80003b34:	c1 a0       	breq	80003b68 <get_arg+0x2e8>
80003b36:	58 2a       	cp.w	r10,2
80003b38:	c1 81       	brne	80003b68 <get_arg+0x2e8>
80003b3a:	c0 58       	rjmp	80003b44 <get_arg+0x2c4>
80003b3c:	58 5a       	cp.w	r10,5
80003b3e:	c0 c0       	breq	80003b56 <get_arg+0x2d6>
80003b40:	c0 b5       	brlt	80003b56 <get_arg+0x2d6>
80003b42:	c1 38       	rjmp	80003b68 <get_arg+0x2e8>
80003b44:	6c 0a       	ld.w	r10,r6[0x0]
80003b46:	f4 cc ff f8 	sub	r12,r10,-8
80003b4a:	8d 0c       	st.w	r6[0x0],r12
80003b4c:	f4 e2 00 00 	ld.d	r2,r10[0]
80003b50:	f0 e3 00 00 	st.d	r8[0],r2
80003b54:	c1 08       	rjmp	80003b74 <get_arg+0x2f4>
80003b56:	6c 0a       	ld.w	r10,r6[0x0]
80003b58:	f4 cc ff f8 	sub	r12,r10,-8
80003b5c:	8d 0c       	st.w	r6[0x0],r12
80003b5e:	f4 e2 00 00 	ld.d	r2,r10[0]
80003b62:	f0 e3 00 00 	st.d	r8[0],r2
80003b66:	c0 78       	rjmp	80003b74 <get_arg+0x2f4>
80003b68:	6c 0a       	ld.w	r10,r6[0x0]
80003b6a:	f4 cc ff fc 	sub	r12,r10,-4
80003b6e:	8d 0c       	st.w	r6[0x0],r12
80003b70:	74 0a       	ld.w	r10,r10[0x0]
80003b72:	91 0a       	st.w	r8[0x0],r10
80003b74:	2f f5       	sub	r5,-1
80003b76:	2f 88       	sub	r8,-8
80003b78:	2f c1       	sub	r1,-4
80003b7a:	12 35       	cp.w	r5,r9
80003b7c:	fe 9a ff d6 	brle	80003b28 <get_arg+0x2a8>
80003b80:	1c 93       	mov	r3,lr
80003b82:	40 52       	lddsp	r2,sp[0x14]
80003b84:	40 6e       	lddsp	lr,sp[0x18]
80003b86:	85 05       	st.w	r2[0x0],r5
80003b88:	9d 0b       	st.w	lr[0x0],r11
80003b8a:	40 4b       	lddsp	r11,sp[0x10]
80003b8c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003b90:	2f 8d       	sub	sp,-32
80003b92:	d8 32       	popm	r0-r7,pc

80003b94 <__sprint_r>:
80003b94:	d4 21       	pushm	r4-r7,lr
80003b96:	14 97       	mov	r7,r10
80003b98:	74 28       	ld.w	r8,r10[0x8]
80003b9a:	58 08       	cp.w	r8,0
80003b9c:	c0 41       	brne	80003ba4 <__sprint_r+0x10>
80003b9e:	95 18       	st.w	r10[0x4],r8
80003ba0:	10 9c       	mov	r12,r8
80003ba2:	d8 22       	popm	r4-r7,pc
80003ba4:	e0 a0 18 b4 	rcall	80006d0c <__sfvwrite_r>
80003ba8:	30 08       	mov	r8,0
80003baa:	8f 18       	st.w	r7[0x4],r8
80003bac:	8f 28       	st.w	r7[0x8],r8
80003bae:	d8 22       	popm	r4-r7,pc

80003bb0 <_vfprintf_r>:
80003bb0:	d4 31       	pushm	r0-r7,lr
80003bb2:	fa cd 06 bc 	sub	sp,sp,1724
80003bb6:	51 09       	stdsp	sp[0x40],r9
80003bb8:	16 91       	mov	r1,r11
80003bba:	14 97       	mov	r7,r10
80003bbc:	18 95       	mov	r5,r12
80003bbe:	e0 a0 1a 1d 	rcall	80006ff8 <_localeconv_r>
80003bc2:	78 0c       	ld.w	r12,r12[0x0]
80003bc4:	50 cc       	stdsp	sp[0x30],r12
80003bc6:	58 05       	cp.w	r5,0
80003bc8:	c0 70       	breq	80003bd6 <_vfprintf_r+0x26>
80003bca:	6a 68       	ld.w	r8,r5[0x18]
80003bcc:	58 08       	cp.w	r8,0
80003bce:	c0 41       	brne	80003bd6 <_vfprintf_r+0x26>
80003bd0:	0a 9c       	mov	r12,r5
80003bd2:	e0 a0 17 3d 	rcall	80006a4c <__sinit>
80003bd6:	fe c8 a4 1e 	sub	r8,pc,-23522
80003bda:	10 31       	cp.w	r1,r8
80003bdc:	c0 31       	brne	80003be2 <_vfprintf_r+0x32>
80003bde:	6a 01       	ld.w	r1,r5[0x0]
80003be0:	c0 c8       	rjmp	80003bf8 <_vfprintf_r+0x48>
80003be2:	fe c8 a4 0a 	sub	r8,pc,-23542
80003be6:	10 31       	cp.w	r1,r8
80003be8:	c0 31       	brne	80003bee <_vfprintf_r+0x3e>
80003bea:	6a 11       	ld.w	r1,r5[0x4]
80003bec:	c0 68       	rjmp	80003bf8 <_vfprintf_r+0x48>
80003bee:	fe c8 a3 f6 	sub	r8,pc,-23562
80003bf2:	10 31       	cp.w	r1,r8
80003bf4:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003bf8:	82 68       	ld.sh	r8,r1[0xc]
80003bfa:	ed b8 00 03 	bld	r8,0x3
80003bfe:	c0 41       	brne	80003c06 <_vfprintf_r+0x56>
80003c00:	62 48       	ld.w	r8,r1[0x10]
80003c02:	58 08       	cp.w	r8,0
80003c04:	c0 71       	brne	80003c12 <_vfprintf_r+0x62>
80003c06:	02 9b       	mov	r11,r1
80003c08:	0a 9c       	mov	r12,r5
80003c0a:	e0 a0 0f 5d 	rcall	80005ac4 <__swsetup_r>
80003c0e:	e0 81 0f 54 	brne	80005ab6 <_vfprintf_r+0x1f06>
80003c12:	82 68       	ld.sh	r8,r1[0xc]
80003c14:	10 99       	mov	r9,r8
80003c16:	e2 19 00 1a 	andl	r9,0x1a,COH
80003c1a:	58 a9       	cp.w	r9,10
80003c1c:	c3 c1       	brne	80003c94 <_vfprintf_r+0xe4>
80003c1e:	82 79       	ld.sh	r9,r1[0xe]
80003c20:	30 0a       	mov	r10,0
80003c22:	f4 09 19 00 	cp.h	r9,r10
80003c26:	c3 75       	brlt	80003c94 <_vfprintf_r+0xe4>
80003c28:	a1 d8       	cbr	r8,0x1
80003c2a:	fb 58 05 d0 	st.h	sp[1488],r8
80003c2e:	62 88       	ld.w	r8,r1[0x20]
80003c30:	fb 48 05 e4 	st.w	sp[1508],r8
80003c34:	62 a8       	ld.w	r8,r1[0x28]
80003c36:	fb 48 05 ec 	st.w	sp[1516],r8
80003c3a:	fa c8 ff bc 	sub	r8,sp,-68
80003c3e:	fb 48 05 d4 	st.w	sp[1492],r8
80003c42:	fb 48 05 c4 	st.w	sp[1476],r8
80003c46:	e0 68 04 00 	mov	r8,1024
80003c4a:	fb 48 05 d8 	st.w	sp[1496],r8
80003c4e:	fb 48 05 cc 	st.w	sp[1484],r8
80003c52:	30 08       	mov	r8,0
80003c54:	fb 59 05 d2 	st.h	sp[1490],r9
80003c58:	0e 9a       	mov	r10,r7
80003c5a:	41 09       	lddsp	r9,sp[0x40]
80003c5c:	fa c7 fa 3c 	sub	r7,sp,-1476
80003c60:	fb 48 05 dc 	st.w	sp[1500],r8
80003c64:	0a 9c       	mov	r12,r5
80003c66:	0e 9b       	mov	r11,r7
80003c68:	ca 4f       	rcall	80003bb0 <_vfprintf_r>
80003c6a:	50 bc       	stdsp	sp[0x2c],r12
80003c6c:	c0 95       	brlt	80003c7e <_vfprintf_r+0xce>
80003c6e:	0e 9b       	mov	r11,r7
80003c70:	0a 9c       	mov	r12,r5
80003c72:	e0 a0 16 15 	rcall	8000689c <_fflush_r>
80003c76:	40 be       	lddsp	lr,sp[0x2c]
80003c78:	f9 be 01 ff 	movne	lr,-1
80003c7c:	50 be       	stdsp	sp[0x2c],lr
80003c7e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003c82:	ed b8 00 06 	bld	r8,0x6
80003c86:	e0 81 0f 1a 	brne	80005aba <_vfprintf_r+0x1f0a>
80003c8a:	82 68       	ld.sh	r8,r1[0xc]
80003c8c:	a7 a8       	sbr	r8,0x6
80003c8e:	a2 68       	st.h	r1[0xc],r8
80003c90:	e0 8f 0f 15 	bral	80005aba <_vfprintf_r+0x1f0a>
80003c94:	30 08       	mov	r8,0
80003c96:	fb 48 06 b4 	st.w	sp[1716],r8
80003c9a:	fb 48 06 90 	st.w	sp[1680],r8
80003c9e:	fb 48 06 8c 	st.w	sp[1676],r8
80003ca2:	fb 48 06 b0 	st.w	sp[1712],r8
80003ca6:	30 08       	mov	r8,0
80003ca8:	30 09       	mov	r9,0
80003caa:	50 a7       	stdsp	sp[0x28],r7
80003cac:	50 78       	stdsp	sp[0x1c],r8
80003cae:	fa c3 f9 e0 	sub	r3,sp,-1568
80003cb2:	3f f8       	mov	r8,-1
80003cb4:	50 59       	stdsp	sp[0x14],r9
80003cb6:	fb 43 06 88 	st.w	sp[1672],r3
80003cba:	fb 48 05 44 	st.w	sp[1348],r8
80003cbe:	12 9c       	mov	r12,r9
80003cc0:	50 69       	stdsp	sp[0x18],r9
80003cc2:	50 d9       	stdsp	sp[0x34],r9
80003cc4:	50 e9       	stdsp	sp[0x38],r9
80003cc6:	50 b9       	stdsp	sp[0x2c],r9
80003cc8:	12 97       	mov	r7,r9
80003cca:	0a 94       	mov	r4,r5
80003ccc:	40 a2       	lddsp	r2,sp[0x28]
80003cce:	32 5a       	mov	r10,37
80003cd0:	30 08       	mov	r8,0
80003cd2:	c0 28       	rjmp	80003cd6 <_vfprintf_r+0x126>
80003cd4:	2f f2       	sub	r2,-1
80003cd6:	05 89       	ld.ub	r9,r2[0x0]
80003cd8:	f0 09 18 00 	cp.b	r9,r8
80003cdc:	5f 1b       	srne	r11
80003cde:	f4 09 18 00 	cp.b	r9,r10
80003ce2:	5f 19       	srne	r9
80003ce4:	f3 eb 00 0b 	and	r11,r9,r11
80003ce8:	f0 0b 18 00 	cp.b	r11,r8
80003cec:	cf 41       	brne	80003cd4 <_vfprintf_r+0x124>
80003cee:	40 ab       	lddsp	r11,sp[0x28]
80003cf0:	e4 0b 01 06 	sub	r6,r2,r11
80003cf4:	c1 e0       	breq	80003d30 <_vfprintf_r+0x180>
80003cf6:	fa f8 06 90 	ld.w	r8,sp[1680]
80003cfa:	0c 08       	add	r8,r6
80003cfc:	87 0b       	st.w	r3[0x0],r11
80003cfe:	fb 48 06 90 	st.w	sp[1680],r8
80003d02:	87 16       	st.w	r3[0x4],r6
80003d04:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003d08:	2f f8       	sub	r8,-1
80003d0a:	fb 48 06 8c 	st.w	sp[1676],r8
80003d0e:	58 78       	cp.w	r8,7
80003d10:	e0 89 00 04 	brgt	80003d18 <_vfprintf_r+0x168>
80003d14:	2f 83       	sub	r3,-8
80003d16:	c0 a8       	rjmp	80003d2a <_vfprintf_r+0x17a>
80003d18:	fa ca f9 78 	sub	r10,sp,-1672
80003d1c:	02 9b       	mov	r11,r1
80003d1e:	08 9c       	mov	r12,r4
80003d20:	c3 af       	rcall	80003b94 <__sprint_r>
80003d22:	e0 81 0e c6 	brne	80005aae <_vfprintf_r+0x1efe>
80003d26:	fa c3 f9 e0 	sub	r3,sp,-1568
80003d2a:	40 ba       	lddsp	r10,sp[0x2c]
80003d2c:	0c 0a       	add	r10,r6
80003d2e:	50 ba       	stdsp	sp[0x2c],r10
80003d30:	05 89       	ld.ub	r9,r2[0x0]
80003d32:	30 08       	mov	r8,0
80003d34:	f0 09 18 00 	cp.b	r9,r8
80003d38:	e0 80 0e aa 	breq	80005a8c <_vfprintf_r+0x1edc>
80003d3c:	30 09       	mov	r9,0
80003d3e:	fb 68 06 bb 	st.b	sp[1723],r8
80003d42:	0e 96       	mov	r6,r7
80003d44:	e4 c8 ff ff 	sub	r8,r2,-1
80003d48:	3f fe       	mov	lr,-1
80003d4a:	50 93       	stdsp	sp[0x24],r3
80003d4c:	50 41       	stdsp	sp[0x10],r1
80003d4e:	0e 93       	mov	r3,r7
80003d50:	04 91       	mov	r1,r2
80003d52:	50 89       	stdsp	sp[0x20],r9
80003d54:	50 a8       	stdsp	sp[0x28],r8
80003d56:	50 2e       	stdsp	sp[0x8],lr
80003d58:	50 39       	stdsp	sp[0xc],r9
80003d5a:	12 95       	mov	r5,r9
80003d5c:	12 90       	mov	r0,r9
80003d5e:	10 97       	mov	r7,r8
80003d60:	08 92       	mov	r2,r4
80003d62:	c0 78       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003d64:	3f fc       	mov	r12,-1
80003d66:	08 97       	mov	r7,r4
80003d68:	50 2c       	stdsp	sp[0x8],r12
80003d6a:	c0 38       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003d6c:	30 0b       	mov	r11,0
80003d6e:	50 3b       	stdsp	sp[0xc],r11
80003d70:	0f 38       	ld.ub	r8,r7++
80003d72:	c0 28       	rjmp	80003d76 <_vfprintf_r+0x1c6>
80003d74:	12 90       	mov	r0,r9
80003d76:	f0 c9 00 20 	sub	r9,r8,32
80003d7a:	e0 49 00 58 	cp.w	r9,88
80003d7e:	e0 8b 0a 30 	brhi	800051de <_vfprintf_r+0x162e>
80003d82:	fe ca a9 72 	sub	r10,pc,-22158
80003d86:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003d8a:	50 a7       	stdsp	sp[0x28],r7
80003d8c:	50 80       	stdsp	sp[0x20],r0
80003d8e:	0c 97       	mov	r7,r6
80003d90:	04 94       	mov	r4,r2
80003d92:	06 96       	mov	r6,r3
80003d94:	02 92       	mov	r2,r1
80003d96:	fe c9 a7 4a 	sub	r9,pc,-22710
80003d9a:	40 93       	lddsp	r3,sp[0x24]
80003d9c:	10 90       	mov	r0,r8
80003d9e:	40 41       	lddsp	r1,sp[0x10]
80003da0:	50 d9       	stdsp	sp[0x34],r9
80003da2:	e0 8f 08 8e 	bral	80004ebe <_vfprintf_r+0x130e>
80003da6:	30 08       	mov	r8,0
80003da8:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003dac:	f0 09 18 00 	cp.b	r9,r8
80003db0:	ce 01       	brne	80003d70 <_vfprintf_r+0x1c0>
80003db2:	32 08       	mov	r8,32
80003db4:	c6 e8       	rjmp	80003e90 <_vfprintf_r+0x2e0>
80003db6:	a1 a5       	sbr	r5,0x0
80003db8:	cd cb       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003dba:	0f 89       	ld.ub	r9,r7[0x0]
80003dbc:	f2 c8 00 30 	sub	r8,r9,48
80003dc0:	58 98       	cp.w	r8,9
80003dc2:	e0 8b 00 1d 	brhi	80003dfc <_vfprintf_r+0x24c>
80003dc6:	ee c8 ff ff 	sub	r8,r7,-1
80003dca:	30 0b       	mov	r11,0
80003dcc:	23 09       	sub	r9,48
80003dce:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003dd2:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003dd6:	11 39       	ld.ub	r9,r8++
80003dd8:	f2 ca 00 30 	sub	r10,r9,48
80003ddc:	58 9a       	cp.w	r10,9
80003dde:	fe 98 ff f7 	brls	80003dcc <_vfprintf_r+0x21c>
80003de2:	e0 49 00 24 	cp.w	r9,36
80003de6:	cc 31       	brne	80003d6c <_vfprintf_r+0x1bc>
80003de8:	e0 4b 00 20 	cp.w	r11,32
80003dec:	e0 89 0e 60 	brgt	80005aac <_vfprintf_r+0x1efc>
80003df0:	20 1b       	sub	r11,1
80003df2:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003df6:	12 3b       	cp.w	r11,r9
80003df8:	c0 95       	brlt	80003e0a <_vfprintf_r+0x25a>
80003dfa:	c1 08       	rjmp	80003e1a <_vfprintf_r+0x26a>
80003dfc:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003e00:	ec ca ff ff 	sub	r10,r6,-1
80003e04:	12 36       	cp.w	r6,r9
80003e06:	c1 f5       	brlt	80003e44 <_vfprintf_r+0x294>
80003e08:	c2 68       	rjmp	80003e54 <_vfprintf_r+0x2a4>
80003e0a:	fa ce f9 44 	sub	lr,sp,-1724
80003e0e:	10 97       	mov	r7,r8
80003e10:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003e14:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003e18:	c3 58       	rjmp	80003e82 <_vfprintf_r+0x2d2>
80003e1a:	10 97       	mov	r7,r8
80003e1c:	fa c8 f9 50 	sub	r8,sp,-1712
80003e20:	1a d8       	st.w	--sp,r8
80003e22:	fa c8 fa b8 	sub	r8,sp,-1352
80003e26:	1a d8       	st.w	--sp,r8
80003e28:	fa c8 fb b4 	sub	r8,sp,-1100
80003e2c:	02 9a       	mov	r10,r1
80003e2e:	1a d8       	st.w	--sp,r8
80003e30:	04 9c       	mov	r12,r2
80003e32:	fa c8 f9 40 	sub	r8,sp,-1728
80003e36:	fa c9 ff b4 	sub	r9,sp,-76
80003e3a:	fe b0 fd 23 	rcall	80003880 <get_arg>
80003e3e:	2f dd       	sub	sp,-12
80003e40:	78 00       	ld.w	r0,r12[0x0]
80003e42:	c2 08       	rjmp	80003e82 <_vfprintf_r+0x2d2>
80003e44:	fa cc f9 44 	sub	r12,sp,-1724
80003e48:	14 96       	mov	r6,r10
80003e4a:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003e4e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003e52:	c1 88       	rjmp	80003e82 <_vfprintf_r+0x2d2>
80003e54:	41 08       	lddsp	r8,sp[0x40]
80003e56:	59 f9       	cp.w	r9,31
80003e58:	e0 89 00 11 	brgt	80003e7a <_vfprintf_r+0x2ca>
80003e5c:	f0 cb ff fc 	sub	r11,r8,-4
80003e60:	51 0b       	stdsp	sp[0x40],r11
80003e62:	70 00       	ld.w	r0,r8[0x0]
80003e64:	fa cb f9 44 	sub	r11,sp,-1724
80003e68:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003e6c:	f1 40 fd 88 	st.w	r8[-632],r0
80003e70:	2f f9       	sub	r9,-1
80003e72:	14 96       	mov	r6,r10
80003e74:	fb 49 06 b4 	st.w	sp[1716],r9
80003e78:	c0 58       	rjmp	80003e82 <_vfprintf_r+0x2d2>
80003e7a:	70 00       	ld.w	r0,r8[0x0]
80003e7c:	14 96       	mov	r6,r10
80003e7e:	2f c8       	sub	r8,-4
80003e80:	51 08       	stdsp	sp[0x40],r8
80003e82:	58 00       	cp.w	r0,0
80003e84:	fe 94 ff 76 	brge	80003d70 <_vfprintf_r+0x1c0>
80003e88:	5c 30       	neg	r0
80003e8a:	a3 a5       	sbr	r5,0x2
80003e8c:	c7 2b       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003e8e:	32 b8       	mov	r8,43
80003e90:	fb 68 06 bb 	st.b	sp[1723],r8
80003e94:	c6 eb       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003e96:	0f 38       	ld.ub	r8,r7++
80003e98:	e0 48 00 2a 	cp.w	r8,42
80003e9c:	c0 30       	breq	80003ea2 <_vfprintf_r+0x2f2>
80003e9e:	30 09       	mov	r9,0
80003ea0:	c7 98       	rjmp	80003f92 <_vfprintf_r+0x3e2>
80003ea2:	0f 88       	ld.ub	r8,r7[0x0]
80003ea4:	f0 c9 00 30 	sub	r9,r8,48
80003ea8:	58 99       	cp.w	r9,9
80003eaa:	e0 8b 00 1f 	brhi	80003ee8 <_vfprintf_r+0x338>
80003eae:	ee c4 ff ff 	sub	r4,r7,-1
80003eb2:	30 0b       	mov	r11,0
80003eb4:	23 08       	sub	r8,48
80003eb6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003eba:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003ebe:	09 38       	ld.ub	r8,r4++
80003ec0:	f0 c9 00 30 	sub	r9,r8,48
80003ec4:	58 99       	cp.w	r9,9
80003ec6:	fe 98 ff f7 	brls	80003eb4 <_vfprintf_r+0x304>
80003eca:	e0 48 00 24 	cp.w	r8,36
80003ece:	fe 91 ff 4f 	brne	80003d6c <_vfprintf_r+0x1bc>
80003ed2:	e0 4b 00 20 	cp.w	r11,32
80003ed6:	e0 89 0d eb 	brgt	80005aac <_vfprintf_r+0x1efc>
80003eda:	20 1b       	sub	r11,1
80003edc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ee0:	10 3b       	cp.w	r11,r8
80003ee2:	c0 a5       	brlt	80003ef6 <_vfprintf_r+0x346>
80003ee4:	c1 18       	rjmp	80003f06 <_vfprintf_r+0x356>
80003ee6:	d7 03       	nop
80003ee8:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003eec:	ec c9 ff ff 	sub	r9,r6,-1
80003ef0:	14 36       	cp.w	r6,r10
80003ef2:	c1 f5       	brlt	80003f30 <_vfprintf_r+0x380>
80003ef4:	c2 88       	rjmp	80003f44 <_vfprintf_r+0x394>
80003ef6:	fa ca f9 44 	sub	r10,sp,-1724
80003efa:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003efe:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003f02:	50 2b       	stdsp	sp[0x8],r11
80003f04:	c3 c8       	rjmp	80003f7c <_vfprintf_r+0x3cc>
80003f06:	fa c8 f9 50 	sub	r8,sp,-1712
80003f0a:	1a d8       	st.w	--sp,r8
80003f0c:	fa c8 fa b8 	sub	r8,sp,-1352
80003f10:	1a d8       	st.w	--sp,r8
80003f12:	fa c8 fb b4 	sub	r8,sp,-1100
80003f16:	02 9a       	mov	r10,r1
80003f18:	1a d8       	st.w	--sp,r8
80003f1a:	04 9c       	mov	r12,r2
80003f1c:	fa c8 f9 40 	sub	r8,sp,-1728
80003f20:	fa c9 ff b4 	sub	r9,sp,-76
80003f24:	fe b0 fc ae 	rcall	80003880 <get_arg>
80003f28:	2f dd       	sub	sp,-12
80003f2a:	78 0c       	ld.w	r12,r12[0x0]
80003f2c:	50 2c       	stdsp	sp[0x8],r12
80003f2e:	c2 78       	rjmp	80003f7c <_vfprintf_r+0x3cc>
80003f30:	12 96       	mov	r6,r9
80003f32:	0e 94       	mov	r4,r7
80003f34:	fa c9 f9 44 	sub	r9,sp,-1724
80003f38:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003f3c:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003f40:	50 28       	stdsp	sp[0x8],r8
80003f42:	c1 d8       	rjmp	80003f7c <_vfprintf_r+0x3cc>
80003f44:	41 08       	lddsp	r8,sp[0x40]
80003f46:	59 fa       	cp.w	r10,31
80003f48:	e0 89 00 14 	brgt	80003f70 <_vfprintf_r+0x3c0>
80003f4c:	f0 cb ff fc 	sub	r11,r8,-4
80003f50:	70 08       	ld.w	r8,r8[0x0]
80003f52:	51 0b       	stdsp	sp[0x40],r11
80003f54:	50 28       	stdsp	sp[0x8],r8
80003f56:	fa c6 f9 44 	sub	r6,sp,-1724
80003f5a:	40 2e       	lddsp	lr,sp[0x8]
80003f5c:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003f60:	f1 4e fd 88 	st.w	r8[-632],lr
80003f64:	2f fa       	sub	r10,-1
80003f66:	0e 94       	mov	r4,r7
80003f68:	fb 4a 06 b4 	st.w	sp[1716],r10
80003f6c:	12 96       	mov	r6,r9
80003f6e:	c0 78       	rjmp	80003f7c <_vfprintf_r+0x3cc>
80003f70:	70 0c       	ld.w	r12,r8[0x0]
80003f72:	0e 94       	mov	r4,r7
80003f74:	2f c8       	sub	r8,-4
80003f76:	50 2c       	stdsp	sp[0x8],r12
80003f78:	12 96       	mov	r6,r9
80003f7a:	51 08       	stdsp	sp[0x40],r8
80003f7c:	40 2b       	lddsp	r11,sp[0x8]
80003f7e:	58 0b       	cp.w	r11,0
80003f80:	fe 95 fe f2 	brlt	80003d64 <_vfprintf_r+0x1b4>
80003f84:	08 97       	mov	r7,r4
80003f86:	cf 5a       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003f88:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003f8c:	0f 38       	ld.ub	r8,r7++
80003f8e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003f92:	f0 ca 00 30 	sub	r10,r8,48
80003f96:	58 9a       	cp.w	r10,9
80003f98:	fe 98 ff f8 	brls	80003f88 <_vfprintf_r+0x3d8>
80003f9c:	3f fa       	mov	r10,-1
80003f9e:	f2 0a 0c 49 	max	r9,r9,r10
80003fa2:	50 29       	stdsp	sp[0x8],r9
80003fa4:	ce 9a       	rjmp	80003d76 <_vfprintf_r+0x1c6>
80003fa6:	a7 b5       	sbr	r5,0x7
80003fa8:	ce 4a       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003faa:	30 09       	mov	r9,0
80003fac:	23 08       	sub	r8,48
80003fae:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003fb2:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003fb6:	0f 38       	ld.ub	r8,r7++
80003fb8:	f0 ca 00 30 	sub	r10,r8,48
80003fbc:	58 9a       	cp.w	r10,9
80003fbe:	fe 98 ff f7 	brls	80003fac <_vfprintf_r+0x3fc>
80003fc2:	e0 48 00 24 	cp.w	r8,36
80003fc6:	fe 91 fe d7 	brne	80003d74 <_vfprintf_r+0x1c4>
80003fca:	e0 49 00 20 	cp.w	r9,32
80003fce:	e0 89 0d 6f 	brgt	80005aac <_vfprintf_r+0x1efc>
80003fd2:	f2 c3 00 01 	sub	r3,r9,1
80003fd6:	30 19       	mov	r9,1
80003fd8:	50 39       	stdsp	sp[0xc],r9
80003fda:	cc ba       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003fdc:	a3 b5       	sbr	r5,0x3
80003fde:	cc 9a       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003fe0:	a7 a5       	sbr	r5,0x6
80003fe2:	cc 7a       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003fe4:	0a 98       	mov	r8,r5
80003fe6:	a5 b5       	sbr	r5,0x5
80003fe8:	a5 a8       	sbr	r8,0x4
80003fea:	0f 89       	ld.ub	r9,r7[0x0]
80003fec:	36 ce       	mov	lr,108
80003fee:	fc 09 18 00 	cp.b	r9,lr
80003ff2:	f7 b7 00 ff 	subeq	r7,-1
80003ff6:	f0 05 17 10 	movne	r5,r8
80003ffa:	cb ba       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80003ffc:	a5 b5       	sbr	r5,0x5
80003ffe:	cb 9a       	rjmp	80003d70 <_vfprintf_r+0x1c0>
80004000:	50 a7       	stdsp	sp[0x28],r7
80004002:	50 80       	stdsp	sp[0x20],r0
80004004:	0c 97       	mov	r7,r6
80004006:	10 90       	mov	r0,r8
80004008:	06 96       	mov	r6,r3
8000400a:	04 94       	mov	r4,r2
8000400c:	40 93       	lddsp	r3,sp[0x24]
8000400e:	02 92       	mov	r2,r1
80004010:	0e 99       	mov	r9,r7
80004012:	40 41       	lddsp	r1,sp[0x10]
80004014:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004018:	40 3c       	lddsp	r12,sp[0xc]
8000401a:	58 0c       	cp.w	r12,0
8000401c:	c1 d0       	breq	80004056 <_vfprintf_r+0x4a6>
8000401e:	10 36       	cp.w	r6,r8
80004020:	c0 64       	brge	8000402c <_vfprintf_r+0x47c>
80004022:	fa cb f9 44 	sub	r11,sp,-1724
80004026:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000402a:	c1 d8       	rjmp	80004064 <_vfprintf_r+0x4b4>
8000402c:	fa c8 f9 50 	sub	r8,sp,-1712
80004030:	1a d8       	st.w	--sp,r8
80004032:	fa c8 fa b8 	sub	r8,sp,-1352
80004036:	1a d8       	st.w	--sp,r8
80004038:	fa c8 fb b4 	sub	r8,sp,-1100
8000403c:	1a d8       	st.w	--sp,r8
8000403e:	fa c8 f9 40 	sub	r8,sp,-1728
80004042:	fa c9 ff b4 	sub	r9,sp,-76
80004046:	04 9a       	mov	r10,r2
80004048:	0c 9b       	mov	r11,r6
8000404a:	08 9c       	mov	r12,r4
8000404c:	fe b0 fc 1a 	rcall	80003880 <get_arg>
80004050:	2f dd       	sub	sp,-12
80004052:	19 b8       	ld.ub	r8,r12[0x3]
80004054:	c2 28       	rjmp	80004098 <_vfprintf_r+0x4e8>
80004056:	2f f7       	sub	r7,-1
80004058:	10 39       	cp.w	r9,r8
8000405a:	c0 84       	brge	8000406a <_vfprintf_r+0x4ba>
8000405c:	fa ca f9 44 	sub	r10,sp,-1724
80004060:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004064:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004068:	c1 88       	rjmp	80004098 <_vfprintf_r+0x4e8>
8000406a:	41 09       	lddsp	r9,sp[0x40]
8000406c:	59 f8       	cp.w	r8,31
8000406e:	e0 89 00 12 	brgt	80004092 <_vfprintf_r+0x4e2>
80004072:	f2 ca ff fc 	sub	r10,r9,-4
80004076:	51 0a       	stdsp	sp[0x40],r10
80004078:	72 09       	ld.w	r9,r9[0x0]
8000407a:	fa c6 f9 44 	sub	r6,sp,-1724
8000407e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004082:	2f f8       	sub	r8,-1
80004084:	f5 49 fd 88 	st.w	r10[-632],r9
80004088:	fb 48 06 b4 	st.w	sp[1716],r8
8000408c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004090:	c0 48       	rjmp	80004098 <_vfprintf_r+0x4e8>
80004092:	13 b8       	ld.ub	r8,r9[0x3]
80004094:	2f c9       	sub	r9,-4
80004096:	51 09       	stdsp	sp[0x40],r9
80004098:	fb 68 06 60 	st.b	sp[1632],r8
8000409c:	30 0e       	mov	lr,0
8000409e:	30 08       	mov	r8,0
800040a0:	30 12       	mov	r2,1
800040a2:	fb 68 06 bb 	st.b	sp[1723],r8
800040a6:	50 2e       	stdsp	sp[0x8],lr
800040a8:	e0 8f 08 ad 	bral	80005202 <_vfprintf_r+0x1652>
800040ac:	50 a7       	stdsp	sp[0x28],r7
800040ae:	50 80       	stdsp	sp[0x20],r0
800040b0:	0c 97       	mov	r7,r6
800040b2:	04 94       	mov	r4,r2
800040b4:	06 96       	mov	r6,r3
800040b6:	02 92       	mov	r2,r1
800040b8:	40 93       	lddsp	r3,sp[0x24]
800040ba:	10 90       	mov	r0,r8
800040bc:	40 41       	lddsp	r1,sp[0x10]
800040be:	a5 a5       	sbr	r5,0x4
800040c0:	c0 a8       	rjmp	800040d4 <_vfprintf_r+0x524>
800040c2:	50 a7       	stdsp	sp[0x28],r7
800040c4:	50 80       	stdsp	sp[0x20],r0
800040c6:	0c 97       	mov	r7,r6
800040c8:	04 94       	mov	r4,r2
800040ca:	06 96       	mov	r6,r3
800040cc:	02 92       	mov	r2,r1
800040ce:	40 93       	lddsp	r3,sp[0x24]
800040d0:	10 90       	mov	r0,r8
800040d2:	40 41       	lddsp	r1,sp[0x10]
800040d4:	ed b5 00 05 	bld	r5,0x5
800040d8:	c5 11       	brne	8000417a <_vfprintf_r+0x5ca>
800040da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040de:	40 3c       	lddsp	r12,sp[0xc]
800040e0:	58 0c       	cp.w	r12,0
800040e2:	c1 e0       	breq	8000411e <_vfprintf_r+0x56e>
800040e4:	10 36       	cp.w	r6,r8
800040e6:	c0 64       	brge	800040f2 <_vfprintf_r+0x542>
800040e8:	fa cb f9 44 	sub	r11,sp,-1724
800040ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
800040f0:	c2 08       	rjmp	80004130 <_vfprintf_r+0x580>
800040f2:	fa c8 f9 50 	sub	r8,sp,-1712
800040f6:	1a d8       	st.w	--sp,r8
800040f8:	fa c8 fa b8 	sub	r8,sp,-1352
800040fc:	0c 9b       	mov	r11,r6
800040fe:	1a d8       	st.w	--sp,r8
80004100:	fa c8 fb b4 	sub	r8,sp,-1100
80004104:	1a d8       	st.w	--sp,r8
80004106:	fa c9 ff b4 	sub	r9,sp,-76
8000410a:	fa c8 f9 40 	sub	r8,sp,-1728
8000410e:	04 9a       	mov	r10,r2
80004110:	08 9c       	mov	r12,r4
80004112:	fe b0 fb b7 	rcall	80003880 <get_arg>
80004116:	2f dd       	sub	sp,-12
80004118:	78 1b       	ld.w	r11,r12[0x4]
8000411a:	78 09       	ld.w	r9,r12[0x0]
8000411c:	c2 b8       	rjmp	80004172 <_vfprintf_r+0x5c2>
8000411e:	ee ca ff ff 	sub	r10,r7,-1
80004122:	10 37       	cp.w	r7,r8
80004124:	c0 b4       	brge	8000413a <_vfprintf_r+0x58a>
80004126:	fa c9 f9 44 	sub	r9,sp,-1724
8000412a:	14 97       	mov	r7,r10
8000412c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004130:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004134:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004138:	c1 d8       	rjmp	80004172 <_vfprintf_r+0x5c2>
8000413a:	41 09       	lddsp	r9,sp[0x40]
8000413c:	59 f8       	cp.w	r8,31
8000413e:	e0 89 00 14 	brgt	80004166 <_vfprintf_r+0x5b6>
80004142:	f2 cb ff f8 	sub	r11,r9,-8
80004146:	51 0b       	stdsp	sp[0x40],r11
80004148:	fa c6 f9 44 	sub	r6,sp,-1724
8000414c:	72 1b       	ld.w	r11,r9[0x4]
8000414e:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004152:	72 09       	ld.w	r9,r9[0x0]
80004154:	f9 4b fd 8c 	st.w	r12[-628],r11
80004158:	f9 49 fd 88 	st.w	r12[-632],r9
8000415c:	2f f8       	sub	r8,-1
8000415e:	14 97       	mov	r7,r10
80004160:	fb 48 06 b4 	st.w	sp[1716],r8
80004164:	c0 78       	rjmp	80004172 <_vfprintf_r+0x5c2>
80004166:	f2 c8 ff f8 	sub	r8,r9,-8
8000416a:	72 1b       	ld.w	r11,r9[0x4]
8000416c:	14 97       	mov	r7,r10
8000416e:	51 08       	stdsp	sp[0x40],r8
80004170:	72 09       	ld.w	r9,r9[0x0]
80004172:	16 98       	mov	r8,r11
80004174:	fa e9 00 00 	st.d	sp[0],r8
80004178:	ca e8       	rjmp	800042d4 <_vfprintf_r+0x724>
8000417a:	ed b5 00 04 	bld	r5,0x4
8000417e:	c1 71       	brne	800041ac <_vfprintf_r+0x5fc>
80004180:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004184:	40 3e       	lddsp	lr,sp[0xc]
80004186:	58 0e       	cp.w	lr,0
80004188:	c0 80       	breq	80004198 <_vfprintf_r+0x5e8>
8000418a:	10 36       	cp.w	r6,r8
8000418c:	c6 94       	brge	8000425e <_vfprintf_r+0x6ae>
8000418e:	fa cc f9 44 	sub	r12,sp,-1724
80004192:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004196:	c8 28       	rjmp	8000429a <_vfprintf_r+0x6ea>
80004198:	ee ca ff ff 	sub	r10,r7,-1
8000419c:	10 37       	cp.w	r7,r8
8000419e:	e0 84 00 81 	brge	800042a0 <_vfprintf_r+0x6f0>
800041a2:	fa cb f9 44 	sub	r11,sp,-1724
800041a6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800041aa:	c7 78       	rjmp	80004298 <_vfprintf_r+0x6e8>
800041ac:	ed b5 00 06 	bld	r5,0x6
800041b0:	c4 b1       	brne	80004246 <_vfprintf_r+0x696>
800041b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800041b6:	40 3c       	lddsp	r12,sp[0xc]
800041b8:	58 0c       	cp.w	r12,0
800041ba:	c1 d0       	breq	800041f4 <_vfprintf_r+0x644>
800041bc:	10 36       	cp.w	r6,r8
800041be:	c0 64       	brge	800041ca <_vfprintf_r+0x61a>
800041c0:	fa cb f9 44 	sub	r11,sp,-1724
800041c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800041c8:	c1 f8       	rjmp	80004206 <_vfprintf_r+0x656>
800041ca:	fa c8 f9 50 	sub	r8,sp,-1712
800041ce:	1a d8       	st.w	--sp,r8
800041d0:	fa c8 fa b8 	sub	r8,sp,-1352
800041d4:	1a d8       	st.w	--sp,r8
800041d6:	fa c8 fb b4 	sub	r8,sp,-1100
800041da:	1a d8       	st.w	--sp,r8
800041dc:	fa c8 f9 40 	sub	r8,sp,-1728
800041e0:	fa c9 ff b4 	sub	r9,sp,-76
800041e4:	04 9a       	mov	r10,r2
800041e6:	0c 9b       	mov	r11,r6
800041e8:	08 9c       	mov	r12,r4
800041ea:	fe b0 fb 4b 	rcall	80003880 <get_arg>
800041ee:	2f dd       	sub	sp,-12
800041f0:	98 18       	ld.sh	r8,r12[0x2]
800041f2:	c2 68       	rjmp	8000423e <_vfprintf_r+0x68e>
800041f4:	ee ca ff ff 	sub	r10,r7,-1
800041f8:	10 37       	cp.w	r7,r8
800041fa:	c0 94       	brge	8000420c <_vfprintf_r+0x65c>
800041fc:	fa c9 f9 44 	sub	r9,sp,-1724
80004200:	14 97       	mov	r7,r10
80004202:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004206:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000420a:	c1 a8       	rjmp	8000423e <_vfprintf_r+0x68e>
8000420c:	41 09       	lddsp	r9,sp[0x40]
8000420e:	59 f8       	cp.w	r8,31
80004210:	e0 89 00 13 	brgt	80004236 <_vfprintf_r+0x686>
80004214:	f2 cb ff fc 	sub	r11,r9,-4
80004218:	51 0b       	stdsp	sp[0x40],r11
8000421a:	72 09       	ld.w	r9,r9[0x0]
8000421c:	fa c6 f9 44 	sub	r6,sp,-1724
80004220:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004224:	2f f8       	sub	r8,-1
80004226:	f7 49 fd 88 	st.w	r11[-632],r9
8000422a:	fb 48 06 b4 	st.w	sp[1716],r8
8000422e:	14 97       	mov	r7,r10
80004230:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004234:	c0 58       	rjmp	8000423e <_vfprintf_r+0x68e>
80004236:	92 18       	ld.sh	r8,r9[0x2]
80004238:	14 97       	mov	r7,r10
8000423a:	2f c9       	sub	r9,-4
8000423c:	51 09       	stdsp	sp[0x40],r9
8000423e:	50 18       	stdsp	sp[0x4],r8
80004240:	bf 58       	asr	r8,0x1f
80004242:	50 08       	stdsp	sp[0x0],r8
80004244:	c4 88       	rjmp	800042d4 <_vfprintf_r+0x724>
80004246:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000424a:	40 3c       	lddsp	r12,sp[0xc]
8000424c:	58 0c       	cp.w	r12,0
8000424e:	c1 d0       	breq	80004288 <_vfprintf_r+0x6d8>
80004250:	10 36       	cp.w	r6,r8
80004252:	c0 64       	brge	8000425e <_vfprintf_r+0x6ae>
80004254:	fa cb f9 44 	sub	r11,sp,-1724
80004258:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000425c:	c1 f8       	rjmp	8000429a <_vfprintf_r+0x6ea>
8000425e:	fa c8 f9 50 	sub	r8,sp,-1712
80004262:	1a d8       	st.w	--sp,r8
80004264:	fa c8 fa b8 	sub	r8,sp,-1352
80004268:	0c 9b       	mov	r11,r6
8000426a:	1a d8       	st.w	--sp,r8
8000426c:	fa c8 fb b4 	sub	r8,sp,-1100
80004270:	04 9a       	mov	r10,r2
80004272:	1a d8       	st.w	--sp,r8
80004274:	08 9c       	mov	r12,r4
80004276:	fa c8 f9 40 	sub	r8,sp,-1728
8000427a:	fa c9 ff b4 	sub	r9,sp,-76
8000427e:	fe b0 fb 01 	rcall	80003880 <get_arg>
80004282:	2f dd       	sub	sp,-12
80004284:	78 0b       	ld.w	r11,r12[0x0]
80004286:	c2 48       	rjmp	800042ce <_vfprintf_r+0x71e>
80004288:	ee ca ff ff 	sub	r10,r7,-1
8000428c:	10 37       	cp.w	r7,r8
8000428e:	c0 94       	brge	800042a0 <_vfprintf_r+0x6f0>
80004290:	fa c9 f9 44 	sub	r9,sp,-1724
80004294:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004298:	14 97       	mov	r7,r10
8000429a:	ec fb fd 88 	ld.w	r11,r6[-632]
8000429e:	c1 88       	rjmp	800042ce <_vfprintf_r+0x71e>
800042a0:	41 09       	lddsp	r9,sp[0x40]
800042a2:	59 f8       	cp.w	r8,31
800042a4:	e0 89 00 11 	brgt	800042c6 <_vfprintf_r+0x716>
800042a8:	f2 cb ff fc 	sub	r11,r9,-4
800042ac:	51 0b       	stdsp	sp[0x40],r11
800042ae:	fa c6 f9 44 	sub	r6,sp,-1724
800042b2:	72 0b       	ld.w	r11,r9[0x0]
800042b4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800042b8:	f3 4b fd 88 	st.w	r9[-632],r11
800042bc:	2f f8       	sub	r8,-1
800042be:	14 97       	mov	r7,r10
800042c0:	fb 48 06 b4 	st.w	sp[1716],r8
800042c4:	c0 58       	rjmp	800042ce <_vfprintf_r+0x71e>
800042c6:	72 0b       	ld.w	r11,r9[0x0]
800042c8:	14 97       	mov	r7,r10
800042ca:	2f c9       	sub	r9,-4
800042cc:	51 09       	stdsp	sp[0x40],r9
800042ce:	50 1b       	stdsp	sp[0x4],r11
800042d0:	bf 5b       	asr	r11,0x1f
800042d2:	50 0b       	stdsp	sp[0x0],r11
800042d4:	fa ea 00 00 	ld.d	r10,sp[0]
800042d8:	58 0a       	cp.w	r10,0
800042da:	5c 2b       	cpc	r11
800042dc:	c0 e4       	brge	800042f8 <_vfprintf_r+0x748>
800042de:	30 08       	mov	r8,0
800042e0:	fa ea 00 00 	ld.d	r10,sp[0]
800042e4:	30 09       	mov	r9,0
800042e6:	f0 0a 01 0a 	sub	r10,r8,r10
800042ea:	f2 0b 01 4b 	sbc	r11,r9,r11
800042ee:	32 d8       	mov	r8,45
800042f0:	fa eb 00 00 	st.d	sp[0],r10
800042f4:	fb 68 06 bb 	st.b	sp[1723],r8
800042f8:	30 18       	mov	r8,1
800042fa:	e0 8f 06 fa 	bral	800050ee <_vfprintf_r+0x153e>
800042fe:	50 a7       	stdsp	sp[0x28],r7
80004300:	50 80       	stdsp	sp[0x20],r0
80004302:	0c 97       	mov	r7,r6
80004304:	04 94       	mov	r4,r2
80004306:	06 96       	mov	r6,r3
80004308:	02 92       	mov	r2,r1
8000430a:	40 93       	lddsp	r3,sp[0x24]
8000430c:	10 90       	mov	r0,r8
8000430e:	40 41       	lddsp	r1,sp[0x10]
80004310:	0e 99       	mov	r9,r7
80004312:	ed b5 00 03 	bld	r5,0x3
80004316:	c4 11       	brne	80004398 <_vfprintf_r+0x7e8>
80004318:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000431c:	40 3a       	lddsp	r10,sp[0xc]
8000431e:	58 0a       	cp.w	r10,0
80004320:	c1 90       	breq	80004352 <_vfprintf_r+0x7a2>
80004322:	10 36       	cp.w	r6,r8
80004324:	c6 45       	brlt	800043ec <_vfprintf_r+0x83c>
80004326:	fa c8 f9 50 	sub	r8,sp,-1712
8000432a:	1a d8       	st.w	--sp,r8
8000432c:	fa c8 fa b8 	sub	r8,sp,-1352
80004330:	1a d8       	st.w	--sp,r8
80004332:	fa c8 fb b4 	sub	r8,sp,-1100
80004336:	0c 9b       	mov	r11,r6
80004338:	1a d8       	st.w	--sp,r8
8000433a:	04 9a       	mov	r10,r2
8000433c:	fa c8 f9 40 	sub	r8,sp,-1728
80004340:	fa c9 ff b4 	sub	r9,sp,-76
80004344:	08 9c       	mov	r12,r4
80004346:	fe b0 fa 9d 	rcall	80003880 <get_arg>
8000434a:	2f dd       	sub	sp,-12
8000434c:	78 16       	ld.w	r6,r12[0x4]
8000434e:	50 76       	stdsp	sp[0x1c],r6
80004350:	c4 88       	rjmp	800043e0 <_vfprintf_r+0x830>
80004352:	2f f7       	sub	r7,-1
80004354:	10 39       	cp.w	r9,r8
80004356:	c0 c4       	brge	8000436e <_vfprintf_r+0x7be>
80004358:	fa ce f9 44 	sub	lr,sp,-1724
8000435c:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004360:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004364:	50 7c       	stdsp	sp[0x1c],r12
80004366:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000436a:	50 56       	stdsp	sp[0x14],r6
8000436c:	c6 68       	rjmp	80004438 <_vfprintf_r+0x888>
8000436e:	41 09       	lddsp	r9,sp[0x40]
80004370:	59 f8       	cp.w	r8,31
80004372:	e0 89 00 10 	brgt	80004392 <_vfprintf_r+0x7e2>
80004376:	f2 ca ff f8 	sub	r10,r9,-8
8000437a:	72 1b       	ld.w	r11,r9[0x4]
8000437c:	51 0a       	stdsp	sp[0x40],r10
8000437e:	72 09       	ld.w	r9,r9[0x0]
80004380:	fa ca f9 44 	sub	r10,sp,-1724
80004384:	50 7b       	stdsp	sp[0x1c],r11
80004386:	50 59       	stdsp	sp[0x14],r9
80004388:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000438c:	40 5b       	lddsp	r11,sp[0x14]
8000438e:	40 7a       	lddsp	r10,sp[0x1c]
80004390:	c4 78       	rjmp	8000441e <_vfprintf_r+0x86e>
80004392:	72 18       	ld.w	r8,r9[0x4]
80004394:	50 78       	stdsp	sp[0x1c],r8
80004396:	c4 c8       	rjmp	8000442e <_vfprintf_r+0x87e>
80004398:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000439c:	40 3e       	lddsp	lr,sp[0xc]
8000439e:	58 0e       	cp.w	lr,0
800043a0:	c2 30       	breq	800043e6 <_vfprintf_r+0x836>
800043a2:	10 36       	cp.w	r6,r8
800043a4:	c0 94       	brge	800043b6 <_vfprintf_r+0x806>
800043a6:	fa cc f9 44 	sub	r12,sp,-1724
800043aa:	f8 06 00 36 	add	r6,r12,r6<<0x3
800043ae:	ec fb fd 8c 	ld.w	r11,r6[-628]
800043b2:	50 7b       	stdsp	sp[0x1c],r11
800043b4:	cd 9b       	rjmp	80004366 <_vfprintf_r+0x7b6>
800043b6:	fa c8 f9 50 	sub	r8,sp,-1712
800043ba:	1a d8       	st.w	--sp,r8
800043bc:	fa c8 fa b8 	sub	r8,sp,-1352
800043c0:	04 9a       	mov	r10,r2
800043c2:	1a d8       	st.w	--sp,r8
800043c4:	fa c8 fb b4 	sub	r8,sp,-1100
800043c8:	0c 9b       	mov	r11,r6
800043ca:	1a d8       	st.w	--sp,r8
800043cc:	08 9c       	mov	r12,r4
800043ce:	fa c8 f9 40 	sub	r8,sp,-1728
800043d2:	fa c9 ff b4 	sub	r9,sp,-76
800043d6:	fe b0 fa 55 	rcall	80003880 <get_arg>
800043da:	2f dd       	sub	sp,-12
800043dc:	78 1a       	ld.w	r10,r12[0x4]
800043de:	50 7a       	stdsp	sp[0x1c],r10
800043e0:	78 0c       	ld.w	r12,r12[0x0]
800043e2:	50 5c       	stdsp	sp[0x14],r12
800043e4:	c2 a8       	rjmp	80004438 <_vfprintf_r+0x888>
800043e6:	2f f7       	sub	r7,-1
800043e8:	10 39       	cp.w	r9,r8
800043ea:	c0 94       	brge	800043fc <_vfprintf_r+0x84c>
800043ec:	fa c9 f9 44 	sub	r9,sp,-1724
800043f0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800043f4:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800043f8:	50 78       	stdsp	sp[0x1c],r8
800043fa:	cb 6b       	rjmp	80004366 <_vfprintf_r+0x7b6>
800043fc:	41 09       	lddsp	r9,sp[0x40]
800043fe:	59 f8       	cp.w	r8,31
80004400:	e0 89 00 15 	brgt	8000442a <_vfprintf_r+0x87a>
80004404:	f2 ca ff f8 	sub	r10,r9,-8
80004408:	72 16       	ld.w	r6,r9[0x4]
8000440a:	72 09       	ld.w	r9,r9[0x0]
8000440c:	51 0a       	stdsp	sp[0x40],r10
8000440e:	50 59       	stdsp	sp[0x14],r9
80004410:	fa ce f9 44 	sub	lr,sp,-1724
80004414:	50 76       	stdsp	sp[0x1c],r6
80004416:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000441a:	40 5b       	lddsp	r11,sp[0x14]
8000441c:	0c 9a       	mov	r10,r6
8000441e:	f2 eb fd 88 	st.d	r9[-632],r10
80004422:	2f f8       	sub	r8,-1
80004424:	fb 48 06 b4 	st.w	sp[1716],r8
80004428:	c0 88       	rjmp	80004438 <_vfprintf_r+0x888>
8000442a:	72 1c       	ld.w	r12,r9[0x4]
8000442c:	50 7c       	stdsp	sp[0x1c],r12
8000442e:	f2 c8 ff f8 	sub	r8,r9,-8
80004432:	51 08       	stdsp	sp[0x40],r8
80004434:	72 09       	ld.w	r9,r9[0x0]
80004436:	50 59       	stdsp	sp[0x14],r9
80004438:	40 5b       	lddsp	r11,sp[0x14]
8000443a:	40 7a       	lddsp	r10,sp[0x1c]
8000443c:	e0 a0 1c de 	rcall	80007df8 <__isinfd>
80004440:	18 96       	mov	r6,r12
80004442:	c1 70       	breq	80004470 <_vfprintf_r+0x8c0>
80004444:	30 08       	mov	r8,0
80004446:	30 09       	mov	r9,0
80004448:	40 5b       	lddsp	r11,sp[0x14]
8000444a:	40 7a       	lddsp	r10,sp[0x1c]
8000444c:	e0 a0 21 cc 	rcall	800087e4 <__avr32_f64_cmp_lt>
80004450:	c0 40       	breq	80004458 <_vfprintf_r+0x8a8>
80004452:	32 d8       	mov	r8,45
80004454:	fb 68 06 bb 	st.b	sp[1723],r8
80004458:	fe c8 ad f8 	sub	r8,pc,-21000
8000445c:	fe c6 ad f8 	sub	r6,pc,-21000
80004460:	a7 d5       	cbr	r5,0x7
80004462:	e0 40 00 47 	cp.w	r0,71
80004466:	f0 06 17 a0 	movle	r6,r8
8000446a:	30 32       	mov	r2,3
8000446c:	e0 8f 06 ce 	bral	80005208 <_vfprintf_r+0x1658>
80004470:	40 5b       	lddsp	r11,sp[0x14]
80004472:	40 7a       	lddsp	r10,sp[0x1c]
80004474:	e0 a0 1c d7 	rcall	80007e22 <__isnand>
80004478:	c0 e0       	breq	80004494 <_vfprintf_r+0x8e4>
8000447a:	50 26       	stdsp	sp[0x8],r6
8000447c:	fe c8 ae 14 	sub	r8,pc,-20972
80004480:	fe c6 ae 14 	sub	r6,pc,-20972
80004484:	a7 d5       	cbr	r5,0x7
80004486:	e0 40 00 47 	cp.w	r0,71
8000448a:	f0 06 17 a0 	movle	r6,r8
8000448e:	30 32       	mov	r2,3
80004490:	e0 8f 06 c2 	bral	80005214 <_vfprintf_r+0x1664>
80004494:	40 2a       	lddsp	r10,sp[0x8]
80004496:	5b fa       	cp.w	r10,-1
80004498:	c0 41       	brne	800044a0 <_vfprintf_r+0x8f0>
8000449a:	30 69       	mov	r9,6
8000449c:	50 29       	stdsp	sp[0x8],r9
8000449e:	c1 18       	rjmp	800044c0 <_vfprintf_r+0x910>
800044a0:	e0 40 00 47 	cp.w	r0,71
800044a4:	5f 09       	sreq	r9
800044a6:	e0 40 00 67 	cp.w	r0,103
800044aa:	5f 08       	sreq	r8
800044ac:	f3 e8 10 08 	or	r8,r9,r8
800044b0:	f8 08 18 00 	cp.b	r8,r12
800044b4:	c0 60       	breq	800044c0 <_vfprintf_r+0x910>
800044b6:	40 28       	lddsp	r8,sp[0x8]
800044b8:	58 08       	cp.w	r8,0
800044ba:	f9 b8 00 01 	moveq	r8,1
800044be:	50 28       	stdsp	sp[0x8],r8
800044c0:	40 78       	lddsp	r8,sp[0x1c]
800044c2:	40 59       	lddsp	r9,sp[0x14]
800044c4:	fa e9 06 94 	st.d	sp[1684],r8
800044c8:	a9 a5       	sbr	r5,0x8
800044ca:	fa f8 06 94 	ld.w	r8,sp[1684]
800044ce:	58 08       	cp.w	r8,0
800044d0:	c0 65       	brlt	800044dc <_vfprintf_r+0x92c>
800044d2:	40 5e       	lddsp	lr,sp[0x14]
800044d4:	30 0c       	mov	r12,0
800044d6:	50 6e       	stdsp	sp[0x18],lr
800044d8:	50 9c       	stdsp	sp[0x24],r12
800044da:	c0 78       	rjmp	800044e8 <_vfprintf_r+0x938>
800044dc:	40 5b       	lddsp	r11,sp[0x14]
800044de:	32 da       	mov	r10,45
800044e0:	ee 1b 80 00 	eorh	r11,0x8000
800044e4:	50 9a       	stdsp	sp[0x24],r10
800044e6:	50 6b       	stdsp	sp[0x18],r11
800044e8:	e0 40 00 46 	cp.w	r0,70
800044ec:	5f 09       	sreq	r9
800044ee:	e0 40 00 66 	cp.w	r0,102
800044f2:	5f 08       	sreq	r8
800044f4:	f3 e8 10 08 	or	r8,r9,r8
800044f8:	50 48       	stdsp	sp[0x10],r8
800044fa:	c0 40       	breq	80004502 <_vfprintf_r+0x952>
800044fc:	40 22       	lddsp	r2,sp[0x8]
800044fe:	30 39       	mov	r9,3
80004500:	c1 08       	rjmp	80004520 <_vfprintf_r+0x970>
80004502:	e0 40 00 45 	cp.w	r0,69
80004506:	5f 09       	sreq	r9
80004508:	e0 40 00 65 	cp.w	r0,101
8000450c:	5f 08       	sreq	r8
8000450e:	40 22       	lddsp	r2,sp[0x8]
80004510:	10 49       	or	r9,r8
80004512:	2f f2       	sub	r2,-1
80004514:	40 46       	lddsp	r6,sp[0x10]
80004516:	ec 09 18 00 	cp.b	r9,r6
8000451a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000451e:	30 29       	mov	r9,2
80004520:	fa c8 f9 5c 	sub	r8,sp,-1700
80004524:	1a d8       	st.w	--sp,r8
80004526:	fa c8 f9 54 	sub	r8,sp,-1708
8000452a:	1a d8       	st.w	--sp,r8
8000452c:	fa c8 f9 4c 	sub	r8,sp,-1716
80004530:	08 9c       	mov	r12,r4
80004532:	1a d8       	st.w	--sp,r8
80004534:	04 98       	mov	r8,r2
80004536:	40 9b       	lddsp	r11,sp[0x24]
80004538:	40 aa       	lddsp	r10,sp[0x28]
8000453a:	e0 a0 0b c3 	rcall	80005cc0 <_dtoa_r>
8000453e:	e0 40 00 47 	cp.w	r0,71
80004542:	5f 19       	srne	r9
80004544:	e0 40 00 67 	cp.w	r0,103
80004548:	5f 18       	srne	r8
8000454a:	18 96       	mov	r6,r12
8000454c:	2f dd       	sub	sp,-12
8000454e:	f3 e8 00 08 	and	r8,r9,r8
80004552:	c0 41       	brne	8000455a <_vfprintf_r+0x9aa>
80004554:	ed b5 00 00 	bld	r5,0x0
80004558:	c3 01       	brne	800045b8 <_vfprintf_r+0xa08>
8000455a:	ec 02 00 0e 	add	lr,r6,r2
8000455e:	50 3e       	stdsp	sp[0xc],lr
80004560:	40 4c       	lddsp	r12,sp[0x10]
80004562:	58 0c       	cp.w	r12,0
80004564:	c1 50       	breq	8000458e <_vfprintf_r+0x9de>
80004566:	0d 89       	ld.ub	r9,r6[0x0]
80004568:	33 08       	mov	r8,48
8000456a:	f0 09 18 00 	cp.b	r9,r8
8000456e:	c0 b1       	brne	80004584 <_vfprintf_r+0x9d4>
80004570:	30 08       	mov	r8,0
80004572:	30 09       	mov	r9,0
80004574:	40 6b       	lddsp	r11,sp[0x18]
80004576:	40 7a       	lddsp	r10,sp[0x1c]
80004578:	e0 a0 20 ef 	rcall	80008756 <__avr32_f64_cmp_eq>
8000457c:	fb b2 00 01 	rsubeq	r2,1
80004580:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004584:	40 3b       	lddsp	r11,sp[0xc]
80004586:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000458a:	10 0b       	add	r11,r8
8000458c:	50 3b       	stdsp	sp[0xc],r11
8000458e:	40 6b       	lddsp	r11,sp[0x18]
80004590:	30 08       	mov	r8,0
80004592:	30 09       	mov	r9,0
80004594:	40 7a       	lddsp	r10,sp[0x1c]
80004596:	e0 a0 20 e0 	rcall	80008756 <__avr32_f64_cmp_eq>
8000459a:	c0 90       	breq	800045ac <_vfprintf_r+0x9fc>
8000459c:	40 3a       	lddsp	r10,sp[0xc]
8000459e:	fb 4a 06 a4 	st.w	sp[1700],r10
800045a2:	c0 58       	rjmp	800045ac <_vfprintf_r+0x9fc>
800045a4:	10 c9       	st.b	r8++,r9
800045a6:	fb 48 06 a4 	st.w	sp[1700],r8
800045aa:	c0 28       	rjmp	800045ae <_vfprintf_r+0x9fe>
800045ac:	33 09       	mov	r9,48
800045ae:	fa f8 06 a4 	ld.w	r8,sp[1700]
800045b2:	40 3e       	lddsp	lr,sp[0xc]
800045b4:	1c 38       	cp.w	r8,lr
800045b6:	cf 73       	brcs	800045a4 <_vfprintf_r+0x9f4>
800045b8:	e0 40 00 47 	cp.w	r0,71
800045bc:	5f 09       	sreq	r9
800045be:	e0 40 00 67 	cp.w	r0,103
800045c2:	5f 08       	sreq	r8
800045c4:	f3 e8 10 08 	or	r8,r9,r8
800045c8:	fa f9 06 a4 	ld.w	r9,sp[1700]
800045cc:	0c 19       	sub	r9,r6
800045ce:	50 69       	stdsp	sp[0x18],r9
800045d0:	58 08       	cp.w	r8,0
800045d2:	c0 b0       	breq	800045e8 <_vfprintf_r+0xa38>
800045d4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800045d8:	5b d8       	cp.w	r8,-3
800045da:	c0 55       	brlt	800045e4 <_vfprintf_r+0xa34>
800045dc:	40 2c       	lddsp	r12,sp[0x8]
800045de:	18 38       	cp.w	r8,r12
800045e0:	e0 8a 00 6a 	brle	800046b4 <_vfprintf_r+0xb04>
800045e4:	20 20       	sub	r0,2
800045e6:	c0 58       	rjmp	800045f0 <_vfprintf_r+0xa40>
800045e8:	e0 40 00 65 	cp.w	r0,101
800045ec:	e0 89 00 46 	brgt	80004678 <_vfprintf_r+0xac8>
800045f0:	fa fb 06 ac 	ld.w	r11,sp[1708]
800045f4:	fb 60 06 9c 	st.b	sp[1692],r0
800045f8:	20 1b       	sub	r11,1
800045fa:	fb 4b 06 ac 	st.w	sp[1708],r11
800045fe:	c0 47       	brpl	80004606 <_vfprintf_r+0xa56>
80004600:	5c 3b       	neg	r11
80004602:	32 d8       	mov	r8,45
80004604:	c0 28       	rjmp	80004608 <_vfprintf_r+0xa58>
80004606:	32 b8       	mov	r8,43
80004608:	fb 68 06 9d 	st.b	sp[1693],r8
8000460c:	58 9b       	cp.w	r11,9
8000460e:	e0 8a 00 1d 	brle	80004648 <_vfprintf_r+0xa98>
80004612:	fa c9 fa 35 	sub	r9,sp,-1483
80004616:	30 aa       	mov	r10,10
80004618:	12 98       	mov	r8,r9
8000461a:	0e 9c       	mov	r12,r7
8000461c:	0c 92       	mov	r2,r6
8000461e:	f6 0a 0c 06 	divs	r6,r11,r10
80004622:	0e 9b       	mov	r11,r7
80004624:	2d 0b       	sub	r11,-48
80004626:	10 fb       	st.b	--r8,r11
80004628:	0c 9b       	mov	r11,r6
8000462a:	58 96       	cp.w	r6,9
8000462c:	fe 99 ff f9 	brgt	8000461e <_vfprintf_r+0xa6e>
80004630:	2d 0b       	sub	r11,-48
80004632:	18 97       	mov	r7,r12
80004634:	04 96       	mov	r6,r2
80004636:	10 fb       	st.b	--r8,r11
80004638:	fa ca f9 62 	sub	r10,sp,-1694
8000463c:	c0 38       	rjmp	80004642 <_vfprintf_r+0xa92>
8000463e:	11 3b       	ld.ub	r11,r8++
80004640:	14 cb       	st.b	r10++,r11
80004642:	12 38       	cp.w	r8,r9
80004644:	cf d3       	brcs	8000463e <_vfprintf_r+0xa8e>
80004646:	c0 98       	rjmp	80004658 <_vfprintf_r+0xaa8>
80004648:	2d 0b       	sub	r11,-48
8000464a:	33 08       	mov	r8,48
8000464c:	fb 6b 06 9f 	st.b	sp[1695],r11
80004650:	fb 68 06 9e 	st.b	sp[1694],r8
80004654:	fa ca f9 60 	sub	r10,sp,-1696
80004658:	fa c8 f9 64 	sub	r8,sp,-1692
8000465c:	f4 08 01 08 	sub	r8,r10,r8
80004660:	50 e8       	stdsp	sp[0x38],r8
80004662:	10 92       	mov	r2,r8
80004664:	40 6b       	lddsp	r11,sp[0x18]
80004666:	16 02       	add	r2,r11
80004668:	58 1b       	cp.w	r11,1
8000466a:	e0 89 00 05 	brgt	80004674 <_vfprintf_r+0xac4>
8000466e:	ed b5 00 00 	bld	r5,0x0
80004672:	c3 51       	brne	800046dc <_vfprintf_r+0xb2c>
80004674:	2f f2       	sub	r2,-1
80004676:	c3 38       	rjmp	800046dc <_vfprintf_r+0xb2c>
80004678:	e0 40 00 66 	cp.w	r0,102
8000467c:	c1 c1       	brne	800046b4 <_vfprintf_r+0xb04>
8000467e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004682:	58 02       	cp.w	r2,0
80004684:	e0 8a 00 0c 	brle	8000469c <_vfprintf_r+0xaec>
80004688:	40 2a       	lddsp	r10,sp[0x8]
8000468a:	58 0a       	cp.w	r10,0
8000468c:	c0 41       	brne	80004694 <_vfprintf_r+0xae4>
8000468e:	ed b5 00 00 	bld	r5,0x0
80004692:	c2 51       	brne	800046dc <_vfprintf_r+0xb2c>
80004694:	2f f2       	sub	r2,-1
80004696:	40 29       	lddsp	r9,sp[0x8]
80004698:	12 02       	add	r2,r9
8000469a:	c0 b8       	rjmp	800046b0 <_vfprintf_r+0xb00>
8000469c:	40 28       	lddsp	r8,sp[0x8]
8000469e:	58 08       	cp.w	r8,0
800046a0:	c0 61       	brne	800046ac <_vfprintf_r+0xafc>
800046a2:	ed b5 00 00 	bld	r5,0x0
800046a6:	c0 30       	breq	800046ac <_vfprintf_r+0xafc>
800046a8:	30 12       	mov	r2,1
800046aa:	c1 98       	rjmp	800046dc <_vfprintf_r+0xb2c>
800046ac:	40 22       	lddsp	r2,sp[0x8]
800046ae:	2f e2       	sub	r2,-2
800046b0:	36 60       	mov	r0,102
800046b2:	c1 58       	rjmp	800046dc <_vfprintf_r+0xb2c>
800046b4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800046b8:	40 6e       	lddsp	lr,sp[0x18]
800046ba:	1c 32       	cp.w	r2,lr
800046bc:	c0 65       	brlt	800046c8 <_vfprintf_r+0xb18>
800046be:	ed b5 00 00 	bld	r5,0x0
800046c2:	f7 b2 00 ff 	subeq	r2,-1
800046c6:	c0 a8       	rjmp	800046da <_vfprintf_r+0xb2a>
800046c8:	e4 08 11 02 	rsub	r8,r2,2
800046cc:	40 6c       	lddsp	r12,sp[0x18]
800046ce:	58 02       	cp.w	r2,0
800046d0:	f0 02 17 a0 	movle	r2,r8
800046d4:	f9 b2 09 01 	movgt	r2,1
800046d8:	18 02       	add	r2,r12
800046da:	36 70       	mov	r0,103
800046dc:	40 9b       	lddsp	r11,sp[0x24]
800046de:	58 0b       	cp.w	r11,0
800046e0:	e0 80 05 94 	breq	80005208 <_vfprintf_r+0x1658>
800046e4:	32 d8       	mov	r8,45
800046e6:	fb 68 06 bb 	st.b	sp[1723],r8
800046ea:	e0 8f 05 93 	bral	80005210 <_vfprintf_r+0x1660>
800046ee:	50 a7       	stdsp	sp[0x28],r7
800046f0:	04 94       	mov	r4,r2
800046f2:	0c 97       	mov	r7,r6
800046f4:	02 92       	mov	r2,r1
800046f6:	06 96       	mov	r6,r3
800046f8:	40 41       	lddsp	r1,sp[0x10]
800046fa:	40 93       	lddsp	r3,sp[0x24]
800046fc:	0e 99       	mov	r9,r7
800046fe:	ed b5 00 05 	bld	r5,0x5
80004702:	c4 81       	brne	80004792 <_vfprintf_r+0xbe2>
80004704:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004708:	40 3e       	lddsp	lr,sp[0xc]
8000470a:	58 0e       	cp.w	lr,0
8000470c:	c1 d0       	breq	80004746 <_vfprintf_r+0xb96>
8000470e:	10 36       	cp.w	r6,r8
80004710:	c0 64       	brge	8000471c <_vfprintf_r+0xb6c>
80004712:	fa cc f9 44 	sub	r12,sp,-1724
80004716:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000471a:	c1 d8       	rjmp	80004754 <_vfprintf_r+0xba4>
8000471c:	fa c8 f9 50 	sub	r8,sp,-1712
80004720:	1a d8       	st.w	--sp,r8
80004722:	fa c8 fa b8 	sub	r8,sp,-1352
80004726:	04 9a       	mov	r10,r2
80004728:	1a d8       	st.w	--sp,r8
8000472a:	fa c8 fb b4 	sub	r8,sp,-1100
8000472e:	0c 9b       	mov	r11,r6
80004730:	1a d8       	st.w	--sp,r8
80004732:	08 9c       	mov	r12,r4
80004734:	fa c8 f9 40 	sub	r8,sp,-1728
80004738:	fa c9 ff b4 	sub	r9,sp,-76
8000473c:	fe b0 f8 a2 	rcall	80003880 <get_arg>
80004740:	2f dd       	sub	sp,-12
80004742:	78 0a       	ld.w	r10,r12[0x0]
80004744:	c2 08       	rjmp	80004784 <_vfprintf_r+0xbd4>
80004746:	2f f7       	sub	r7,-1
80004748:	10 39       	cp.w	r9,r8
8000474a:	c0 84       	brge	8000475a <_vfprintf_r+0xbaa>
8000474c:	fa cb f9 44 	sub	r11,sp,-1724
80004750:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004754:	ec fa fd 88 	ld.w	r10,r6[-632]
80004758:	c1 68       	rjmp	80004784 <_vfprintf_r+0xbd4>
8000475a:	41 09       	lddsp	r9,sp[0x40]
8000475c:	59 f8       	cp.w	r8,31
8000475e:	e0 89 00 10 	brgt	8000477e <_vfprintf_r+0xbce>
80004762:	f2 ca ff fc 	sub	r10,r9,-4
80004766:	51 0a       	stdsp	sp[0x40],r10
80004768:	fa c6 f9 44 	sub	r6,sp,-1724
8000476c:	72 0a       	ld.w	r10,r9[0x0]
8000476e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004772:	f3 4a fd 88 	st.w	r9[-632],r10
80004776:	2f f8       	sub	r8,-1
80004778:	fb 48 06 b4 	st.w	sp[1716],r8
8000477c:	c0 48       	rjmp	80004784 <_vfprintf_r+0xbd4>
8000477e:	72 0a       	ld.w	r10,r9[0x0]
80004780:	2f c9       	sub	r9,-4
80004782:	51 09       	stdsp	sp[0x40],r9
80004784:	40 be       	lddsp	lr,sp[0x2c]
80004786:	1c 98       	mov	r8,lr
80004788:	95 1e       	st.w	r10[0x4],lr
8000478a:	bf 58       	asr	r8,0x1f
8000478c:	95 08       	st.w	r10[0x0],r8
8000478e:	fe 9f fa 9f 	bral	80003ccc <_vfprintf_r+0x11c>
80004792:	ed b5 00 04 	bld	r5,0x4
80004796:	c4 80       	breq	80004826 <_vfprintf_r+0xc76>
80004798:	e2 15 00 40 	andl	r5,0x40,COH
8000479c:	c4 50       	breq	80004826 <_vfprintf_r+0xc76>
8000479e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047a2:	40 3c       	lddsp	r12,sp[0xc]
800047a4:	58 0c       	cp.w	r12,0
800047a6:	c1 d0       	breq	800047e0 <_vfprintf_r+0xc30>
800047a8:	10 36       	cp.w	r6,r8
800047aa:	c0 64       	brge	800047b6 <_vfprintf_r+0xc06>
800047ac:	fa cb f9 44 	sub	r11,sp,-1724
800047b0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800047b4:	c1 d8       	rjmp	800047ee <_vfprintf_r+0xc3e>
800047b6:	fa c8 f9 50 	sub	r8,sp,-1712
800047ba:	1a d8       	st.w	--sp,r8
800047bc:	fa c8 fa b8 	sub	r8,sp,-1352
800047c0:	04 9a       	mov	r10,r2
800047c2:	1a d8       	st.w	--sp,r8
800047c4:	fa c8 fb b4 	sub	r8,sp,-1100
800047c8:	0c 9b       	mov	r11,r6
800047ca:	1a d8       	st.w	--sp,r8
800047cc:	08 9c       	mov	r12,r4
800047ce:	fa c8 f9 40 	sub	r8,sp,-1728
800047d2:	fa c9 ff b4 	sub	r9,sp,-76
800047d6:	fe b0 f8 55 	rcall	80003880 <get_arg>
800047da:	2f dd       	sub	sp,-12
800047dc:	78 0a       	ld.w	r10,r12[0x0]
800047de:	c2 08       	rjmp	8000481e <_vfprintf_r+0xc6e>
800047e0:	2f f7       	sub	r7,-1
800047e2:	10 39       	cp.w	r9,r8
800047e4:	c0 84       	brge	800047f4 <_vfprintf_r+0xc44>
800047e6:	fa ca f9 44 	sub	r10,sp,-1724
800047ea:	f4 06 00 36 	add	r6,r10,r6<<0x3
800047ee:	ec fa fd 88 	ld.w	r10,r6[-632]
800047f2:	c1 68       	rjmp	8000481e <_vfprintf_r+0xc6e>
800047f4:	41 09       	lddsp	r9,sp[0x40]
800047f6:	59 f8       	cp.w	r8,31
800047f8:	e0 89 00 10 	brgt	80004818 <_vfprintf_r+0xc68>
800047fc:	f2 ca ff fc 	sub	r10,r9,-4
80004800:	51 0a       	stdsp	sp[0x40],r10
80004802:	fa c6 f9 44 	sub	r6,sp,-1724
80004806:	72 0a       	ld.w	r10,r9[0x0]
80004808:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000480c:	f3 4a fd 88 	st.w	r9[-632],r10
80004810:	2f f8       	sub	r8,-1
80004812:	fb 48 06 b4 	st.w	sp[1716],r8
80004816:	c0 48       	rjmp	8000481e <_vfprintf_r+0xc6e>
80004818:	72 0a       	ld.w	r10,r9[0x0]
8000481a:	2f c9       	sub	r9,-4
8000481c:	51 09       	stdsp	sp[0x40],r9
8000481e:	40 be       	lddsp	lr,sp[0x2c]
80004820:	b4 0e       	st.h	r10[0x0],lr
80004822:	fe 9f fa 55 	bral	80003ccc <_vfprintf_r+0x11c>
80004826:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000482a:	40 3c       	lddsp	r12,sp[0xc]
8000482c:	58 0c       	cp.w	r12,0
8000482e:	c1 d0       	breq	80004868 <_vfprintf_r+0xcb8>
80004830:	10 36       	cp.w	r6,r8
80004832:	c0 64       	brge	8000483e <_vfprintf_r+0xc8e>
80004834:	fa cb f9 44 	sub	r11,sp,-1724
80004838:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000483c:	c1 d8       	rjmp	80004876 <_vfprintf_r+0xcc6>
8000483e:	fa c8 f9 50 	sub	r8,sp,-1712
80004842:	1a d8       	st.w	--sp,r8
80004844:	fa c8 fa b8 	sub	r8,sp,-1352
80004848:	04 9a       	mov	r10,r2
8000484a:	1a d8       	st.w	--sp,r8
8000484c:	fa c8 fb b4 	sub	r8,sp,-1100
80004850:	0c 9b       	mov	r11,r6
80004852:	1a d8       	st.w	--sp,r8
80004854:	08 9c       	mov	r12,r4
80004856:	fa c8 f9 40 	sub	r8,sp,-1728
8000485a:	fa c9 ff b4 	sub	r9,sp,-76
8000485e:	fe b0 f8 11 	rcall	80003880 <get_arg>
80004862:	2f dd       	sub	sp,-12
80004864:	78 0a       	ld.w	r10,r12[0x0]
80004866:	c2 08       	rjmp	800048a6 <_vfprintf_r+0xcf6>
80004868:	2f f7       	sub	r7,-1
8000486a:	10 39       	cp.w	r9,r8
8000486c:	c0 84       	brge	8000487c <_vfprintf_r+0xccc>
8000486e:	fa ca f9 44 	sub	r10,sp,-1724
80004872:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004876:	ec fa fd 88 	ld.w	r10,r6[-632]
8000487a:	c1 68       	rjmp	800048a6 <_vfprintf_r+0xcf6>
8000487c:	41 09       	lddsp	r9,sp[0x40]
8000487e:	59 f8       	cp.w	r8,31
80004880:	e0 89 00 10 	brgt	800048a0 <_vfprintf_r+0xcf0>
80004884:	f2 ca ff fc 	sub	r10,r9,-4
80004888:	51 0a       	stdsp	sp[0x40],r10
8000488a:	fa c6 f9 44 	sub	r6,sp,-1724
8000488e:	72 0a       	ld.w	r10,r9[0x0]
80004890:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004894:	f3 4a fd 88 	st.w	r9[-632],r10
80004898:	2f f8       	sub	r8,-1
8000489a:	fb 48 06 b4 	st.w	sp[1716],r8
8000489e:	c0 48       	rjmp	800048a6 <_vfprintf_r+0xcf6>
800048a0:	72 0a       	ld.w	r10,r9[0x0]
800048a2:	2f c9       	sub	r9,-4
800048a4:	51 09       	stdsp	sp[0x40],r9
800048a6:	40 be       	lddsp	lr,sp[0x2c]
800048a8:	95 0e       	st.w	r10[0x0],lr
800048aa:	fe 9f fa 11 	bral	80003ccc <_vfprintf_r+0x11c>
800048ae:	50 a7       	stdsp	sp[0x28],r7
800048b0:	50 80       	stdsp	sp[0x20],r0
800048b2:	0c 97       	mov	r7,r6
800048b4:	04 94       	mov	r4,r2
800048b6:	06 96       	mov	r6,r3
800048b8:	02 92       	mov	r2,r1
800048ba:	40 93       	lddsp	r3,sp[0x24]
800048bc:	10 90       	mov	r0,r8
800048be:	40 41       	lddsp	r1,sp[0x10]
800048c0:	a5 a5       	sbr	r5,0x4
800048c2:	c0 a8       	rjmp	800048d6 <_vfprintf_r+0xd26>
800048c4:	50 a7       	stdsp	sp[0x28],r7
800048c6:	50 80       	stdsp	sp[0x20],r0
800048c8:	0c 97       	mov	r7,r6
800048ca:	04 94       	mov	r4,r2
800048cc:	06 96       	mov	r6,r3
800048ce:	02 92       	mov	r2,r1
800048d0:	40 93       	lddsp	r3,sp[0x24]
800048d2:	10 90       	mov	r0,r8
800048d4:	40 41       	lddsp	r1,sp[0x10]
800048d6:	ed b5 00 05 	bld	r5,0x5
800048da:	c5 d1       	brne	80004994 <_vfprintf_r+0xde4>
800048dc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048e0:	40 3c       	lddsp	r12,sp[0xc]
800048e2:	58 0c       	cp.w	r12,0
800048e4:	c2 60       	breq	80004930 <_vfprintf_r+0xd80>
800048e6:	10 36       	cp.w	r6,r8
800048e8:	c0 a4       	brge	800048fc <_vfprintf_r+0xd4c>
800048ea:	fa cb f9 44 	sub	r11,sp,-1724
800048ee:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048f2:	ec e8 fd 88 	ld.d	r8,r6[-632]
800048f6:	fa e9 00 00 	st.d	sp[0],r8
800048fa:	c1 88       	rjmp	8000492a <_vfprintf_r+0xd7a>
800048fc:	fa c8 f9 50 	sub	r8,sp,-1712
80004900:	1a d8       	st.w	--sp,r8
80004902:	fa c8 fa b8 	sub	r8,sp,-1352
80004906:	04 9a       	mov	r10,r2
80004908:	1a d8       	st.w	--sp,r8
8000490a:	0c 9b       	mov	r11,r6
8000490c:	fa c8 fb b4 	sub	r8,sp,-1100
80004910:	08 9c       	mov	r12,r4
80004912:	1a d8       	st.w	--sp,r8
80004914:	fa c8 f9 40 	sub	r8,sp,-1728
80004918:	fa c9 ff b4 	sub	r9,sp,-76
8000491c:	fe b0 f7 b2 	rcall	80003880 <get_arg>
80004920:	2f dd       	sub	sp,-12
80004922:	f8 ea 00 00 	ld.d	r10,r12[0]
80004926:	fa eb 00 00 	st.d	sp[0],r10
8000492a:	30 08       	mov	r8,0
8000492c:	e0 8f 03 de 	bral	800050e8 <_vfprintf_r+0x1538>
80004930:	ee ca ff ff 	sub	r10,r7,-1
80004934:	10 37       	cp.w	r7,r8
80004936:	c0 b4       	brge	8000494c <_vfprintf_r+0xd9c>
80004938:	fa c9 f9 44 	sub	r9,sp,-1724
8000493c:	14 97       	mov	r7,r10
8000493e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004942:	ec ea fd 88 	ld.d	r10,r6[-632]
80004946:	fa eb 00 00 	st.d	sp[0],r10
8000494a:	c1 88       	rjmp	8000497a <_vfprintf_r+0xdca>
8000494c:	41 09       	lddsp	r9,sp[0x40]
8000494e:	59 f8       	cp.w	r8,31
80004950:	e0 89 00 18 	brgt	80004980 <_vfprintf_r+0xdd0>
80004954:	f2 e6 00 00 	ld.d	r6,r9[0]
80004958:	f2 cb ff f8 	sub	r11,r9,-8
8000495c:	fa e7 00 00 	st.d	sp[0],r6
80004960:	51 0b       	stdsp	sp[0x40],r11
80004962:	fa c6 f9 44 	sub	r6,sp,-1724
80004966:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000496a:	fa e6 00 00 	ld.d	r6,sp[0]
8000496e:	f2 e7 fd 88 	st.d	r9[-632],r6
80004972:	2f f8       	sub	r8,-1
80004974:	14 97       	mov	r7,r10
80004976:	fb 48 06 b4 	st.w	sp[1716],r8
8000497a:	40 38       	lddsp	r8,sp[0xc]
8000497c:	e0 8f 03 b6 	bral	800050e8 <_vfprintf_r+0x1538>
80004980:	f2 e6 00 00 	ld.d	r6,r9[0]
80004984:	40 38       	lddsp	r8,sp[0xc]
80004986:	fa e7 00 00 	st.d	sp[0],r6
8000498a:	2f 89       	sub	r9,-8
8000498c:	14 97       	mov	r7,r10
8000498e:	51 09       	stdsp	sp[0x40],r9
80004990:	e0 8f 03 ac 	bral	800050e8 <_vfprintf_r+0x1538>
80004994:	ed b5 00 04 	bld	r5,0x4
80004998:	c1 61       	brne	800049c4 <_vfprintf_r+0xe14>
8000499a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000499e:	40 3e       	lddsp	lr,sp[0xc]
800049a0:	58 0e       	cp.w	lr,0
800049a2:	c0 80       	breq	800049b2 <_vfprintf_r+0xe02>
800049a4:	10 36       	cp.w	r6,r8
800049a6:	c6 74       	brge	80004a74 <_vfprintf_r+0xec4>
800049a8:	fa cc f9 44 	sub	r12,sp,-1724
800049ac:	f8 06 00 36 	add	r6,r12,r6<<0x3
800049b0:	c8 08       	rjmp	80004ab0 <_vfprintf_r+0xf00>
800049b2:	ee ca ff ff 	sub	r10,r7,-1
800049b6:	10 37       	cp.w	r7,r8
800049b8:	c7 f4       	brge	80004ab6 <_vfprintf_r+0xf06>
800049ba:	fa cb f9 44 	sub	r11,sp,-1724
800049be:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049c2:	c7 68       	rjmp	80004aae <_vfprintf_r+0xefe>
800049c4:	ed b5 00 06 	bld	r5,0x6
800049c8:	c4 a1       	brne	80004a5c <_vfprintf_r+0xeac>
800049ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049ce:	40 3c       	lddsp	r12,sp[0xc]
800049d0:	58 0c       	cp.w	r12,0
800049d2:	c1 d0       	breq	80004a0c <_vfprintf_r+0xe5c>
800049d4:	10 36       	cp.w	r6,r8
800049d6:	c0 64       	brge	800049e2 <_vfprintf_r+0xe32>
800049d8:	fa cb f9 44 	sub	r11,sp,-1724
800049dc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049e0:	c1 f8       	rjmp	80004a1e <_vfprintf_r+0xe6e>
800049e2:	fa c8 f9 50 	sub	r8,sp,-1712
800049e6:	1a d8       	st.w	--sp,r8
800049e8:	fa c8 fa b8 	sub	r8,sp,-1352
800049ec:	1a d8       	st.w	--sp,r8
800049ee:	fa c8 fb b4 	sub	r8,sp,-1100
800049f2:	1a d8       	st.w	--sp,r8
800049f4:	fa c8 f9 40 	sub	r8,sp,-1728
800049f8:	fa c9 ff b4 	sub	r9,sp,-76
800049fc:	04 9a       	mov	r10,r2
800049fe:	0c 9b       	mov	r11,r6
80004a00:	08 9c       	mov	r12,r4
80004a02:	fe b0 f7 3f 	rcall	80003880 <get_arg>
80004a06:	2f dd       	sub	sp,-12
80004a08:	98 18       	ld.sh	r8,r12[0x2]
80004a0a:	c2 68       	rjmp	80004a56 <_vfprintf_r+0xea6>
80004a0c:	ee ca ff ff 	sub	r10,r7,-1
80004a10:	10 37       	cp.w	r7,r8
80004a12:	c0 94       	brge	80004a24 <_vfprintf_r+0xe74>
80004a14:	fa c9 f9 44 	sub	r9,sp,-1724
80004a18:	14 97       	mov	r7,r10
80004a1a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a1e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004a22:	c1 a8       	rjmp	80004a56 <_vfprintf_r+0xea6>
80004a24:	41 09       	lddsp	r9,sp[0x40]
80004a26:	59 f8       	cp.w	r8,31
80004a28:	e0 89 00 13 	brgt	80004a4e <_vfprintf_r+0xe9e>
80004a2c:	f2 cb ff fc 	sub	r11,r9,-4
80004a30:	51 0b       	stdsp	sp[0x40],r11
80004a32:	72 09       	ld.w	r9,r9[0x0]
80004a34:	fa c6 f9 44 	sub	r6,sp,-1724
80004a38:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004a3c:	2f f8       	sub	r8,-1
80004a3e:	f7 49 fd 88 	st.w	r11[-632],r9
80004a42:	fb 48 06 b4 	st.w	sp[1716],r8
80004a46:	14 97       	mov	r7,r10
80004a48:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004a4c:	c0 58       	rjmp	80004a56 <_vfprintf_r+0xea6>
80004a4e:	92 18       	ld.sh	r8,r9[0x2]
80004a50:	14 97       	mov	r7,r10
80004a52:	2f c9       	sub	r9,-4
80004a54:	51 09       	stdsp	sp[0x40],r9
80004a56:	5c 78       	castu.h	r8
80004a58:	50 18       	stdsp	sp[0x4],r8
80004a5a:	c4 68       	rjmp	80004ae6 <_vfprintf_r+0xf36>
80004a5c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a60:	40 3c       	lddsp	r12,sp[0xc]
80004a62:	58 0c       	cp.w	r12,0
80004a64:	c1 d0       	breq	80004a9e <_vfprintf_r+0xeee>
80004a66:	10 36       	cp.w	r6,r8
80004a68:	c0 64       	brge	80004a74 <_vfprintf_r+0xec4>
80004a6a:	fa cb f9 44 	sub	r11,sp,-1724
80004a6e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a72:	c1 f8       	rjmp	80004ab0 <_vfprintf_r+0xf00>
80004a74:	fa c8 f9 50 	sub	r8,sp,-1712
80004a78:	1a d8       	st.w	--sp,r8
80004a7a:	fa c8 fa b8 	sub	r8,sp,-1352
80004a7e:	0c 9b       	mov	r11,r6
80004a80:	1a d8       	st.w	--sp,r8
80004a82:	fa c8 fb b4 	sub	r8,sp,-1100
80004a86:	04 9a       	mov	r10,r2
80004a88:	1a d8       	st.w	--sp,r8
80004a8a:	08 9c       	mov	r12,r4
80004a8c:	fa c8 f9 40 	sub	r8,sp,-1728
80004a90:	fa c9 ff b4 	sub	r9,sp,-76
80004a94:	fe b0 f6 f6 	rcall	80003880 <get_arg>
80004a98:	2f dd       	sub	sp,-12
80004a9a:	78 0b       	ld.w	r11,r12[0x0]
80004a9c:	c2 48       	rjmp	80004ae4 <_vfprintf_r+0xf34>
80004a9e:	ee ca ff ff 	sub	r10,r7,-1
80004aa2:	10 37       	cp.w	r7,r8
80004aa4:	c0 94       	brge	80004ab6 <_vfprintf_r+0xf06>
80004aa6:	fa c9 f9 44 	sub	r9,sp,-1724
80004aaa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004aae:	14 97       	mov	r7,r10
80004ab0:	ec fb fd 88 	ld.w	r11,r6[-632]
80004ab4:	c1 88       	rjmp	80004ae4 <_vfprintf_r+0xf34>
80004ab6:	41 09       	lddsp	r9,sp[0x40]
80004ab8:	59 f8       	cp.w	r8,31
80004aba:	e0 89 00 11 	brgt	80004adc <_vfprintf_r+0xf2c>
80004abe:	f2 cb ff fc 	sub	r11,r9,-4
80004ac2:	51 0b       	stdsp	sp[0x40],r11
80004ac4:	fa c6 f9 44 	sub	r6,sp,-1724
80004ac8:	72 0b       	ld.w	r11,r9[0x0]
80004aca:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ace:	f3 4b fd 88 	st.w	r9[-632],r11
80004ad2:	2f f8       	sub	r8,-1
80004ad4:	14 97       	mov	r7,r10
80004ad6:	fb 48 06 b4 	st.w	sp[1716],r8
80004ada:	c0 58       	rjmp	80004ae4 <_vfprintf_r+0xf34>
80004adc:	72 0b       	ld.w	r11,r9[0x0]
80004ade:	14 97       	mov	r7,r10
80004ae0:	2f c9       	sub	r9,-4
80004ae2:	51 09       	stdsp	sp[0x40],r9
80004ae4:	50 1b       	stdsp	sp[0x4],r11
80004ae6:	30 0e       	mov	lr,0
80004ae8:	50 0e       	stdsp	sp[0x0],lr
80004aea:	1c 98       	mov	r8,lr
80004aec:	e0 8f 02 fe 	bral	800050e8 <_vfprintf_r+0x1538>
80004af0:	50 a7       	stdsp	sp[0x28],r7
80004af2:	50 80       	stdsp	sp[0x20],r0
80004af4:	0c 97       	mov	r7,r6
80004af6:	04 94       	mov	r4,r2
80004af8:	06 96       	mov	r6,r3
80004afa:	02 92       	mov	r2,r1
80004afc:	40 93       	lddsp	r3,sp[0x24]
80004afe:	40 41       	lddsp	r1,sp[0x10]
80004b00:	0e 99       	mov	r9,r7
80004b02:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b06:	40 3c       	lddsp	r12,sp[0xc]
80004b08:	58 0c       	cp.w	r12,0
80004b0a:	c1 d0       	breq	80004b44 <_vfprintf_r+0xf94>
80004b0c:	10 36       	cp.w	r6,r8
80004b0e:	c0 64       	brge	80004b1a <_vfprintf_r+0xf6a>
80004b10:	fa cb f9 44 	sub	r11,sp,-1724
80004b14:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b18:	c1 d8       	rjmp	80004b52 <_vfprintf_r+0xfa2>
80004b1a:	fa c8 f9 50 	sub	r8,sp,-1712
80004b1e:	1a d8       	st.w	--sp,r8
80004b20:	fa c8 fa b8 	sub	r8,sp,-1352
80004b24:	1a d8       	st.w	--sp,r8
80004b26:	fa c8 fb b4 	sub	r8,sp,-1100
80004b2a:	1a d8       	st.w	--sp,r8
80004b2c:	fa c9 ff b4 	sub	r9,sp,-76
80004b30:	fa c8 f9 40 	sub	r8,sp,-1728
80004b34:	04 9a       	mov	r10,r2
80004b36:	0c 9b       	mov	r11,r6
80004b38:	08 9c       	mov	r12,r4
80004b3a:	fe b0 f6 a3 	rcall	80003880 <get_arg>
80004b3e:	2f dd       	sub	sp,-12
80004b40:	78 09       	ld.w	r9,r12[0x0]
80004b42:	c2 18       	rjmp	80004b84 <_vfprintf_r+0xfd4>
80004b44:	2f f7       	sub	r7,-1
80004b46:	10 39       	cp.w	r9,r8
80004b48:	c0 84       	brge	80004b58 <_vfprintf_r+0xfa8>
80004b4a:	fa ca f9 44 	sub	r10,sp,-1724
80004b4e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004b52:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004b56:	c1 78       	rjmp	80004b84 <_vfprintf_r+0xfd4>
80004b58:	41 09       	lddsp	r9,sp[0x40]
80004b5a:	59 f8       	cp.w	r8,31
80004b5c:	e0 89 00 10 	brgt	80004b7c <_vfprintf_r+0xfcc>
80004b60:	f2 ca ff fc 	sub	r10,r9,-4
80004b64:	51 0a       	stdsp	sp[0x40],r10
80004b66:	fa c6 f9 44 	sub	r6,sp,-1724
80004b6a:	72 09       	ld.w	r9,r9[0x0]
80004b6c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004b70:	f5 49 fd 88 	st.w	r10[-632],r9
80004b74:	2f f8       	sub	r8,-1
80004b76:	fb 48 06 b4 	st.w	sp[1716],r8
80004b7a:	c0 58       	rjmp	80004b84 <_vfprintf_r+0xfd4>
80004b7c:	f2 c8 ff fc 	sub	r8,r9,-4
80004b80:	51 08       	stdsp	sp[0x40],r8
80004b82:	72 09       	ld.w	r9,r9[0x0]
80004b84:	33 08       	mov	r8,48
80004b86:	fb 68 06 b8 	st.b	sp[1720],r8
80004b8a:	37 88       	mov	r8,120
80004b8c:	30 0e       	mov	lr,0
80004b8e:	fb 68 06 b9 	st.b	sp[1721],r8
80004b92:	fe cc b5 22 	sub	r12,pc,-19166
80004b96:	50 19       	stdsp	sp[0x4],r9
80004b98:	a1 b5       	sbr	r5,0x1
80004b9a:	50 0e       	stdsp	sp[0x0],lr
80004b9c:	50 dc       	stdsp	sp[0x34],r12
80004b9e:	30 28       	mov	r8,2
80004ba0:	37 80       	mov	r0,120
80004ba2:	e0 8f 02 a3 	bral	800050e8 <_vfprintf_r+0x1538>
80004ba6:	50 a7       	stdsp	sp[0x28],r7
80004ba8:	50 80       	stdsp	sp[0x20],r0
80004baa:	10 90       	mov	r0,r8
80004bac:	30 08       	mov	r8,0
80004bae:	fb 68 06 bb 	st.b	sp[1723],r8
80004bb2:	0c 97       	mov	r7,r6
80004bb4:	04 94       	mov	r4,r2
80004bb6:	06 96       	mov	r6,r3
80004bb8:	02 92       	mov	r2,r1
80004bba:	40 93       	lddsp	r3,sp[0x24]
80004bbc:	40 41       	lddsp	r1,sp[0x10]
80004bbe:	0e 99       	mov	r9,r7
80004bc0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bc4:	40 3b       	lddsp	r11,sp[0xc]
80004bc6:	58 0b       	cp.w	r11,0
80004bc8:	c1 d0       	breq	80004c02 <_vfprintf_r+0x1052>
80004bca:	10 36       	cp.w	r6,r8
80004bcc:	c0 64       	brge	80004bd8 <_vfprintf_r+0x1028>
80004bce:	fa ca f9 44 	sub	r10,sp,-1724
80004bd2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004bd6:	c1 d8       	rjmp	80004c10 <_vfprintf_r+0x1060>
80004bd8:	fa c8 f9 50 	sub	r8,sp,-1712
80004bdc:	1a d8       	st.w	--sp,r8
80004bde:	fa c8 fa b8 	sub	r8,sp,-1352
80004be2:	1a d8       	st.w	--sp,r8
80004be4:	fa c8 fb b4 	sub	r8,sp,-1100
80004be8:	0c 9b       	mov	r11,r6
80004bea:	1a d8       	st.w	--sp,r8
80004bec:	04 9a       	mov	r10,r2
80004bee:	fa c8 f9 40 	sub	r8,sp,-1728
80004bf2:	fa c9 ff b4 	sub	r9,sp,-76
80004bf6:	08 9c       	mov	r12,r4
80004bf8:	fe b0 f6 44 	rcall	80003880 <get_arg>
80004bfc:	2f dd       	sub	sp,-12
80004bfe:	78 06       	ld.w	r6,r12[0x0]
80004c00:	c2 08       	rjmp	80004c40 <_vfprintf_r+0x1090>
80004c02:	2f f7       	sub	r7,-1
80004c04:	10 39       	cp.w	r9,r8
80004c06:	c0 84       	brge	80004c16 <_vfprintf_r+0x1066>
80004c08:	fa c9 f9 44 	sub	r9,sp,-1724
80004c0c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c10:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004c14:	c1 68       	rjmp	80004c40 <_vfprintf_r+0x1090>
80004c16:	41 09       	lddsp	r9,sp[0x40]
80004c18:	59 f8       	cp.w	r8,31
80004c1a:	e0 89 00 10 	brgt	80004c3a <_vfprintf_r+0x108a>
80004c1e:	f2 ca ff fc 	sub	r10,r9,-4
80004c22:	51 0a       	stdsp	sp[0x40],r10
80004c24:	72 06       	ld.w	r6,r9[0x0]
80004c26:	fa ce f9 44 	sub	lr,sp,-1724
80004c2a:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004c2e:	f3 46 fd 88 	st.w	r9[-632],r6
80004c32:	2f f8       	sub	r8,-1
80004c34:	fb 48 06 b4 	st.w	sp[1716],r8
80004c38:	c0 48       	rjmp	80004c40 <_vfprintf_r+0x1090>
80004c3a:	72 06       	ld.w	r6,r9[0x0]
80004c3c:	2f c9       	sub	r9,-4
80004c3e:	51 09       	stdsp	sp[0x40],r9
80004c40:	40 2c       	lddsp	r12,sp[0x8]
80004c42:	58 0c       	cp.w	r12,0
80004c44:	c1 05       	brlt	80004c64 <_vfprintf_r+0x10b4>
80004c46:	18 9a       	mov	r10,r12
80004c48:	30 0b       	mov	r11,0
80004c4a:	0c 9c       	mov	r12,r6
80004c4c:	e0 a0 14 58 	rcall	800074fc <memchr>
80004c50:	e0 80 02 df 	breq	8000520e <_vfprintf_r+0x165e>
80004c54:	f8 06 01 02 	sub	r2,r12,r6
80004c58:	40 2b       	lddsp	r11,sp[0x8]
80004c5a:	16 32       	cp.w	r2,r11
80004c5c:	e0 89 02 d9 	brgt	8000520e <_vfprintf_r+0x165e>
80004c60:	e0 8f 02 d4 	bral	80005208 <_vfprintf_r+0x1658>
80004c64:	30 0a       	mov	r10,0
80004c66:	0c 9c       	mov	r12,r6
80004c68:	50 2a       	stdsp	sp[0x8],r10
80004c6a:	e0 a0 19 33 	rcall	80007ed0 <strlen>
80004c6e:	18 92       	mov	r2,r12
80004c70:	e0 8f 02 d2 	bral	80005214 <_vfprintf_r+0x1664>
80004c74:	50 a7       	stdsp	sp[0x28],r7
80004c76:	50 80       	stdsp	sp[0x20],r0
80004c78:	0c 97       	mov	r7,r6
80004c7a:	04 94       	mov	r4,r2
80004c7c:	06 96       	mov	r6,r3
80004c7e:	02 92       	mov	r2,r1
80004c80:	40 93       	lddsp	r3,sp[0x24]
80004c82:	10 90       	mov	r0,r8
80004c84:	40 41       	lddsp	r1,sp[0x10]
80004c86:	a5 a5       	sbr	r5,0x4
80004c88:	c0 a8       	rjmp	80004c9c <_vfprintf_r+0x10ec>
80004c8a:	50 a7       	stdsp	sp[0x28],r7
80004c8c:	50 80       	stdsp	sp[0x20],r0
80004c8e:	0c 97       	mov	r7,r6
80004c90:	04 94       	mov	r4,r2
80004c92:	06 96       	mov	r6,r3
80004c94:	02 92       	mov	r2,r1
80004c96:	40 93       	lddsp	r3,sp[0x24]
80004c98:	10 90       	mov	r0,r8
80004c9a:	40 41       	lddsp	r1,sp[0x10]
80004c9c:	ed b5 00 05 	bld	r5,0x5
80004ca0:	c5 61       	brne	80004d4c <_vfprintf_r+0x119c>
80004ca2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ca6:	40 39       	lddsp	r9,sp[0xc]
80004ca8:	58 09       	cp.w	r9,0
80004caa:	c2 10       	breq	80004cec <_vfprintf_r+0x113c>
80004cac:	10 36       	cp.w	r6,r8
80004cae:	c0 74       	brge	80004cbc <_vfprintf_r+0x110c>
80004cb0:	fa c8 f9 44 	sub	r8,sp,-1724
80004cb4:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004cb8:	c2 38       	rjmp	80004cfe <_vfprintf_r+0x114e>
80004cba:	d7 03       	nop
80004cbc:	fa c8 f9 50 	sub	r8,sp,-1712
80004cc0:	1a d8       	st.w	--sp,r8
80004cc2:	fa c8 fa b8 	sub	r8,sp,-1352
80004cc6:	1a d8       	st.w	--sp,r8
80004cc8:	fa c8 fb b4 	sub	r8,sp,-1100
80004ccc:	1a d8       	st.w	--sp,r8
80004cce:	fa c8 f9 40 	sub	r8,sp,-1728
80004cd2:	fa c9 ff b4 	sub	r9,sp,-76
80004cd6:	04 9a       	mov	r10,r2
80004cd8:	0c 9b       	mov	r11,r6
80004cda:	08 9c       	mov	r12,r4
80004cdc:	fe b0 f5 d2 	rcall	80003880 <get_arg>
80004ce0:	2f dd       	sub	sp,-12
80004ce2:	f8 e8 00 00 	ld.d	r8,r12[0]
80004ce6:	fa e9 00 00 	st.d	sp[0],r8
80004cea:	c2 e8       	rjmp	80004d46 <_vfprintf_r+0x1196>
80004cec:	ee ca ff ff 	sub	r10,r7,-1
80004cf0:	10 37       	cp.w	r7,r8
80004cf2:	c0 b4       	brge	80004d08 <_vfprintf_r+0x1158>
80004cf4:	fa c8 f9 44 	sub	r8,sp,-1724
80004cf8:	14 97       	mov	r7,r10
80004cfa:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004cfe:	ec ea fd 88 	ld.d	r10,r6[-632]
80004d02:	fa eb 00 00 	st.d	sp[0],r10
80004d06:	c2 08       	rjmp	80004d46 <_vfprintf_r+0x1196>
80004d08:	41 09       	lddsp	r9,sp[0x40]
80004d0a:	59 f8       	cp.w	r8,31
80004d0c:	e0 89 00 16 	brgt	80004d38 <_vfprintf_r+0x1188>
80004d10:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d14:	f2 cb ff f8 	sub	r11,r9,-8
80004d18:	fa e7 00 00 	st.d	sp[0],r6
80004d1c:	51 0b       	stdsp	sp[0x40],r11
80004d1e:	fa c6 f9 44 	sub	r6,sp,-1724
80004d22:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d26:	fa e6 00 00 	ld.d	r6,sp[0]
80004d2a:	f2 e7 fd 88 	st.d	r9[-632],r6
80004d2e:	2f f8       	sub	r8,-1
80004d30:	14 97       	mov	r7,r10
80004d32:	fb 48 06 b4 	st.w	sp[1716],r8
80004d36:	c0 88       	rjmp	80004d46 <_vfprintf_r+0x1196>
80004d38:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d3c:	2f 89       	sub	r9,-8
80004d3e:	fa e7 00 00 	st.d	sp[0],r6
80004d42:	51 09       	stdsp	sp[0x40],r9
80004d44:	14 97       	mov	r7,r10
80004d46:	30 18       	mov	r8,1
80004d48:	e0 8f 01 d0 	bral	800050e8 <_vfprintf_r+0x1538>
80004d4c:	ed b5 00 04 	bld	r5,0x4
80004d50:	c1 61       	brne	80004d7c <_vfprintf_r+0x11cc>
80004d52:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d56:	40 3e       	lddsp	lr,sp[0xc]
80004d58:	58 0e       	cp.w	lr,0
80004d5a:	c0 80       	breq	80004d6a <_vfprintf_r+0x11ba>
80004d5c:	10 36       	cp.w	r6,r8
80004d5e:	c6 74       	brge	80004e2c <_vfprintf_r+0x127c>
80004d60:	fa cc f9 44 	sub	r12,sp,-1724
80004d64:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d68:	c8 08       	rjmp	80004e68 <_vfprintf_r+0x12b8>
80004d6a:	ee ca ff ff 	sub	r10,r7,-1
80004d6e:	10 37       	cp.w	r7,r8
80004d70:	c7 f4       	brge	80004e6e <_vfprintf_r+0x12be>
80004d72:	fa cb f9 44 	sub	r11,sp,-1724
80004d76:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d7a:	c7 68       	rjmp	80004e66 <_vfprintf_r+0x12b6>
80004d7c:	ed b5 00 06 	bld	r5,0x6
80004d80:	c4 a1       	brne	80004e14 <_vfprintf_r+0x1264>
80004d82:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d86:	40 3c       	lddsp	r12,sp[0xc]
80004d88:	58 0c       	cp.w	r12,0
80004d8a:	c1 d0       	breq	80004dc4 <_vfprintf_r+0x1214>
80004d8c:	10 36       	cp.w	r6,r8
80004d8e:	c0 64       	brge	80004d9a <_vfprintf_r+0x11ea>
80004d90:	fa cb f9 44 	sub	r11,sp,-1724
80004d94:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d98:	c1 f8       	rjmp	80004dd6 <_vfprintf_r+0x1226>
80004d9a:	fa c8 f9 50 	sub	r8,sp,-1712
80004d9e:	1a d8       	st.w	--sp,r8
80004da0:	fa c8 fa b8 	sub	r8,sp,-1352
80004da4:	1a d8       	st.w	--sp,r8
80004da6:	fa c8 fb b4 	sub	r8,sp,-1100
80004daa:	1a d8       	st.w	--sp,r8
80004dac:	fa c8 f9 40 	sub	r8,sp,-1728
80004db0:	fa c9 ff b4 	sub	r9,sp,-76
80004db4:	04 9a       	mov	r10,r2
80004db6:	0c 9b       	mov	r11,r6
80004db8:	08 9c       	mov	r12,r4
80004dba:	fe b0 f5 63 	rcall	80003880 <get_arg>
80004dbe:	2f dd       	sub	sp,-12
80004dc0:	98 18       	ld.sh	r8,r12[0x2]
80004dc2:	c2 68       	rjmp	80004e0e <_vfprintf_r+0x125e>
80004dc4:	ee ca ff ff 	sub	r10,r7,-1
80004dc8:	10 37       	cp.w	r7,r8
80004dca:	c0 94       	brge	80004ddc <_vfprintf_r+0x122c>
80004dcc:	fa c9 f9 44 	sub	r9,sp,-1724
80004dd0:	14 97       	mov	r7,r10
80004dd2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004dd6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004dda:	c1 a8       	rjmp	80004e0e <_vfprintf_r+0x125e>
80004ddc:	41 09       	lddsp	r9,sp[0x40]
80004dde:	59 f8       	cp.w	r8,31
80004de0:	e0 89 00 13 	brgt	80004e06 <_vfprintf_r+0x1256>
80004de4:	f2 cb ff fc 	sub	r11,r9,-4
80004de8:	51 0b       	stdsp	sp[0x40],r11
80004dea:	72 09       	ld.w	r9,r9[0x0]
80004dec:	fa c6 f9 44 	sub	r6,sp,-1724
80004df0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004df4:	2f f8       	sub	r8,-1
80004df6:	f7 49 fd 88 	st.w	r11[-632],r9
80004dfa:	fb 48 06 b4 	st.w	sp[1716],r8
80004dfe:	14 97       	mov	r7,r10
80004e00:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004e04:	c0 58       	rjmp	80004e0e <_vfprintf_r+0x125e>
80004e06:	92 18       	ld.sh	r8,r9[0x2]
80004e08:	14 97       	mov	r7,r10
80004e0a:	2f c9       	sub	r9,-4
80004e0c:	51 09       	stdsp	sp[0x40],r9
80004e0e:	5c 78       	castu.h	r8
80004e10:	50 18       	stdsp	sp[0x4],r8
80004e12:	c4 68       	rjmp	80004e9e <_vfprintf_r+0x12ee>
80004e14:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e18:	40 3c       	lddsp	r12,sp[0xc]
80004e1a:	58 0c       	cp.w	r12,0
80004e1c:	c1 d0       	breq	80004e56 <_vfprintf_r+0x12a6>
80004e1e:	10 36       	cp.w	r6,r8
80004e20:	c0 64       	brge	80004e2c <_vfprintf_r+0x127c>
80004e22:	fa cb f9 44 	sub	r11,sp,-1724
80004e26:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e2a:	c1 f8       	rjmp	80004e68 <_vfprintf_r+0x12b8>
80004e2c:	fa c8 f9 50 	sub	r8,sp,-1712
80004e30:	1a d8       	st.w	--sp,r8
80004e32:	fa c8 fa b8 	sub	r8,sp,-1352
80004e36:	0c 9b       	mov	r11,r6
80004e38:	1a d8       	st.w	--sp,r8
80004e3a:	fa c8 fb b4 	sub	r8,sp,-1100
80004e3e:	04 9a       	mov	r10,r2
80004e40:	1a d8       	st.w	--sp,r8
80004e42:	08 9c       	mov	r12,r4
80004e44:	fa c8 f9 40 	sub	r8,sp,-1728
80004e48:	fa c9 ff b4 	sub	r9,sp,-76
80004e4c:	fe b0 f5 1a 	rcall	80003880 <get_arg>
80004e50:	2f dd       	sub	sp,-12
80004e52:	78 0b       	ld.w	r11,r12[0x0]
80004e54:	c2 48       	rjmp	80004e9c <_vfprintf_r+0x12ec>
80004e56:	ee ca ff ff 	sub	r10,r7,-1
80004e5a:	10 37       	cp.w	r7,r8
80004e5c:	c0 94       	brge	80004e6e <_vfprintf_r+0x12be>
80004e5e:	fa c9 f9 44 	sub	r9,sp,-1724
80004e62:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e66:	14 97       	mov	r7,r10
80004e68:	ec fb fd 88 	ld.w	r11,r6[-632]
80004e6c:	c1 88       	rjmp	80004e9c <_vfprintf_r+0x12ec>
80004e6e:	41 09       	lddsp	r9,sp[0x40]
80004e70:	59 f8       	cp.w	r8,31
80004e72:	e0 89 00 11 	brgt	80004e94 <_vfprintf_r+0x12e4>
80004e76:	f2 cb ff fc 	sub	r11,r9,-4
80004e7a:	51 0b       	stdsp	sp[0x40],r11
80004e7c:	fa c6 f9 44 	sub	r6,sp,-1724
80004e80:	72 0b       	ld.w	r11,r9[0x0]
80004e82:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e86:	f3 4b fd 88 	st.w	r9[-632],r11
80004e8a:	2f f8       	sub	r8,-1
80004e8c:	14 97       	mov	r7,r10
80004e8e:	fb 48 06 b4 	st.w	sp[1716],r8
80004e92:	c0 58       	rjmp	80004e9c <_vfprintf_r+0x12ec>
80004e94:	72 0b       	ld.w	r11,r9[0x0]
80004e96:	14 97       	mov	r7,r10
80004e98:	2f c9       	sub	r9,-4
80004e9a:	51 09       	stdsp	sp[0x40],r9
80004e9c:	50 1b       	stdsp	sp[0x4],r11
80004e9e:	30 0e       	mov	lr,0
80004ea0:	30 18       	mov	r8,1
80004ea2:	50 0e       	stdsp	sp[0x0],lr
80004ea4:	c2 29       	rjmp	800050e8 <_vfprintf_r+0x1538>
80004ea6:	50 a7       	stdsp	sp[0x28],r7
80004ea8:	50 80       	stdsp	sp[0x20],r0
80004eaa:	0c 97       	mov	r7,r6
80004eac:	04 94       	mov	r4,r2
80004eae:	06 96       	mov	r6,r3
80004eb0:	02 92       	mov	r2,r1
80004eb2:	fe cc b8 42 	sub	r12,pc,-18366
80004eb6:	40 93       	lddsp	r3,sp[0x24]
80004eb8:	10 90       	mov	r0,r8
80004eba:	40 41       	lddsp	r1,sp[0x10]
80004ebc:	50 dc       	stdsp	sp[0x34],r12
80004ebe:	ed b5 00 05 	bld	r5,0x5
80004ec2:	c5 51       	brne	80004f6c <_vfprintf_r+0x13bc>
80004ec4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ec8:	40 3b       	lddsp	r11,sp[0xc]
80004eca:	58 0b       	cp.w	r11,0
80004ecc:	c2 20       	breq	80004f10 <_vfprintf_r+0x1360>
80004ece:	10 36       	cp.w	r6,r8
80004ed0:	c0 a4       	brge	80004ee4 <_vfprintf_r+0x1334>
80004ed2:	fa ca f9 44 	sub	r10,sp,-1724
80004ed6:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004eda:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004ede:	fa e9 00 00 	st.d	sp[0],r8
80004ee2:	cf 28       	rjmp	800050c6 <_vfprintf_r+0x1516>
80004ee4:	fa c8 f9 50 	sub	r8,sp,-1712
80004ee8:	1a d8       	st.w	--sp,r8
80004eea:	fa c8 fa b8 	sub	r8,sp,-1352
80004eee:	04 9a       	mov	r10,r2
80004ef0:	1a d8       	st.w	--sp,r8
80004ef2:	0c 9b       	mov	r11,r6
80004ef4:	fa c8 fb b4 	sub	r8,sp,-1100
80004ef8:	08 9c       	mov	r12,r4
80004efa:	1a d8       	st.w	--sp,r8
80004efc:	fa c8 f9 40 	sub	r8,sp,-1728
80004f00:	fa c9 ff b4 	sub	r9,sp,-76
80004f04:	fe b0 f4 be 	rcall	80003880 <get_arg>
80004f08:	2f dd       	sub	sp,-12
80004f0a:	f8 ea 00 00 	ld.d	r10,r12[0]
80004f0e:	c0 c8       	rjmp	80004f26 <_vfprintf_r+0x1376>
80004f10:	ee ca ff ff 	sub	r10,r7,-1
80004f14:	10 37       	cp.w	r7,r8
80004f16:	c0 b4       	brge	80004f2c <_vfprintf_r+0x137c>
80004f18:	fa c9 f9 44 	sub	r9,sp,-1724
80004f1c:	14 97       	mov	r7,r10
80004f1e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004f22:	ec ea fd 88 	ld.d	r10,r6[-632]
80004f26:	fa eb 00 00 	st.d	sp[0],r10
80004f2a:	cc e8       	rjmp	800050c6 <_vfprintf_r+0x1516>
80004f2c:	41 09       	lddsp	r9,sp[0x40]
80004f2e:	59 f8       	cp.w	r8,31
80004f30:	e0 89 00 16 	brgt	80004f5c <_vfprintf_r+0x13ac>
80004f34:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f38:	f2 cb ff f8 	sub	r11,r9,-8
80004f3c:	fa e7 00 00 	st.d	sp[0],r6
80004f40:	51 0b       	stdsp	sp[0x40],r11
80004f42:	fa c6 f9 44 	sub	r6,sp,-1724
80004f46:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f4a:	fa e6 00 00 	ld.d	r6,sp[0]
80004f4e:	f2 e7 fd 88 	st.d	r9[-632],r6
80004f52:	2f f8       	sub	r8,-1
80004f54:	14 97       	mov	r7,r10
80004f56:	fb 48 06 b4 	st.w	sp[1716],r8
80004f5a:	cb 68       	rjmp	800050c6 <_vfprintf_r+0x1516>
80004f5c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f60:	2f 89       	sub	r9,-8
80004f62:	fa e7 00 00 	st.d	sp[0],r6
80004f66:	51 09       	stdsp	sp[0x40],r9
80004f68:	14 97       	mov	r7,r10
80004f6a:	ca e8       	rjmp	800050c6 <_vfprintf_r+0x1516>
80004f6c:	ed b5 00 04 	bld	r5,0x4
80004f70:	c1 71       	brne	80004f9e <_vfprintf_r+0x13ee>
80004f72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f76:	40 3e       	lddsp	lr,sp[0xc]
80004f78:	58 0e       	cp.w	lr,0
80004f7a:	c0 80       	breq	80004f8a <_vfprintf_r+0x13da>
80004f7c:	10 36       	cp.w	r6,r8
80004f7e:	c6 94       	brge	80005050 <_vfprintf_r+0x14a0>
80004f80:	fa cc f9 44 	sub	r12,sp,-1724
80004f84:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004f88:	c8 28       	rjmp	8000508c <_vfprintf_r+0x14dc>
80004f8a:	ee ca ff ff 	sub	r10,r7,-1
80004f8e:	10 37       	cp.w	r7,r8
80004f90:	e0 84 00 81 	brge	80005092 <_vfprintf_r+0x14e2>
80004f94:	fa cb f9 44 	sub	r11,sp,-1724
80004f98:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f9c:	c7 78       	rjmp	8000508a <_vfprintf_r+0x14da>
80004f9e:	ed b5 00 06 	bld	r5,0x6
80004fa2:	c4 b1       	brne	80005038 <_vfprintf_r+0x1488>
80004fa4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fa8:	40 3c       	lddsp	r12,sp[0xc]
80004faa:	58 0c       	cp.w	r12,0
80004fac:	c1 d0       	breq	80004fe6 <_vfprintf_r+0x1436>
80004fae:	10 36       	cp.w	r6,r8
80004fb0:	c0 64       	brge	80004fbc <_vfprintf_r+0x140c>
80004fb2:	fa cb f9 44 	sub	r11,sp,-1724
80004fb6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004fba:	c1 f8       	rjmp	80004ff8 <_vfprintf_r+0x1448>
80004fbc:	fa c8 f9 50 	sub	r8,sp,-1712
80004fc0:	1a d8       	st.w	--sp,r8
80004fc2:	fa c8 fa b8 	sub	r8,sp,-1352
80004fc6:	1a d8       	st.w	--sp,r8
80004fc8:	fa c8 fb b4 	sub	r8,sp,-1100
80004fcc:	1a d8       	st.w	--sp,r8
80004fce:	fa c8 f9 40 	sub	r8,sp,-1728
80004fd2:	fa c9 ff b4 	sub	r9,sp,-76
80004fd6:	04 9a       	mov	r10,r2
80004fd8:	0c 9b       	mov	r11,r6
80004fda:	08 9c       	mov	r12,r4
80004fdc:	fe b0 f4 52 	rcall	80003880 <get_arg>
80004fe0:	2f dd       	sub	sp,-12
80004fe2:	98 18       	ld.sh	r8,r12[0x2]
80004fe4:	c2 78       	rjmp	80005032 <_vfprintf_r+0x1482>
80004fe6:	ee ca ff ff 	sub	r10,r7,-1
80004fea:	10 37       	cp.w	r7,r8
80004fec:	c0 a4       	brge	80005000 <_vfprintf_r+0x1450>
80004fee:	fa c9 f9 44 	sub	r9,sp,-1724
80004ff2:	14 97       	mov	r7,r10
80004ff4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ff8:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004ffc:	c1 b8       	rjmp	80005032 <_vfprintf_r+0x1482>
80004ffe:	d7 03       	nop
80005000:	41 09       	lddsp	r9,sp[0x40]
80005002:	59 f8       	cp.w	r8,31
80005004:	e0 89 00 13 	brgt	8000502a <_vfprintf_r+0x147a>
80005008:	f2 cb ff fc 	sub	r11,r9,-4
8000500c:	51 0b       	stdsp	sp[0x40],r11
8000500e:	72 09       	ld.w	r9,r9[0x0]
80005010:	fa c6 f9 44 	sub	r6,sp,-1724
80005014:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005018:	2f f8       	sub	r8,-1
8000501a:	f7 49 fd 88 	st.w	r11[-632],r9
8000501e:	fb 48 06 b4 	st.w	sp[1716],r8
80005022:	14 97       	mov	r7,r10
80005024:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005028:	c0 58       	rjmp	80005032 <_vfprintf_r+0x1482>
8000502a:	92 18       	ld.sh	r8,r9[0x2]
8000502c:	14 97       	mov	r7,r10
8000502e:	2f c9       	sub	r9,-4
80005030:	51 09       	stdsp	sp[0x40],r9
80005032:	5c 78       	castu.h	r8
80005034:	50 18       	stdsp	sp[0x4],r8
80005036:	c4 68       	rjmp	800050c2 <_vfprintf_r+0x1512>
80005038:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000503c:	40 3c       	lddsp	r12,sp[0xc]
8000503e:	58 0c       	cp.w	r12,0
80005040:	c1 d0       	breq	8000507a <_vfprintf_r+0x14ca>
80005042:	10 36       	cp.w	r6,r8
80005044:	c0 64       	brge	80005050 <_vfprintf_r+0x14a0>
80005046:	fa cb f9 44 	sub	r11,sp,-1724
8000504a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000504e:	c1 f8       	rjmp	8000508c <_vfprintf_r+0x14dc>
80005050:	fa c8 f9 50 	sub	r8,sp,-1712
80005054:	1a d8       	st.w	--sp,r8
80005056:	fa c8 fa b8 	sub	r8,sp,-1352
8000505a:	0c 9b       	mov	r11,r6
8000505c:	1a d8       	st.w	--sp,r8
8000505e:	fa c8 fb b4 	sub	r8,sp,-1100
80005062:	04 9a       	mov	r10,r2
80005064:	1a d8       	st.w	--sp,r8
80005066:	08 9c       	mov	r12,r4
80005068:	fa c8 f9 40 	sub	r8,sp,-1728
8000506c:	fa c9 ff b4 	sub	r9,sp,-76
80005070:	fe b0 f4 08 	rcall	80003880 <get_arg>
80005074:	2f dd       	sub	sp,-12
80005076:	78 0b       	ld.w	r11,r12[0x0]
80005078:	c2 48       	rjmp	800050c0 <_vfprintf_r+0x1510>
8000507a:	ee ca ff ff 	sub	r10,r7,-1
8000507e:	10 37       	cp.w	r7,r8
80005080:	c0 94       	brge	80005092 <_vfprintf_r+0x14e2>
80005082:	fa c9 f9 44 	sub	r9,sp,-1724
80005086:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000508a:	14 97       	mov	r7,r10
8000508c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005090:	c1 88       	rjmp	800050c0 <_vfprintf_r+0x1510>
80005092:	41 09       	lddsp	r9,sp[0x40]
80005094:	59 f8       	cp.w	r8,31
80005096:	e0 89 00 11 	brgt	800050b8 <_vfprintf_r+0x1508>
8000509a:	f2 cb ff fc 	sub	r11,r9,-4
8000509e:	51 0b       	stdsp	sp[0x40],r11
800050a0:	fa c6 f9 44 	sub	r6,sp,-1724
800050a4:	72 0b       	ld.w	r11,r9[0x0]
800050a6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800050aa:	f3 4b fd 88 	st.w	r9[-632],r11
800050ae:	2f f8       	sub	r8,-1
800050b0:	14 97       	mov	r7,r10
800050b2:	fb 48 06 b4 	st.w	sp[1716],r8
800050b6:	c0 58       	rjmp	800050c0 <_vfprintf_r+0x1510>
800050b8:	72 0b       	ld.w	r11,r9[0x0]
800050ba:	14 97       	mov	r7,r10
800050bc:	2f c9       	sub	r9,-4
800050be:	51 09       	stdsp	sp[0x40],r9
800050c0:	50 1b       	stdsp	sp[0x4],r11
800050c2:	30 0e       	mov	lr,0
800050c4:	50 0e       	stdsp	sp[0x0],lr
800050c6:	40 08       	lddsp	r8,sp[0x0]
800050c8:	40 1c       	lddsp	r12,sp[0x4]
800050ca:	18 48       	or	r8,r12
800050cc:	5f 19       	srne	r9
800050ce:	0a 98       	mov	r8,r5
800050d0:	eb e9 00 09 	and	r9,r5,r9
800050d4:	a1 b8       	sbr	r8,0x1
800050d6:	58 09       	cp.w	r9,0
800050d8:	c0 70       	breq	800050e6 <_vfprintf_r+0x1536>
800050da:	10 95       	mov	r5,r8
800050dc:	fb 60 06 b9 	st.b	sp[1721],r0
800050e0:	33 08       	mov	r8,48
800050e2:	fb 68 06 b8 	st.b	sp[1720],r8
800050e6:	30 28       	mov	r8,2
800050e8:	30 09       	mov	r9,0
800050ea:	fb 69 06 bb 	st.b	sp[1723],r9
800050ee:	0a 99       	mov	r9,r5
800050f0:	a7 d9       	cbr	r9,0x7
800050f2:	40 2b       	lddsp	r11,sp[0x8]
800050f4:	40 16       	lddsp	r6,sp[0x4]
800050f6:	58 0b       	cp.w	r11,0
800050f8:	5f 1a       	srne	r10
800050fa:	f2 05 17 40 	movge	r5,r9
800050fe:	fa c2 f9 78 	sub	r2,sp,-1672
80005102:	40 09       	lddsp	r9,sp[0x0]
80005104:	0c 49       	or	r9,r6
80005106:	5f 19       	srne	r9
80005108:	f5 e9 10 09 	or	r9,r10,r9
8000510c:	c5 c0       	breq	800051c4 <_vfprintf_r+0x1614>
8000510e:	30 19       	mov	r9,1
80005110:	f2 08 18 00 	cp.b	r8,r9
80005114:	c0 60       	breq	80005120 <_vfprintf_r+0x1570>
80005116:	30 29       	mov	r9,2
80005118:	f2 08 18 00 	cp.b	r8,r9
8000511c:	c0 41       	brne	80005124 <_vfprintf_r+0x1574>
8000511e:	c3 c8       	rjmp	80005196 <_vfprintf_r+0x15e6>
80005120:	04 96       	mov	r6,r2
80005122:	c3 08       	rjmp	80005182 <_vfprintf_r+0x15d2>
80005124:	04 96       	mov	r6,r2
80005126:	fa e8 00 00 	ld.d	r8,sp[0]
8000512a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000512e:	2d 0a       	sub	r10,-48
80005130:	0c fa       	st.b	--r6,r10
80005132:	f0 0b 16 03 	lsr	r11,r8,0x3
80005136:	f2 0c 16 03 	lsr	r12,r9,0x3
8000513a:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000513e:	18 99       	mov	r9,r12
80005140:	16 98       	mov	r8,r11
80005142:	58 08       	cp.w	r8,0
80005144:	5c 29       	cpc	r9
80005146:	cf 21       	brne	8000512a <_vfprintf_r+0x157a>
80005148:	fa e9 00 00 	st.d	sp[0],r8
8000514c:	ed b5 00 00 	bld	r5,0x0
80005150:	c4 51       	brne	800051da <_vfprintf_r+0x162a>
80005152:	33 09       	mov	r9,48
80005154:	f2 0a 18 00 	cp.b	r10,r9
80005158:	c4 10       	breq	800051da <_vfprintf_r+0x162a>
8000515a:	0c f9       	st.b	--r6,r9
8000515c:	c3 f8       	rjmp	800051da <_vfprintf_r+0x162a>
8000515e:	fa ea 00 00 	ld.d	r10,sp[0]
80005162:	30 a8       	mov	r8,10
80005164:	30 09       	mov	r9,0
80005166:	e0 a0 1e 31 	rcall	80008dc8 <__avr32_umod64>
8000516a:	30 a8       	mov	r8,10
8000516c:	2d 0a       	sub	r10,-48
8000516e:	30 09       	mov	r9,0
80005170:	ac 8a       	st.b	r6[0x0],r10
80005172:	fa ea 00 00 	ld.d	r10,sp[0]
80005176:	e0 a0 1c f7 	rcall	80008b64 <__avr32_udiv64>
8000517a:	16 99       	mov	r9,r11
8000517c:	14 98       	mov	r8,r10
8000517e:	fa e9 00 00 	st.d	sp[0],r8
80005182:	20 16       	sub	r6,1
80005184:	fa ea 00 00 	ld.d	r10,sp[0]
80005188:	58 9a       	cp.w	r10,9
8000518a:	5c 2b       	cpc	r11
8000518c:	fe 9b ff e9 	brhi	8000515e <_vfprintf_r+0x15ae>
80005190:	1b f8       	ld.ub	r8,sp[0x7]
80005192:	2d 08       	sub	r8,-48
80005194:	c2 08       	rjmp	800051d4 <_vfprintf_r+0x1624>
80005196:	04 96       	mov	r6,r2
80005198:	fa e8 00 00 	ld.d	r8,sp[0]
8000519c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
800051a0:	40 de       	lddsp	lr,sp[0x34]
800051a2:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
800051a6:	0c fa       	st.b	--r6,r10
800051a8:	f2 0b 16 04 	lsr	r11,r9,0x4
800051ac:	f0 0a 16 04 	lsr	r10,r8,0x4
800051b0:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
800051b4:	16 99       	mov	r9,r11
800051b6:	14 98       	mov	r8,r10
800051b8:	58 08       	cp.w	r8,0
800051ba:	5c 29       	cpc	r9
800051bc:	cf 01       	brne	8000519c <_vfprintf_r+0x15ec>
800051be:	fa e9 00 00 	st.d	sp[0],r8
800051c2:	c0 c8       	rjmp	800051da <_vfprintf_r+0x162a>
800051c4:	58 08       	cp.w	r8,0
800051c6:	c0 91       	brne	800051d8 <_vfprintf_r+0x1628>
800051c8:	ed b5 00 00 	bld	r5,0x0
800051cc:	c0 61       	brne	800051d8 <_vfprintf_r+0x1628>
800051ce:	fa c6 f9 79 	sub	r6,sp,-1671
800051d2:	33 08       	mov	r8,48
800051d4:	ac 88       	st.b	r6[0x0],r8
800051d6:	c0 28       	rjmp	800051da <_vfprintf_r+0x162a>
800051d8:	04 96       	mov	r6,r2
800051da:	0c 12       	sub	r2,r6
800051dc:	c1 c8       	rjmp	80005214 <_vfprintf_r+0x1664>
800051de:	50 a7       	stdsp	sp[0x28],r7
800051e0:	50 80       	stdsp	sp[0x20],r0
800051e2:	40 93       	lddsp	r3,sp[0x24]
800051e4:	0c 97       	mov	r7,r6
800051e6:	10 90       	mov	r0,r8
800051e8:	04 94       	mov	r4,r2
800051ea:	40 41       	lddsp	r1,sp[0x10]
800051ec:	58 08       	cp.w	r8,0
800051ee:	e0 80 04 4f 	breq	80005a8c <_vfprintf_r+0x1edc>
800051f2:	fb 68 06 60 	st.b	sp[1632],r8
800051f6:	30 0c       	mov	r12,0
800051f8:	30 08       	mov	r8,0
800051fa:	30 12       	mov	r2,1
800051fc:	fb 68 06 bb 	st.b	sp[1723],r8
80005200:	50 2c       	stdsp	sp[0x8],r12
80005202:	fa c6 f9 a0 	sub	r6,sp,-1632
80005206:	c0 78       	rjmp	80005214 <_vfprintf_r+0x1664>
80005208:	30 0b       	mov	r11,0
8000520a:	50 2b       	stdsp	sp[0x8],r11
8000520c:	c0 48       	rjmp	80005214 <_vfprintf_r+0x1664>
8000520e:	40 22       	lddsp	r2,sp[0x8]
80005210:	30 0a       	mov	r10,0
80005212:	50 2a       	stdsp	sp[0x8],r10
80005214:	40 29       	lddsp	r9,sp[0x8]
80005216:	e4 09 0c 49 	max	r9,r2,r9
8000521a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000521e:	50 39       	stdsp	sp[0xc],r9
80005220:	0a 9e       	mov	lr,r5
80005222:	30 09       	mov	r9,0
80005224:	e2 1e 00 02 	andl	lr,0x2,COH
80005228:	f2 08 18 00 	cp.b	r8,r9
8000522c:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005230:	f7 b8 01 ff 	subne	r8,-1
80005234:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005238:	0a 9b       	mov	r11,r5
8000523a:	58 0e       	cp.w	lr,0
8000523c:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005240:	f7 bc 01 fe 	subne	r12,-2
80005244:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005248:	e2 1b 00 84 	andl	r11,0x84,COH
8000524c:	50 fe       	stdsp	sp[0x3c],lr
8000524e:	50 9b       	stdsp	sp[0x24],r11
80005250:	c4 71       	brne	800052de <_vfprintf_r+0x172e>
80005252:	40 8a       	lddsp	r10,sp[0x20]
80005254:	40 39       	lddsp	r9,sp[0xc]
80005256:	12 1a       	sub	r10,r9
80005258:	50 4a       	stdsp	sp[0x10],r10
8000525a:	58 0a       	cp.w	r10,0
8000525c:	e0 89 00 20 	brgt	8000529c <_vfprintf_r+0x16ec>
80005260:	c3 f8       	rjmp	800052de <_vfprintf_r+0x172e>
80005262:	2f 09       	sub	r9,-16
80005264:	2f f8       	sub	r8,-1
80005266:	fe ce bb de 	sub	lr,pc,-17442
8000526a:	31 0c       	mov	r12,16
8000526c:	fb 49 06 90 	st.w	sp[1680],r9
80005270:	87 0e       	st.w	r3[0x0],lr
80005272:	87 1c       	st.w	r3[0x4],r12
80005274:	fb 48 06 8c 	st.w	sp[1676],r8
80005278:	58 78       	cp.w	r8,7
8000527a:	e0 89 00 04 	brgt	80005282 <_vfprintf_r+0x16d2>
8000527e:	2f 83       	sub	r3,-8
80005280:	c0 b8       	rjmp	80005296 <_vfprintf_r+0x16e6>
80005282:	fa ca f9 78 	sub	r10,sp,-1672
80005286:	02 9b       	mov	r11,r1
80005288:	08 9c       	mov	r12,r4
8000528a:	fe b0 f4 85 	rcall	80003b94 <__sprint_r>
8000528e:	e0 81 04 10 	brne	80005aae <_vfprintf_r+0x1efe>
80005292:	fa c3 f9 e0 	sub	r3,sp,-1568
80005296:	40 4b       	lddsp	r11,sp[0x10]
80005298:	21 0b       	sub	r11,16
8000529a:	50 4b       	stdsp	sp[0x10],r11
8000529c:	fa f9 06 90 	ld.w	r9,sp[1680]
800052a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052a4:	fe ca bc 1c 	sub	r10,pc,-17380
800052a8:	40 4e       	lddsp	lr,sp[0x10]
800052aa:	59 0e       	cp.w	lr,16
800052ac:	fe 99 ff db 	brgt	80005262 <_vfprintf_r+0x16b2>
800052b0:	1c 09       	add	r9,lr
800052b2:	2f f8       	sub	r8,-1
800052b4:	87 0a       	st.w	r3[0x0],r10
800052b6:	fb 49 06 90 	st.w	sp[1680],r9
800052ba:	87 1e       	st.w	r3[0x4],lr
800052bc:	fb 48 06 8c 	st.w	sp[1676],r8
800052c0:	58 78       	cp.w	r8,7
800052c2:	e0 89 00 04 	brgt	800052ca <_vfprintf_r+0x171a>
800052c6:	2f 83       	sub	r3,-8
800052c8:	c0 b8       	rjmp	800052de <_vfprintf_r+0x172e>
800052ca:	fa ca f9 78 	sub	r10,sp,-1672
800052ce:	02 9b       	mov	r11,r1
800052d0:	08 9c       	mov	r12,r4
800052d2:	fe b0 f4 61 	rcall	80003b94 <__sprint_r>
800052d6:	e0 81 03 ec 	brne	80005aae <_vfprintf_r+0x1efe>
800052da:	fa c3 f9 e0 	sub	r3,sp,-1568
800052de:	30 09       	mov	r9,0
800052e0:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800052e4:	f2 08 18 00 	cp.b	r8,r9
800052e8:	c1 f0       	breq	80005326 <_vfprintf_r+0x1776>
800052ea:	fa f8 06 90 	ld.w	r8,sp[1680]
800052ee:	fa c9 f9 45 	sub	r9,sp,-1723
800052f2:	2f f8       	sub	r8,-1
800052f4:	87 09       	st.w	r3[0x0],r9
800052f6:	fb 48 06 90 	st.w	sp[1680],r8
800052fa:	30 19       	mov	r9,1
800052fc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005300:	87 19       	st.w	r3[0x4],r9
80005302:	2f f8       	sub	r8,-1
80005304:	fb 48 06 8c 	st.w	sp[1676],r8
80005308:	58 78       	cp.w	r8,7
8000530a:	e0 89 00 04 	brgt	80005312 <_vfprintf_r+0x1762>
8000530e:	2f 83       	sub	r3,-8
80005310:	c0 b8       	rjmp	80005326 <_vfprintf_r+0x1776>
80005312:	fa ca f9 78 	sub	r10,sp,-1672
80005316:	02 9b       	mov	r11,r1
80005318:	08 9c       	mov	r12,r4
8000531a:	fe b0 f4 3d 	rcall	80003b94 <__sprint_r>
8000531e:	e0 81 03 c8 	brne	80005aae <_vfprintf_r+0x1efe>
80005322:	fa c3 f9 e0 	sub	r3,sp,-1568
80005326:	40 fc       	lddsp	r12,sp[0x3c]
80005328:	58 0c       	cp.w	r12,0
8000532a:	c1 f0       	breq	80005368 <_vfprintf_r+0x17b8>
8000532c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005330:	fa c9 f9 48 	sub	r9,sp,-1720
80005334:	2f e8       	sub	r8,-2
80005336:	87 09       	st.w	r3[0x0],r9
80005338:	fb 48 06 90 	st.w	sp[1680],r8
8000533c:	30 29       	mov	r9,2
8000533e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005342:	87 19       	st.w	r3[0x4],r9
80005344:	2f f8       	sub	r8,-1
80005346:	fb 48 06 8c 	st.w	sp[1676],r8
8000534a:	58 78       	cp.w	r8,7
8000534c:	e0 89 00 04 	brgt	80005354 <_vfprintf_r+0x17a4>
80005350:	2f 83       	sub	r3,-8
80005352:	c0 b8       	rjmp	80005368 <_vfprintf_r+0x17b8>
80005354:	fa ca f9 78 	sub	r10,sp,-1672
80005358:	02 9b       	mov	r11,r1
8000535a:	08 9c       	mov	r12,r4
8000535c:	fe b0 f4 1c 	rcall	80003b94 <__sprint_r>
80005360:	e0 81 03 a7 	brne	80005aae <_vfprintf_r+0x1efe>
80005364:	fa c3 f9 e0 	sub	r3,sp,-1568
80005368:	40 9b       	lddsp	r11,sp[0x24]
8000536a:	e0 4b 00 80 	cp.w	r11,128
8000536e:	c4 71       	brne	800053fc <_vfprintf_r+0x184c>
80005370:	40 8a       	lddsp	r10,sp[0x20]
80005372:	40 39       	lddsp	r9,sp[0xc]
80005374:	12 1a       	sub	r10,r9
80005376:	50 4a       	stdsp	sp[0x10],r10
80005378:	58 0a       	cp.w	r10,0
8000537a:	e0 89 00 20 	brgt	800053ba <_vfprintf_r+0x180a>
8000537e:	c3 f8       	rjmp	800053fc <_vfprintf_r+0x184c>
80005380:	2f 09       	sub	r9,-16
80005382:	2f f8       	sub	r8,-1
80005384:	fe ce bc ec 	sub	lr,pc,-17172
80005388:	31 0c       	mov	r12,16
8000538a:	fb 49 06 90 	st.w	sp[1680],r9
8000538e:	87 0e       	st.w	r3[0x0],lr
80005390:	87 1c       	st.w	r3[0x4],r12
80005392:	fb 48 06 8c 	st.w	sp[1676],r8
80005396:	58 78       	cp.w	r8,7
80005398:	e0 89 00 04 	brgt	800053a0 <_vfprintf_r+0x17f0>
8000539c:	2f 83       	sub	r3,-8
8000539e:	c0 b8       	rjmp	800053b4 <_vfprintf_r+0x1804>
800053a0:	fa ca f9 78 	sub	r10,sp,-1672
800053a4:	02 9b       	mov	r11,r1
800053a6:	08 9c       	mov	r12,r4
800053a8:	fe b0 f3 f6 	rcall	80003b94 <__sprint_r>
800053ac:	e0 81 03 81 	brne	80005aae <_vfprintf_r+0x1efe>
800053b0:	fa c3 f9 e0 	sub	r3,sp,-1568
800053b4:	40 4b       	lddsp	r11,sp[0x10]
800053b6:	21 0b       	sub	r11,16
800053b8:	50 4b       	stdsp	sp[0x10],r11
800053ba:	fa f9 06 90 	ld.w	r9,sp[1680]
800053be:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053c2:	fe ca bd 2a 	sub	r10,pc,-17110
800053c6:	40 4e       	lddsp	lr,sp[0x10]
800053c8:	59 0e       	cp.w	lr,16
800053ca:	fe 99 ff db 	brgt	80005380 <_vfprintf_r+0x17d0>
800053ce:	1c 09       	add	r9,lr
800053d0:	2f f8       	sub	r8,-1
800053d2:	87 0a       	st.w	r3[0x0],r10
800053d4:	fb 49 06 90 	st.w	sp[1680],r9
800053d8:	87 1e       	st.w	r3[0x4],lr
800053da:	fb 48 06 8c 	st.w	sp[1676],r8
800053de:	58 78       	cp.w	r8,7
800053e0:	e0 89 00 04 	brgt	800053e8 <_vfprintf_r+0x1838>
800053e4:	2f 83       	sub	r3,-8
800053e6:	c0 b8       	rjmp	800053fc <_vfprintf_r+0x184c>
800053e8:	fa ca f9 78 	sub	r10,sp,-1672
800053ec:	02 9b       	mov	r11,r1
800053ee:	08 9c       	mov	r12,r4
800053f0:	fe b0 f3 d2 	rcall	80003b94 <__sprint_r>
800053f4:	e0 81 03 5d 	brne	80005aae <_vfprintf_r+0x1efe>
800053f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800053fc:	40 2c       	lddsp	r12,sp[0x8]
800053fe:	04 1c       	sub	r12,r2
80005400:	50 2c       	stdsp	sp[0x8],r12
80005402:	58 0c       	cp.w	r12,0
80005404:	e0 89 00 20 	brgt	80005444 <_vfprintf_r+0x1894>
80005408:	c3 f8       	rjmp	80005486 <_vfprintf_r+0x18d6>
8000540a:	2f 09       	sub	r9,-16
8000540c:	2f f8       	sub	r8,-1
8000540e:	fe cb bd 76 	sub	r11,pc,-17034
80005412:	31 0a       	mov	r10,16
80005414:	fb 49 06 90 	st.w	sp[1680],r9
80005418:	87 0b       	st.w	r3[0x0],r11
8000541a:	87 1a       	st.w	r3[0x4],r10
8000541c:	fb 48 06 8c 	st.w	sp[1676],r8
80005420:	58 78       	cp.w	r8,7
80005422:	e0 89 00 04 	brgt	8000542a <_vfprintf_r+0x187a>
80005426:	2f 83       	sub	r3,-8
80005428:	c0 b8       	rjmp	8000543e <_vfprintf_r+0x188e>
8000542a:	fa ca f9 78 	sub	r10,sp,-1672
8000542e:	02 9b       	mov	r11,r1
80005430:	08 9c       	mov	r12,r4
80005432:	fe b0 f3 b1 	rcall	80003b94 <__sprint_r>
80005436:	e0 81 03 3c 	brne	80005aae <_vfprintf_r+0x1efe>
8000543a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000543e:	40 29       	lddsp	r9,sp[0x8]
80005440:	21 09       	sub	r9,16
80005442:	50 29       	stdsp	sp[0x8],r9
80005444:	fa f9 06 90 	ld.w	r9,sp[1680]
80005448:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000544c:	fe ca bd b4 	sub	r10,pc,-16972
80005450:	40 2e       	lddsp	lr,sp[0x8]
80005452:	59 0e       	cp.w	lr,16
80005454:	fe 99 ff db 	brgt	8000540a <_vfprintf_r+0x185a>
80005458:	1c 09       	add	r9,lr
8000545a:	2f f8       	sub	r8,-1
8000545c:	87 0a       	st.w	r3[0x0],r10
8000545e:	fb 49 06 90 	st.w	sp[1680],r9
80005462:	87 1e       	st.w	r3[0x4],lr
80005464:	fb 48 06 8c 	st.w	sp[1676],r8
80005468:	58 78       	cp.w	r8,7
8000546a:	e0 89 00 04 	brgt	80005472 <_vfprintf_r+0x18c2>
8000546e:	2f 83       	sub	r3,-8
80005470:	c0 b8       	rjmp	80005486 <_vfprintf_r+0x18d6>
80005472:	fa ca f9 78 	sub	r10,sp,-1672
80005476:	02 9b       	mov	r11,r1
80005478:	08 9c       	mov	r12,r4
8000547a:	fe b0 f3 8d 	rcall	80003b94 <__sprint_r>
8000547e:	e0 81 03 18 	brne	80005aae <_vfprintf_r+0x1efe>
80005482:	fa c3 f9 e0 	sub	r3,sp,-1568
80005486:	ed b5 00 08 	bld	r5,0x8
8000548a:	c0 b0       	breq	800054a0 <_vfprintf_r+0x18f0>
8000548c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005490:	87 12       	st.w	r3[0x4],r2
80005492:	87 06       	st.w	r3[0x0],r6
80005494:	f0 02 00 02 	add	r2,r8,r2
80005498:	fb 42 06 90 	st.w	sp[1680],r2
8000549c:	e0 8f 01 d4 	bral	80005844 <_vfprintf_r+0x1c94>
800054a0:	e0 40 00 65 	cp.w	r0,101
800054a4:	e0 8a 01 d6 	brle	80005850 <_vfprintf_r+0x1ca0>
800054a8:	30 08       	mov	r8,0
800054aa:	30 09       	mov	r9,0
800054ac:	40 5b       	lddsp	r11,sp[0x14]
800054ae:	40 7a       	lddsp	r10,sp[0x1c]
800054b0:	e0 a0 19 53 	rcall	80008756 <__avr32_f64_cmp_eq>
800054b4:	c7 90       	breq	800055a6 <_vfprintf_r+0x19f6>
800054b6:	fa f8 06 90 	ld.w	r8,sp[1680]
800054ba:	fe c9 be 36 	sub	r9,pc,-16842
800054be:	2f f8       	sub	r8,-1
800054c0:	87 09       	st.w	r3[0x0],r9
800054c2:	fb 48 06 90 	st.w	sp[1680],r8
800054c6:	30 19       	mov	r9,1
800054c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054cc:	87 19       	st.w	r3[0x4],r9
800054ce:	2f f8       	sub	r8,-1
800054d0:	fb 48 06 8c 	st.w	sp[1676],r8
800054d4:	58 78       	cp.w	r8,7
800054d6:	e0 89 00 05 	brgt	800054e0 <_vfprintf_r+0x1930>
800054da:	2f 83       	sub	r3,-8
800054dc:	c0 c8       	rjmp	800054f4 <_vfprintf_r+0x1944>
800054de:	d7 03       	nop
800054e0:	fa ca f9 78 	sub	r10,sp,-1672
800054e4:	02 9b       	mov	r11,r1
800054e6:	08 9c       	mov	r12,r4
800054e8:	fe b0 f3 56 	rcall	80003b94 <__sprint_r>
800054ec:	e0 81 02 e1 	brne	80005aae <_vfprintf_r+0x1efe>
800054f0:	fa c3 f9 e0 	sub	r3,sp,-1568
800054f4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800054f8:	40 6c       	lddsp	r12,sp[0x18]
800054fa:	18 38       	cp.w	r8,r12
800054fc:	c0 55       	brlt	80005506 <_vfprintf_r+0x1956>
800054fe:	ed b5 00 00 	bld	r5,0x0
80005502:	e0 81 02 6b 	brne	800059d8 <_vfprintf_r+0x1e28>
80005506:	fa f8 06 90 	ld.w	r8,sp[1680]
8000550a:	2f f8       	sub	r8,-1
8000550c:	40 cb       	lddsp	r11,sp[0x30]
8000550e:	fb 48 06 90 	st.w	sp[1680],r8
80005512:	30 19       	mov	r9,1
80005514:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005518:	87 0b       	st.w	r3[0x0],r11
8000551a:	2f f8       	sub	r8,-1
8000551c:	87 19       	st.w	r3[0x4],r9
8000551e:	fb 48 06 8c 	st.w	sp[1676],r8
80005522:	58 78       	cp.w	r8,7
80005524:	e0 89 00 04 	brgt	8000552c <_vfprintf_r+0x197c>
80005528:	2f 83       	sub	r3,-8
8000552a:	c0 b8       	rjmp	80005540 <_vfprintf_r+0x1990>
8000552c:	fa ca f9 78 	sub	r10,sp,-1672
80005530:	02 9b       	mov	r11,r1
80005532:	08 9c       	mov	r12,r4
80005534:	fe b0 f3 30 	rcall	80003b94 <__sprint_r>
80005538:	e0 81 02 bb 	brne	80005aae <_vfprintf_r+0x1efe>
8000553c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005540:	40 66       	lddsp	r6,sp[0x18]
80005542:	20 16       	sub	r6,1
80005544:	58 06       	cp.w	r6,0
80005546:	e0 89 00 1d 	brgt	80005580 <_vfprintf_r+0x19d0>
8000554a:	e0 8f 02 47 	bral	800059d8 <_vfprintf_r+0x1e28>
8000554e:	2f 09       	sub	r9,-16
80005550:	2f f8       	sub	r8,-1
80005552:	fb 49 06 90 	st.w	sp[1680],r9
80005556:	87 02       	st.w	r3[0x0],r2
80005558:	87 10       	st.w	r3[0x4],r0
8000555a:	fb 48 06 8c 	st.w	sp[1676],r8
8000555e:	58 78       	cp.w	r8,7
80005560:	e0 89 00 04 	brgt	80005568 <_vfprintf_r+0x19b8>
80005564:	2f 83       	sub	r3,-8
80005566:	c0 b8       	rjmp	8000557c <_vfprintf_r+0x19cc>
80005568:	fa ca f9 78 	sub	r10,sp,-1672
8000556c:	02 9b       	mov	r11,r1
8000556e:	08 9c       	mov	r12,r4
80005570:	fe b0 f3 12 	rcall	80003b94 <__sprint_r>
80005574:	e0 81 02 9d 	brne	80005aae <_vfprintf_r+0x1efe>
80005578:	fa c3 f9 e0 	sub	r3,sp,-1568
8000557c:	21 06       	sub	r6,16
8000557e:	c0 48       	rjmp	80005586 <_vfprintf_r+0x19d6>
80005580:	fe c2 be e8 	sub	r2,pc,-16664
80005584:	31 00       	mov	r0,16
80005586:	fa f9 06 90 	ld.w	r9,sp[1680]
8000558a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000558e:	fe ca be f6 	sub	r10,pc,-16650
80005592:	59 06       	cp.w	r6,16
80005594:	fe 99 ff dd 	brgt	8000554e <_vfprintf_r+0x199e>
80005598:	0c 09       	add	r9,r6
8000559a:	87 0a       	st.w	r3[0x0],r10
8000559c:	fb 49 06 90 	st.w	sp[1680],r9
800055a0:	2f f8       	sub	r8,-1
800055a2:	87 16       	st.w	r3[0x4],r6
800055a4:	c5 39       	rjmp	8000584a <_vfprintf_r+0x1c9a>
800055a6:	fa fa 06 ac 	ld.w	r10,sp[1708]
800055aa:	58 0a       	cp.w	r10,0
800055ac:	e0 89 00 92 	brgt	800056d0 <_vfprintf_r+0x1b20>
800055b0:	fa f8 06 90 	ld.w	r8,sp[1680]
800055b4:	fe c9 bf 30 	sub	r9,pc,-16592
800055b8:	2f f8       	sub	r8,-1
800055ba:	87 09       	st.w	r3[0x0],r9
800055bc:	fb 48 06 90 	st.w	sp[1680],r8
800055c0:	30 19       	mov	r9,1
800055c2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055c6:	87 19       	st.w	r3[0x4],r9
800055c8:	2f f8       	sub	r8,-1
800055ca:	fb 48 06 8c 	st.w	sp[1676],r8
800055ce:	58 78       	cp.w	r8,7
800055d0:	e0 89 00 04 	brgt	800055d8 <_vfprintf_r+0x1a28>
800055d4:	2f 83       	sub	r3,-8
800055d6:	c0 b8       	rjmp	800055ec <_vfprintf_r+0x1a3c>
800055d8:	fa ca f9 78 	sub	r10,sp,-1672
800055dc:	02 9b       	mov	r11,r1
800055de:	08 9c       	mov	r12,r4
800055e0:	fe b0 f2 da 	rcall	80003b94 <__sprint_r>
800055e4:	e0 81 02 65 	brne	80005aae <_vfprintf_r+0x1efe>
800055e8:	fa c3 f9 e0 	sub	r3,sp,-1568
800055ec:	fa f8 06 ac 	ld.w	r8,sp[1708]
800055f0:	58 08       	cp.w	r8,0
800055f2:	c0 81       	brne	80005602 <_vfprintf_r+0x1a52>
800055f4:	40 6a       	lddsp	r10,sp[0x18]
800055f6:	58 0a       	cp.w	r10,0
800055f8:	c0 51       	brne	80005602 <_vfprintf_r+0x1a52>
800055fa:	ed b5 00 00 	bld	r5,0x0
800055fe:	e0 81 01 ed 	brne	800059d8 <_vfprintf_r+0x1e28>
80005602:	40 c9       	lddsp	r9,sp[0x30]
80005604:	fa f8 06 90 	ld.w	r8,sp[1680]
80005608:	2f f8       	sub	r8,-1
8000560a:	87 09       	st.w	r3[0x0],r9
8000560c:	fb 48 06 90 	st.w	sp[1680],r8
80005610:	30 19       	mov	r9,1
80005612:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005616:	87 19       	st.w	r3[0x4],r9
80005618:	2f f8       	sub	r8,-1
8000561a:	fb 48 06 8c 	st.w	sp[1676],r8
8000561e:	58 78       	cp.w	r8,7
80005620:	e0 89 00 04 	brgt	80005628 <_vfprintf_r+0x1a78>
80005624:	2f 83       	sub	r3,-8
80005626:	c0 b8       	rjmp	8000563c <_vfprintf_r+0x1a8c>
80005628:	fa ca f9 78 	sub	r10,sp,-1672
8000562c:	02 9b       	mov	r11,r1
8000562e:	08 9c       	mov	r12,r4
80005630:	fe b0 f2 b2 	rcall	80003b94 <__sprint_r>
80005634:	e0 81 02 3d 	brne	80005aae <_vfprintf_r+0x1efe>
80005638:	fa c3 f9 e0 	sub	r3,sp,-1568
8000563c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005640:	5c 32       	neg	r2
80005642:	58 02       	cp.w	r2,0
80005644:	e0 89 00 1d 	brgt	8000567e <_vfprintf_r+0x1ace>
80005648:	c3 d8       	rjmp	800056c2 <_vfprintf_r+0x1b12>
8000564a:	2f 09       	sub	r9,-16
8000564c:	2f f8       	sub	r8,-1
8000564e:	31 0e       	mov	lr,16
80005650:	fb 49 06 90 	st.w	sp[1680],r9
80005654:	87 00       	st.w	r3[0x0],r0
80005656:	87 1e       	st.w	r3[0x4],lr
80005658:	fb 48 06 8c 	st.w	sp[1676],r8
8000565c:	58 78       	cp.w	r8,7
8000565e:	e0 89 00 04 	brgt	80005666 <_vfprintf_r+0x1ab6>
80005662:	2f 83       	sub	r3,-8
80005664:	c0 b8       	rjmp	8000567a <_vfprintf_r+0x1aca>
80005666:	fa ca f9 78 	sub	r10,sp,-1672
8000566a:	02 9b       	mov	r11,r1
8000566c:	08 9c       	mov	r12,r4
8000566e:	fe b0 f2 93 	rcall	80003b94 <__sprint_r>
80005672:	e0 81 02 1e 	brne	80005aae <_vfprintf_r+0x1efe>
80005676:	fa c3 f9 e0 	sub	r3,sp,-1568
8000567a:	21 02       	sub	r2,16
8000567c:	c0 38       	rjmp	80005682 <_vfprintf_r+0x1ad2>
8000567e:	fe c0 bf e6 	sub	r0,pc,-16410
80005682:	fa f9 06 90 	ld.w	r9,sp[1680]
80005686:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000568a:	fe ca bf f2 	sub	r10,pc,-16398
8000568e:	59 02       	cp.w	r2,16
80005690:	fe 99 ff dd 	brgt	8000564a <_vfprintf_r+0x1a9a>
80005694:	04 09       	add	r9,r2
80005696:	2f f8       	sub	r8,-1
80005698:	87 0a       	st.w	r3[0x0],r10
8000569a:	fb 49 06 90 	st.w	sp[1680],r9
8000569e:	87 12       	st.w	r3[0x4],r2
800056a0:	fb 48 06 8c 	st.w	sp[1676],r8
800056a4:	58 78       	cp.w	r8,7
800056a6:	e0 89 00 04 	brgt	800056ae <_vfprintf_r+0x1afe>
800056aa:	2f 83       	sub	r3,-8
800056ac:	c0 b8       	rjmp	800056c2 <_vfprintf_r+0x1b12>
800056ae:	fa ca f9 78 	sub	r10,sp,-1672
800056b2:	02 9b       	mov	r11,r1
800056b4:	08 9c       	mov	r12,r4
800056b6:	fe b0 f2 6f 	rcall	80003b94 <__sprint_r>
800056ba:	e0 81 01 fa 	brne	80005aae <_vfprintf_r+0x1efe>
800056be:	fa c3 f9 e0 	sub	r3,sp,-1568
800056c2:	40 6c       	lddsp	r12,sp[0x18]
800056c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800056c8:	87 06       	st.w	r3[0x0],r6
800056ca:	87 1c       	st.w	r3[0x4],r12
800056cc:	18 08       	add	r8,r12
800056ce:	cb 98       	rjmp	80005840 <_vfprintf_r+0x1c90>
800056d0:	fa f9 06 90 	ld.w	r9,sp[1680]
800056d4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056d8:	40 6b       	lddsp	r11,sp[0x18]
800056da:	16 3a       	cp.w	r10,r11
800056dc:	c6 f5       	brlt	800057ba <_vfprintf_r+0x1c0a>
800056de:	16 09       	add	r9,r11
800056e0:	2f f8       	sub	r8,-1
800056e2:	87 06       	st.w	r3[0x0],r6
800056e4:	fb 49 06 90 	st.w	sp[1680],r9
800056e8:	87 1b       	st.w	r3[0x4],r11
800056ea:	fb 48 06 8c 	st.w	sp[1676],r8
800056ee:	58 78       	cp.w	r8,7
800056f0:	e0 89 00 04 	brgt	800056f8 <_vfprintf_r+0x1b48>
800056f4:	2f 83       	sub	r3,-8
800056f6:	c0 b8       	rjmp	8000570c <_vfprintf_r+0x1b5c>
800056f8:	fa ca f9 78 	sub	r10,sp,-1672
800056fc:	02 9b       	mov	r11,r1
800056fe:	08 9c       	mov	r12,r4
80005700:	fe b0 f2 4a 	rcall	80003b94 <__sprint_r>
80005704:	e0 81 01 d5 	brne	80005aae <_vfprintf_r+0x1efe>
80005708:	fa c3 f9 e0 	sub	r3,sp,-1568
8000570c:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005710:	40 6a       	lddsp	r10,sp[0x18]
80005712:	14 16       	sub	r6,r10
80005714:	58 06       	cp.w	r6,0
80005716:	e0 89 00 1c 	brgt	8000574e <_vfprintf_r+0x1b9e>
8000571a:	c3 d8       	rjmp	80005794 <_vfprintf_r+0x1be4>
8000571c:	2f 09       	sub	r9,-16
8000571e:	2f f8       	sub	r8,-1
80005720:	fb 49 06 90 	st.w	sp[1680],r9
80005724:	87 02       	st.w	r3[0x0],r2
80005726:	87 10       	st.w	r3[0x4],r0
80005728:	fb 48 06 8c 	st.w	sp[1676],r8
8000572c:	58 78       	cp.w	r8,7
8000572e:	e0 89 00 04 	brgt	80005736 <_vfprintf_r+0x1b86>
80005732:	2f 83       	sub	r3,-8
80005734:	c0 b8       	rjmp	8000574a <_vfprintf_r+0x1b9a>
80005736:	fa ca f9 78 	sub	r10,sp,-1672
8000573a:	02 9b       	mov	r11,r1
8000573c:	08 9c       	mov	r12,r4
8000573e:	fe b0 f2 2b 	rcall	80003b94 <__sprint_r>
80005742:	e0 81 01 b6 	brne	80005aae <_vfprintf_r+0x1efe>
80005746:	fa c3 f9 e0 	sub	r3,sp,-1568
8000574a:	21 06       	sub	r6,16
8000574c:	c0 48       	rjmp	80005754 <_vfprintf_r+0x1ba4>
8000574e:	fe c2 c0 b6 	sub	r2,pc,-16202
80005752:	31 00       	mov	r0,16
80005754:	fa f9 06 90 	ld.w	r9,sp[1680]
80005758:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000575c:	fe ca c0 c4 	sub	r10,pc,-16188
80005760:	59 06       	cp.w	r6,16
80005762:	fe 99 ff dd 	brgt	8000571c <_vfprintf_r+0x1b6c>
80005766:	0c 09       	add	r9,r6
80005768:	2f f8       	sub	r8,-1
8000576a:	87 0a       	st.w	r3[0x0],r10
8000576c:	fb 49 06 90 	st.w	sp[1680],r9
80005770:	87 16       	st.w	r3[0x4],r6
80005772:	fb 48 06 8c 	st.w	sp[1676],r8
80005776:	58 78       	cp.w	r8,7
80005778:	e0 89 00 04 	brgt	80005780 <_vfprintf_r+0x1bd0>
8000577c:	2f 83       	sub	r3,-8
8000577e:	c0 b8       	rjmp	80005794 <_vfprintf_r+0x1be4>
80005780:	fa ca f9 78 	sub	r10,sp,-1672
80005784:	02 9b       	mov	r11,r1
80005786:	08 9c       	mov	r12,r4
80005788:	fe b0 f2 06 	rcall	80003b94 <__sprint_r>
8000578c:	e0 81 01 91 	brne	80005aae <_vfprintf_r+0x1efe>
80005790:	fa c3 f9 e0 	sub	r3,sp,-1568
80005794:	ed b5 00 00 	bld	r5,0x0
80005798:	e0 81 01 20 	brne	800059d8 <_vfprintf_r+0x1e28>
8000579c:	40 c9       	lddsp	r9,sp[0x30]
8000579e:	fa f8 06 90 	ld.w	r8,sp[1680]
800057a2:	2f f8       	sub	r8,-1
800057a4:	87 09       	st.w	r3[0x0],r9
800057a6:	fb 48 06 90 	st.w	sp[1680],r8
800057aa:	30 19       	mov	r9,1
800057ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057b0:	87 19       	st.w	r3[0x4],r9
800057b2:	2f f8       	sub	r8,-1
800057b4:	fb 48 06 8c 	st.w	sp[1676],r8
800057b8:	c0 29       	rjmp	800059bc <_vfprintf_r+0x1e0c>
800057ba:	14 09       	add	r9,r10
800057bc:	2f f8       	sub	r8,-1
800057be:	fb 49 06 90 	st.w	sp[1680],r9
800057c2:	87 06       	st.w	r3[0x0],r6
800057c4:	87 1a       	st.w	r3[0x4],r10
800057c6:	fb 48 06 8c 	st.w	sp[1676],r8
800057ca:	58 78       	cp.w	r8,7
800057cc:	e0 89 00 04 	brgt	800057d4 <_vfprintf_r+0x1c24>
800057d0:	2f 83       	sub	r3,-8
800057d2:	c0 b8       	rjmp	800057e8 <_vfprintf_r+0x1c38>
800057d4:	fa ca f9 78 	sub	r10,sp,-1672
800057d8:	02 9b       	mov	r11,r1
800057da:	08 9c       	mov	r12,r4
800057dc:	fe b0 f1 dc 	rcall	80003b94 <__sprint_r>
800057e0:	e0 81 01 67 	brne	80005aae <_vfprintf_r+0x1efe>
800057e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800057e8:	40 c8       	lddsp	r8,sp[0x30]
800057ea:	87 08       	st.w	r3[0x0],r8
800057ec:	fa f8 06 90 	ld.w	r8,sp[1680]
800057f0:	2f f8       	sub	r8,-1
800057f2:	30 19       	mov	r9,1
800057f4:	fb 48 06 90 	st.w	sp[1680],r8
800057f8:	87 19       	st.w	r3[0x4],r9
800057fa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057fe:	2f f8       	sub	r8,-1
80005800:	fb 48 06 8c 	st.w	sp[1676],r8
80005804:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005808:	58 78       	cp.w	r8,7
8000580a:	e0 89 00 04 	brgt	80005812 <_vfprintf_r+0x1c62>
8000580e:	2f 83       	sub	r3,-8
80005810:	c0 b8       	rjmp	80005826 <_vfprintf_r+0x1c76>
80005812:	fa ca f9 78 	sub	r10,sp,-1672
80005816:	02 9b       	mov	r11,r1
80005818:	08 9c       	mov	r12,r4
8000581a:	fe b0 f1 bd 	rcall	80003b94 <__sprint_r>
8000581e:	e0 81 01 48 	brne	80005aae <_vfprintf_r+0x1efe>
80005822:	fa c3 f9 e0 	sub	r3,sp,-1568
80005826:	04 06       	add	r6,r2
80005828:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000582c:	87 06       	st.w	r3[0x0],r6
8000582e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005832:	40 66       	lddsp	r6,sp[0x18]
80005834:	40 6e       	lddsp	lr,sp[0x18]
80005836:	10 16       	sub	r6,r8
80005838:	f2 08 01 08 	sub	r8,r9,r8
8000583c:	87 16       	st.w	r3[0x4],r6
8000583e:	1c 08       	add	r8,lr
80005840:	fb 48 06 90 	st.w	sp[1680],r8
80005844:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005848:	2f f8       	sub	r8,-1
8000584a:	fb 48 06 8c 	st.w	sp[1676],r8
8000584e:	cb 78       	rjmp	800059bc <_vfprintf_r+0x1e0c>
80005850:	40 6c       	lddsp	r12,sp[0x18]
80005852:	58 1c       	cp.w	r12,1
80005854:	e0 89 00 06 	brgt	80005860 <_vfprintf_r+0x1cb0>
80005858:	ed b5 00 00 	bld	r5,0x0
8000585c:	e0 81 00 85 	brne	80005966 <_vfprintf_r+0x1db6>
80005860:	fa f8 06 90 	ld.w	r8,sp[1680]
80005864:	2f f8       	sub	r8,-1
80005866:	30 19       	mov	r9,1
80005868:	fb 48 06 90 	st.w	sp[1680],r8
8000586c:	87 06       	st.w	r3[0x0],r6
8000586e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005872:	87 19       	st.w	r3[0x4],r9
80005874:	2f f8       	sub	r8,-1
80005876:	fb 48 06 8c 	st.w	sp[1676],r8
8000587a:	58 78       	cp.w	r8,7
8000587c:	e0 89 00 04 	brgt	80005884 <_vfprintf_r+0x1cd4>
80005880:	2f 83       	sub	r3,-8
80005882:	c0 b8       	rjmp	80005898 <_vfprintf_r+0x1ce8>
80005884:	fa ca f9 78 	sub	r10,sp,-1672
80005888:	02 9b       	mov	r11,r1
8000588a:	08 9c       	mov	r12,r4
8000588c:	fe b0 f1 84 	rcall	80003b94 <__sprint_r>
80005890:	e0 81 01 0f 	brne	80005aae <_vfprintf_r+0x1efe>
80005894:	fa c3 f9 e0 	sub	r3,sp,-1568
80005898:	fa f8 06 90 	ld.w	r8,sp[1680]
8000589c:	2f f8       	sub	r8,-1
8000589e:	40 cb       	lddsp	r11,sp[0x30]
800058a0:	fb 48 06 90 	st.w	sp[1680],r8
800058a4:	30 19       	mov	r9,1
800058a6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058aa:	87 0b       	st.w	r3[0x0],r11
800058ac:	2f f8       	sub	r8,-1
800058ae:	87 19       	st.w	r3[0x4],r9
800058b0:	fb 48 06 8c 	st.w	sp[1676],r8
800058b4:	58 78       	cp.w	r8,7
800058b6:	e0 89 00 05 	brgt	800058c0 <_vfprintf_r+0x1d10>
800058ba:	2f 83       	sub	r3,-8
800058bc:	c0 c8       	rjmp	800058d4 <_vfprintf_r+0x1d24>
800058be:	d7 03       	nop
800058c0:	fa ca f9 78 	sub	r10,sp,-1672
800058c4:	02 9b       	mov	r11,r1
800058c6:	08 9c       	mov	r12,r4
800058c8:	fe b0 f1 66 	rcall	80003b94 <__sprint_r>
800058cc:	e0 81 00 f1 	brne	80005aae <_vfprintf_r+0x1efe>
800058d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800058d4:	30 08       	mov	r8,0
800058d6:	30 09       	mov	r9,0
800058d8:	40 5b       	lddsp	r11,sp[0x14]
800058da:	40 7a       	lddsp	r10,sp[0x1c]
800058dc:	e0 a0 17 3d 	rcall	80008756 <__avr32_f64_cmp_eq>
800058e0:	40 68       	lddsp	r8,sp[0x18]
800058e2:	20 18       	sub	r8,1
800058e4:	58 0c       	cp.w	r12,0
800058e6:	c0 d1       	brne	80005900 <_vfprintf_r+0x1d50>
800058e8:	2f f6       	sub	r6,-1
800058ea:	87 18       	st.w	r3[0x4],r8
800058ec:	87 06       	st.w	r3[0x0],r6
800058ee:	fa f6 06 90 	ld.w	r6,sp[1680]
800058f2:	10 06       	add	r6,r8
800058f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058f8:	fb 46 06 90 	st.w	sp[1680],r6
800058fc:	2f f8       	sub	r8,-1
800058fe:	c3 18       	rjmp	80005960 <_vfprintf_r+0x1db0>
80005900:	10 96       	mov	r6,r8
80005902:	58 08       	cp.w	r8,0
80005904:	e0 89 00 1c 	brgt	8000593c <_vfprintf_r+0x1d8c>
80005908:	c4 b8       	rjmp	8000599e <_vfprintf_r+0x1dee>
8000590a:	2f 09       	sub	r9,-16
8000590c:	2f f8       	sub	r8,-1
8000590e:	fb 49 06 90 	st.w	sp[1680],r9
80005912:	87 02       	st.w	r3[0x0],r2
80005914:	87 10       	st.w	r3[0x4],r0
80005916:	fb 48 06 8c 	st.w	sp[1676],r8
8000591a:	58 78       	cp.w	r8,7
8000591c:	e0 89 00 04 	brgt	80005924 <_vfprintf_r+0x1d74>
80005920:	2f 83       	sub	r3,-8
80005922:	c0 b8       	rjmp	80005938 <_vfprintf_r+0x1d88>
80005924:	fa ca f9 78 	sub	r10,sp,-1672
80005928:	02 9b       	mov	r11,r1
8000592a:	08 9c       	mov	r12,r4
8000592c:	fe b0 f1 34 	rcall	80003b94 <__sprint_r>
80005930:	e0 81 00 bf 	brne	80005aae <_vfprintf_r+0x1efe>
80005934:	fa c3 f9 e0 	sub	r3,sp,-1568
80005938:	21 06       	sub	r6,16
8000593a:	c0 48       	rjmp	80005942 <_vfprintf_r+0x1d92>
8000593c:	fe c2 c2 a4 	sub	r2,pc,-15708
80005940:	31 00       	mov	r0,16
80005942:	fa f9 06 90 	ld.w	r9,sp[1680]
80005946:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000594a:	fe ca c2 b2 	sub	r10,pc,-15694
8000594e:	59 06       	cp.w	r6,16
80005950:	fe 99 ff dd 	brgt	8000590a <_vfprintf_r+0x1d5a>
80005954:	0c 09       	add	r9,r6
80005956:	87 0a       	st.w	r3[0x0],r10
80005958:	fb 49 06 90 	st.w	sp[1680],r9
8000595c:	2f f8       	sub	r8,-1
8000595e:	87 16       	st.w	r3[0x4],r6
80005960:	fb 48 06 8c 	st.w	sp[1676],r8
80005964:	c0 e8       	rjmp	80005980 <_vfprintf_r+0x1dd0>
80005966:	fa f8 06 90 	ld.w	r8,sp[1680]
8000596a:	2f f8       	sub	r8,-1
8000596c:	30 19       	mov	r9,1
8000596e:	fb 48 06 90 	st.w	sp[1680],r8
80005972:	87 06       	st.w	r3[0x0],r6
80005974:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005978:	87 19       	st.w	r3[0x4],r9
8000597a:	2f f8       	sub	r8,-1
8000597c:	fb 48 06 8c 	st.w	sp[1676],r8
80005980:	58 78       	cp.w	r8,7
80005982:	e0 89 00 04 	brgt	8000598a <_vfprintf_r+0x1dda>
80005986:	2f 83       	sub	r3,-8
80005988:	c0 b8       	rjmp	8000599e <_vfprintf_r+0x1dee>
8000598a:	fa ca f9 78 	sub	r10,sp,-1672
8000598e:	02 9b       	mov	r11,r1
80005990:	08 9c       	mov	r12,r4
80005992:	fe b0 f1 01 	rcall	80003b94 <__sprint_r>
80005996:	e0 81 00 8c 	brne	80005aae <_vfprintf_r+0x1efe>
8000599a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000599e:	40 ea       	lddsp	r10,sp[0x38]
800059a0:	fa f8 06 90 	ld.w	r8,sp[1680]
800059a4:	14 08       	add	r8,r10
800059a6:	fa c9 f9 64 	sub	r9,sp,-1692
800059aa:	fb 48 06 90 	st.w	sp[1680],r8
800059ae:	87 1a       	st.w	r3[0x4],r10
800059b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059b4:	87 09       	st.w	r3[0x0],r9
800059b6:	2f f8       	sub	r8,-1
800059b8:	fb 48 06 8c 	st.w	sp[1676],r8
800059bc:	58 78       	cp.w	r8,7
800059be:	e0 89 00 04 	brgt	800059c6 <_vfprintf_r+0x1e16>
800059c2:	2f 83       	sub	r3,-8
800059c4:	c0 a8       	rjmp	800059d8 <_vfprintf_r+0x1e28>
800059c6:	fa ca f9 78 	sub	r10,sp,-1672
800059ca:	02 9b       	mov	r11,r1
800059cc:	08 9c       	mov	r12,r4
800059ce:	fe b0 f0 e3 	rcall	80003b94 <__sprint_r>
800059d2:	c6 e1       	brne	80005aae <_vfprintf_r+0x1efe>
800059d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800059d8:	e2 15 00 04 	andl	r5,0x4,COH
800059dc:	c3 f0       	breq	80005a5a <_vfprintf_r+0x1eaa>
800059de:	40 86       	lddsp	r6,sp[0x20]
800059e0:	40 39       	lddsp	r9,sp[0xc]
800059e2:	12 16       	sub	r6,r9
800059e4:	58 06       	cp.w	r6,0
800059e6:	e0 89 00 1a 	brgt	80005a1a <_vfprintf_r+0x1e6a>
800059ea:	c3 88       	rjmp	80005a5a <_vfprintf_r+0x1eaa>
800059ec:	2f 09       	sub	r9,-16
800059ee:	2f f8       	sub	r8,-1
800059f0:	fb 49 06 90 	st.w	sp[1680],r9
800059f4:	87 05       	st.w	r3[0x0],r5
800059f6:	87 12       	st.w	r3[0x4],r2
800059f8:	fb 48 06 8c 	st.w	sp[1676],r8
800059fc:	58 78       	cp.w	r8,7
800059fe:	e0 89 00 04 	brgt	80005a06 <_vfprintf_r+0x1e56>
80005a02:	2f 83       	sub	r3,-8
80005a04:	c0 98       	rjmp	80005a16 <_vfprintf_r+0x1e66>
80005a06:	00 9a       	mov	r10,r0
80005a08:	02 9b       	mov	r11,r1
80005a0a:	08 9c       	mov	r12,r4
80005a0c:	fe b0 f0 c4 	rcall	80003b94 <__sprint_r>
80005a10:	c4 f1       	brne	80005aae <_vfprintf_r+0x1efe>
80005a12:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a16:	21 06       	sub	r6,16
80005a18:	c0 68       	rjmp	80005a24 <_vfprintf_r+0x1e74>
80005a1a:	fe c5 c3 92 	sub	r5,pc,-15470
80005a1e:	31 02       	mov	r2,16
80005a20:	fa c0 f9 78 	sub	r0,sp,-1672
80005a24:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a28:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a2c:	fe ca c3 a4 	sub	r10,pc,-15452
80005a30:	59 06       	cp.w	r6,16
80005a32:	fe 99 ff dd 	brgt	800059ec <_vfprintf_r+0x1e3c>
80005a36:	0c 09       	add	r9,r6
80005a38:	2f f8       	sub	r8,-1
80005a3a:	87 0a       	st.w	r3[0x0],r10
80005a3c:	87 16       	st.w	r3[0x4],r6
80005a3e:	fb 49 06 90 	st.w	sp[1680],r9
80005a42:	fb 48 06 8c 	st.w	sp[1676],r8
80005a46:	58 78       	cp.w	r8,7
80005a48:	e0 8a 00 09 	brle	80005a5a <_vfprintf_r+0x1eaa>
80005a4c:	fa ca f9 78 	sub	r10,sp,-1672
80005a50:	02 9b       	mov	r11,r1
80005a52:	08 9c       	mov	r12,r4
80005a54:	fe b0 f0 a0 	rcall	80003b94 <__sprint_r>
80005a58:	c2 b1       	brne	80005aae <_vfprintf_r+0x1efe>
80005a5a:	40 bc       	lddsp	r12,sp[0x2c]
80005a5c:	40 36       	lddsp	r6,sp[0xc]
80005a5e:	40 8e       	lddsp	lr,sp[0x20]
80005a60:	ec 0e 0c 48 	max	r8,r6,lr
80005a64:	10 0c       	add	r12,r8
80005a66:	50 bc       	stdsp	sp[0x2c],r12
80005a68:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a6c:	58 08       	cp.w	r8,0
80005a6e:	c0 80       	breq	80005a7e <_vfprintf_r+0x1ece>
80005a70:	fa ca f9 78 	sub	r10,sp,-1672
80005a74:	02 9b       	mov	r11,r1
80005a76:	08 9c       	mov	r12,r4
80005a78:	fe b0 f0 8e 	rcall	80003b94 <__sprint_r>
80005a7c:	c1 91       	brne	80005aae <_vfprintf_r+0x1efe>
80005a7e:	30 0b       	mov	r11,0
80005a80:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a84:	fb 4b 06 8c 	st.w	sp[1676],r11
80005a88:	fe 9f f1 22 	bral	80003ccc <_vfprintf_r+0x11c>
80005a8c:	08 95       	mov	r5,r4
80005a8e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a92:	58 08       	cp.w	r8,0
80005a94:	c0 80       	breq	80005aa4 <_vfprintf_r+0x1ef4>
80005a96:	08 9c       	mov	r12,r4
80005a98:	fa ca f9 78 	sub	r10,sp,-1672
80005a9c:	02 9b       	mov	r11,r1
80005a9e:	fe b0 f0 7b 	rcall	80003b94 <__sprint_r>
80005aa2:	c0 61       	brne	80005aae <_vfprintf_r+0x1efe>
80005aa4:	30 08       	mov	r8,0
80005aa6:	fb 48 06 8c 	st.w	sp[1676],r8
80005aaa:	c0 28       	rjmp	80005aae <_vfprintf_r+0x1efe>
80005aac:	40 41       	lddsp	r1,sp[0x10]
80005aae:	82 68       	ld.sh	r8,r1[0xc]
80005ab0:	ed b8 00 06 	bld	r8,0x6
80005ab4:	c0 31       	brne	80005aba <_vfprintf_r+0x1f0a>
80005ab6:	3f fa       	mov	r10,-1
80005ab8:	50 ba       	stdsp	sp[0x2c],r10
80005aba:	40 bc       	lddsp	r12,sp[0x2c]
80005abc:	fe 3d f9 44 	sub	sp,-1724
80005ac0:	d8 32       	popm	r0-r7,pc
80005ac2:	d7 03       	nop

80005ac4 <__swsetup_r>:
80005ac4:	d4 21       	pushm	r4-r7,lr
80005ac6:	e0 68 01 00 	mov	r8,256
80005aca:	18 96       	mov	r6,r12
80005acc:	16 97       	mov	r7,r11
80005ace:	70 0c       	ld.w	r12,r8[0x0]
80005ad0:	58 0c       	cp.w	r12,0
80005ad2:	c0 60       	breq	80005ade <__swsetup_r+0x1a>
80005ad4:	78 68       	ld.w	r8,r12[0x18]
80005ad6:	58 08       	cp.w	r8,0
80005ad8:	c0 31       	brne	80005ade <__swsetup_r+0x1a>
80005ada:	e0 a0 07 b9 	rcall	80006a4c <__sinit>
80005ade:	fe c8 c3 26 	sub	r8,pc,-15578
80005ae2:	10 37       	cp.w	r7,r8
80005ae4:	c0 61       	brne	80005af0 <__swsetup_r+0x2c>
80005ae6:	e0 68 01 00 	mov	r8,256
80005aea:	70 08       	ld.w	r8,r8[0x0]
80005aec:	70 07       	ld.w	r7,r8[0x0]
80005aee:	c1 28       	rjmp	80005b12 <__swsetup_r+0x4e>
80005af0:	fe c8 c3 18 	sub	r8,pc,-15592
80005af4:	10 37       	cp.w	r7,r8
80005af6:	c0 61       	brne	80005b02 <__swsetup_r+0x3e>
80005af8:	e0 68 01 00 	mov	r8,256
80005afc:	70 08       	ld.w	r8,r8[0x0]
80005afe:	70 17       	ld.w	r7,r8[0x4]
80005b00:	c0 98       	rjmp	80005b12 <__swsetup_r+0x4e>
80005b02:	fe c8 c3 0a 	sub	r8,pc,-15606
80005b06:	10 37       	cp.w	r7,r8
80005b08:	c0 51       	brne	80005b12 <__swsetup_r+0x4e>
80005b0a:	e0 68 01 00 	mov	r8,256
80005b0e:	70 08       	ld.w	r8,r8[0x0]
80005b10:	70 27       	ld.w	r7,r8[0x8]
80005b12:	8e 68       	ld.sh	r8,r7[0xc]
80005b14:	ed b8 00 03 	bld	r8,0x3
80005b18:	c1 e0       	breq	80005b54 <__swsetup_r+0x90>
80005b1a:	ed b8 00 04 	bld	r8,0x4
80005b1e:	c3 e1       	brne	80005b9a <__swsetup_r+0xd6>
80005b20:	ed b8 00 02 	bld	r8,0x2
80005b24:	c1 51       	brne	80005b4e <__swsetup_r+0x8a>
80005b26:	6e db       	ld.w	r11,r7[0x34]
80005b28:	58 0b       	cp.w	r11,0
80005b2a:	c0 a0       	breq	80005b3e <__swsetup_r+0x7a>
80005b2c:	ee c8 ff bc 	sub	r8,r7,-68
80005b30:	10 3b       	cp.w	r11,r8
80005b32:	c0 40       	breq	80005b3a <__swsetup_r+0x76>
80005b34:	0c 9c       	mov	r12,r6
80005b36:	e0 a0 08 25 	rcall	80006b80 <_free_r>
80005b3a:	30 08       	mov	r8,0
80005b3c:	8f d8       	st.w	r7[0x34],r8
80005b3e:	8e 68       	ld.sh	r8,r7[0xc]
80005b40:	e0 18 ff db 	andl	r8,0xffdb
80005b44:	ae 68       	st.h	r7[0xc],r8
80005b46:	30 08       	mov	r8,0
80005b48:	8f 18       	st.w	r7[0x4],r8
80005b4a:	6e 48       	ld.w	r8,r7[0x10]
80005b4c:	8f 08       	st.w	r7[0x0],r8
80005b4e:	8e 68       	ld.sh	r8,r7[0xc]
80005b50:	a3 b8       	sbr	r8,0x3
80005b52:	ae 68       	st.h	r7[0xc],r8
80005b54:	6e 48       	ld.w	r8,r7[0x10]
80005b56:	58 08       	cp.w	r8,0
80005b58:	c0 b1       	brne	80005b6e <__swsetup_r+0xaa>
80005b5a:	8e 68       	ld.sh	r8,r7[0xc]
80005b5c:	e2 18 02 80 	andl	r8,0x280,COH
80005b60:	e0 48 02 00 	cp.w	r8,512
80005b64:	c0 50       	breq	80005b6e <__swsetup_r+0xaa>
80005b66:	0c 9c       	mov	r12,r6
80005b68:	0e 9b       	mov	r11,r7
80005b6a:	e0 a0 0a 4b 	rcall	80007000 <__smakebuf_r>
80005b6e:	8e 69       	ld.sh	r9,r7[0xc]
80005b70:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005b74:	c0 70       	breq	80005b82 <__swsetup_r+0xbe>
80005b76:	30 08       	mov	r8,0
80005b78:	8f 28       	st.w	r7[0x8],r8
80005b7a:	6e 58       	ld.w	r8,r7[0x14]
80005b7c:	5c 38       	neg	r8
80005b7e:	8f 68       	st.w	r7[0x18],r8
80005b80:	c0 68       	rjmp	80005b8c <__swsetup_r+0xc8>
80005b82:	ed b9 00 01 	bld	r9,0x1
80005b86:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005b8a:	8f 28       	st.w	r7[0x8],r8
80005b8c:	6e 48       	ld.w	r8,r7[0x10]
80005b8e:	58 08       	cp.w	r8,0
80005b90:	c0 61       	brne	80005b9c <__swsetup_r+0xd8>
80005b92:	8e 68       	ld.sh	r8,r7[0xc]
80005b94:	ed b8 00 07 	bld	r8,0x7
80005b98:	c0 21       	brne	80005b9c <__swsetup_r+0xd8>
80005b9a:	dc 2a       	popm	r4-r7,pc,r12=-1
80005b9c:	d8 2a       	popm	r4-r7,pc,r12=0
80005b9e:	d7 03       	nop

80005ba0 <quorem>:
80005ba0:	d4 31       	pushm	r0-r7,lr
80005ba2:	20 2d       	sub	sp,8
80005ba4:	18 97       	mov	r7,r12
80005ba6:	78 48       	ld.w	r8,r12[0x10]
80005ba8:	76 46       	ld.w	r6,r11[0x10]
80005baa:	0c 38       	cp.w	r8,r6
80005bac:	c0 34       	brge	80005bb2 <quorem+0x12>
80005bae:	30 0c       	mov	r12,0
80005bb0:	c8 58       	rjmp	80005cba <quorem+0x11a>
80005bb2:	ec c2 ff fc 	sub	r2,r6,-4
80005bb6:	f6 c3 ff ec 	sub	r3,r11,-20
80005bba:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005bbe:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005bc2:	2f f9       	sub	r9,-1
80005bc4:	20 16       	sub	r6,1
80005bc6:	f8 09 0d 08 	divu	r8,r12,r9
80005bca:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005bce:	ee c4 ff ec 	sub	r4,r7,-20
80005bd2:	10 95       	mov	r5,r8
80005bd4:	58 08       	cp.w	r8,0
80005bd6:	c4 10       	breq	80005c58 <quorem+0xb8>
80005bd8:	30 09       	mov	r9,0
80005bda:	06 9a       	mov	r10,r3
80005bdc:	08 98       	mov	r8,r4
80005bde:	12 91       	mov	r1,r9
80005be0:	50 0b       	stdsp	sp[0x0],r11
80005be2:	70 0e       	ld.w	lr,r8[0x0]
80005be4:	b1 8e       	lsr	lr,0x10
80005be6:	50 1e       	stdsp	sp[0x4],lr
80005be8:	15 0e       	ld.w	lr,r10++
80005bea:	fc 00 16 10 	lsr	r0,lr,0x10
80005bee:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005bf2:	ea 0e 03 41 	mac	r1,r5,lr
80005bf6:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005bfa:	b1 81       	lsr	r1,0x10
80005bfc:	40 1b       	lddsp	r11,sp[0x4]
80005bfe:	ea 00 02 40 	mul	r0,r5,r0
80005c02:	e2 00 00 00 	add	r0,r1,r0
80005c06:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005c0a:	02 1b       	sub	r11,r1
80005c0c:	50 1b       	stdsp	sp[0x4],r11
80005c0e:	70 0b       	ld.w	r11,r8[0x0]
80005c10:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005c14:	02 09       	add	r9,r1
80005c16:	f2 0e 01 0e 	sub	lr,r9,lr
80005c1a:	b0 1e       	st.h	r8[0x2],lr
80005c1c:	fc 09 14 10 	asr	r9,lr,0x10
80005c20:	40 1e       	lddsp	lr,sp[0x4]
80005c22:	fc 09 00 09 	add	r9,lr,r9
80005c26:	b0 09       	st.h	r8[0x0],r9
80005c28:	e0 01 16 10 	lsr	r1,r0,0x10
80005c2c:	2f c8       	sub	r8,-4
80005c2e:	b1 49       	asr	r9,0x10
80005c30:	04 3a       	cp.w	r10,r2
80005c32:	fe 98 ff d8 	brls	80005be2 <quorem+0x42>
80005c36:	40 0b       	lddsp	r11,sp[0x0]
80005c38:	58 0c       	cp.w	r12,0
80005c3a:	c0 f1       	brne	80005c58 <quorem+0xb8>
80005c3c:	ec c8 ff fb 	sub	r8,r6,-5
80005c40:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005c44:	c0 28       	rjmp	80005c48 <quorem+0xa8>
80005c46:	20 16       	sub	r6,1
80005c48:	20 48       	sub	r8,4
80005c4a:	08 38       	cp.w	r8,r4
80005c4c:	e0 88 00 05 	brls	80005c56 <quorem+0xb6>
80005c50:	70 09       	ld.w	r9,r8[0x0]
80005c52:	58 09       	cp.w	r9,0
80005c54:	cf 90       	breq	80005c46 <quorem+0xa6>
80005c56:	8f 46       	st.w	r7[0x10],r6
80005c58:	0e 9c       	mov	r12,r7
80005c5a:	e0 a0 0c fb 	rcall	80007650 <__mcmp>
80005c5e:	c2 d5       	brlt	80005cb8 <quorem+0x118>
80005c60:	2f f5       	sub	r5,-1
80005c62:	08 98       	mov	r8,r4
80005c64:	30 09       	mov	r9,0
80005c66:	07 0b       	ld.w	r11,r3++
80005c68:	f6 0a 16 10 	lsr	r10,r11,0x10
80005c6c:	70 0c       	ld.w	r12,r8[0x0]
80005c6e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005c72:	f8 0e 16 10 	lsr	lr,r12,0x10
80005c76:	14 1e       	sub	lr,r10
80005c78:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005c7c:	16 1a       	sub	r10,r11
80005c7e:	12 0a       	add	r10,r9
80005c80:	b0 1a       	st.h	r8[0x2],r10
80005c82:	b1 4a       	asr	r10,0x10
80005c84:	fc 0a 00 09 	add	r9,lr,r10
80005c88:	b0 09       	st.h	r8[0x0],r9
80005c8a:	2f c8       	sub	r8,-4
80005c8c:	b1 49       	asr	r9,0x10
80005c8e:	04 33       	cp.w	r3,r2
80005c90:	fe 98 ff eb 	brls	80005c66 <quorem+0xc6>
80005c94:	ec c8 ff fb 	sub	r8,r6,-5
80005c98:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005c9c:	58 09       	cp.w	r9,0
80005c9e:	c0 d1       	brne	80005cb8 <quorem+0x118>
80005ca0:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005ca4:	c0 28       	rjmp	80005ca8 <quorem+0x108>
80005ca6:	20 16       	sub	r6,1
80005ca8:	20 48       	sub	r8,4
80005caa:	08 38       	cp.w	r8,r4
80005cac:	e0 88 00 05 	brls	80005cb6 <quorem+0x116>
80005cb0:	70 09       	ld.w	r9,r8[0x0]
80005cb2:	58 09       	cp.w	r9,0
80005cb4:	cf 90       	breq	80005ca6 <quorem+0x106>
80005cb6:	8f 46       	st.w	r7[0x10],r6
80005cb8:	0a 9c       	mov	r12,r5
80005cba:	2f ed       	sub	sp,-8
80005cbc:	d8 32       	popm	r0-r7,pc
80005cbe:	d7 03       	nop

80005cc0 <_dtoa_r>:
80005cc0:	d4 31       	pushm	r0-r7,lr
80005cc2:	21 ad       	sub	sp,104
80005cc4:	fa c4 ff 74 	sub	r4,sp,-140
80005cc8:	18 97       	mov	r7,r12
80005cca:	16 95       	mov	r5,r11
80005ccc:	68 2c       	ld.w	r12,r4[0x8]
80005cce:	50 c9       	stdsp	sp[0x30],r9
80005cd0:	68 16       	ld.w	r6,r4[0x4]
80005cd2:	68 09       	ld.w	r9,r4[0x0]
80005cd4:	50 e8       	stdsp	sp[0x38],r8
80005cd6:	14 94       	mov	r4,r10
80005cd8:	51 2c       	stdsp	sp[0x48],r12
80005cda:	fa e5 00 08 	st.d	sp[8],r4
80005cde:	51 59       	stdsp	sp[0x54],r9
80005ce0:	6e 95       	ld.w	r5,r7[0x24]
80005ce2:	58 05       	cp.w	r5,0
80005ce4:	c0 91       	brne	80005cf6 <_dtoa_r+0x36>
80005ce6:	31 0c       	mov	r12,16
80005ce8:	e0 a0 09 ea 	rcall	800070bc <malloc>
80005cec:	99 35       	st.w	r12[0xc],r5
80005cee:	8f 9c       	st.w	r7[0x24],r12
80005cf0:	99 15       	st.w	r12[0x4],r5
80005cf2:	99 25       	st.w	r12[0x8],r5
80005cf4:	99 05       	st.w	r12[0x0],r5
80005cf6:	6e 99       	ld.w	r9,r7[0x24]
80005cf8:	72 08       	ld.w	r8,r9[0x0]
80005cfa:	58 08       	cp.w	r8,0
80005cfc:	c0 f0       	breq	80005d1a <_dtoa_r+0x5a>
80005cfe:	72 1a       	ld.w	r10,r9[0x4]
80005d00:	91 1a       	st.w	r8[0x4],r10
80005d02:	30 1a       	mov	r10,1
80005d04:	72 19       	ld.w	r9,r9[0x4]
80005d06:	f4 09 09 49 	lsl	r9,r10,r9
80005d0a:	10 9b       	mov	r11,r8
80005d0c:	91 29       	st.w	r8[0x8],r9
80005d0e:	0e 9c       	mov	r12,r7
80005d10:	e0 a0 0c ba 	rcall	80007684 <_Bfree>
80005d14:	6e 98       	ld.w	r8,r7[0x24]
80005d16:	30 09       	mov	r9,0
80005d18:	91 09       	st.w	r8[0x0],r9
80005d1a:	40 28       	lddsp	r8,sp[0x8]
80005d1c:	10 94       	mov	r4,r8
80005d1e:	58 08       	cp.w	r8,0
80005d20:	c0 64       	brge	80005d2c <_dtoa_r+0x6c>
80005d22:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005d26:	50 28       	stdsp	sp[0x8],r8
80005d28:	30 18       	mov	r8,1
80005d2a:	c0 28       	rjmp	80005d2e <_dtoa_r+0x6e>
80005d2c:	30 08       	mov	r8,0
80005d2e:	8d 08       	st.w	r6[0x0],r8
80005d30:	fc 1c 7f f0 	movh	r12,0x7ff0
80005d34:	40 26       	lddsp	r6,sp[0x8]
80005d36:	0c 98       	mov	r8,r6
80005d38:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005d3c:	18 38       	cp.w	r8,r12
80005d3e:	c2 01       	brne	80005d7e <_dtoa_r+0xbe>
80005d40:	e0 68 27 0f 	mov	r8,9999
80005d44:	41 5b       	lddsp	r11,sp[0x54]
80005d46:	97 08       	st.w	r11[0x0],r8
80005d48:	40 3a       	lddsp	r10,sp[0xc]
80005d4a:	58 0a       	cp.w	r10,0
80005d4c:	c0 71       	brne	80005d5a <_dtoa_r+0x9a>
80005d4e:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005d52:	c0 41       	brne	80005d5a <_dtoa_r+0x9a>
80005d54:	fe cc c5 ac 	sub	r12,pc,-14932
80005d58:	c0 38       	rjmp	80005d5e <_dtoa_r+0x9e>
80005d5a:	fe cc c5 a6 	sub	r12,pc,-14938
80005d5e:	41 29       	lddsp	r9,sp[0x48]
80005d60:	58 09       	cp.w	r9,0
80005d62:	e0 80 05 9a 	breq	80006896 <_dtoa_r+0xbd6>
80005d66:	f8 c8 ff fd 	sub	r8,r12,-3
80005d6a:	f8 c9 ff f8 	sub	r9,r12,-8
80005d6e:	11 8b       	ld.ub	r11,r8[0x0]
80005d70:	30 0a       	mov	r10,0
80005d72:	41 25       	lddsp	r5,sp[0x48]
80005d74:	f4 0b 18 00 	cp.b	r11,r10
80005d78:	f2 08 17 10 	movne	r8,r9
80005d7c:	c1 68       	rjmp	80005da8 <_dtoa_r+0xe8>
80005d7e:	fa ea 00 08 	ld.d	r10,sp[8]
80005d82:	30 08       	mov	r8,0
80005d84:	fa eb 00 3c 	st.d	sp[60],r10
80005d88:	30 09       	mov	r9,0
80005d8a:	e0 a0 14 e6 	rcall	80008756 <__avr32_f64_cmp_eq>
80005d8e:	c1 00       	breq	80005dae <_dtoa_r+0xee>
80005d90:	30 18       	mov	r8,1
80005d92:	41 5a       	lddsp	r10,sp[0x54]
80005d94:	95 08       	st.w	r10[0x0],r8
80005d96:	fe cc c7 12 	sub	r12,pc,-14574
80005d9a:	41 29       	lddsp	r9,sp[0x48]
80005d9c:	f8 08 00 08 	add	r8,r12,r8
80005da0:	58 09       	cp.w	r9,0
80005da2:	e0 80 05 7a 	breq	80006896 <_dtoa_r+0xbd6>
80005da6:	12 95       	mov	r5,r9
80005da8:	8b 08       	st.w	r5[0x0],r8
80005daa:	e0 8f 05 76 	bral	80006896 <_dtoa_r+0xbd6>
80005dae:	fa c8 ff 9c 	sub	r8,sp,-100
80005db2:	fa c9 ff a0 	sub	r9,sp,-96
80005db6:	fa ea 00 3c 	ld.d	r10,sp[60]
80005dba:	0e 9c       	mov	r12,r7
80005dbc:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005dc0:	e0 a0 0c b4 	rcall	80007728 <__d2b>
80005dc4:	18 93       	mov	r3,r12
80005dc6:	58 05       	cp.w	r5,0
80005dc8:	c0 d0       	breq	80005de2 <_dtoa_r+0x122>
80005dca:	fa ea 00 3c 	ld.d	r10,sp[60]
80005dce:	30 04       	mov	r4,0
80005dd0:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005dd4:	ea c5 03 ff 	sub	r5,r5,1023
80005dd8:	10 9b       	mov	r11,r8
80005dda:	51 74       	stdsp	sp[0x5c],r4
80005ddc:	ea 1b 3f f0 	orh	r11,0x3ff0
80005de0:	c2 58       	rjmp	80005e2a <_dtoa_r+0x16a>
80005de2:	41 88       	lddsp	r8,sp[0x60]
80005de4:	41 9c       	lddsp	r12,sp[0x64]
80005de6:	10 0c       	add	r12,r8
80005de8:	f8 c5 fb ce 	sub	r5,r12,-1074
80005dec:	e0 45 00 20 	cp.w	r5,32
80005df0:	e0 8a 00 0e 	brle	80005e0c <_dtoa_r+0x14c>
80005df4:	f8 cc fb ee 	sub	r12,r12,-1042
80005df8:	40 3b       	lddsp	r11,sp[0xc]
80005dfa:	ea 08 11 40 	rsub	r8,r5,64
80005dfe:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005e02:	ec 08 09 46 	lsl	r6,r6,r8
80005e06:	0c 4c       	or	r12,r6
80005e08:	c0 78       	rjmp	80005e16 <_dtoa_r+0x156>
80005e0a:	d7 03       	nop
80005e0c:	ea 0c 11 20 	rsub	r12,r5,32
80005e10:	40 3a       	lddsp	r10,sp[0xc]
80005e12:	f4 0c 09 4c 	lsl	r12,r10,r12
80005e16:	e0 a0 14 2c 	rcall	8000866e <__avr32_u32_to_f64>
80005e1a:	fc 18 fe 10 	movh	r8,0xfe10
80005e1e:	30 19       	mov	r9,1
80005e20:	ea c5 04 33 	sub	r5,r5,1075
80005e24:	f0 0b 00 0b 	add	r11,r8,r11
80005e28:	51 79       	stdsp	sp[0x5c],r9
80005e2a:	30 08       	mov	r8,0
80005e2c:	fc 19 3f f8 	movh	r9,0x3ff8
80005e30:	e0 a0 12 b4 	rcall	80008398 <__avr32_f64_sub>
80005e34:	e0 68 43 61 	mov	r8,17249
80005e38:	ea 18 63 6f 	orh	r8,0x636f
80005e3c:	e0 69 87 a7 	mov	r9,34727
80005e40:	ea 19 3f d2 	orh	r9,0x3fd2
80005e44:	e0 a0 11 be 	rcall	800081c0 <__avr32_f64_mul>
80005e48:	e0 68 c8 b3 	mov	r8,51379
80005e4c:	ea 18 8b 60 	orh	r8,0x8b60
80005e50:	e0 69 8a 28 	mov	r9,35368
80005e54:	ea 19 3f c6 	orh	r9,0x3fc6
80005e58:	e0 a0 13 6e 	rcall	80008534 <__avr32_f64_add>
80005e5c:	0a 9c       	mov	r12,r5
80005e5e:	14 90       	mov	r0,r10
80005e60:	16 91       	mov	r1,r11
80005e62:	e0 a0 14 0a 	rcall	80008676 <__avr32_s32_to_f64>
80005e66:	e0 68 79 fb 	mov	r8,31227
80005e6a:	ea 18 50 9f 	orh	r8,0x509f
80005e6e:	e0 69 44 13 	mov	r9,17427
80005e72:	ea 19 3f d3 	orh	r9,0x3fd3
80005e76:	e0 a0 11 a5 	rcall	800081c0 <__avr32_f64_mul>
80005e7a:	14 98       	mov	r8,r10
80005e7c:	16 99       	mov	r9,r11
80005e7e:	00 9a       	mov	r10,r0
80005e80:	02 9b       	mov	r11,r1
80005e82:	e0 a0 13 59 	rcall	80008534 <__avr32_f64_add>
80005e86:	14 90       	mov	r0,r10
80005e88:	16 91       	mov	r1,r11
80005e8a:	e0 a0 13 df 	rcall	80008648 <__avr32_f64_to_s32>
80005e8e:	30 08       	mov	r8,0
80005e90:	18 96       	mov	r6,r12
80005e92:	30 09       	mov	r9,0
80005e94:	00 9a       	mov	r10,r0
80005e96:	02 9b       	mov	r11,r1
80005e98:	e0 a0 14 a6 	rcall	800087e4 <__avr32_f64_cmp_lt>
80005e9c:	c0 c0       	breq	80005eb4 <_dtoa_r+0x1f4>
80005e9e:	0c 9c       	mov	r12,r6
80005ea0:	e0 a0 13 eb 	rcall	80008676 <__avr32_s32_to_f64>
80005ea4:	14 98       	mov	r8,r10
80005ea6:	16 99       	mov	r9,r11
80005ea8:	00 9a       	mov	r10,r0
80005eaa:	02 9b       	mov	r11,r1
80005eac:	e0 a0 14 55 	rcall	80008756 <__avr32_f64_cmp_eq>
80005eb0:	f7 b6 00 01 	subeq	r6,1
80005eb4:	59 66       	cp.w	r6,22
80005eb6:	e0 88 00 05 	brls	80005ec0 <_dtoa_r+0x200>
80005eba:	30 18       	mov	r8,1
80005ebc:	51 48       	stdsp	sp[0x50],r8
80005ebe:	c1 38       	rjmp	80005ee4 <_dtoa_r+0x224>
80005ec0:	fe c8 c6 5c 	sub	r8,pc,-14756
80005ec4:	fa ea 00 3c 	ld.d	r10,sp[60]
80005ec8:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005ecc:	e0 a0 14 8c 	rcall	800087e4 <__avr32_f64_cmp_lt>
80005ed0:	f9 b4 00 00 	moveq	r4,0
80005ed4:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005ed8:	f7 b6 01 01 	subne	r6,1
80005edc:	f9 bc 01 00 	movne	r12,0
80005ee0:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005ee4:	41 90       	lddsp	r0,sp[0x64]
80005ee6:	20 10       	sub	r0,1
80005ee8:	0a 10       	sub	r0,r5
80005eea:	c0 46       	brmi	80005ef2 <_dtoa_r+0x232>
80005eec:	50 40       	stdsp	sp[0x10],r0
80005eee:	30 00       	mov	r0,0
80005ef0:	c0 48       	rjmp	80005ef8 <_dtoa_r+0x238>
80005ef2:	30 0b       	mov	r11,0
80005ef4:	5c 30       	neg	r0
80005ef6:	50 4b       	stdsp	sp[0x10],r11
80005ef8:	ec 02 11 00 	rsub	r2,r6,0
80005efc:	58 06       	cp.w	r6,0
80005efe:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005f02:	f5 d6 e4 0a 	addge	r10,r10,r6
80005f06:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005f0a:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005f0e:	f9 b2 04 00 	movge	r2,0
80005f12:	e1 d6 e5 10 	sublt	r0,r0,r6
80005f16:	f9 b9 05 00 	movlt	r9,0
80005f1a:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005f1e:	40 c8       	lddsp	r8,sp[0x30]
80005f20:	58 98       	cp.w	r8,9
80005f22:	e0 8b 00 20 	brhi	80005f62 <_dtoa_r+0x2a2>
80005f26:	58 58       	cp.w	r8,5
80005f28:	f9 b4 0a 01 	movle	r4,1
80005f2c:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005f30:	f7 b5 09 04 	subgt	r5,4
80005f34:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005f38:	f9 b4 09 00 	movgt	r4,0
80005f3c:	40 cc       	lddsp	r12,sp[0x30]
80005f3e:	58 3c       	cp.w	r12,3
80005f40:	c2 d0       	breq	80005f9a <_dtoa_r+0x2da>
80005f42:	e0 89 00 05 	brgt	80005f4c <_dtoa_r+0x28c>
80005f46:	58 2c       	cp.w	r12,2
80005f48:	c1 01       	brne	80005f68 <_dtoa_r+0x2a8>
80005f4a:	c1 88       	rjmp	80005f7a <_dtoa_r+0x2ba>
80005f4c:	40 cb       	lddsp	r11,sp[0x30]
80005f4e:	58 4b       	cp.w	r11,4
80005f50:	c0 60       	breq	80005f5c <_dtoa_r+0x29c>
80005f52:	58 5b       	cp.w	r11,5
80005f54:	c0 a1       	brne	80005f68 <_dtoa_r+0x2a8>
80005f56:	30 1a       	mov	r10,1
80005f58:	50 da       	stdsp	sp[0x34],r10
80005f5a:	c2 28       	rjmp	80005f9e <_dtoa_r+0x2de>
80005f5c:	30 19       	mov	r9,1
80005f5e:	50 d9       	stdsp	sp[0x34],r9
80005f60:	c0 f8       	rjmp	80005f7e <_dtoa_r+0x2be>
80005f62:	30 08       	mov	r8,0
80005f64:	30 14       	mov	r4,1
80005f66:	50 c8       	stdsp	sp[0x30],r8
80005f68:	3f f5       	mov	r5,-1
80005f6a:	30 1c       	mov	r12,1
80005f6c:	30 0b       	mov	r11,0
80005f6e:	50 95       	stdsp	sp[0x24],r5
80005f70:	50 dc       	stdsp	sp[0x34],r12
80005f72:	0a 91       	mov	r1,r5
80005f74:	31 28       	mov	r8,18
80005f76:	50 eb       	stdsp	sp[0x38],r11
80005f78:	c2 08       	rjmp	80005fb8 <_dtoa_r+0x2f8>
80005f7a:	30 0a       	mov	r10,0
80005f7c:	50 da       	stdsp	sp[0x34],r10
80005f7e:	40 e9       	lddsp	r9,sp[0x38]
80005f80:	58 09       	cp.w	r9,0
80005f82:	e0 89 00 07 	brgt	80005f90 <_dtoa_r+0x2d0>
80005f86:	30 18       	mov	r8,1
80005f88:	50 98       	stdsp	sp[0x24],r8
80005f8a:	10 91       	mov	r1,r8
80005f8c:	50 e8       	stdsp	sp[0x38],r8
80005f8e:	c1 58       	rjmp	80005fb8 <_dtoa_r+0x2f8>
80005f90:	40 e5       	lddsp	r5,sp[0x38]
80005f92:	50 95       	stdsp	sp[0x24],r5
80005f94:	0a 91       	mov	r1,r5
80005f96:	0a 98       	mov	r8,r5
80005f98:	c1 08       	rjmp	80005fb8 <_dtoa_r+0x2f8>
80005f9a:	30 0c       	mov	r12,0
80005f9c:	50 dc       	stdsp	sp[0x34],r12
80005f9e:	40 eb       	lddsp	r11,sp[0x38]
80005fa0:	ec 0b 00 0b 	add	r11,r6,r11
80005fa4:	50 9b       	stdsp	sp[0x24],r11
80005fa6:	16 98       	mov	r8,r11
80005fa8:	2f f8       	sub	r8,-1
80005faa:	58 08       	cp.w	r8,0
80005fac:	e0 89 00 05 	brgt	80005fb6 <_dtoa_r+0x2f6>
80005fb0:	10 91       	mov	r1,r8
80005fb2:	30 18       	mov	r8,1
80005fb4:	c0 28       	rjmp	80005fb8 <_dtoa_r+0x2f8>
80005fb6:	10 91       	mov	r1,r8
80005fb8:	30 09       	mov	r9,0
80005fba:	6e 9a       	ld.w	r10,r7[0x24]
80005fbc:	95 19       	st.w	r10[0x4],r9
80005fbe:	30 49       	mov	r9,4
80005fc0:	c0 68       	rjmp	80005fcc <_dtoa_r+0x30c>
80005fc2:	d7 03       	nop
80005fc4:	6a 1a       	ld.w	r10,r5[0x4]
80005fc6:	a1 79       	lsl	r9,0x1
80005fc8:	2f fa       	sub	r10,-1
80005fca:	8b 1a       	st.w	r5[0x4],r10
80005fcc:	6e 95       	ld.w	r5,r7[0x24]
80005fce:	f2 ca ff ec 	sub	r10,r9,-20
80005fd2:	10 3a       	cp.w	r10,r8
80005fd4:	fe 98 ff f8 	brls	80005fc4 <_dtoa_r+0x304>
80005fd8:	6a 1b       	ld.w	r11,r5[0x4]
80005fda:	0e 9c       	mov	r12,r7
80005fdc:	e0 a0 0b 6e 	rcall	800076b8 <_Balloc>
80005fe0:	58 e1       	cp.w	r1,14
80005fe2:	5f 88       	srls	r8
80005fe4:	8b 0c       	st.w	r5[0x0],r12
80005fe6:	f1 e4 00 04 	and	r4,r8,r4
80005fea:	6e 98       	ld.w	r8,r7[0x24]
80005fec:	70 08       	ld.w	r8,r8[0x0]
80005fee:	50 88       	stdsp	sp[0x20],r8
80005ff0:	e0 80 01 82 	breq	800062f4 <_dtoa_r+0x634>
80005ff4:	58 06       	cp.w	r6,0
80005ff6:	e0 8a 00 43 	brle	8000607c <_dtoa_r+0x3bc>
80005ffa:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005ffe:	fe c8 c7 9a 	sub	r8,pc,-14438
80006002:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006006:	fa e5 00 18 	st.d	sp[24],r4
8000600a:	ec 04 14 04 	asr	r4,r6,0x4
8000600e:	ed b4 00 04 	bld	r4,0x4
80006012:	c0 30       	breq	80006018 <_dtoa_r+0x358>
80006014:	30 25       	mov	r5,2
80006016:	c1 08       	rjmp	80006036 <_dtoa_r+0x376>
80006018:	fe c8 c6 ec 	sub	r8,pc,-14612
8000601c:	f0 e8 00 20 	ld.d	r8,r8[32]
80006020:	fa ea 00 3c 	ld.d	r10,sp[60]
80006024:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006028:	e0 a0 14 12 	rcall	8000884c <__avr32_f64_div>
8000602c:	30 35       	mov	r5,3
8000602e:	14 98       	mov	r8,r10
80006030:	16 99       	mov	r9,r11
80006032:	fa e9 00 08 	st.d	sp[8],r8
80006036:	fe cc c7 0a 	sub	r12,pc,-14582
8000603a:	50 a3       	stdsp	sp[0x28],r3
8000603c:	0c 93       	mov	r3,r6
8000603e:	18 96       	mov	r6,r12
80006040:	c0 f8       	rjmp	8000605e <_dtoa_r+0x39e>
80006042:	fa ea 00 18 	ld.d	r10,sp[24]
80006046:	ed b4 00 00 	bld	r4,0x0
8000604a:	c0 81       	brne	8000605a <_dtoa_r+0x39a>
8000604c:	ec e8 00 00 	ld.d	r8,r6[0]
80006050:	2f f5       	sub	r5,-1
80006052:	e0 a0 10 b7 	rcall	800081c0 <__avr32_f64_mul>
80006056:	fa eb 00 18 	st.d	sp[24],r10
8000605a:	a1 54       	asr	r4,0x1
8000605c:	2f 86       	sub	r6,-8
8000605e:	58 04       	cp.w	r4,0
80006060:	cf 11       	brne	80006042 <_dtoa_r+0x382>
80006062:	fa e8 00 18 	ld.d	r8,sp[24]
80006066:	fa ea 00 08 	ld.d	r10,sp[8]
8000606a:	06 96       	mov	r6,r3
8000606c:	e0 a0 13 f0 	rcall	8000884c <__avr32_f64_div>
80006070:	40 a3       	lddsp	r3,sp[0x28]
80006072:	14 98       	mov	r8,r10
80006074:	16 99       	mov	r9,r11
80006076:	fa e9 00 08 	st.d	sp[8],r8
8000607a:	c2 f8       	rjmp	800060d8 <_dtoa_r+0x418>
8000607c:	ec 08 11 00 	rsub	r8,r6,0
80006080:	c0 31       	brne	80006086 <_dtoa_r+0x3c6>
80006082:	30 25       	mov	r5,2
80006084:	c2 a8       	rjmp	800060d8 <_dtoa_r+0x418>
80006086:	fe cc c7 5a 	sub	r12,pc,-14502
8000608a:	f0 04 14 04 	asr	r4,r8,0x4
8000608e:	50 1c       	stdsp	sp[0x4],r12
80006090:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006094:	fe c9 c8 30 	sub	r9,pc,-14288
80006098:	fa ea 00 3c 	ld.d	r10,sp[60]
8000609c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800060a0:	e0 a0 10 90 	rcall	800081c0 <__avr32_f64_mul>
800060a4:	40 1c       	lddsp	r12,sp[0x4]
800060a6:	50 63       	stdsp	sp[0x18],r3
800060a8:	30 25       	mov	r5,2
800060aa:	0c 93       	mov	r3,r6
800060ac:	fa eb 00 08 	st.d	sp[8],r10
800060b0:	18 96       	mov	r6,r12
800060b2:	c0 f8       	rjmp	800060d0 <_dtoa_r+0x410>
800060b4:	fa ea 00 08 	ld.d	r10,sp[8]
800060b8:	ed b4 00 00 	bld	r4,0x0
800060bc:	c0 81       	brne	800060cc <_dtoa_r+0x40c>
800060be:	ec e8 00 00 	ld.d	r8,r6[0]
800060c2:	2f f5       	sub	r5,-1
800060c4:	e0 a0 10 7e 	rcall	800081c0 <__avr32_f64_mul>
800060c8:	fa eb 00 08 	st.d	sp[8],r10
800060cc:	a1 54       	asr	r4,0x1
800060ce:	2f 86       	sub	r6,-8
800060d0:	58 04       	cp.w	r4,0
800060d2:	cf 11       	brne	800060b4 <_dtoa_r+0x3f4>
800060d4:	06 96       	mov	r6,r3
800060d6:	40 63       	lddsp	r3,sp[0x18]
800060d8:	41 4a       	lddsp	r10,sp[0x50]
800060da:	58 0a       	cp.w	r10,0
800060dc:	c2 a0       	breq	80006130 <_dtoa_r+0x470>
800060de:	fa e8 00 08 	ld.d	r8,sp[8]
800060e2:	58 01       	cp.w	r1,0
800060e4:	5f 94       	srgt	r4
800060e6:	fa e9 00 18 	st.d	sp[24],r8
800060ea:	30 08       	mov	r8,0
800060ec:	fc 19 3f f0 	movh	r9,0x3ff0
800060f0:	fa ea 00 18 	ld.d	r10,sp[24]
800060f4:	e0 a0 13 78 	rcall	800087e4 <__avr32_f64_cmp_lt>
800060f8:	f9 bc 00 00 	moveq	r12,0
800060fc:	f9 bc 01 01 	movne	r12,1
80006100:	e9 ec 00 0c 	and	r12,r4,r12
80006104:	c1 60       	breq	80006130 <_dtoa_r+0x470>
80006106:	40 98       	lddsp	r8,sp[0x24]
80006108:	58 08       	cp.w	r8,0
8000610a:	e0 8a 00 f1 	brle	800062ec <_dtoa_r+0x62c>
8000610e:	30 08       	mov	r8,0
80006110:	fc 19 40 24 	movh	r9,0x4024
80006114:	ec c4 00 01 	sub	r4,r6,1
80006118:	fa ea 00 18 	ld.d	r10,sp[24]
8000611c:	2f f5       	sub	r5,-1
8000611e:	50 64       	stdsp	sp[0x18],r4
80006120:	e0 a0 10 50 	rcall	800081c0 <__avr32_f64_mul>
80006124:	40 94       	lddsp	r4,sp[0x24]
80006126:	14 98       	mov	r8,r10
80006128:	16 99       	mov	r9,r11
8000612a:	fa e9 00 08 	st.d	sp[8],r8
8000612e:	c0 38       	rjmp	80006134 <_dtoa_r+0x474>
80006130:	50 66       	stdsp	sp[0x18],r6
80006132:	02 94       	mov	r4,r1
80006134:	0a 9c       	mov	r12,r5
80006136:	e0 a0 12 a0 	rcall	80008676 <__avr32_s32_to_f64>
8000613a:	fa e8 00 08 	ld.d	r8,sp[8]
8000613e:	e0 a0 10 41 	rcall	800081c0 <__avr32_f64_mul>
80006142:	30 08       	mov	r8,0
80006144:	fc 19 40 1c 	movh	r9,0x401c
80006148:	e0 a0 11 f6 	rcall	80008534 <__avr32_f64_add>
8000614c:	14 98       	mov	r8,r10
8000614e:	16 99       	mov	r9,r11
80006150:	fa e9 00 28 	st.d	sp[40],r8
80006154:	fc 18 fc c0 	movh	r8,0xfcc0
80006158:	40 a5       	lddsp	r5,sp[0x28]
8000615a:	10 05       	add	r5,r8
8000615c:	50 a5       	stdsp	sp[0x28],r5
8000615e:	58 04       	cp.w	r4,0
80006160:	c2 11       	brne	800061a2 <_dtoa_r+0x4e2>
80006162:	fa ea 00 08 	ld.d	r10,sp[8]
80006166:	30 08       	mov	r8,0
80006168:	fc 19 40 14 	movh	r9,0x4014
8000616c:	e0 a0 11 16 	rcall	80008398 <__avr32_f64_sub>
80006170:	40 bc       	lddsp	r12,sp[0x2c]
80006172:	fa eb 00 08 	st.d	sp[8],r10
80006176:	14 98       	mov	r8,r10
80006178:	16 99       	mov	r9,r11
8000617a:	18 9a       	mov	r10,r12
8000617c:	0a 9b       	mov	r11,r5
8000617e:	e0 a0 13 33 	rcall	800087e4 <__avr32_f64_cmp_lt>
80006182:	e0 81 02 54 	brne	8000662a <_dtoa_r+0x96a>
80006186:	0a 98       	mov	r8,r5
80006188:	40 b9       	lddsp	r9,sp[0x2c]
8000618a:	ee 18 80 00 	eorh	r8,0x8000
8000618e:	fa ea 00 08 	ld.d	r10,sp[8]
80006192:	10 95       	mov	r5,r8
80006194:	12 98       	mov	r8,r9
80006196:	0a 99       	mov	r9,r5
80006198:	e0 a0 13 26 	rcall	800087e4 <__avr32_f64_cmp_lt>
8000619c:	e0 81 02 3e 	brne	80006618 <_dtoa_r+0x958>
800061a0:	ca 68       	rjmp	800062ec <_dtoa_r+0x62c>
800061a2:	fe c9 c9 3e 	sub	r9,pc,-14018
800061a6:	e8 c8 00 01 	sub	r8,r4,1
800061aa:	40 d5       	lddsp	r5,sp[0x34]
800061ac:	58 05       	cp.w	r5,0
800061ae:	c4 f0       	breq	8000624c <_dtoa_r+0x58c>
800061b0:	30 0c       	mov	r12,0
800061b2:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800061b6:	51 3c       	stdsp	sp[0x4c],r12
800061b8:	30 0a       	mov	r10,0
800061ba:	fc 1b 3f e0 	movh	r11,0x3fe0
800061be:	e0 a0 13 47 	rcall	8000884c <__avr32_f64_div>
800061c2:	fa e8 00 28 	ld.d	r8,sp[40]
800061c6:	40 85       	lddsp	r5,sp[0x20]
800061c8:	e0 a0 10 e8 	rcall	80008398 <__avr32_f64_sub>
800061cc:	fa eb 00 28 	st.d	sp[40],r10
800061d0:	fa ea 00 08 	ld.d	r10,sp[8]
800061d4:	e0 a0 12 3a 	rcall	80008648 <__avr32_f64_to_s32>
800061d8:	51 6c       	stdsp	sp[0x58],r12
800061da:	e0 a0 12 4e 	rcall	80008676 <__avr32_s32_to_f64>
800061de:	14 98       	mov	r8,r10
800061e0:	16 99       	mov	r9,r11
800061e2:	fa ea 00 08 	ld.d	r10,sp[8]
800061e6:	e0 a0 10 d9 	rcall	80008398 <__avr32_f64_sub>
800061ea:	fa eb 00 08 	st.d	sp[8],r10
800061ee:	41 68       	lddsp	r8,sp[0x58]
800061f0:	2d 08       	sub	r8,-48
800061f2:	0a c8       	st.b	r5++,r8
800061f4:	41 39       	lddsp	r9,sp[0x4c]
800061f6:	2f f9       	sub	r9,-1
800061f8:	51 39       	stdsp	sp[0x4c],r9
800061fa:	fa e8 00 28 	ld.d	r8,sp[40]
800061fe:	e0 a0 12 f3 	rcall	800087e4 <__avr32_f64_cmp_lt>
80006202:	e0 81 03 39 	brne	80006874 <_dtoa_r+0xbb4>
80006206:	fa e8 00 08 	ld.d	r8,sp[8]
8000620a:	30 0a       	mov	r10,0
8000620c:	fc 1b 3f f0 	movh	r11,0x3ff0
80006210:	e0 a0 10 c4 	rcall	80008398 <__avr32_f64_sub>
80006214:	fa e8 00 28 	ld.d	r8,sp[40]
80006218:	e0 a0 12 e6 	rcall	800087e4 <__avr32_f64_cmp_lt>
8000621c:	fa ea 00 28 	ld.d	r10,sp[40]
80006220:	30 08       	mov	r8,0
80006222:	fc 19 40 24 	movh	r9,0x4024
80006226:	e0 81 00 da 	brne	800063da <_dtoa_r+0x71a>
8000622a:	41 3c       	lddsp	r12,sp[0x4c]
8000622c:	08 3c       	cp.w	r12,r4
8000622e:	c5 f4       	brge	800062ec <_dtoa_r+0x62c>
80006230:	e0 a0 0f c8 	rcall	800081c0 <__avr32_f64_mul>
80006234:	30 08       	mov	r8,0
80006236:	fa eb 00 28 	st.d	sp[40],r10
8000623a:	fc 19 40 24 	movh	r9,0x4024
8000623e:	fa ea 00 08 	ld.d	r10,sp[8]
80006242:	e0 a0 0f bf 	rcall	800081c0 <__avr32_f64_mul>
80006246:	fa eb 00 08 	st.d	sp[8],r10
8000624a:	cc 3b       	rjmp	800061d0 <_dtoa_r+0x510>
8000624c:	40 85       	lddsp	r5,sp[0x20]
8000624e:	08 05       	add	r5,r4
80006250:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006254:	51 35       	stdsp	sp[0x4c],r5
80006256:	fa e8 00 28 	ld.d	r8,sp[40]
8000625a:	40 85       	lddsp	r5,sp[0x20]
8000625c:	e0 a0 0f b2 	rcall	800081c0 <__avr32_f64_mul>
80006260:	fa eb 00 28 	st.d	sp[40],r10
80006264:	fa ea 00 08 	ld.d	r10,sp[8]
80006268:	e0 a0 11 f0 	rcall	80008648 <__avr32_f64_to_s32>
8000626c:	51 6c       	stdsp	sp[0x58],r12
8000626e:	e0 a0 12 04 	rcall	80008676 <__avr32_s32_to_f64>
80006272:	14 98       	mov	r8,r10
80006274:	16 99       	mov	r9,r11
80006276:	fa ea 00 08 	ld.d	r10,sp[8]
8000627a:	e0 a0 10 8f 	rcall	80008398 <__avr32_f64_sub>
8000627e:	fa eb 00 08 	st.d	sp[8],r10
80006282:	41 68       	lddsp	r8,sp[0x58]
80006284:	2d 08       	sub	r8,-48
80006286:	0a c8       	st.b	r5++,r8
80006288:	41 3c       	lddsp	r12,sp[0x4c]
8000628a:	18 35       	cp.w	r5,r12
8000628c:	c2 81       	brne	800062dc <_dtoa_r+0x61c>
8000628e:	30 08       	mov	r8,0
80006290:	fc 19 3f e0 	movh	r9,0x3fe0
80006294:	fa ea 00 28 	ld.d	r10,sp[40]
80006298:	e0 a0 11 4e 	rcall	80008534 <__avr32_f64_add>
8000629c:	40 85       	lddsp	r5,sp[0x20]
8000629e:	fa e8 00 08 	ld.d	r8,sp[8]
800062a2:	08 05       	add	r5,r4
800062a4:	e0 a0 12 a0 	rcall	800087e4 <__avr32_f64_cmp_lt>
800062a8:	e0 81 00 99 	brne	800063da <_dtoa_r+0x71a>
800062ac:	fa e8 00 28 	ld.d	r8,sp[40]
800062b0:	30 0a       	mov	r10,0
800062b2:	fc 1b 3f e0 	movh	r11,0x3fe0
800062b6:	e0 a0 10 71 	rcall	80008398 <__avr32_f64_sub>
800062ba:	14 98       	mov	r8,r10
800062bc:	16 99       	mov	r9,r11
800062be:	fa ea 00 08 	ld.d	r10,sp[8]
800062c2:	e0 a0 12 91 	rcall	800087e4 <__avr32_f64_cmp_lt>
800062c6:	c1 30       	breq	800062ec <_dtoa_r+0x62c>
800062c8:	33 09       	mov	r9,48
800062ca:	0a 98       	mov	r8,r5
800062cc:	11 7a       	ld.ub	r10,--r8
800062ce:	f2 0a 18 00 	cp.b	r10,r9
800062d2:	e0 81 02 d1 	brne	80006874 <_dtoa_r+0xbb4>
800062d6:	10 95       	mov	r5,r8
800062d8:	cf 9b       	rjmp	800062ca <_dtoa_r+0x60a>
800062da:	d7 03       	nop
800062dc:	30 08       	mov	r8,0
800062de:	fc 19 40 24 	movh	r9,0x4024
800062e2:	e0 a0 0f 6f 	rcall	800081c0 <__avr32_f64_mul>
800062e6:	fa eb 00 08 	st.d	sp[8],r10
800062ea:	cb db       	rjmp	80006264 <_dtoa_r+0x5a4>
800062ec:	fa ea 00 3c 	ld.d	r10,sp[60]
800062f0:	fa eb 00 08 	st.d	sp[8],r10
800062f4:	58 e6       	cp.w	r6,14
800062f6:	5f ab       	srle	r11
800062f8:	41 8a       	lddsp	r10,sp[0x60]
800062fa:	30 08       	mov	r8,0
800062fc:	f4 09 11 ff 	rsub	r9,r10,-1
80006300:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006304:	f0 09 18 00 	cp.b	r9,r8
80006308:	e0 80 00 82 	breq	8000640c <_dtoa_r+0x74c>
8000630c:	40 ea       	lddsp	r10,sp[0x38]
8000630e:	58 01       	cp.w	r1,0
80006310:	5f a9       	srle	r9
80006312:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006316:	fe ca ca b2 	sub	r10,pc,-13646
8000631a:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000631e:	fa e5 00 10 	st.d	sp[16],r4
80006322:	f0 09 18 00 	cp.b	r9,r8
80006326:	c1 40       	breq	8000634e <_dtoa_r+0x68e>
80006328:	58 01       	cp.w	r1,0
8000632a:	e0 81 01 77 	brne	80006618 <_dtoa_r+0x958>
8000632e:	30 08       	mov	r8,0
80006330:	fc 19 40 14 	movh	r9,0x4014
80006334:	08 9a       	mov	r10,r4
80006336:	0a 9b       	mov	r11,r5
80006338:	e0 a0 0f 44 	rcall	800081c0 <__avr32_f64_mul>
8000633c:	fa e8 00 08 	ld.d	r8,sp[8]
80006340:	e0 a0 12 1e 	rcall	8000877c <__avr32_f64_cmp_ge>
80006344:	e0 81 01 6a 	brne	80006618 <_dtoa_r+0x958>
80006348:	02 92       	mov	r2,r1
8000634a:	e0 8f 01 72 	bral	8000662e <_dtoa_r+0x96e>
8000634e:	40 85       	lddsp	r5,sp[0x20]
80006350:	30 14       	mov	r4,1
80006352:	fa e8 00 10 	ld.d	r8,sp[16]
80006356:	fa ea 00 08 	ld.d	r10,sp[8]
8000635a:	e0 a0 12 79 	rcall	8000884c <__avr32_f64_div>
8000635e:	e0 a0 11 75 	rcall	80008648 <__avr32_f64_to_s32>
80006362:	18 92       	mov	r2,r12
80006364:	e0 a0 11 89 	rcall	80008676 <__avr32_s32_to_f64>
80006368:	fa e8 00 10 	ld.d	r8,sp[16]
8000636c:	e0 a0 0f 2a 	rcall	800081c0 <__avr32_f64_mul>
80006370:	14 98       	mov	r8,r10
80006372:	16 99       	mov	r9,r11
80006374:	fa ea 00 08 	ld.d	r10,sp[8]
80006378:	e0 a0 10 10 	rcall	80008398 <__avr32_f64_sub>
8000637c:	fa eb 00 08 	st.d	sp[8],r10
80006380:	e4 c8 ff d0 	sub	r8,r2,-48
80006384:	0a c8       	st.b	r5++,r8
80006386:	fc 19 40 24 	movh	r9,0x4024
8000638a:	30 08       	mov	r8,0
8000638c:	02 34       	cp.w	r4,r1
8000638e:	c3 31       	brne	800063f4 <_dtoa_r+0x734>
80006390:	fa e8 00 08 	ld.d	r8,sp[8]
80006394:	e0 a0 10 d0 	rcall	80008534 <__avr32_f64_add>
80006398:	16 91       	mov	r1,r11
8000639a:	14 90       	mov	r0,r10
8000639c:	14 98       	mov	r8,r10
8000639e:	02 99       	mov	r9,r1
800063a0:	fa ea 00 10 	ld.d	r10,sp[16]
800063a4:	e0 a0 12 20 	rcall	800087e4 <__avr32_f64_cmp_lt>
800063a8:	c1 a1       	brne	800063dc <_dtoa_r+0x71c>
800063aa:	fa e8 00 10 	ld.d	r8,sp[16]
800063ae:	00 9a       	mov	r10,r0
800063b0:	02 9b       	mov	r11,r1
800063b2:	e0 a0 11 d2 	rcall	80008756 <__avr32_f64_cmp_eq>
800063b6:	e0 80 02 5e 	breq	80006872 <_dtoa_r+0xbb2>
800063ba:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800063be:	c0 f1       	brne	800063dc <_dtoa_r+0x71c>
800063c0:	e0 8f 02 59 	bral	80006872 <_dtoa_r+0xbb2>
800063c4:	40 8a       	lddsp	r10,sp[0x20]
800063c6:	14 38       	cp.w	r8,r10
800063c8:	c0 30       	breq	800063ce <_dtoa_r+0x70e>
800063ca:	10 95       	mov	r5,r8
800063cc:	c0 98       	rjmp	800063de <_dtoa_r+0x71e>
800063ce:	33 08       	mov	r8,48
800063d0:	40 89       	lddsp	r9,sp[0x20]
800063d2:	2f f6       	sub	r6,-1
800063d4:	b2 88       	st.b	r9[0x0],r8
800063d6:	40 88       	lddsp	r8,sp[0x20]
800063d8:	c0 88       	rjmp	800063e8 <_dtoa_r+0x728>
800063da:	40 66       	lddsp	r6,sp[0x18]
800063dc:	33 99       	mov	r9,57
800063de:	0a 98       	mov	r8,r5
800063e0:	11 7a       	ld.ub	r10,--r8
800063e2:	f2 0a 18 00 	cp.b	r10,r9
800063e6:	ce f0       	breq	800063c4 <_dtoa_r+0x704>
800063e8:	50 66       	stdsp	sp[0x18],r6
800063ea:	11 89       	ld.ub	r9,r8[0x0]
800063ec:	2f f9       	sub	r9,-1
800063ee:	b0 89       	st.b	r8[0x0],r9
800063f0:	e0 8f 02 42 	bral	80006874 <_dtoa_r+0xbb4>
800063f4:	e0 a0 0e e6 	rcall	800081c0 <__avr32_f64_mul>
800063f8:	2f f4       	sub	r4,-1
800063fa:	fa eb 00 08 	st.d	sp[8],r10
800063fe:	30 08       	mov	r8,0
80006400:	30 09       	mov	r9,0
80006402:	e0 a0 11 aa 	rcall	80008756 <__avr32_f64_cmp_eq>
80006406:	ca 60       	breq	80006352 <_dtoa_r+0x692>
80006408:	e0 8f 02 35 	bral	80006872 <_dtoa_r+0xbb2>
8000640c:	40 d8       	lddsp	r8,sp[0x34]
8000640e:	58 08       	cp.w	r8,0
80006410:	c0 51       	brne	8000641a <_dtoa_r+0x75a>
80006412:	04 98       	mov	r8,r2
80006414:	00 95       	mov	r5,r0
80006416:	40 d4       	lddsp	r4,sp[0x34]
80006418:	c3 78       	rjmp	80006486 <_dtoa_r+0x7c6>
8000641a:	40 c5       	lddsp	r5,sp[0x30]
8000641c:	58 15       	cp.w	r5,1
8000641e:	e0 89 00 0f 	brgt	8000643c <_dtoa_r+0x77c>
80006422:	41 74       	lddsp	r4,sp[0x5c]
80006424:	58 04       	cp.w	r4,0
80006426:	c0 40       	breq	8000642e <_dtoa_r+0x76e>
80006428:	f4 c9 fb cd 	sub	r9,r10,-1075
8000642c:	c0 48       	rjmp	80006434 <_dtoa_r+0x774>
8000642e:	41 99       	lddsp	r9,sp[0x64]
80006430:	f2 09 11 36 	rsub	r9,r9,54
80006434:	04 98       	mov	r8,r2
80006436:	00 95       	mov	r5,r0
80006438:	c1 c8       	rjmp	80006470 <_dtoa_r+0x7b0>
8000643a:	d7 03       	nop
8000643c:	e2 c8 00 01 	sub	r8,r1,1
80006440:	58 01       	cp.w	r1,0
80006442:	e0 05 17 40 	movge	r5,r0
80006446:	e2 09 17 40 	movge	r9,r1
8000644a:	e1 d1 e5 15 	sublt	r5,r0,r1
8000644e:	f9 b9 05 00 	movlt	r9,0
80006452:	10 32       	cp.w	r2,r8
80006454:	e5 d8 e4 18 	subge	r8,r2,r8
80006458:	f1 d2 e5 18 	sublt	r8,r8,r2
8000645c:	e5 d8 e5 02 	addlt	r2,r2,r8
80006460:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006464:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006468:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000646c:	f9 b8 05 00 	movlt	r8,0
80006470:	40 4b       	lddsp	r11,sp[0x10]
80006472:	12 0b       	add	r11,r9
80006474:	50 08       	stdsp	sp[0x0],r8
80006476:	50 4b       	stdsp	sp[0x10],r11
80006478:	12 00       	add	r0,r9
8000647a:	30 1b       	mov	r11,1
8000647c:	0e 9c       	mov	r12,r7
8000647e:	e0 a0 0a d1 	rcall	80007a20 <__i2b>
80006482:	40 08       	lddsp	r8,sp[0x0]
80006484:	18 94       	mov	r4,r12
80006486:	40 4a       	lddsp	r10,sp[0x10]
80006488:	58 05       	cp.w	r5,0
8000648a:	5f 99       	srgt	r9
8000648c:	58 0a       	cp.w	r10,0
8000648e:	5f 9a       	srgt	r10
80006490:	f5 e9 00 09 	and	r9,r10,r9
80006494:	c0 80       	breq	800064a4 <_dtoa_r+0x7e4>
80006496:	40 4c       	lddsp	r12,sp[0x10]
80006498:	f8 05 0d 49 	min	r9,r12,r5
8000649c:	12 1c       	sub	r12,r9
8000649e:	12 10       	sub	r0,r9
800064a0:	50 4c       	stdsp	sp[0x10],r12
800064a2:	12 15       	sub	r5,r9
800064a4:	58 02       	cp.w	r2,0
800064a6:	e0 8a 00 27 	brle	800064f4 <_dtoa_r+0x834>
800064aa:	40 db       	lddsp	r11,sp[0x34]
800064ac:	58 0b       	cp.w	r11,0
800064ae:	c1 d0       	breq	800064e8 <_dtoa_r+0x828>
800064b0:	58 08       	cp.w	r8,0
800064b2:	e0 8a 00 17 	brle	800064e0 <_dtoa_r+0x820>
800064b6:	10 9a       	mov	r10,r8
800064b8:	50 08       	stdsp	sp[0x0],r8
800064ba:	08 9b       	mov	r11,r4
800064bc:	0e 9c       	mov	r12,r7
800064be:	e0 a0 0a f7 	rcall	80007aac <__pow5mult>
800064c2:	06 9a       	mov	r10,r3
800064c4:	18 9b       	mov	r11,r12
800064c6:	18 94       	mov	r4,r12
800064c8:	0e 9c       	mov	r12,r7
800064ca:	e0 a0 0a 2b 	rcall	80007920 <__multiply>
800064ce:	18 99       	mov	r9,r12
800064d0:	06 9b       	mov	r11,r3
800064d2:	50 19       	stdsp	sp[0x4],r9
800064d4:	0e 9c       	mov	r12,r7
800064d6:	e0 a0 08 d7 	rcall	80007684 <_Bfree>
800064da:	40 19       	lddsp	r9,sp[0x4]
800064dc:	40 08       	lddsp	r8,sp[0x0]
800064de:	12 93       	mov	r3,r9
800064e0:	e4 08 01 0a 	sub	r10,r2,r8
800064e4:	c0 80       	breq	800064f4 <_dtoa_r+0x834>
800064e6:	c0 28       	rjmp	800064ea <_dtoa_r+0x82a>
800064e8:	04 9a       	mov	r10,r2
800064ea:	06 9b       	mov	r11,r3
800064ec:	0e 9c       	mov	r12,r7
800064ee:	e0 a0 0a df 	rcall	80007aac <__pow5mult>
800064f2:	18 93       	mov	r3,r12
800064f4:	30 1b       	mov	r11,1
800064f6:	0e 9c       	mov	r12,r7
800064f8:	e0 a0 0a 94 	rcall	80007a20 <__i2b>
800064fc:	41 1a       	lddsp	r10,sp[0x44]
800064fe:	18 92       	mov	r2,r12
80006500:	58 0a       	cp.w	r10,0
80006502:	e0 8a 00 07 	brle	80006510 <_dtoa_r+0x850>
80006506:	18 9b       	mov	r11,r12
80006508:	0e 9c       	mov	r12,r7
8000650a:	e0 a0 0a d1 	rcall	80007aac <__pow5mult>
8000650e:	18 92       	mov	r2,r12
80006510:	40 c9       	lddsp	r9,sp[0x30]
80006512:	58 19       	cp.w	r9,1
80006514:	e0 89 00 14 	brgt	8000653c <_dtoa_r+0x87c>
80006518:	40 38       	lddsp	r8,sp[0xc]
8000651a:	58 08       	cp.w	r8,0
8000651c:	c1 01       	brne	8000653c <_dtoa_r+0x87c>
8000651e:	40 29       	lddsp	r9,sp[0x8]
80006520:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006524:	c0 c1       	brne	8000653c <_dtoa_r+0x87c>
80006526:	12 98       	mov	r8,r9
80006528:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000652c:	c0 80       	breq	8000653c <_dtoa_r+0x87c>
8000652e:	40 4c       	lddsp	r12,sp[0x10]
80006530:	30 1b       	mov	r11,1
80006532:	2f fc       	sub	r12,-1
80006534:	2f f0       	sub	r0,-1
80006536:	50 4c       	stdsp	sp[0x10],r12
80006538:	50 6b       	stdsp	sp[0x18],r11
8000653a:	c0 38       	rjmp	80006540 <_dtoa_r+0x880>
8000653c:	30 0a       	mov	r10,0
8000653e:	50 6a       	stdsp	sp[0x18],r10
80006540:	41 19       	lddsp	r9,sp[0x44]
80006542:	58 09       	cp.w	r9,0
80006544:	c0 31       	brne	8000654a <_dtoa_r+0x88a>
80006546:	30 1c       	mov	r12,1
80006548:	c0 98       	rjmp	8000655a <_dtoa_r+0x89a>
8000654a:	64 48       	ld.w	r8,r2[0x10]
8000654c:	2f c8       	sub	r8,-4
8000654e:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006552:	e0 a0 08 08 	rcall	80007562 <__hi0bits>
80006556:	f8 0c 11 20 	rsub	r12,r12,32
8000655a:	40 4b       	lddsp	r11,sp[0x10]
8000655c:	f8 0b 00 08 	add	r8,r12,r11
80006560:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006564:	c0 c0       	breq	8000657c <_dtoa_r+0x8bc>
80006566:	f0 08 11 20 	rsub	r8,r8,32
8000656a:	58 48       	cp.w	r8,4
8000656c:	e0 8a 00 06 	brle	80006578 <_dtoa_r+0x8b8>
80006570:	20 48       	sub	r8,4
80006572:	10 0b       	add	r11,r8
80006574:	50 4b       	stdsp	sp[0x10],r11
80006576:	c0 78       	rjmp	80006584 <_dtoa_r+0x8c4>
80006578:	58 48       	cp.w	r8,4
8000657a:	c0 70       	breq	80006588 <_dtoa_r+0x8c8>
8000657c:	40 4a       	lddsp	r10,sp[0x10]
8000657e:	2e 48       	sub	r8,-28
80006580:	10 0a       	add	r10,r8
80006582:	50 4a       	stdsp	sp[0x10],r10
80006584:	10 00       	add	r0,r8
80006586:	10 05       	add	r5,r8
80006588:	58 00       	cp.w	r0,0
8000658a:	e0 8a 00 08 	brle	8000659a <_dtoa_r+0x8da>
8000658e:	06 9b       	mov	r11,r3
80006590:	00 9a       	mov	r10,r0
80006592:	0e 9c       	mov	r12,r7
80006594:	e0 a0 09 82 	rcall	80007898 <__lshift>
80006598:	18 93       	mov	r3,r12
8000659a:	40 49       	lddsp	r9,sp[0x10]
8000659c:	58 09       	cp.w	r9,0
8000659e:	e0 8a 00 08 	brle	800065ae <_dtoa_r+0x8ee>
800065a2:	04 9b       	mov	r11,r2
800065a4:	12 9a       	mov	r10,r9
800065a6:	0e 9c       	mov	r12,r7
800065a8:	e0 a0 09 78 	rcall	80007898 <__lshift>
800065ac:	18 92       	mov	r2,r12
800065ae:	41 48       	lddsp	r8,sp[0x50]
800065b0:	58 08       	cp.w	r8,0
800065b2:	c1 b0       	breq	800065e8 <_dtoa_r+0x928>
800065b4:	04 9b       	mov	r11,r2
800065b6:	06 9c       	mov	r12,r3
800065b8:	e0 a0 08 4c 	rcall	80007650 <__mcmp>
800065bc:	c1 64       	brge	800065e8 <_dtoa_r+0x928>
800065be:	06 9b       	mov	r11,r3
800065c0:	30 09       	mov	r9,0
800065c2:	30 aa       	mov	r10,10
800065c4:	0e 9c       	mov	r12,r7
800065c6:	e0 a0 0a 35 	rcall	80007a30 <__multadd>
800065ca:	20 16       	sub	r6,1
800065cc:	18 93       	mov	r3,r12
800065ce:	40 dc       	lddsp	r12,sp[0x34]
800065d0:	58 0c       	cp.w	r12,0
800065d2:	c0 31       	brne	800065d8 <_dtoa_r+0x918>
800065d4:	40 91       	lddsp	r1,sp[0x24]
800065d6:	c0 98       	rjmp	800065e8 <_dtoa_r+0x928>
800065d8:	08 9b       	mov	r11,r4
800065da:	40 91       	lddsp	r1,sp[0x24]
800065dc:	30 09       	mov	r9,0
800065de:	30 aa       	mov	r10,10
800065e0:	0e 9c       	mov	r12,r7
800065e2:	e0 a0 0a 27 	rcall	80007a30 <__multadd>
800065e6:	18 94       	mov	r4,r12
800065e8:	58 01       	cp.w	r1,0
800065ea:	5f a9       	srle	r9
800065ec:	40 cb       	lddsp	r11,sp[0x30]
800065ee:	58 2b       	cp.w	r11,2
800065f0:	5f 98       	srgt	r8
800065f2:	f3 e8 00 08 	and	r8,r9,r8
800065f6:	c2 50       	breq	80006640 <_dtoa_r+0x980>
800065f8:	58 01       	cp.w	r1,0
800065fa:	c1 11       	brne	8000661c <_dtoa_r+0x95c>
800065fc:	04 9b       	mov	r11,r2
800065fe:	02 99       	mov	r9,r1
80006600:	30 5a       	mov	r10,5
80006602:	0e 9c       	mov	r12,r7
80006604:	e0 a0 0a 16 	rcall	80007a30 <__multadd>
80006608:	18 92       	mov	r2,r12
8000660a:	18 9b       	mov	r11,r12
8000660c:	06 9c       	mov	r12,r3
8000660e:	e0 a0 08 21 	rcall	80007650 <__mcmp>
80006612:	e0 89 00 0f 	brgt	80006630 <_dtoa_r+0x970>
80006616:	c0 38       	rjmp	8000661c <_dtoa_r+0x95c>
80006618:	30 02       	mov	r2,0
8000661a:	04 94       	mov	r4,r2
8000661c:	40 ea       	lddsp	r10,sp[0x38]
8000661e:	30 09       	mov	r9,0
80006620:	5c da       	com	r10
80006622:	40 85       	lddsp	r5,sp[0x20]
80006624:	50 6a       	stdsp	sp[0x18],r10
80006626:	50 49       	stdsp	sp[0x10],r9
80006628:	c0 f9       	rjmp	80006846 <_dtoa_r+0xb86>
8000662a:	08 92       	mov	r2,r4
8000662c:	40 66       	lddsp	r6,sp[0x18]
8000662e:	04 94       	mov	r4,r2
80006630:	2f f6       	sub	r6,-1
80006632:	50 66       	stdsp	sp[0x18],r6
80006634:	33 18       	mov	r8,49
80006636:	40 85       	lddsp	r5,sp[0x20]
80006638:	0a c8       	st.b	r5++,r8
8000663a:	30 08       	mov	r8,0
8000663c:	50 48       	stdsp	sp[0x10],r8
8000663e:	c0 49       	rjmp	80006846 <_dtoa_r+0xb86>
80006640:	40 dc       	lddsp	r12,sp[0x34]
80006642:	58 0c       	cp.w	r12,0
80006644:	e0 80 00 b5 	breq	800067ae <_dtoa_r+0xaee>
80006648:	58 05       	cp.w	r5,0
8000664a:	e0 8a 00 08 	brle	8000665a <_dtoa_r+0x99a>
8000664e:	08 9b       	mov	r11,r4
80006650:	0a 9a       	mov	r10,r5
80006652:	0e 9c       	mov	r12,r7
80006654:	e0 a0 09 22 	rcall	80007898 <__lshift>
80006658:	18 94       	mov	r4,r12
8000665a:	40 6b       	lddsp	r11,sp[0x18]
8000665c:	58 0b       	cp.w	r11,0
8000665e:	c0 31       	brne	80006664 <_dtoa_r+0x9a4>
80006660:	08 9c       	mov	r12,r4
80006662:	c1 38       	rjmp	80006688 <_dtoa_r+0x9c8>
80006664:	68 1b       	ld.w	r11,r4[0x4]
80006666:	0e 9c       	mov	r12,r7
80006668:	e0 a0 08 28 	rcall	800076b8 <_Balloc>
8000666c:	68 4a       	ld.w	r10,r4[0x10]
8000666e:	18 95       	mov	r5,r12
80006670:	e8 cb ff f4 	sub	r11,r4,-12
80006674:	2f ea       	sub	r10,-2
80006676:	2f 4c       	sub	r12,-12
80006678:	a3 6a       	lsl	r10,0x2
8000667a:	fe b0 e8 3f 	rcall	800036f8 <memcpy>
8000667e:	0a 9b       	mov	r11,r5
80006680:	30 1a       	mov	r10,1
80006682:	0e 9c       	mov	r12,r7
80006684:	e0 a0 09 0a 	rcall	80007898 <__lshift>
80006688:	50 44       	stdsp	sp[0x10],r4
8000668a:	40 3a       	lddsp	r10,sp[0xc]
8000668c:	30 19       	mov	r9,1
8000668e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006692:	18 94       	mov	r4,r12
80006694:	50 da       	stdsp	sp[0x34],r10
80006696:	40 85       	lddsp	r5,sp[0x20]
80006698:	50 99       	stdsp	sp[0x24],r9
8000669a:	50 26       	stdsp	sp[0x8],r6
8000669c:	50 e1       	stdsp	sp[0x38],r1
8000669e:	04 9b       	mov	r11,r2
800066a0:	06 9c       	mov	r12,r3
800066a2:	fe b0 fa 7f 	rcall	80005ba0 <quorem>
800066a6:	40 4b       	lddsp	r11,sp[0x10]
800066a8:	f8 c0 ff d0 	sub	r0,r12,-48
800066ac:	06 9c       	mov	r12,r3
800066ae:	e0 a0 07 d1 	rcall	80007650 <__mcmp>
800066b2:	08 9a       	mov	r10,r4
800066b4:	50 6c       	stdsp	sp[0x18],r12
800066b6:	04 9b       	mov	r11,r2
800066b8:	0e 9c       	mov	r12,r7
800066ba:	e0 a0 08 87 	rcall	800077c8 <__mdiff>
800066be:	18 91       	mov	r1,r12
800066c0:	78 38       	ld.w	r8,r12[0xc]
800066c2:	58 08       	cp.w	r8,0
800066c4:	c0 30       	breq	800066ca <_dtoa_r+0xa0a>
800066c6:	30 16       	mov	r6,1
800066c8:	c0 68       	rjmp	800066d4 <_dtoa_r+0xa14>
800066ca:	18 9b       	mov	r11,r12
800066cc:	06 9c       	mov	r12,r3
800066ce:	e0 a0 07 c1 	rcall	80007650 <__mcmp>
800066d2:	18 96       	mov	r6,r12
800066d4:	0e 9c       	mov	r12,r7
800066d6:	02 9b       	mov	r11,r1
800066d8:	e0 a0 07 d6 	rcall	80007684 <_Bfree>
800066dc:	40 cc       	lddsp	r12,sp[0x30]
800066de:	ed ec 10 08 	or	r8,r6,r12
800066e2:	c0 d1       	brne	800066fc <_dtoa_r+0xa3c>
800066e4:	40 db       	lddsp	r11,sp[0x34]
800066e6:	58 0b       	cp.w	r11,0
800066e8:	c0 a1       	brne	800066fc <_dtoa_r+0xa3c>
800066ea:	40 26       	lddsp	r6,sp[0x8]
800066ec:	e0 40 00 39 	cp.w	r0,57
800066f0:	c3 00       	breq	80006750 <_dtoa_r+0xa90>
800066f2:	40 6a       	lddsp	r10,sp[0x18]
800066f4:	58 0a       	cp.w	r10,0
800066f6:	e0 89 00 24 	brgt	8000673e <_dtoa_r+0xa7e>
800066fa:	c2 f8       	rjmp	80006758 <_dtoa_r+0xa98>
800066fc:	40 69       	lddsp	r9,sp[0x18]
800066fe:	58 09       	cp.w	r9,0
80006700:	c0 85       	brlt	80006710 <_dtoa_r+0xa50>
80006702:	12 98       	mov	r8,r9
80006704:	40 cc       	lddsp	r12,sp[0x30]
80006706:	18 48       	or	r8,r12
80006708:	c1 d1       	brne	80006742 <_dtoa_r+0xa82>
8000670a:	40 db       	lddsp	r11,sp[0x34]
8000670c:	58 0b       	cp.w	r11,0
8000670e:	c1 a1       	brne	80006742 <_dtoa_r+0xa82>
80006710:	0c 99       	mov	r9,r6
80006712:	40 26       	lddsp	r6,sp[0x8]
80006714:	58 09       	cp.w	r9,0
80006716:	e0 8a 00 21 	brle	80006758 <_dtoa_r+0xa98>
8000671a:	06 9b       	mov	r11,r3
8000671c:	30 1a       	mov	r10,1
8000671e:	0e 9c       	mov	r12,r7
80006720:	e0 a0 08 bc 	rcall	80007898 <__lshift>
80006724:	04 9b       	mov	r11,r2
80006726:	18 93       	mov	r3,r12
80006728:	e0 a0 07 94 	rcall	80007650 <__mcmp>
8000672c:	e0 89 00 06 	brgt	80006738 <_dtoa_r+0xa78>
80006730:	c1 41       	brne	80006758 <_dtoa_r+0xa98>
80006732:	ed b0 00 00 	bld	r0,0x0
80006736:	c1 11       	brne	80006758 <_dtoa_r+0xa98>
80006738:	e0 40 00 39 	cp.w	r0,57
8000673c:	c0 a0       	breq	80006750 <_dtoa_r+0xa90>
8000673e:	2f f0       	sub	r0,-1
80006740:	c0 c8       	rjmp	80006758 <_dtoa_r+0xa98>
80006742:	58 06       	cp.w	r6,0
80006744:	e0 8a 00 0c 	brle	8000675c <_dtoa_r+0xa9c>
80006748:	40 26       	lddsp	r6,sp[0x8]
8000674a:	e0 40 00 39 	cp.w	r0,57
8000674e:	c0 41       	brne	80006756 <_dtoa_r+0xa96>
80006750:	33 98       	mov	r8,57
80006752:	0a c8       	st.b	r5++,r8
80006754:	c6 78       	rjmp	80006822 <_dtoa_r+0xb62>
80006756:	2f f0       	sub	r0,-1
80006758:	0a c0       	st.b	r5++,r0
8000675a:	c7 58       	rjmp	80006844 <_dtoa_r+0xb84>
8000675c:	0a c0       	st.b	r5++,r0
8000675e:	40 9a       	lddsp	r10,sp[0x24]
80006760:	40 e9       	lddsp	r9,sp[0x38]
80006762:	12 3a       	cp.w	r10,r9
80006764:	c4 30       	breq	800067ea <_dtoa_r+0xb2a>
80006766:	06 9b       	mov	r11,r3
80006768:	30 09       	mov	r9,0
8000676a:	30 aa       	mov	r10,10
8000676c:	0e 9c       	mov	r12,r7
8000676e:	e0 a0 09 61 	rcall	80007a30 <__multadd>
80006772:	40 48       	lddsp	r8,sp[0x10]
80006774:	18 93       	mov	r3,r12
80006776:	08 38       	cp.w	r8,r4
80006778:	c0 91       	brne	8000678a <_dtoa_r+0xaca>
8000677a:	10 9b       	mov	r11,r8
8000677c:	30 09       	mov	r9,0
8000677e:	30 aa       	mov	r10,10
80006780:	0e 9c       	mov	r12,r7
80006782:	e0 a0 09 57 	rcall	80007a30 <__multadd>
80006786:	50 4c       	stdsp	sp[0x10],r12
80006788:	c0 e8       	rjmp	800067a4 <_dtoa_r+0xae4>
8000678a:	40 4b       	lddsp	r11,sp[0x10]
8000678c:	30 09       	mov	r9,0
8000678e:	30 aa       	mov	r10,10
80006790:	0e 9c       	mov	r12,r7
80006792:	e0 a0 09 4f 	rcall	80007a30 <__multadd>
80006796:	08 9b       	mov	r11,r4
80006798:	50 4c       	stdsp	sp[0x10],r12
8000679a:	30 09       	mov	r9,0
8000679c:	30 aa       	mov	r10,10
8000679e:	0e 9c       	mov	r12,r7
800067a0:	e0 a0 09 48 	rcall	80007a30 <__multadd>
800067a4:	18 94       	mov	r4,r12
800067a6:	40 9c       	lddsp	r12,sp[0x24]
800067a8:	2f fc       	sub	r12,-1
800067aa:	50 9c       	stdsp	sp[0x24],r12
800067ac:	c7 9b       	rjmp	8000669e <_dtoa_r+0x9de>
800067ae:	30 18       	mov	r8,1
800067b0:	06 90       	mov	r0,r3
800067b2:	40 85       	lddsp	r5,sp[0x20]
800067b4:	08 93       	mov	r3,r4
800067b6:	0c 94       	mov	r4,r6
800067b8:	10 96       	mov	r6,r8
800067ba:	04 9b       	mov	r11,r2
800067bc:	00 9c       	mov	r12,r0
800067be:	fe b0 f9 f1 	rcall	80005ba0 <quorem>
800067c2:	2d 0c       	sub	r12,-48
800067c4:	0a cc       	st.b	r5++,r12
800067c6:	02 36       	cp.w	r6,r1
800067c8:	c0 a4       	brge	800067dc <_dtoa_r+0xb1c>
800067ca:	00 9b       	mov	r11,r0
800067cc:	30 09       	mov	r9,0
800067ce:	30 aa       	mov	r10,10
800067d0:	0e 9c       	mov	r12,r7
800067d2:	2f f6       	sub	r6,-1
800067d4:	e0 a0 09 2e 	rcall	80007a30 <__multadd>
800067d8:	18 90       	mov	r0,r12
800067da:	cf 0b       	rjmp	800067ba <_dtoa_r+0xafa>
800067dc:	08 96       	mov	r6,r4
800067de:	30 0b       	mov	r11,0
800067e0:	06 94       	mov	r4,r3
800067e2:	50 4b       	stdsp	sp[0x10],r11
800067e4:	00 93       	mov	r3,r0
800067e6:	18 90       	mov	r0,r12
800067e8:	c0 28       	rjmp	800067ec <_dtoa_r+0xb2c>
800067ea:	40 26       	lddsp	r6,sp[0x8]
800067ec:	06 9b       	mov	r11,r3
800067ee:	30 1a       	mov	r10,1
800067f0:	0e 9c       	mov	r12,r7
800067f2:	e0 a0 08 53 	rcall	80007898 <__lshift>
800067f6:	04 9b       	mov	r11,r2
800067f8:	18 93       	mov	r3,r12
800067fa:	e0 a0 07 2b 	rcall	80007650 <__mcmp>
800067fe:	e0 89 00 12 	brgt	80006822 <_dtoa_r+0xb62>
80006802:	c1 b1       	brne	80006838 <_dtoa_r+0xb78>
80006804:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006808:	c0 d1       	brne	80006822 <_dtoa_r+0xb62>
8000680a:	c1 78       	rjmp	80006838 <_dtoa_r+0xb78>
8000680c:	40 89       	lddsp	r9,sp[0x20]
8000680e:	12 38       	cp.w	r8,r9
80006810:	c0 30       	breq	80006816 <_dtoa_r+0xb56>
80006812:	10 95       	mov	r5,r8
80006814:	c0 88       	rjmp	80006824 <_dtoa_r+0xb64>
80006816:	2f f6       	sub	r6,-1
80006818:	50 66       	stdsp	sp[0x18],r6
8000681a:	33 18       	mov	r8,49
8000681c:	40 8c       	lddsp	r12,sp[0x20]
8000681e:	b8 88       	st.b	r12[0x0],r8
80006820:	c1 38       	rjmp	80006846 <_dtoa_r+0xb86>
80006822:	33 9a       	mov	r10,57
80006824:	0a 98       	mov	r8,r5
80006826:	11 79       	ld.ub	r9,--r8
80006828:	f4 09 18 00 	cp.b	r9,r10
8000682c:	cf 00       	breq	8000680c <_dtoa_r+0xb4c>
8000682e:	2f f9       	sub	r9,-1
80006830:	b0 89       	st.b	r8[0x0],r9
80006832:	c0 98       	rjmp	80006844 <_dtoa_r+0xb84>
80006834:	10 95       	mov	r5,r8
80006836:	c0 28       	rjmp	8000683a <_dtoa_r+0xb7a>
80006838:	33 09       	mov	r9,48
8000683a:	0a 98       	mov	r8,r5
8000683c:	11 7a       	ld.ub	r10,--r8
8000683e:	f2 0a 18 00 	cp.b	r10,r9
80006842:	cf 90       	breq	80006834 <_dtoa_r+0xb74>
80006844:	50 66       	stdsp	sp[0x18],r6
80006846:	04 9b       	mov	r11,r2
80006848:	0e 9c       	mov	r12,r7
8000684a:	e0 a0 07 1d 	rcall	80007684 <_Bfree>
8000684e:	58 04       	cp.w	r4,0
80006850:	c1 20       	breq	80006874 <_dtoa_r+0xbb4>
80006852:	40 4b       	lddsp	r11,sp[0x10]
80006854:	08 3b       	cp.w	r11,r4
80006856:	5f 19       	srne	r9
80006858:	58 0b       	cp.w	r11,0
8000685a:	5f 18       	srne	r8
8000685c:	f3 e8 00 08 	and	r8,r9,r8
80006860:	c0 40       	breq	80006868 <_dtoa_r+0xba8>
80006862:	0e 9c       	mov	r12,r7
80006864:	e0 a0 07 10 	rcall	80007684 <_Bfree>
80006868:	08 9b       	mov	r11,r4
8000686a:	0e 9c       	mov	r12,r7
8000686c:	e0 a0 07 0c 	rcall	80007684 <_Bfree>
80006870:	c0 28       	rjmp	80006874 <_dtoa_r+0xbb4>
80006872:	50 66       	stdsp	sp[0x18],r6
80006874:	0e 9c       	mov	r12,r7
80006876:	06 9b       	mov	r11,r3
80006878:	e0 a0 07 06 	rcall	80007684 <_Bfree>
8000687c:	30 08       	mov	r8,0
8000687e:	aa 88       	st.b	r5[0x0],r8
80006880:	40 68       	lddsp	r8,sp[0x18]
80006882:	41 5a       	lddsp	r10,sp[0x54]
80006884:	2f f8       	sub	r8,-1
80006886:	41 29       	lddsp	r9,sp[0x48]
80006888:	95 08       	st.w	r10[0x0],r8
8000688a:	40 8c       	lddsp	r12,sp[0x20]
8000688c:	58 09       	cp.w	r9,0
8000688e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006892:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006896:	2e 6d       	sub	sp,-104
80006898:	d8 32       	popm	r0-r7,pc
8000689a:	d7 03       	nop

8000689c <_fflush_r>:
8000689c:	d4 21       	pushm	r4-r7,lr
8000689e:	16 97       	mov	r7,r11
800068a0:	18 96       	mov	r6,r12
800068a2:	76 48       	ld.w	r8,r11[0x10]
800068a4:	58 08       	cp.w	r8,0
800068a6:	c7 f0       	breq	800069a4 <_fflush_r+0x108>
800068a8:	58 0c       	cp.w	r12,0
800068aa:	c0 50       	breq	800068b4 <_fflush_r+0x18>
800068ac:	78 68       	ld.w	r8,r12[0x18]
800068ae:	58 08       	cp.w	r8,0
800068b0:	c0 21       	brne	800068b4 <_fflush_r+0x18>
800068b2:	cc dc       	rcall	80006a4c <__sinit>
800068b4:	fe c8 d0 fc 	sub	r8,pc,-12036
800068b8:	10 37       	cp.w	r7,r8
800068ba:	c0 31       	brne	800068c0 <_fflush_r+0x24>
800068bc:	6c 07       	ld.w	r7,r6[0x0]
800068be:	c0 c8       	rjmp	800068d6 <_fflush_r+0x3a>
800068c0:	fe c8 d0 e8 	sub	r8,pc,-12056
800068c4:	10 37       	cp.w	r7,r8
800068c6:	c0 31       	brne	800068cc <_fflush_r+0x30>
800068c8:	6c 17       	ld.w	r7,r6[0x4]
800068ca:	c0 68       	rjmp	800068d6 <_fflush_r+0x3a>
800068cc:	fe c8 d0 d4 	sub	r8,pc,-12076
800068d0:	10 37       	cp.w	r7,r8
800068d2:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800068d6:	8e 6a       	ld.sh	r10,r7[0xc]
800068d8:	14 98       	mov	r8,r10
800068da:	ed ba 00 03 	bld	r10,0x3
800068de:	c4 20       	breq	80006962 <_fflush_r+0xc6>
800068e0:	ab ba       	sbr	r10,0xb
800068e2:	ae 6a       	st.h	r7[0xc],r10
800068e4:	6e 18       	ld.w	r8,r7[0x4]
800068e6:	58 08       	cp.w	r8,0
800068e8:	e0 89 00 06 	brgt	800068f4 <_fflush_r+0x58>
800068ec:	6f 08       	ld.w	r8,r7[0x40]
800068ee:	58 08       	cp.w	r8,0
800068f0:	e0 8a 00 5a 	brle	800069a4 <_fflush_r+0x108>
800068f4:	6e b8       	ld.w	r8,r7[0x2c]
800068f6:	58 08       	cp.w	r8,0
800068f8:	c5 60       	breq	800069a4 <_fflush_r+0x108>
800068fa:	e2 1a 10 00 	andl	r10,0x1000,COH
800068fe:	c0 30       	breq	80006904 <_fflush_r+0x68>
80006900:	6f 55       	ld.w	r5,r7[0x54]
80006902:	c0 f8       	rjmp	80006920 <_fflush_r+0x84>
80006904:	30 19       	mov	r9,1
80006906:	6e 8b       	ld.w	r11,r7[0x20]
80006908:	0c 9c       	mov	r12,r6
8000690a:	5d 18       	icall	r8
8000690c:	18 95       	mov	r5,r12
8000690e:	5b fc       	cp.w	r12,-1
80006910:	c0 81       	brne	80006920 <_fflush_r+0x84>
80006912:	6c 38       	ld.w	r8,r6[0xc]
80006914:	59 d8       	cp.w	r8,29
80006916:	c4 70       	breq	800069a4 <_fflush_r+0x108>
80006918:	8e 68       	ld.sh	r8,r7[0xc]
8000691a:	a7 a8       	sbr	r8,0x6
8000691c:	ae 68       	st.h	r7[0xc],r8
8000691e:	d8 22       	popm	r4-r7,pc
80006920:	8e 68       	ld.sh	r8,r7[0xc]
80006922:	ed b8 00 02 	bld	r8,0x2
80006926:	c0 91       	brne	80006938 <_fflush_r+0x9c>
80006928:	6e 18       	ld.w	r8,r7[0x4]
8000692a:	10 15       	sub	r5,r8
8000692c:	6e d8       	ld.w	r8,r7[0x34]
8000692e:	58 08       	cp.w	r8,0
80006930:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006934:	eb d8 e1 15 	subne	r5,r5,r8
80006938:	6e b8       	ld.w	r8,r7[0x2c]
8000693a:	0c 9c       	mov	r12,r6
8000693c:	30 09       	mov	r9,0
8000693e:	0a 9a       	mov	r10,r5
80006940:	6e 8b       	ld.w	r11,r7[0x20]
80006942:	5d 18       	icall	r8
80006944:	8e 68       	ld.sh	r8,r7[0xc]
80006946:	0a 3c       	cp.w	r12,r5
80006948:	c2 61       	brne	80006994 <_fflush_r+0xf8>
8000694a:	ab d8       	cbr	r8,0xb
8000694c:	30 0c       	mov	r12,0
8000694e:	6e 49       	ld.w	r9,r7[0x10]
80006950:	ae 68       	st.h	r7[0xc],r8
80006952:	8f 1c       	st.w	r7[0x4],r12
80006954:	8f 09       	st.w	r7[0x0],r9
80006956:	ed b8 00 0c 	bld	r8,0xc
8000695a:	c2 51       	brne	800069a4 <_fflush_r+0x108>
8000695c:	ef 45 00 54 	st.w	r7[84],r5
80006960:	d8 22       	popm	r4-r7,pc
80006962:	6e 45       	ld.w	r5,r7[0x10]
80006964:	58 05       	cp.w	r5,0
80006966:	c1 f0       	breq	800069a4 <_fflush_r+0x108>
80006968:	6e 04       	ld.w	r4,r7[0x0]
8000696a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000696e:	8f 05       	st.w	r7[0x0],r5
80006970:	f9 b8 01 00 	movne	r8,0
80006974:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006978:	0a 14       	sub	r4,r5
8000697a:	8f 28       	st.w	r7[0x8],r8
8000697c:	c1 18       	rjmp	8000699e <_fflush_r+0x102>
8000697e:	08 99       	mov	r9,r4
80006980:	0a 9a       	mov	r10,r5
80006982:	6e a8       	ld.w	r8,r7[0x28]
80006984:	6e 8b       	ld.w	r11,r7[0x20]
80006986:	0c 9c       	mov	r12,r6
80006988:	5d 18       	icall	r8
8000698a:	18 14       	sub	r4,r12
8000698c:	58 0c       	cp.w	r12,0
8000698e:	e0 89 00 07 	brgt	8000699c <_fflush_r+0x100>
80006992:	8e 68       	ld.sh	r8,r7[0xc]
80006994:	a7 a8       	sbr	r8,0x6
80006996:	3f fc       	mov	r12,-1
80006998:	ae 68       	st.h	r7[0xc],r8
8000699a:	d8 22       	popm	r4-r7,pc
8000699c:	18 05       	add	r5,r12
8000699e:	58 04       	cp.w	r4,0
800069a0:	fe 99 ff ef 	brgt	8000697e <_fflush_r+0xe2>
800069a4:	d8 2a       	popm	r4-r7,pc,r12=0
800069a6:	d7 03       	nop

800069a8 <__sfp_lock_acquire>:
800069a8:	5e fc       	retal	r12

800069aa <__sfp_lock_release>:
800069aa:	5e fc       	retal	r12

800069ac <_cleanup_r>:
800069ac:	d4 01       	pushm	lr
800069ae:	fe cb e8 6a 	sub	r11,pc,-6038
800069b2:	e0 a0 02 fd 	rcall	80006fac <_fwalk>
800069b6:	d8 02       	popm	pc

800069b8 <__sfmoreglue>:
800069b8:	d4 21       	pushm	r4-r7,lr
800069ba:	16 95       	mov	r5,r11
800069bc:	f6 06 10 5c 	mul	r6,r11,92
800069c0:	ec cb ff f4 	sub	r11,r6,-12
800069c4:	e0 a0 03 84 	rcall	800070cc <_malloc_r>
800069c8:	18 97       	mov	r7,r12
800069ca:	c0 90       	breq	800069dc <__sfmoreglue+0x24>
800069cc:	99 15       	st.w	r12[0x4],r5
800069ce:	30 0b       	mov	r11,0
800069d0:	2f 4c       	sub	r12,-12
800069d2:	0c 9a       	mov	r10,r6
800069d4:	8f 2c       	st.w	r7[0x8],r12
800069d6:	8f 0b       	st.w	r7[0x0],r11
800069d8:	e0 a0 05 bc 	rcall	80007550 <memset>
800069dc:	0e 9c       	mov	r12,r7
800069de:	d8 22       	popm	r4-r7,pc

800069e0 <__sfp>:
800069e0:	d4 21       	pushm	r4-r7,lr
800069e2:	fe c8 d6 12 	sub	r8,pc,-10734
800069e6:	18 96       	mov	r6,r12
800069e8:	70 07       	ld.w	r7,r8[0x0]
800069ea:	6e 68       	ld.w	r8,r7[0x18]
800069ec:	58 08       	cp.w	r8,0
800069ee:	c0 31       	brne	800069f4 <__sfp+0x14>
800069f0:	0e 9c       	mov	r12,r7
800069f2:	c2 dc       	rcall	80006a4c <__sinit>
800069f4:	ee c7 ff 28 	sub	r7,r7,-216
800069f8:	30 05       	mov	r5,0
800069fa:	6e 2c       	ld.w	r12,r7[0x8]
800069fc:	6e 18       	ld.w	r8,r7[0x4]
800069fe:	c0 68       	rjmp	80006a0a <__sfp+0x2a>
80006a00:	98 69       	ld.sh	r9,r12[0xc]
80006a02:	ea 09 19 00 	cp.h	r9,r5
80006a06:	c1 10       	breq	80006a28 <__sfp+0x48>
80006a08:	2a 4c       	sub	r12,-92
80006a0a:	20 18       	sub	r8,1
80006a0c:	cf a7       	brpl	80006a00 <__sfp+0x20>
80006a0e:	6e 08       	ld.w	r8,r7[0x0]
80006a10:	58 08       	cp.w	r8,0
80006a12:	c0 61       	brne	80006a1e <__sfp+0x3e>
80006a14:	30 4b       	mov	r11,4
80006a16:	0c 9c       	mov	r12,r6
80006a18:	cd 0f       	rcall	800069b8 <__sfmoreglue>
80006a1a:	8f 0c       	st.w	r7[0x0],r12
80006a1c:	c0 30       	breq	80006a22 <__sfp+0x42>
80006a1e:	6e 07       	ld.w	r7,r7[0x0]
80006a20:	ce db       	rjmp	800069fa <__sfp+0x1a>
80006a22:	30 c8       	mov	r8,12
80006a24:	8d 38       	st.w	r6[0xc],r8
80006a26:	d8 22       	popm	r4-r7,pc
80006a28:	30 08       	mov	r8,0
80006a2a:	f9 48 00 4c 	st.w	r12[76],r8
80006a2e:	99 08       	st.w	r12[0x0],r8
80006a30:	99 28       	st.w	r12[0x8],r8
80006a32:	99 18       	st.w	r12[0x4],r8
80006a34:	99 48       	st.w	r12[0x10],r8
80006a36:	99 58       	st.w	r12[0x14],r8
80006a38:	99 68       	st.w	r12[0x18],r8
80006a3a:	99 d8       	st.w	r12[0x34],r8
80006a3c:	99 e8       	st.w	r12[0x38],r8
80006a3e:	f9 48 00 48 	st.w	r12[72],r8
80006a42:	3f f8       	mov	r8,-1
80006a44:	b8 78       	st.h	r12[0xe],r8
80006a46:	30 18       	mov	r8,1
80006a48:	b8 68       	st.h	r12[0xc],r8
80006a4a:	d8 22       	popm	r4-r7,pc

80006a4c <__sinit>:
80006a4c:	d4 21       	pushm	r4-r7,lr
80006a4e:	18 96       	mov	r6,r12
80006a50:	78 67       	ld.w	r7,r12[0x18]
80006a52:	58 07       	cp.w	r7,0
80006a54:	c4 91       	brne	80006ae6 <__sinit+0x9a>
80006a56:	fe c8 00 aa 	sub	r8,pc,170
80006a5a:	30 15       	mov	r5,1
80006a5c:	99 a8       	st.w	r12[0x28],r8
80006a5e:	f9 47 00 d8 	st.w	r12[216],r7
80006a62:	f9 47 00 dc 	st.w	r12[220],r7
80006a66:	f9 47 00 e0 	st.w	r12[224],r7
80006a6a:	99 65       	st.w	r12[0x18],r5
80006a6c:	cb af       	rcall	800069e0 <__sfp>
80006a6e:	8d 0c       	st.w	r6[0x0],r12
80006a70:	0c 9c       	mov	r12,r6
80006a72:	cb 7f       	rcall	800069e0 <__sfp>
80006a74:	8d 1c       	st.w	r6[0x4],r12
80006a76:	0c 9c       	mov	r12,r6
80006a78:	cb 4f       	rcall	800069e0 <__sfp>
80006a7a:	6c 09       	ld.w	r9,r6[0x0]
80006a7c:	30 48       	mov	r8,4
80006a7e:	93 07       	st.w	r9[0x0],r7
80006a80:	b2 68       	st.h	r9[0xc],r8
80006a82:	93 17       	st.w	r9[0x4],r7
80006a84:	93 27       	st.w	r9[0x8],r7
80006a86:	6c 18       	ld.w	r8,r6[0x4]
80006a88:	b2 77       	st.h	r9[0xe],r7
80006a8a:	93 47       	st.w	r9[0x10],r7
80006a8c:	93 57       	st.w	r9[0x14],r7
80006a8e:	93 67       	st.w	r9[0x18],r7
80006a90:	93 89       	st.w	r9[0x20],r9
80006a92:	91 07       	st.w	r8[0x0],r7
80006a94:	91 17       	st.w	r8[0x4],r7
80006a96:	91 27       	st.w	r8[0x8],r7
80006a98:	fe ce eb e4 	sub	lr,pc,-5148
80006a9c:	fe cb ec 14 	sub	r11,pc,-5100
80006aa0:	93 9e       	st.w	r9[0x24],lr
80006aa2:	93 ab       	st.w	r9[0x28],r11
80006aa4:	fe ca ec 3c 	sub	r10,pc,-5060
80006aa8:	fe c4 ec 48 	sub	r4,pc,-5048
80006aac:	93 ba       	st.w	r9[0x2c],r10
80006aae:	93 c4       	st.w	r9[0x30],r4
80006ab0:	30 99       	mov	r9,9
80006ab2:	b0 69       	st.h	r8[0xc],r9
80006ab4:	b0 75       	st.h	r8[0xe],r5
80006ab6:	91 c4       	st.w	r8[0x30],r4
80006ab8:	91 47       	st.w	r8[0x10],r7
80006aba:	91 57       	st.w	r8[0x14],r7
80006abc:	91 67       	st.w	r8[0x18],r7
80006abe:	91 88       	st.w	r8[0x20],r8
80006ac0:	91 9e       	st.w	r8[0x24],lr
80006ac2:	91 ab       	st.w	r8[0x28],r11
80006ac4:	91 ba       	st.w	r8[0x2c],r10
80006ac6:	8d 2c       	st.w	r6[0x8],r12
80006ac8:	31 28       	mov	r8,18
80006aca:	99 07       	st.w	r12[0x0],r7
80006acc:	b8 68       	st.h	r12[0xc],r8
80006ace:	99 17       	st.w	r12[0x4],r7
80006ad0:	99 27       	st.w	r12[0x8],r7
80006ad2:	30 28       	mov	r8,2
80006ad4:	b8 78       	st.h	r12[0xe],r8
80006ad6:	99 c4       	st.w	r12[0x30],r4
80006ad8:	99 67       	st.w	r12[0x18],r7
80006ada:	99 9e       	st.w	r12[0x24],lr
80006adc:	99 ab       	st.w	r12[0x28],r11
80006ade:	99 ba       	st.w	r12[0x2c],r10
80006ae0:	99 47       	st.w	r12[0x10],r7
80006ae2:	99 57       	st.w	r12[0x14],r7
80006ae4:	99 8c       	st.w	r12[0x20],r12
80006ae6:	d8 22       	popm	r4-r7,pc

80006ae8 <_malloc_trim_r>:
80006ae8:	d4 21       	pushm	r4-r7,lr
80006aea:	16 95       	mov	r5,r11
80006aec:	18 97       	mov	r7,r12
80006aee:	e0 a0 05 38 	rcall	8000755e <__malloc_lock>
80006af2:	e0 64 01 04 	mov	r4,260
80006af6:	68 28       	ld.w	r8,r4[0x8]
80006af8:	70 16       	ld.w	r6,r8[0x4]
80006afa:	e0 16 ff fc 	andl	r6,0xfffc
80006afe:	ec c8 ff 91 	sub	r8,r6,-111
80006b02:	f0 05 01 05 	sub	r5,r8,r5
80006b06:	e0 15 ff 80 	andl	r5,0xff80
80006b0a:	ea c5 00 80 	sub	r5,r5,128
80006b0e:	e0 45 00 7f 	cp.w	r5,127
80006b12:	e0 8a 00 25 	brle	80006b5c <_malloc_trim_r+0x74>
80006b16:	30 0b       	mov	r11,0
80006b18:	0e 9c       	mov	r12,r7
80006b1a:	e0 a0 09 93 	rcall	80007e40 <_sbrk_r>
80006b1e:	68 28       	ld.w	r8,r4[0x8]
80006b20:	0c 08       	add	r8,r6
80006b22:	10 3c       	cp.w	r12,r8
80006b24:	c1 c1       	brne	80006b5c <_malloc_trim_r+0x74>
80006b26:	ea 0b 11 00 	rsub	r11,r5,0
80006b2a:	0e 9c       	mov	r12,r7
80006b2c:	e0 a0 09 8a 	rcall	80007e40 <_sbrk_r>
80006b30:	5b fc       	cp.w	r12,-1
80006b32:	c1 91       	brne	80006b64 <_malloc_trim_r+0x7c>
80006b34:	30 0b       	mov	r11,0
80006b36:	0e 9c       	mov	r12,r7
80006b38:	e0 a0 09 84 	rcall	80007e40 <_sbrk_r>
80006b3c:	68 28       	ld.w	r8,r4[0x8]
80006b3e:	f8 08 01 09 	sub	r9,r12,r8
80006b42:	58 f9       	cp.w	r9,15
80006b44:	e0 8a 00 0c 	brle	80006b5c <_malloc_trim_r+0x74>
80006b48:	a1 a9       	sbr	r9,0x0
80006b4a:	91 19       	st.w	r8[0x4],r9
80006b4c:	e0 68 05 10 	mov	r8,1296
80006b50:	70 09       	ld.w	r9,r8[0x0]
80006b52:	e0 68 06 34 	mov	r8,1588
80006b56:	f8 09 01 09 	sub	r9,r12,r9
80006b5a:	91 09       	st.w	r8[0x0],r9
80006b5c:	0e 9c       	mov	r12,r7
80006b5e:	e0 a0 05 01 	rcall	80007560 <__malloc_unlock>
80006b62:	d8 2a       	popm	r4-r7,pc,r12=0
80006b64:	68 28       	ld.w	r8,r4[0x8]
80006b66:	0a 16       	sub	r6,r5
80006b68:	a1 a6       	sbr	r6,0x0
80006b6a:	91 16       	st.w	r8[0x4],r6
80006b6c:	e0 68 06 34 	mov	r8,1588
80006b70:	70 09       	ld.w	r9,r8[0x0]
80006b72:	0a 19       	sub	r9,r5
80006b74:	0e 9c       	mov	r12,r7
80006b76:	91 09       	st.w	r8[0x0],r9
80006b78:	e0 a0 04 f4 	rcall	80007560 <__malloc_unlock>
80006b7c:	da 2a       	popm	r4-r7,pc,r12=1
80006b7e:	d7 03       	nop

80006b80 <_free_r>:
80006b80:	d4 21       	pushm	r4-r7,lr
80006b82:	16 96       	mov	r6,r11
80006b84:	18 97       	mov	r7,r12
80006b86:	58 0b       	cp.w	r11,0
80006b88:	e0 80 00 c0 	breq	80006d08 <_free_r+0x188>
80006b8c:	e0 a0 04 e9 	rcall	8000755e <__malloc_lock>
80006b90:	20 86       	sub	r6,8
80006b92:	e0 6a 01 04 	mov	r10,260
80006b96:	6c 18       	ld.w	r8,r6[0x4]
80006b98:	74 2e       	ld.w	lr,r10[0x8]
80006b9a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006b9e:	a1 c8       	cbr	r8,0x0
80006ba0:	ec 08 00 09 	add	r9,r6,r8
80006ba4:	72 1b       	ld.w	r11,r9[0x4]
80006ba6:	e0 1b ff fc 	andl	r11,0xfffc
80006baa:	1c 39       	cp.w	r9,lr
80006bac:	c1 e1       	brne	80006be8 <_free_r+0x68>
80006bae:	f6 08 00 08 	add	r8,r11,r8
80006bb2:	58 0c       	cp.w	r12,0
80006bb4:	c0 81       	brne	80006bc4 <_free_r+0x44>
80006bb6:	6c 09       	ld.w	r9,r6[0x0]
80006bb8:	12 16       	sub	r6,r9
80006bba:	12 08       	add	r8,r9
80006bbc:	6c 3b       	ld.w	r11,r6[0xc]
80006bbe:	6c 29       	ld.w	r9,r6[0x8]
80006bc0:	97 29       	st.w	r11[0x8],r9
80006bc2:	93 3b       	st.w	r9[0xc],r11
80006bc4:	10 99       	mov	r9,r8
80006bc6:	95 26       	st.w	r10[0x8],r6
80006bc8:	a1 a9       	sbr	r9,0x0
80006bca:	8d 19       	st.w	r6[0x4],r9
80006bcc:	e0 69 05 0c 	mov	r9,1292
80006bd0:	72 09       	ld.w	r9,r9[0x0]
80006bd2:	12 38       	cp.w	r8,r9
80006bd4:	c0 63       	brcs	80006be0 <_free_r+0x60>
80006bd6:	e0 68 06 30 	mov	r8,1584
80006bda:	0e 9c       	mov	r12,r7
80006bdc:	70 0b       	ld.w	r11,r8[0x0]
80006bde:	c8 5f       	rcall	80006ae8 <_malloc_trim_r>
80006be0:	0e 9c       	mov	r12,r7
80006be2:	e0 a0 04 bf 	rcall	80007560 <__malloc_unlock>
80006be6:	d8 22       	popm	r4-r7,pc
80006be8:	93 1b       	st.w	r9[0x4],r11
80006bea:	58 0c       	cp.w	r12,0
80006bec:	c0 30       	breq	80006bf2 <_free_r+0x72>
80006bee:	30 0c       	mov	r12,0
80006bf0:	c1 08       	rjmp	80006c10 <_free_r+0x90>
80006bf2:	6c 0e       	ld.w	lr,r6[0x0]
80006bf4:	f4 c5 ff f8 	sub	r5,r10,-8
80006bf8:	1c 16       	sub	r6,lr
80006bfa:	1c 08       	add	r8,lr
80006bfc:	6c 2e       	ld.w	lr,r6[0x8]
80006bfe:	0a 3e       	cp.w	lr,r5
80006c00:	f9 bc 00 01 	moveq	r12,1
80006c04:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006c08:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006c0c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006c10:	f2 0b 00 0e 	add	lr,r9,r11
80006c14:	7c 1e       	ld.w	lr,lr[0x4]
80006c16:	ed be 00 00 	bld	lr,0x0
80006c1a:	c1 40       	breq	80006c42 <_free_r+0xc2>
80006c1c:	16 08       	add	r8,r11
80006c1e:	58 0c       	cp.w	r12,0
80006c20:	c0 d1       	brne	80006c3a <_free_r+0xba>
80006c22:	e0 6e 01 04 	mov	lr,260
80006c26:	72 2b       	ld.w	r11,r9[0x8]
80006c28:	2f 8e       	sub	lr,-8
80006c2a:	1c 3b       	cp.w	r11,lr
80006c2c:	c0 71       	brne	80006c3a <_free_r+0xba>
80006c2e:	97 36       	st.w	r11[0xc],r6
80006c30:	97 26       	st.w	r11[0x8],r6
80006c32:	8d 2b       	st.w	r6[0x8],r11
80006c34:	8d 3b       	st.w	r6[0xc],r11
80006c36:	30 1c       	mov	r12,1
80006c38:	c0 58       	rjmp	80006c42 <_free_r+0xc2>
80006c3a:	72 2b       	ld.w	r11,r9[0x8]
80006c3c:	72 39       	ld.w	r9,r9[0xc]
80006c3e:	93 2b       	st.w	r9[0x8],r11
80006c40:	97 39       	st.w	r11[0xc],r9
80006c42:	10 99       	mov	r9,r8
80006c44:	ec 08 09 08 	st.w	r6[r8],r8
80006c48:	a1 a9       	sbr	r9,0x0
80006c4a:	8d 19       	st.w	r6[0x4],r9
80006c4c:	58 0c       	cp.w	r12,0
80006c4e:	c5 a1       	brne	80006d02 <_free_r+0x182>
80006c50:	e0 48 01 ff 	cp.w	r8,511
80006c54:	e0 8b 00 13 	brhi	80006c7a <_free_r+0xfa>
80006c58:	a3 98       	lsr	r8,0x3
80006c5a:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006c5e:	72 2b       	ld.w	r11,r9[0x8]
80006c60:	8d 39       	st.w	r6[0xc],r9
80006c62:	8d 2b       	st.w	r6[0x8],r11
80006c64:	97 36       	st.w	r11[0xc],r6
80006c66:	93 26       	st.w	r9[0x8],r6
80006c68:	a3 48       	asr	r8,0x2
80006c6a:	74 19       	ld.w	r9,r10[0x4]
80006c6c:	30 1b       	mov	r11,1
80006c6e:	f6 08 09 48 	lsl	r8,r11,r8
80006c72:	f3 e8 10 08 	or	r8,r9,r8
80006c76:	95 18       	st.w	r10[0x4],r8
80006c78:	c4 58       	rjmp	80006d02 <_free_r+0x182>
80006c7a:	f0 0b 16 09 	lsr	r11,r8,0x9
80006c7e:	58 4b       	cp.w	r11,4
80006c80:	e0 8b 00 06 	brhi	80006c8c <_free_r+0x10c>
80006c84:	f0 0b 16 06 	lsr	r11,r8,0x6
80006c88:	2c 8b       	sub	r11,-56
80006c8a:	c2 08       	rjmp	80006cca <_free_r+0x14a>
80006c8c:	59 4b       	cp.w	r11,20
80006c8e:	e0 8b 00 04 	brhi	80006c96 <_free_r+0x116>
80006c92:	2a 5b       	sub	r11,-91
80006c94:	c1 b8       	rjmp	80006cca <_free_r+0x14a>
80006c96:	e0 4b 00 54 	cp.w	r11,84
80006c9a:	e0 8b 00 06 	brhi	80006ca6 <_free_r+0x126>
80006c9e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006ca2:	29 2b       	sub	r11,-110
80006ca4:	c1 38       	rjmp	80006cca <_free_r+0x14a>
80006ca6:	e0 4b 01 54 	cp.w	r11,340
80006caa:	e0 8b 00 06 	brhi	80006cb6 <_free_r+0x136>
80006cae:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006cb2:	28 9b       	sub	r11,-119
80006cb4:	c0 b8       	rjmp	80006cca <_free_r+0x14a>
80006cb6:	e0 4b 05 54 	cp.w	r11,1364
80006cba:	e0 88 00 05 	brls	80006cc4 <_free_r+0x144>
80006cbe:	37 eb       	mov	r11,126
80006cc0:	c0 58       	rjmp	80006cca <_free_r+0x14a>
80006cc2:	d7 03       	nop
80006cc4:	f0 0b 16 12 	lsr	r11,r8,0x12
80006cc8:	28 4b       	sub	r11,-124
80006cca:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006cce:	78 29       	ld.w	r9,r12[0x8]
80006cd0:	18 39       	cp.w	r9,r12
80006cd2:	c0 e1       	brne	80006cee <_free_r+0x16e>
80006cd4:	74 18       	ld.w	r8,r10[0x4]
80006cd6:	a3 4b       	asr	r11,0x2
80006cd8:	30 1c       	mov	r12,1
80006cda:	f8 0b 09 4b 	lsl	r11,r12,r11
80006cde:	f1 eb 10 0b 	or	r11,r8,r11
80006ce2:	12 98       	mov	r8,r9
80006ce4:	95 1b       	st.w	r10[0x4],r11
80006ce6:	c0 a8       	rjmp	80006cfa <_free_r+0x17a>
80006ce8:	72 29       	ld.w	r9,r9[0x8]
80006cea:	18 39       	cp.w	r9,r12
80006cec:	c0 60       	breq	80006cf8 <_free_r+0x178>
80006cee:	72 1a       	ld.w	r10,r9[0x4]
80006cf0:	e0 1a ff fc 	andl	r10,0xfffc
80006cf4:	14 38       	cp.w	r8,r10
80006cf6:	cf 93       	brcs	80006ce8 <_free_r+0x168>
80006cf8:	72 38       	ld.w	r8,r9[0xc]
80006cfa:	8d 38       	st.w	r6[0xc],r8
80006cfc:	8d 29       	st.w	r6[0x8],r9
80006cfe:	93 36       	st.w	r9[0xc],r6
80006d00:	91 26       	st.w	r8[0x8],r6
80006d02:	0e 9c       	mov	r12,r7
80006d04:	e0 a0 04 2e 	rcall	80007560 <__malloc_unlock>
80006d08:	d8 22       	popm	r4-r7,pc
80006d0a:	d7 03       	nop

80006d0c <__sfvwrite_r>:
80006d0c:	d4 31       	pushm	r0-r7,lr
80006d0e:	20 3d       	sub	sp,12
80006d10:	14 94       	mov	r4,r10
80006d12:	18 95       	mov	r5,r12
80006d14:	16 97       	mov	r7,r11
80006d16:	74 28       	ld.w	r8,r10[0x8]
80006d18:	58 08       	cp.w	r8,0
80006d1a:	e0 80 01 45 	breq	80006fa4 <__sfvwrite_r+0x298>
80006d1e:	96 68       	ld.sh	r8,r11[0xc]
80006d20:	ed b8 00 03 	bld	r8,0x3
80006d24:	c0 41       	brne	80006d2c <__sfvwrite_r+0x20>
80006d26:	76 48       	ld.w	r8,r11[0x10]
80006d28:	58 08       	cp.w	r8,0
80006d2a:	c0 c1       	brne	80006d42 <__sfvwrite_r+0x36>
80006d2c:	0e 9b       	mov	r11,r7
80006d2e:	0a 9c       	mov	r12,r5
80006d30:	fe b0 f6 ca 	rcall	80005ac4 <__swsetup_r>
80006d34:	c0 70       	breq	80006d42 <__sfvwrite_r+0x36>
80006d36:	8e 68       	ld.sh	r8,r7[0xc]
80006d38:	a7 a8       	sbr	r8,0x6
80006d3a:	ae 68       	st.h	r7[0xc],r8
80006d3c:	30 98       	mov	r8,9
80006d3e:	8b 38       	st.w	r5[0xc],r8
80006d40:	c3 09       	rjmp	80006fa0 <__sfvwrite_r+0x294>
80006d42:	8e 63       	ld.sh	r3,r7[0xc]
80006d44:	68 00       	ld.w	r0,r4[0x0]
80006d46:	06 96       	mov	r6,r3
80006d48:	e2 16 00 02 	andl	r6,0x2,COH
80006d4c:	c2 10       	breq	80006d8e <__sfvwrite_r+0x82>
80006d4e:	30 03       	mov	r3,0
80006d50:	e0 62 04 00 	mov	r2,1024
80006d54:	06 96       	mov	r6,r3
80006d56:	c0 48       	rjmp	80006d5e <__sfvwrite_r+0x52>
80006d58:	60 03       	ld.w	r3,r0[0x0]
80006d5a:	60 16       	ld.w	r6,r0[0x4]
80006d5c:	2f 80       	sub	r0,-8
80006d5e:	58 06       	cp.w	r6,0
80006d60:	cf c0       	breq	80006d58 <__sfvwrite_r+0x4c>
80006d62:	e0 46 04 00 	cp.w	r6,1024
80006d66:	ec 09 17 80 	movls	r9,r6
80006d6a:	e4 09 17 b0 	movhi	r9,r2
80006d6e:	06 9a       	mov	r10,r3
80006d70:	6e a8       	ld.w	r8,r7[0x28]
80006d72:	6e 8b       	ld.w	r11,r7[0x20]
80006d74:	0a 9c       	mov	r12,r5
80006d76:	5d 18       	icall	r8
80006d78:	18 16       	sub	r6,r12
80006d7a:	58 0c       	cp.w	r12,0
80006d7c:	e0 8a 01 0f 	brle	80006f9a <__sfvwrite_r+0x28e>
80006d80:	68 28       	ld.w	r8,r4[0x8]
80006d82:	18 18       	sub	r8,r12
80006d84:	89 28       	st.w	r4[0x8],r8
80006d86:	e0 80 01 0f 	breq	80006fa4 <__sfvwrite_r+0x298>
80006d8a:	18 03       	add	r3,r12
80006d8c:	ce 9b       	rjmp	80006d5e <__sfvwrite_r+0x52>
80006d8e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006d92:	c0 70       	breq	80006da0 <__sfvwrite_r+0x94>
80006d94:	50 06       	stdsp	sp[0x0],r6
80006d96:	0c 93       	mov	r3,r6
80006d98:	0c 91       	mov	r1,r6
80006d9a:	50 15       	stdsp	sp[0x4],r5
80006d9c:	08 92       	mov	r2,r4
80006d9e:	c9 e8       	rjmp	80006eda <__sfvwrite_r+0x1ce>
80006da0:	06 96       	mov	r6,r3
80006da2:	08 91       	mov	r1,r4
80006da4:	c0 48       	rjmp	80006dac <__sfvwrite_r+0xa0>
80006da6:	60 03       	ld.w	r3,r0[0x0]
80006da8:	60 16       	ld.w	r6,r0[0x4]
80006daa:	2f 80       	sub	r0,-8
80006dac:	58 06       	cp.w	r6,0
80006dae:	cf c0       	breq	80006da6 <__sfvwrite_r+0x9a>
80006db0:	8e 68       	ld.sh	r8,r7[0xc]
80006db2:	6e 24       	ld.w	r4,r7[0x8]
80006db4:	10 99       	mov	r9,r8
80006db6:	e2 19 02 00 	andl	r9,0x200,COH
80006dba:	c5 50       	breq	80006e64 <__sfvwrite_r+0x158>
80006dbc:	08 36       	cp.w	r6,r4
80006dbe:	c4 33       	brcs	80006e44 <__sfvwrite_r+0x138>
80006dc0:	10 99       	mov	r9,r8
80006dc2:	e2 19 04 80 	andl	r9,0x480,COH
80006dc6:	c3 f0       	breq	80006e44 <__sfvwrite_r+0x138>
80006dc8:	6e 4b       	ld.w	r11,r7[0x10]
80006dca:	6e 09       	ld.w	r9,r7[0x0]
80006dcc:	16 19       	sub	r9,r11
80006dce:	50 09       	stdsp	sp[0x0],r9
80006dd0:	6e 59       	ld.w	r9,r7[0x14]
80006dd2:	10 9c       	mov	r12,r8
80006dd4:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006dd8:	30 28       	mov	r8,2
80006dda:	f4 08 0c 08 	divs	r8,r10,r8
80006dde:	fa e9 00 04 	st.d	sp[4],r8
80006de2:	10 94       	mov	r4,r8
80006de4:	40 09       	lddsp	r9,sp[0x0]
80006de6:	e2 1c 04 00 	andl	r12,0x400,COH
80006dea:	2f f9       	sub	r9,-1
80006dec:	0c 09       	add	r9,r6
80006dee:	12 38       	cp.w	r8,r9
80006df0:	f2 04 17 30 	movlo	r4,r9
80006df4:	58 0c       	cp.w	r12,0
80006df6:	c1 00       	breq	80006e16 <__sfvwrite_r+0x10a>
80006df8:	08 9b       	mov	r11,r4
80006dfa:	0a 9c       	mov	r12,r5
80006dfc:	c6 8d       	rcall	800070cc <_malloc_r>
80006dfe:	18 92       	mov	r2,r12
80006e00:	c1 40       	breq	80006e28 <__sfvwrite_r+0x11c>
80006e02:	40 0a       	lddsp	r10,sp[0x0]
80006e04:	6e 4b       	ld.w	r11,r7[0x10]
80006e06:	fe b0 e4 79 	rcall	800036f8 <memcpy>
80006e0a:	8e 68       	ld.sh	r8,r7[0xc]
80006e0c:	e0 18 fb 7f 	andl	r8,0xfb7f
80006e10:	a7 b8       	sbr	r8,0x7
80006e12:	ae 68       	st.h	r7[0xc],r8
80006e14:	c0 d8       	rjmp	80006e2e <__sfvwrite_r+0x122>
80006e16:	08 9a       	mov	r10,r4
80006e18:	0a 9c       	mov	r12,r5
80006e1a:	e0 a0 06 8f 	rcall	80007b38 <_realloc_r>
80006e1e:	18 92       	mov	r2,r12
80006e20:	c0 71       	brne	80006e2e <__sfvwrite_r+0x122>
80006e22:	6e 4b       	ld.w	r11,r7[0x10]
80006e24:	0a 9c       	mov	r12,r5
80006e26:	ca de       	rcall	80006b80 <_free_r>
80006e28:	30 c8       	mov	r8,12
80006e2a:	8b 38       	st.w	r5[0xc],r8
80006e2c:	cb 78       	rjmp	80006f9a <__sfvwrite_r+0x28e>
80006e2e:	40 0a       	lddsp	r10,sp[0x0]
80006e30:	40 09       	lddsp	r9,sp[0x0]
80006e32:	e8 0a 01 0a 	sub	r10,r4,r10
80006e36:	e4 09 00 08 	add	r8,r2,r9
80006e3a:	8f 54       	st.w	r7[0x14],r4
80006e3c:	8f 2a       	st.w	r7[0x8],r10
80006e3e:	8f 08       	st.w	r7[0x0],r8
80006e40:	8f 42       	st.w	r7[0x10],r2
80006e42:	0c 94       	mov	r4,r6
80006e44:	08 36       	cp.w	r6,r4
80006e46:	ec 04 17 30 	movlo	r4,r6
80006e4a:	06 9b       	mov	r11,r3
80006e4c:	08 9a       	mov	r10,r4
80006e4e:	6e 0c       	ld.w	r12,r7[0x0]
80006e50:	e0 a0 03 61 	rcall	80007512 <memmove>
80006e54:	6e 08       	ld.w	r8,r7[0x0]
80006e56:	08 08       	add	r8,r4
80006e58:	8f 08       	st.w	r7[0x0],r8
80006e5a:	6e 28       	ld.w	r8,r7[0x8]
80006e5c:	08 18       	sub	r8,r4
80006e5e:	0c 94       	mov	r4,r6
80006e60:	8f 28       	st.w	r7[0x8],r8
80006e62:	c3 08       	rjmp	80006ec2 <__sfvwrite_r+0x1b6>
80006e64:	08 36       	cp.w	r6,r4
80006e66:	5f ba       	srhi	r10
80006e68:	6e 0c       	ld.w	r12,r7[0x0]
80006e6a:	6e 48       	ld.w	r8,r7[0x10]
80006e6c:	10 3c       	cp.w	r12,r8
80006e6e:	5f b8       	srhi	r8
80006e70:	f5 e8 00 08 	and	r8,r10,r8
80006e74:	f2 08 18 00 	cp.b	r8,r9
80006e78:	c0 e0       	breq	80006e94 <__sfvwrite_r+0x188>
80006e7a:	06 9b       	mov	r11,r3
80006e7c:	08 9a       	mov	r10,r4
80006e7e:	e0 a0 03 4a 	rcall	80007512 <memmove>
80006e82:	6e 08       	ld.w	r8,r7[0x0]
80006e84:	08 08       	add	r8,r4
80006e86:	0e 9b       	mov	r11,r7
80006e88:	8f 08       	st.w	r7[0x0],r8
80006e8a:	0a 9c       	mov	r12,r5
80006e8c:	fe b0 fd 08 	rcall	8000689c <_fflush_r>
80006e90:	c1 90       	breq	80006ec2 <__sfvwrite_r+0x1b6>
80006e92:	c8 48       	rjmp	80006f9a <__sfvwrite_r+0x28e>
80006e94:	6e 59       	ld.w	r9,r7[0x14]
80006e96:	12 36       	cp.w	r6,r9
80006e98:	c0 a3       	brcs	80006eac <__sfvwrite_r+0x1a0>
80006e9a:	6e a8       	ld.w	r8,r7[0x28]
80006e9c:	06 9a       	mov	r10,r3
80006e9e:	6e 8b       	ld.w	r11,r7[0x20]
80006ea0:	0a 9c       	mov	r12,r5
80006ea2:	5d 18       	icall	r8
80006ea4:	18 94       	mov	r4,r12
80006ea6:	e0 89 00 0e 	brgt	80006ec2 <__sfvwrite_r+0x1b6>
80006eaa:	c7 88       	rjmp	80006f9a <__sfvwrite_r+0x28e>
80006eac:	0c 9a       	mov	r10,r6
80006eae:	06 9b       	mov	r11,r3
80006eb0:	e0 a0 03 31 	rcall	80007512 <memmove>
80006eb4:	6e 08       	ld.w	r8,r7[0x0]
80006eb6:	0c 08       	add	r8,r6
80006eb8:	0c 94       	mov	r4,r6
80006eba:	8f 08       	st.w	r7[0x0],r8
80006ebc:	6e 28       	ld.w	r8,r7[0x8]
80006ebe:	0c 18       	sub	r8,r6
80006ec0:	8f 28       	st.w	r7[0x8],r8
80006ec2:	62 28       	ld.w	r8,r1[0x8]
80006ec4:	08 18       	sub	r8,r4
80006ec6:	83 28       	st.w	r1[0x8],r8
80006ec8:	c6 e0       	breq	80006fa4 <__sfvwrite_r+0x298>
80006eca:	08 16       	sub	r6,r4
80006ecc:	08 03       	add	r3,r4
80006ece:	c6 fb       	rjmp	80006dac <__sfvwrite_r+0xa0>
80006ed0:	60 03       	ld.w	r3,r0[0x0]
80006ed2:	60 11       	ld.w	r1,r0[0x4]
80006ed4:	30 08       	mov	r8,0
80006ed6:	2f 80       	sub	r0,-8
80006ed8:	50 08       	stdsp	sp[0x0],r8
80006eda:	58 01       	cp.w	r1,0
80006edc:	cf a0       	breq	80006ed0 <__sfvwrite_r+0x1c4>
80006ede:	40 0a       	lddsp	r10,sp[0x0]
80006ee0:	58 0a       	cp.w	r10,0
80006ee2:	c1 51       	brne	80006f0c <__sfvwrite_r+0x200>
80006ee4:	e2 c6 ff ff 	sub	r6,r1,-1
80006ee8:	02 9a       	mov	r10,r1
80006eea:	30 ab       	mov	r11,10
80006eec:	06 9c       	mov	r12,r3
80006eee:	e0 a0 03 07 	rcall	800074fc <memchr>
80006ef2:	f8 c8 ff ff 	sub	r8,r12,-1
80006ef6:	58 0c       	cp.w	r12,0
80006ef8:	f1 d3 e1 16 	subne	r6,r8,r3
80006efc:	f9 b9 01 01 	movne	r9,1
80006f00:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006f04:	f9 b8 00 01 	moveq	r8,1
80006f08:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006f0c:	02 36       	cp.w	r6,r1
80006f0e:	ec 04 17 80 	movls	r4,r6
80006f12:	e2 04 17 b0 	movhi	r4,r1
80006f16:	6e 59       	ld.w	r9,r7[0x14]
80006f18:	6e 25       	ld.w	r5,r7[0x8]
80006f1a:	f2 05 00 05 	add	r5,r9,r5
80006f1e:	0a 34       	cp.w	r4,r5
80006f20:	5f 9a       	srgt	r10
80006f22:	6e 0c       	ld.w	r12,r7[0x0]
80006f24:	6e 48       	ld.w	r8,r7[0x10]
80006f26:	10 3c       	cp.w	r12,r8
80006f28:	5f b8       	srhi	r8
80006f2a:	f5 e8 00 08 	and	r8,r10,r8
80006f2e:	30 0a       	mov	r10,0
80006f30:	f4 08 18 00 	cp.b	r8,r10
80006f34:	c0 e0       	breq	80006f50 <__sfvwrite_r+0x244>
80006f36:	06 9b       	mov	r11,r3
80006f38:	0a 9a       	mov	r10,r5
80006f3a:	e0 a0 02 ec 	rcall	80007512 <memmove>
80006f3e:	6e 08       	ld.w	r8,r7[0x0]
80006f40:	0a 08       	add	r8,r5
80006f42:	0e 9b       	mov	r11,r7
80006f44:	8f 08       	st.w	r7[0x0],r8
80006f46:	40 1c       	lddsp	r12,sp[0x4]
80006f48:	fe b0 fc aa 	rcall	8000689c <_fflush_r>
80006f4c:	c1 80       	breq	80006f7c <__sfvwrite_r+0x270>
80006f4e:	c2 68       	rjmp	80006f9a <__sfvwrite_r+0x28e>
80006f50:	12 34       	cp.w	r4,r9
80006f52:	c0 a5       	brlt	80006f66 <__sfvwrite_r+0x25a>
80006f54:	6e a8       	ld.w	r8,r7[0x28]
80006f56:	06 9a       	mov	r10,r3
80006f58:	6e 8b       	ld.w	r11,r7[0x20]
80006f5a:	40 1c       	lddsp	r12,sp[0x4]
80006f5c:	5d 18       	icall	r8
80006f5e:	18 95       	mov	r5,r12
80006f60:	e0 89 00 0e 	brgt	80006f7c <__sfvwrite_r+0x270>
80006f64:	c1 b8       	rjmp	80006f9a <__sfvwrite_r+0x28e>
80006f66:	08 9a       	mov	r10,r4
80006f68:	06 9b       	mov	r11,r3
80006f6a:	e0 a0 02 d4 	rcall	80007512 <memmove>
80006f6e:	6e 08       	ld.w	r8,r7[0x0]
80006f70:	08 08       	add	r8,r4
80006f72:	08 95       	mov	r5,r4
80006f74:	8f 08       	st.w	r7[0x0],r8
80006f76:	6e 28       	ld.w	r8,r7[0x8]
80006f78:	08 18       	sub	r8,r4
80006f7a:	8f 28       	st.w	r7[0x8],r8
80006f7c:	0a 16       	sub	r6,r5
80006f7e:	c0 71       	brne	80006f8c <__sfvwrite_r+0x280>
80006f80:	0e 9b       	mov	r11,r7
80006f82:	40 1c       	lddsp	r12,sp[0x4]
80006f84:	fe b0 fc 8c 	rcall	8000689c <_fflush_r>
80006f88:	c0 91       	brne	80006f9a <__sfvwrite_r+0x28e>
80006f8a:	50 06       	stdsp	sp[0x0],r6
80006f8c:	64 28       	ld.w	r8,r2[0x8]
80006f8e:	0a 18       	sub	r8,r5
80006f90:	85 28       	st.w	r2[0x8],r8
80006f92:	c0 90       	breq	80006fa4 <__sfvwrite_r+0x298>
80006f94:	0a 11       	sub	r1,r5
80006f96:	0a 03       	add	r3,r5
80006f98:	ca 1b       	rjmp	80006eda <__sfvwrite_r+0x1ce>
80006f9a:	8e 68       	ld.sh	r8,r7[0xc]
80006f9c:	a7 a8       	sbr	r8,0x6
80006f9e:	ae 68       	st.h	r7[0xc],r8
80006fa0:	3f fc       	mov	r12,-1
80006fa2:	c0 28       	rjmp	80006fa6 <__sfvwrite_r+0x29a>
80006fa4:	30 0c       	mov	r12,0
80006fa6:	2f dd       	sub	sp,-12
80006fa8:	d8 32       	popm	r0-r7,pc
80006faa:	d7 03       	nop

80006fac <_fwalk>:
80006fac:	d4 31       	pushm	r0-r7,lr
80006fae:	30 05       	mov	r5,0
80006fb0:	16 91       	mov	r1,r11
80006fb2:	f8 c7 ff 28 	sub	r7,r12,-216
80006fb6:	0a 92       	mov	r2,r5
80006fb8:	fe b0 fc f8 	rcall	800069a8 <__sfp_lock_acquire>
80006fbc:	3f f3       	mov	r3,-1
80006fbe:	c1 68       	rjmp	80006fea <_fwalk+0x3e>
80006fc0:	6e 26       	ld.w	r6,r7[0x8]
80006fc2:	6e 14       	ld.w	r4,r7[0x4]
80006fc4:	2f 46       	sub	r6,-12
80006fc6:	c0 c8       	rjmp	80006fde <_fwalk+0x32>
80006fc8:	8c 08       	ld.sh	r8,r6[0x0]
80006fca:	e4 08 19 00 	cp.h	r8,r2
80006fce:	c0 70       	breq	80006fdc <_fwalk+0x30>
80006fd0:	8c 18       	ld.sh	r8,r6[0x2]
80006fd2:	e6 08 19 00 	cp.h	r8,r3
80006fd6:	c0 30       	breq	80006fdc <_fwalk+0x30>
80006fd8:	5d 11       	icall	r1
80006fda:	18 45       	or	r5,r12
80006fdc:	2a 46       	sub	r6,-92
80006fde:	20 14       	sub	r4,1
80006fe0:	ec cc 00 0c 	sub	r12,r6,12
80006fe4:	58 04       	cp.w	r4,0
80006fe6:	cf 14       	brge	80006fc8 <_fwalk+0x1c>
80006fe8:	6e 07       	ld.w	r7,r7[0x0]
80006fea:	58 07       	cp.w	r7,0
80006fec:	ce a1       	brne	80006fc0 <_fwalk+0x14>
80006fee:	fe b0 fc de 	rcall	800069aa <__sfp_lock_release>
80006ff2:	0a 9c       	mov	r12,r5
80006ff4:	d8 32       	popm	r0-r7,pc
80006ff6:	d7 03       	nop

80006ff8 <_localeconv_r>:
80006ff8:	fe cc d7 e0 	sub	r12,pc,-10272
80006ffc:	5e fc       	retal	r12
80006ffe:	d7 03       	nop

80007000 <__smakebuf_r>:
80007000:	d4 21       	pushm	r4-r7,lr
80007002:	20 fd       	sub	sp,60
80007004:	96 68       	ld.sh	r8,r11[0xc]
80007006:	16 97       	mov	r7,r11
80007008:	18 96       	mov	r6,r12
8000700a:	e2 18 00 02 	andl	r8,0x2,COH
8000700e:	c3 c1       	brne	80007086 <__smakebuf_r+0x86>
80007010:	96 7b       	ld.sh	r11,r11[0xe]
80007012:	f0 0b 19 00 	cp.h	r11,r8
80007016:	c0 55       	brlt	80007020 <__smakebuf_r+0x20>
80007018:	1a 9a       	mov	r10,sp
8000701a:	e0 a0 08 9d 	rcall	80008154 <_fstat_r>
8000701e:	c0 f4       	brge	8000703c <__smakebuf_r+0x3c>
80007020:	8e 65       	ld.sh	r5,r7[0xc]
80007022:	0a 98       	mov	r8,r5
80007024:	ab b8       	sbr	r8,0xb
80007026:	e2 15 00 80 	andl	r5,0x80,COH
8000702a:	ae 68       	st.h	r7[0xc],r8
8000702c:	30 04       	mov	r4,0
8000702e:	e0 68 04 00 	mov	r8,1024
80007032:	f9 b5 01 40 	movne	r5,64
80007036:	f0 05 17 00 	moveq	r5,r8
8000703a:	c1 c8       	rjmp	80007072 <__smakebuf_r+0x72>
8000703c:	40 18       	lddsp	r8,sp[0x4]
8000703e:	e2 18 f0 00 	andl	r8,0xf000,COH
80007042:	e0 48 20 00 	cp.w	r8,8192
80007046:	5f 04       	sreq	r4
80007048:	e0 48 80 00 	cp.w	r8,32768
8000704c:	c0 e1       	brne	80007068 <__smakebuf_r+0x68>
8000704e:	6e b9       	ld.w	r9,r7[0x2c]
80007050:	fe c8 f1 e8 	sub	r8,pc,-3608
80007054:	10 39       	cp.w	r9,r8
80007056:	c0 91       	brne	80007068 <__smakebuf_r+0x68>
80007058:	8e 68       	ld.sh	r8,r7[0xc]
8000705a:	e0 65 04 00 	mov	r5,1024
8000705e:	ab a8       	sbr	r8,0xa
80007060:	ef 45 00 50 	st.w	r7[80],r5
80007064:	ae 68       	st.h	r7[0xc],r8
80007066:	c0 68       	rjmp	80007072 <__smakebuf_r+0x72>
80007068:	8e 68       	ld.sh	r8,r7[0xc]
8000706a:	e0 65 04 00 	mov	r5,1024
8000706e:	ab b8       	sbr	r8,0xb
80007070:	ae 68       	st.h	r7[0xc],r8
80007072:	0a 9b       	mov	r11,r5
80007074:	0c 9c       	mov	r12,r6
80007076:	c2 bc       	rcall	800070cc <_malloc_r>
80007078:	8e 68       	ld.sh	r8,r7[0xc]
8000707a:	c0 d1       	brne	80007094 <__smakebuf_r+0x94>
8000707c:	ed b8 00 09 	bld	r8,0x9
80007080:	c1 b0       	breq	800070b6 <__smakebuf_r+0xb6>
80007082:	a1 b8       	sbr	r8,0x1
80007084:	ae 68       	st.h	r7[0xc],r8
80007086:	ee c8 ff b9 	sub	r8,r7,-71
8000708a:	8f 48       	st.w	r7[0x10],r8
8000708c:	8f 08       	st.w	r7[0x0],r8
8000708e:	30 18       	mov	r8,1
80007090:	8f 58       	st.w	r7[0x14],r8
80007092:	c1 28       	rjmp	800070b6 <__smakebuf_r+0xb6>
80007094:	a7 b8       	sbr	r8,0x7
80007096:	8f 4c       	st.w	r7[0x10],r12
80007098:	ae 68       	st.h	r7[0xc],r8
8000709a:	8f 55       	st.w	r7[0x14],r5
8000709c:	fe c8 06 f0 	sub	r8,pc,1776
800070a0:	8f 0c       	st.w	r7[0x0],r12
800070a2:	8d a8       	st.w	r6[0x28],r8
800070a4:	58 04       	cp.w	r4,0
800070a6:	c0 80       	breq	800070b6 <__smakebuf_r+0xb6>
800070a8:	8e 7c       	ld.sh	r12,r7[0xe]
800070aa:	e0 a0 07 47 	rcall	80007f38 <isatty>
800070ae:	c0 40       	breq	800070b6 <__smakebuf_r+0xb6>
800070b0:	8e 68       	ld.sh	r8,r7[0xc]
800070b2:	a1 a8       	sbr	r8,0x0
800070b4:	ae 68       	st.h	r7[0xc],r8
800070b6:	2f 1d       	sub	sp,-60
800070b8:	d8 22       	popm	r4-r7,pc
800070ba:	d7 03       	nop

800070bc <malloc>:
800070bc:	d4 01       	pushm	lr
800070be:	e0 68 01 00 	mov	r8,256
800070c2:	18 9b       	mov	r11,r12
800070c4:	70 0c       	ld.w	r12,r8[0x0]
800070c6:	c0 3c       	rcall	800070cc <_malloc_r>
800070c8:	d8 02       	popm	pc
800070ca:	d7 03       	nop

800070cc <_malloc_r>:
800070cc:	d4 31       	pushm	r0-r7,lr
800070ce:	f6 c8 ff f5 	sub	r8,r11,-11
800070d2:	18 95       	mov	r5,r12
800070d4:	10 97       	mov	r7,r8
800070d6:	e0 17 ff f8 	andl	r7,0xfff8
800070da:	59 68       	cp.w	r8,22
800070dc:	f9 b7 08 10 	movls	r7,16
800070e0:	16 37       	cp.w	r7,r11
800070e2:	5f 38       	srlo	r8
800070e4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800070e8:	c0 50       	breq	800070f2 <_malloc_r+0x26>
800070ea:	30 c8       	mov	r8,12
800070ec:	99 38       	st.w	r12[0xc],r8
800070ee:	e0 8f 01 f7 	bral	800074dc <_malloc_r+0x410>
800070f2:	e0 a0 02 36 	rcall	8000755e <__malloc_lock>
800070f6:	e0 47 01 f7 	cp.w	r7,503
800070fa:	e0 8b 00 1d 	brhi	80007134 <_malloc_r+0x68>
800070fe:	ee 03 16 03 	lsr	r3,r7,0x3
80007102:	e0 68 01 04 	mov	r8,260
80007106:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000710a:	70 36       	ld.w	r6,r8[0xc]
8000710c:	10 36       	cp.w	r6,r8
8000710e:	c0 61       	brne	8000711a <_malloc_r+0x4e>
80007110:	ec c8 ff f8 	sub	r8,r6,-8
80007114:	70 36       	ld.w	r6,r8[0xc]
80007116:	10 36       	cp.w	r6,r8
80007118:	c0 c0       	breq	80007130 <_malloc_r+0x64>
8000711a:	6c 18       	ld.w	r8,r6[0x4]
8000711c:	e0 18 ff fc 	andl	r8,0xfffc
80007120:	6c 3a       	ld.w	r10,r6[0xc]
80007122:	ec 08 00 09 	add	r9,r6,r8
80007126:	0a 9c       	mov	r12,r5
80007128:	6c 28       	ld.w	r8,r6[0x8]
8000712a:	95 28       	st.w	r10[0x8],r8
8000712c:	91 3a       	st.w	r8[0xc],r10
8000712e:	c4 78       	rjmp	800071bc <_malloc_r+0xf0>
80007130:	2f e3       	sub	r3,-2
80007132:	c4 d8       	rjmp	800071cc <_malloc_r+0x100>
80007134:	ee 03 16 09 	lsr	r3,r7,0x9
80007138:	c0 41       	brne	80007140 <_malloc_r+0x74>
8000713a:	ee 03 16 03 	lsr	r3,r7,0x3
8000713e:	c2 68       	rjmp	8000718a <_malloc_r+0xbe>
80007140:	58 43       	cp.w	r3,4
80007142:	e0 8b 00 06 	brhi	8000714e <_malloc_r+0x82>
80007146:	ee 03 16 06 	lsr	r3,r7,0x6
8000714a:	2c 83       	sub	r3,-56
8000714c:	c1 f8       	rjmp	8000718a <_malloc_r+0xbe>
8000714e:	59 43       	cp.w	r3,20
80007150:	e0 8b 00 04 	brhi	80007158 <_malloc_r+0x8c>
80007154:	2a 53       	sub	r3,-91
80007156:	c1 a8       	rjmp	8000718a <_malloc_r+0xbe>
80007158:	e0 43 00 54 	cp.w	r3,84
8000715c:	e0 8b 00 06 	brhi	80007168 <_malloc_r+0x9c>
80007160:	ee 03 16 0c 	lsr	r3,r7,0xc
80007164:	29 23       	sub	r3,-110
80007166:	c1 28       	rjmp	8000718a <_malloc_r+0xbe>
80007168:	e0 43 01 54 	cp.w	r3,340
8000716c:	e0 8b 00 06 	brhi	80007178 <_malloc_r+0xac>
80007170:	ee 03 16 0f 	lsr	r3,r7,0xf
80007174:	28 93       	sub	r3,-119
80007176:	c0 a8       	rjmp	8000718a <_malloc_r+0xbe>
80007178:	e0 43 05 54 	cp.w	r3,1364
8000717c:	e0 88 00 04 	brls	80007184 <_malloc_r+0xb8>
80007180:	37 e3       	mov	r3,126
80007182:	c0 48       	rjmp	8000718a <_malloc_r+0xbe>
80007184:	ee 03 16 12 	lsr	r3,r7,0x12
80007188:	28 43       	sub	r3,-124
8000718a:	e0 6a 01 04 	mov	r10,260
8000718e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007192:	74 36       	ld.w	r6,r10[0xc]
80007194:	c1 98       	rjmp	800071c6 <_malloc_r+0xfa>
80007196:	6c 19       	ld.w	r9,r6[0x4]
80007198:	e0 19 ff fc 	andl	r9,0xfffc
8000719c:	f2 07 01 0b 	sub	r11,r9,r7
800071a0:	58 fb       	cp.w	r11,15
800071a2:	e0 8a 00 04 	brle	800071aa <_malloc_r+0xde>
800071a6:	20 13       	sub	r3,1
800071a8:	c1 18       	rjmp	800071ca <_malloc_r+0xfe>
800071aa:	6c 38       	ld.w	r8,r6[0xc]
800071ac:	58 0b       	cp.w	r11,0
800071ae:	c0 b5       	brlt	800071c4 <_malloc_r+0xf8>
800071b0:	6c 2a       	ld.w	r10,r6[0x8]
800071b2:	ec 09 00 09 	add	r9,r6,r9
800071b6:	0a 9c       	mov	r12,r5
800071b8:	91 2a       	st.w	r8[0x8],r10
800071ba:	95 38       	st.w	r10[0xc],r8
800071bc:	72 18       	ld.w	r8,r9[0x4]
800071be:	a1 a8       	sbr	r8,0x0
800071c0:	93 18       	st.w	r9[0x4],r8
800071c2:	cb c8       	rjmp	8000733a <_malloc_r+0x26e>
800071c4:	10 96       	mov	r6,r8
800071c6:	14 36       	cp.w	r6,r10
800071c8:	ce 71       	brne	80007196 <_malloc_r+0xca>
800071ca:	2f f3       	sub	r3,-1
800071cc:	e0 6a 01 04 	mov	r10,260
800071d0:	f4 cc ff f8 	sub	r12,r10,-8
800071d4:	78 26       	ld.w	r6,r12[0x8]
800071d6:	18 36       	cp.w	r6,r12
800071d8:	c6 c0       	breq	800072b0 <_malloc_r+0x1e4>
800071da:	6c 19       	ld.w	r9,r6[0x4]
800071dc:	e0 19 ff fc 	andl	r9,0xfffc
800071e0:	f2 07 01 08 	sub	r8,r9,r7
800071e4:	58 f8       	cp.w	r8,15
800071e6:	e0 89 00 8f 	brgt	80007304 <_malloc_r+0x238>
800071ea:	99 3c       	st.w	r12[0xc],r12
800071ec:	99 2c       	st.w	r12[0x8],r12
800071ee:	58 08       	cp.w	r8,0
800071f0:	c0 55       	brlt	800071fa <_malloc_r+0x12e>
800071f2:	ec 09 00 09 	add	r9,r6,r9
800071f6:	0a 9c       	mov	r12,r5
800071f8:	ce 2b       	rjmp	800071bc <_malloc_r+0xf0>
800071fa:	e0 49 01 ff 	cp.w	r9,511
800071fe:	e0 8b 00 13 	brhi	80007224 <_malloc_r+0x158>
80007202:	a3 99       	lsr	r9,0x3
80007204:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007208:	70 2b       	ld.w	r11,r8[0x8]
8000720a:	8d 38       	st.w	r6[0xc],r8
8000720c:	8d 2b       	st.w	r6[0x8],r11
8000720e:	97 36       	st.w	r11[0xc],r6
80007210:	91 26       	st.w	r8[0x8],r6
80007212:	a3 49       	asr	r9,0x2
80007214:	74 18       	ld.w	r8,r10[0x4]
80007216:	30 1b       	mov	r11,1
80007218:	f6 09 09 49 	lsl	r9,r11,r9
8000721c:	f1 e9 10 09 	or	r9,r8,r9
80007220:	95 19       	st.w	r10[0x4],r9
80007222:	c4 78       	rjmp	800072b0 <_malloc_r+0x1e4>
80007224:	f2 0a 16 09 	lsr	r10,r9,0x9
80007228:	58 4a       	cp.w	r10,4
8000722a:	e0 8b 00 07 	brhi	80007238 <_malloc_r+0x16c>
8000722e:	f2 0a 16 06 	lsr	r10,r9,0x6
80007232:	2c 8a       	sub	r10,-56
80007234:	c2 08       	rjmp	80007274 <_malloc_r+0x1a8>
80007236:	d7 03       	nop
80007238:	59 4a       	cp.w	r10,20
8000723a:	e0 8b 00 04 	brhi	80007242 <_malloc_r+0x176>
8000723e:	2a 5a       	sub	r10,-91
80007240:	c1 a8       	rjmp	80007274 <_malloc_r+0x1a8>
80007242:	e0 4a 00 54 	cp.w	r10,84
80007246:	e0 8b 00 06 	brhi	80007252 <_malloc_r+0x186>
8000724a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000724e:	29 2a       	sub	r10,-110
80007250:	c1 28       	rjmp	80007274 <_malloc_r+0x1a8>
80007252:	e0 4a 01 54 	cp.w	r10,340
80007256:	e0 8b 00 06 	brhi	80007262 <_malloc_r+0x196>
8000725a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000725e:	28 9a       	sub	r10,-119
80007260:	c0 a8       	rjmp	80007274 <_malloc_r+0x1a8>
80007262:	e0 4a 05 54 	cp.w	r10,1364
80007266:	e0 88 00 04 	brls	8000726e <_malloc_r+0x1a2>
8000726a:	37 ea       	mov	r10,126
8000726c:	c0 48       	rjmp	80007274 <_malloc_r+0x1a8>
8000726e:	f2 0a 16 12 	lsr	r10,r9,0x12
80007272:	28 4a       	sub	r10,-124
80007274:	e0 6b 01 04 	mov	r11,260
80007278:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000727c:	68 28       	ld.w	r8,r4[0x8]
8000727e:	08 38       	cp.w	r8,r4
80007280:	c0 e1       	brne	8000729c <_malloc_r+0x1d0>
80007282:	76 19       	ld.w	r9,r11[0x4]
80007284:	a3 4a       	asr	r10,0x2
80007286:	30 1e       	mov	lr,1
80007288:	fc 0a 09 4a 	lsl	r10,lr,r10
8000728c:	f3 ea 10 0a 	or	r10,r9,r10
80007290:	10 99       	mov	r9,r8
80007292:	97 1a       	st.w	r11[0x4],r10
80007294:	c0 a8       	rjmp	800072a8 <_malloc_r+0x1dc>
80007296:	70 28       	ld.w	r8,r8[0x8]
80007298:	08 38       	cp.w	r8,r4
8000729a:	c0 60       	breq	800072a6 <_malloc_r+0x1da>
8000729c:	70 1a       	ld.w	r10,r8[0x4]
8000729e:	e0 1a ff fc 	andl	r10,0xfffc
800072a2:	14 39       	cp.w	r9,r10
800072a4:	cf 93       	brcs	80007296 <_malloc_r+0x1ca>
800072a6:	70 39       	ld.w	r9,r8[0xc]
800072a8:	8d 39       	st.w	r6[0xc],r9
800072aa:	8d 28       	st.w	r6[0x8],r8
800072ac:	91 36       	st.w	r8[0xc],r6
800072ae:	93 26       	st.w	r9[0x8],r6
800072b0:	e6 08 14 02 	asr	r8,r3,0x2
800072b4:	30 1b       	mov	r11,1
800072b6:	e0 64 01 04 	mov	r4,260
800072ba:	f6 08 09 4b 	lsl	r11,r11,r8
800072be:	68 18       	ld.w	r8,r4[0x4]
800072c0:	10 3b       	cp.w	r11,r8
800072c2:	e0 8b 00 69 	brhi	80007394 <_malloc_r+0x2c8>
800072c6:	f7 e8 00 09 	and	r9,r11,r8
800072ca:	c0 b1       	brne	800072e0 <_malloc_r+0x214>
800072cc:	e0 13 ff fc 	andl	r3,0xfffc
800072d0:	a1 7b       	lsl	r11,0x1
800072d2:	2f c3       	sub	r3,-4
800072d4:	c0 38       	rjmp	800072da <_malloc_r+0x20e>
800072d6:	2f c3       	sub	r3,-4
800072d8:	a1 7b       	lsl	r11,0x1
800072da:	f7 e8 00 09 	and	r9,r11,r8
800072de:	cf c0       	breq	800072d6 <_malloc_r+0x20a>
800072e0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800072e4:	06 92       	mov	r2,r3
800072e6:	1c 91       	mov	r1,lr
800072e8:	62 36       	ld.w	r6,r1[0xc]
800072ea:	c2 d8       	rjmp	80007344 <_malloc_r+0x278>
800072ec:	6c 1a       	ld.w	r10,r6[0x4]
800072ee:	e0 1a ff fc 	andl	r10,0xfffc
800072f2:	f4 07 01 08 	sub	r8,r10,r7
800072f6:	58 f8       	cp.w	r8,15
800072f8:	e0 8a 00 15 	brle	80007322 <_malloc_r+0x256>
800072fc:	6c 3a       	ld.w	r10,r6[0xc]
800072fe:	6c 29       	ld.w	r9,r6[0x8]
80007300:	95 29       	st.w	r10[0x8],r9
80007302:	93 3a       	st.w	r9[0xc],r10
80007304:	0e 99       	mov	r9,r7
80007306:	ec 07 00 07 	add	r7,r6,r7
8000730a:	a1 a9       	sbr	r9,0x0
8000730c:	99 37       	st.w	r12[0xc],r7
8000730e:	99 27       	st.w	r12[0x8],r7
80007310:	8d 19       	st.w	r6[0x4],r9
80007312:	ee 08 09 08 	st.w	r7[r8],r8
80007316:	8f 2c       	st.w	r7[0x8],r12
80007318:	8f 3c       	st.w	r7[0xc],r12
8000731a:	a1 a8       	sbr	r8,0x0
8000731c:	0a 9c       	mov	r12,r5
8000731e:	8f 18       	st.w	r7[0x4],r8
80007320:	c0 d8       	rjmp	8000733a <_malloc_r+0x26e>
80007322:	6c 39       	ld.w	r9,r6[0xc]
80007324:	58 08       	cp.w	r8,0
80007326:	c0 e5       	brlt	80007342 <_malloc_r+0x276>
80007328:	ec 0a 00 0a 	add	r10,r6,r10
8000732c:	74 18       	ld.w	r8,r10[0x4]
8000732e:	a1 a8       	sbr	r8,0x0
80007330:	0a 9c       	mov	r12,r5
80007332:	95 18       	st.w	r10[0x4],r8
80007334:	6c 28       	ld.w	r8,r6[0x8]
80007336:	93 28       	st.w	r9[0x8],r8
80007338:	91 39       	st.w	r8[0xc],r9
8000733a:	c1 3d       	rcall	80007560 <__malloc_unlock>
8000733c:	ec cc ff f8 	sub	r12,r6,-8
80007340:	d8 32       	popm	r0-r7,pc
80007342:	12 96       	mov	r6,r9
80007344:	02 36       	cp.w	r6,r1
80007346:	cd 31       	brne	800072ec <_malloc_r+0x220>
80007348:	2f f2       	sub	r2,-1
8000734a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000734e:	c0 30       	breq	80007354 <_malloc_r+0x288>
80007350:	2f 81       	sub	r1,-8
80007352:	cc bb       	rjmp	800072e8 <_malloc_r+0x21c>
80007354:	1c 98       	mov	r8,lr
80007356:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000735a:	c0 81       	brne	8000736a <_malloc_r+0x29e>
8000735c:	68 19       	ld.w	r9,r4[0x4]
8000735e:	f6 08 11 ff 	rsub	r8,r11,-1
80007362:	f3 e8 00 08 	and	r8,r9,r8
80007366:	89 18       	st.w	r4[0x4],r8
80007368:	c0 78       	rjmp	80007376 <_malloc_r+0x2aa>
8000736a:	f0 c9 00 08 	sub	r9,r8,8
8000736e:	20 13       	sub	r3,1
80007370:	70 08       	ld.w	r8,r8[0x0]
80007372:	12 38       	cp.w	r8,r9
80007374:	cf 10       	breq	80007356 <_malloc_r+0x28a>
80007376:	a1 7b       	lsl	r11,0x1
80007378:	68 18       	ld.w	r8,r4[0x4]
8000737a:	10 3b       	cp.w	r11,r8
8000737c:	e0 8b 00 0c 	brhi	80007394 <_malloc_r+0x2c8>
80007380:	58 0b       	cp.w	r11,0
80007382:	c0 90       	breq	80007394 <_malloc_r+0x2c8>
80007384:	04 93       	mov	r3,r2
80007386:	c0 38       	rjmp	8000738c <_malloc_r+0x2c0>
80007388:	2f c3       	sub	r3,-4
8000738a:	a1 7b       	lsl	r11,0x1
8000738c:	f7 e8 00 09 	and	r9,r11,r8
80007390:	ca 81       	brne	800072e0 <_malloc_r+0x214>
80007392:	cf bb       	rjmp	80007388 <_malloc_r+0x2bc>
80007394:	68 23       	ld.w	r3,r4[0x8]
80007396:	66 12       	ld.w	r2,r3[0x4]
80007398:	e0 12 ff fc 	andl	r2,0xfffc
8000739c:	0e 32       	cp.w	r2,r7
8000739e:	5f 39       	srlo	r9
800073a0:	e4 07 01 08 	sub	r8,r2,r7
800073a4:	58 f8       	cp.w	r8,15
800073a6:	5f aa       	srle	r10
800073a8:	f5 e9 10 09 	or	r9,r10,r9
800073ac:	e0 80 00 9a 	breq	800074e0 <_malloc_r+0x414>
800073b0:	e0 68 06 30 	mov	r8,1584
800073b4:	70 01       	ld.w	r1,r8[0x0]
800073b6:	e0 68 05 10 	mov	r8,1296
800073ba:	2f 01       	sub	r1,-16
800073bc:	70 08       	ld.w	r8,r8[0x0]
800073be:	0e 01       	add	r1,r7
800073c0:	5b f8       	cp.w	r8,-1
800073c2:	c0 40       	breq	800073ca <_malloc_r+0x2fe>
800073c4:	28 11       	sub	r1,-127
800073c6:	e0 11 ff 80 	andl	r1,0xff80
800073ca:	02 9b       	mov	r11,r1
800073cc:	0a 9c       	mov	r12,r5
800073ce:	e0 a0 05 39 	rcall	80007e40 <_sbrk_r>
800073d2:	18 96       	mov	r6,r12
800073d4:	5b fc       	cp.w	r12,-1
800073d6:	c7 50       	breq	800074c0 <_malloc_r+0x3f4>
800073d8:	e6 02 00 08 	add	r8,r3,r2
800073dc:	10 3c       	cp.w	r12,r8
800073de:	c0 32       	brcc	800073e4 <_malloc_r+0x318>
800073e0:	08 33       	cp.w	r3,r4
800073e2:	c6 f1       	brne	800074c0 <_malloc_r+0x3f4>
800073e4:	e0 6a 06 34 	mov	r10,1588
800073e8:	74 09       	ld.w	r9,r10[0x0]
800073ea:	e2 09 00 09 	add	r9,r1,r9
800073ee:	95 09       	st.w	r10[0x0],r9
800073f0:	10 36       	cp.w	r6,r8
800073f2:	c0 a1       	brne	80007406 <_malloc_r+0x33a>
800073f4:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800073f8:	c0 71       	brne	80007406 <_malloc_r+0x33a>
800073fa:	e2 02 00 02 	add	r2,r1,r2
800073fe:	68 28       	ld.w	r8,r4[0x8]
80007400:	a1 a2       	sbr	r2,0x0
80007402:	91 12       	st.w	r8[0x4],r2
80007404:	c4 f8       	rjmp	800074a2 <_malloc_r+0x3d6>
80007406:	e0 6a 05 10 	mov	r10,1296
8000740a:	74 0b       	ld.w	r11,r10[0x0]
8000740c:	5b fb       	cp.w	r11,-1
8000740e:	c0 31       	brne	80007414 <_malloc_r+0x348>
80007410:	95 06       	st.w	r10[0x0],r6
80007412:	c0 78       	rjmp	80007420 <_malloc_r+0x354>
80007414:	ec 09 00 09 	add	r9,r6,r9
80007418:	e0 6a 06 34 	mov	r10,1588
8000741c:	10 19       	sub	r9,r8
8000741e:	95 09       	st.w	r10[0x0],r9
80007420:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007424:	f0 09 11 08 	rsub	r9,r8,8
80007428:	58 08       	cp.w	r8,0
8000742a:	f2 08 17 10 	movne	r8,r9
8000742e:	ed d8 e1 06 	addne	r6,r6,r8
80007432:	28 08       	sub	r8,-128
80007434:	ec 01 00 01 	add	r1,r6,r1
80007438:	0a 9c       	mov	r12,r5
8000743a:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000743e:	f0 01 01 01 	sub	r1,r8,r1
80007442:	02 9b       	mov	r11,r1
80007444:	e0 a0 04 fe 	rcall	80007e40 <_sbrk_r>
80007448:	e0 68 06 34 	mov	r8,1588
8000744c:	5b fc       	cp.w	r12,-1
8000744e:	ec 0c 17 00 	moveq	r12,r6
80007452:	f9 b1 00 00 	moveq	r1,0
80007456:	70 09       	ld.w	r9,r8[0x0]
80007458:	0c 1c       	sub	r12,r6
8000745a:	89 26       	st.w	r4[0x8],r6
8000745c:	02 0c       	add	r12,r1
8000745e:	12 01       	add	r1,r9
80007460:	a1 ac       	sbr	r12,0x0
80007462:	91 01       	st.w	r8[0x0],r1
80007464:	8d 1c       	st.w	r6[0x4],r12
80007466:	08 33       	cp.w	r3,r4
80007468:	c1 d0       	breq	800074a2 <_malloc_r+0x3d6>
8000746a:	58 f2       	cp.w	r2,15
8000746c:	e0 8b 00 05 	brhi	80007476 <_malloc_r+0x3aa>
80007470:	30 18       	mov	r8,1
80007472:	8d 18       	st.w	r6[0x4],r8
80007474:	c2 68       	rjmp	800074c0 <_malloc_r+0x3f4>
80007476:	30 59       	mov	r9,5
80007478:	20 c2       	sub	r2,12
8000747a:	e0 12 ff f8 	andl	r2,0xfff8
8000747e:	e6 02 00 08 	add	r8,r3,r2
80007482:	91 29       	st.w	r8[0x8],r9
80007484:	91 19       	st.w	r8[0x4],r9
80007486:	66 18       	ld.w	r8,r3[0x4]
80007488:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000748c:	e5 e8 10 08 	or	r8,r2,r8
80007490:	87 18       	st.w	r3[0x4],r8
80007492:	58 f2       	cp.w	r2,15
80007494:	e0 88 00 07 	brls	800074a2 <_malloc_r+0x3d6>
80007498:	e6 cb ff f8 	sub	r11,r3,-8
8000749c:	0a 9c       	mov	r12,r5
8000749e:	fe b0 fb 71 	rcall	80006b80 <_free_r>
800074a2:	e0 69 06 2c 	mov	r9,1580
800074a6:	72 0a       	ld.w	r10,r9[0x0]
800074a8:	e0 68 06 34 	mov	r8,1588
800074ac:	70 08       	ld.w	r8,r8[0x0]
800074ae:	14 38       	cp.w	r8,r10
800074b0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800074b4:	e0 69 06 28 	mov	r9,1576
800074b8:	72 0a       	ld.w	r10,r9[0x0]
800074ba:	14 38       	cp.w	r8,r10
800074bc:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800074c0:	68 28       	ld.w	r8,r4[0x8]
800074c2:	70 18       	ld.w	r8,r8[0x4]
800074c4:	e0 18 ff fc 	andl	r8,0xfffc
800074c8:	0e 38       	cp.w	r8,r7
800074ca:	5f 39       	srlo	r9
800074cc:	0e 18       	sub	r8,r7
800074ce:	58 f8       	cp.w	r8,15
800074d0:	5f aa       	srle	r10
800074d2:	f5 e9 10 09 	or	r9,r10,r9
800074d6:	c0 50       	breq	800074e0 <_malloc_r+0x414>
800074d8:	0a 9c       	mov	r12,r5
800074da:	c4 3c       	rcall	80007560 <__malloc_unlock>
800074dc:	d8 3a       	popm	r0-r7,pc,r12=0
800074de:	d7 03       	nop
800074e0:	68 26       	ld.w	r6,r4[0x8]
800074e2:	a1 a8       	sbr	r8,0x0
800074e4:	0e 99       	mov	r9,r7
800074e6:	a1 a9       	sbr	r9,0x0
800074e8:	8d 19       	st.w	r6[0x4],r9
800074ea:	ec 07 00 07 	add	r7,r6,r7
800074ee:	0a 9c       	mov	r12,r5
800074f0:	89 27       	st.w	r4[0x8],r7
800074f2:	8f 18       	st.w	r7[0x4],r8
800074f4:	c3 6c       	rcall	80007560 <__malloc_unlock>
800074f6:	ec cc ff f8 	sub	r12,r6,-8
800074fa:	d8 32       	popm	r0-r7,pc

800074fc <memchr>:
800074fc:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007500:	c0 68       	rjmp	8000750c <memchr+0x10>
80007502:	20 1a       	sub	r10,1
80007504:	19 88       	ld.ub	r8,r12[0x0]
80007506:	16 38       	cp.w	r8,r11
80007508:	5e 0c       	reteq	r12
8000750a:	2f fc       	sub	r12,-1
8000750c:	58 0a       	cp.w	r10,0
8000750e:	cf a1       	brne	80007502 <memchr+0x6>
80007510:	5e fa       	retal	r10

80007512 <memmove>:
80007512:	d4 01       	pushm	lr
80007514:	18 3b       	cp.w	r11,r12
80007516:	c1 92       	brcc	80007548 <memmove+0x36>
80007518:	f6 0a 00 09 	add	r9,r11,r10
8000751c:	12 3c       	cp.w	r12,r9
8000751e:	c1 52       	brcc	80007548 <memmove+0x36>
80007520:	f8 0a 00 0b 	add	r11,r12,r10
80007524:	30 08       	mov	r8,0
80007526:	c0 68       	rjmp	80007532 <memmove+0x20>
80007528:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000752c:	20 1a       	sub	r10,1
8000752e:	f6 08 0b 0e 	st.b	r11[r8],lr
80007532:	20 18       	sub	r8,1
80007534:	58 0a       	cp.w	r10,0
80007536:	cf 91       	brne	80007528 <memmove+0x16>
80007538:	d8 02       	popm	pc
8000753a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000753e:	20 1a       	sub	r10,1
80007540:	f8 08 0b 09 	st.b	r12[r8],r9
80007544:	2f f8       	sub	r8,-1
80007546:	c0 28       	rjmp	8000754a <memmove+0x38>
80007548:	30 08       	mov	r8,0
8000754a:	58 0a       	cp.w	r10,0
8000754c:	cf 71       	brne	8000753a <memmove+0x28>
8000754e:	d8 02       	popm	pc

80007550 <memset>:
80007550:	18 98       	mov	r8,r12
80007552:	c0 38       	rjmp	80007558 <memset+0x8>
80007554:	10 cb       	st.b	r8++,r11
80007556:	20 1a       	sub	r10,1
80007558:	58 0a       	cp.w	r10,0
8000755a:	cf d1       	brne	80007554 <memset+0x4>
8000755c:	5e fc       	retal	r12

8000755e <__malloc_lock>:
8000755e:	5e fc       	retal	r12

80007560 <__malloc_unlock>:
80007560:	5e fc       	retal	r12

80007562 <__hi0bits>:
80007562:	18 98       	mov	r8,r12
80007564:	e0 1c 00 00 	andl	r12,0x0
80007568:	f0 09 15 10 	lsl	r9,r8,0x10
8000756c:	58 0c       	cp.w	r12,0
8000756e:	f2 08 17 00 	moveq	r8,r9
80007572:	f9 bc 00 10 	moveq	r12,16
80007576:	f9 bc 01 00 	movne	r12,0
8000757a:	10 9a       	mov	r10,r8
8000757c:	f0 09 15 08 	lsl	r9,r8,0x8
80007580:	e6 1a ff 00 	andh	r10,0xff00,COH
80007584:	f7 bc 00 f8 	subeq	r12,-8
80007588:	f2 08 17 00 	moveq	r8,r9
8000758c:	10 9a       	mov	r10,r8
8000758e:	f0 09 15 04 	lsl	r9,r8,0x4
80007592:	e6 1a f0 00 	andh	r10,0xf000,COH
80007596:	f7 bc 00 fc 	subeq	r12,-4
8000759a:	f2 08 17 00 	moveq	r8,r9
8000759e:	10 9a       	mov	r10,r8
800075a0:	f0 09 15 02 	lsl	r9,r8,0x2
800075a4:	e6 1a c0 00 	andh	r10,0xc000,COH
800075a8:	f7 bc 00 fe 	subeq	r12,-2
800075ac:	f2 08 17 00 	moveq	r8,r9
800075b0:	58 08       	cp.w	r8,0
800075b2:	5e 5c       	retlt	r12
800075b4:	ed b8 00 1e 	bld	r8,0x1e
800075b8:	f9 bc 01 20 	movne	r12,32
800075bc:	f7 bc 00 ff 	subeq	r12,-1
800075c0:	5e fc       	retal	r12

800075c2 <__lo0bits>:
800075c2:	18 99       	mov	r9,r12
800075c4:	78 08       	ld.w	r8,r12[0x0]
800075c6:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800075ca:	c1 50       	breq	800075f4 <__lo0bits+0x32>
800075cc:	ed b8 00 00 	bld	r8,0x0
800075d0:	c0 21       	brne	800075d4 <__lo0bits+0x12>
800075d2:	5e fd       	retal	0
800075d4:	10 9b       	mov	r11,r8
800075d6:	f0 0a 16 01 	lsr	r10,r8,0x1
800075da:	e2 1b 00 02 	andl	r11,0x2,COH
800075de:	a3 88       	lsr	r8,0x2
800075e0:	58 0b       	cp.w	r11,0
800075e2:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800075e6:	f9 bc 01 01 	movne	r12,1
800075ea:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800075ee:	f9 bc 00 02 	moveq	r12,2
800075f2:	5e fc       	retal	r12
800075f4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800075f8:	f0 0b 16 10 	lsr	r11,r8,0x10
800075fc:	58 0a       	cp.w	r10,0
800075fe:	f6 08 17 00 	moveq	r8,r11
80007602:	f9 bc 00 10 	moveq	r12,16
80007606:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000760a:	f0 0a 16 08 	lsr	r10,r8,0x8
8000760e:	58 0b       	cp.w	r11,0
80007610:	f7 bc 00 f8 	subeq	r12,-8
80007614:	f4 08 17 00 	moveq	r8,r10
80007618:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000761c:	f0 0a 16 04 	lsr	r10,r8,0x4
80007620:	58 0b       	cp.w	r11,0
80007622:	f7 bc 00 fc 	subeq	r12,-4
80007626:	f4 08 17 00 	moveq	r8,r10
8000762a:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000762e:	f0 0a 16 02 	lsr	r10,r8,0x2
80007632:	58 0b       	cp.w	r11,0
80007634:	f7 bc 00 fe 	subeq	r12,-2
80007638:	f4 08 17 00 	moveq	r8,r10
8000763c:	ed b8 00 00 	bld	r8,0x0
80007640:	c0 60       	breq	8000764c <__lo0bits+0x8a>
80007642:	a1 98       	lsr	r8,0x1
80007644:	c0 31       	brne	8000764a <__lo0bits+0x88>
80007646:	32 0c       	mov	r12,32
80007648:	5e fc       	retal	r12
8000764a:	2f fc       	sub	r12,-1
8000764c:	93 08       	st.w	r9[0x0],r8
8000764e:	5e fc       	retal	r12

80007650 <__mcmp>:
80007650:	d4 01       	pushm	lr
80007652:	18 98       	mov	r8,r12
80007654:	76 49       	ld.w	r9,r11[0x10]
80007656:	78 4c       	ld.w	r12,r12[0x10]
80007658:	12 1c       	sub	r12,r9
8000765a:	c1 31       	brne	80007680 <__mcmp+0x30>
8000765c:	2f b9       	sub	r9,-5
8000765e:	a3 69       	lsl	r9,0x2
80007660:	12 0b       	add	r11,r9
80007662:	f0 09 00 09 	add	r9,r8,r9
80007666:	2e c8       	sub	r8,-20
80007668:	13 4e       	ld.w	lr,--r9
8000766a:	17 4a       	ld.w	r10,--r11
8000766c:	14 3e       	cp.w	lr,r10
8000766e:	c0 60       	breq	8000767a <__mcmp+0x2a>
80007670:	f9 bc 03 ff 	movlo	r12,-1
80007674:	f9 bc 02 01 	movhs	r12,1
80007678:	d8 02       	popm	pc
8000767a:	10 39       	cp.w	r9,r8
8000767c:	fe 9b ff f6 	brhi	80007668 <__mcmp+0x18>
80007680:	d8 02       	popm	pc
80007682:	d7 03       	nop

80007684 <_Bfree>:
80007684:	d4 21       	pushm	r4-r7,lr
80007686:	18 97       	mov	r7,r12
80007688:	16 95       	mov	r5,r11
8000768a:	78 96       	ld.w	r6,r12[0x24]
8000768c:	58 06       	cp.w	r6,0
8000768e:	c0 91       	brne	800076a0 <_Bfree+0x1c>
80007690:	31 0c       	mov	r12,16
80007692:	fe b0 fd 15 	rcall	800070bc <malloc>
80007696:	99 36       	st.w	r12[0xc],r6
80007698:	8f 9c       	st.w	r7[0x24],r12
8000769a:	99 16       	st.w	r12[0x4],r6
8000769c:	99 26       	st.w	r12[0x8],r6
8000769e:	99 06       	st.w	r12[0x0],r6
800076a0:	58 05       	cp.w	r5,0
800076a2:	c0 90       	breq	800076b4 <_Bfree+0x30>
800076a4:	6a 19       	ld.w	r9,r5[0x4]
800076a6:	6e 98       	ld.w	r8,r7[0x24]
800076a8:	70 38       	ld.w	r8,r8[0xc]
800076aa:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800076ae:	8b 0a       	st.w	r5[0x0],r10
800076b0:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800076b4:	d8 22       	popm	r4-r7,pc
800076b6:	d7 03       	nop

800076b8 <_Balloc>:
800076b8:	d4 21       	pushm	r4-r7,lr
800076ba:	18 97       	mov	r7,r12
800076bc:	16 96       	mov	r6,r11
800076be:	78 95       	ld.w	r5,r12[0x24]
800076c0:	58 05       	cp.w	r5,0
800076c2:	c0 91       	brne	800076d4 <_Balloc+0x1c>
800076c4:	31 0c       	mov	r12,16
800076c6:	fe b0 fc fb 	rcall	800070bc <malloc>
800076ca:	99 35       	st.w	r12[0xc],r5
800076cc:	8f 9c       	st.w	r7[0x24],r12
800076ce:	99 15       	st.w	r12[0x4],r5
800076d0:	99 25       	st.w	r12[0x8],r5
800076d2:	99 05       	st.w	r12[0x0],r5
800076d4:	6e 95       	ld.w	r5,r7[0x24]
800076d6:	6a 38       	ld.w	r8,r5[0xc]
800076d8:	58 08       	cp.w	r8,0
800076da:	c0 b1       	brne	800076f0 <_Balloc+0x38>
800076dc:	31 0a       	mov	r10,16
800076de:	30 4b       	mov	r11,4
800076e0:	0e 9c       	mov	r12,r7
800076e2:	e0 a0 04 93 	rcall	80008008 <_calloc_r>
800076e6:	8b 3c       	st.w	r5[0xc],r12
800076e8:	6e 98       	ld.w	r8,r7[0x24]
800076ea:	70 3c       	ld.w	r12,r8[0xc]
800076ec:	58 0c       	cp.w	r12,0
800076ee:	c1 b0       	breq	80007724 <_Balloc+0x6c>
800076f0:	6e 98       	ld.w	r8,r7[0x24]
800076f2:	70 38       	ld.w	r8,r8[0xc]
800076f4:	f0 06 00 28 	add	r8,r8,r6<<0x2
800076f8:	70 0c       	ld.w	r12,r8[0x0]
800076fa:	58 0c       	cp.w	r12,0
800076fc:	c0 40       	breq	80007704 <_Balloc+0x4c>
800076fe:	78 09       	ld.w	r9,r12[0x0]
80007700:	91 09       	st.w	r8[0x0],r9
80007702:	c0 e8       	rjmp	8000771e <_Balloc+0x66>
80007704:	0e 9c       	mov	r12,r7
80007706:	30 17       	mov	r7,1
80007708:	0e 9b       	mov	r11,r7
8000770a:	ee 06 09 47 	lsl	r7,r7,r6
8000770e:	ee ca ff fb 	sub	r10,r7,-5
80007712:	a3 6a       	lsl	r10,0x2
80007714:	e0 a0 04 7a 	rcall	80008008 <_calloc_r>
80007718:	c0 60       	breq	80007724 <_Balloc+0x6c>
8000771a:	99 16       	st.w	r12[0x4],r6
8000771c:	99 27       	st.w	r12[0x8],r7
8000771e:	30 08       	mov	r8,0
80007720:	99 38       	st.w	r12[0xc],r8
80007722:	99 48       	st.w	r12[0x10],r8
80007724:	d8 22       	popm	r4-r7,pc
80007726:	d7 03       	nop

80007728 <__d2b>:
80007728:	d4 31       	pushm	r0-r7,lr
8000772a:	20 2d       	sub	sp,8
8000772c:	16 93       	mov	r3,r11
8000772e:	12 96       	mov	r6,r9
80007730:	10 95       	mov	r5,r8
80007732:	14 92       	mov	r2,r10
80007734:	30 1b       	mov	r11,1
80007736:	cc 1f       	rcall	800076b8 <_Balloc>
80007738:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000773c:	50 09       	stdsp	sp[0x0],r9
8000773e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007742:	b5 a9       	sbr	r9,0x14
80007744:	f0 01 16 14 	lsr	r1,r8,0x14
80007748:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000774c:	18 94       	mov	r4,r12
8000774e:	58 02       	cp.w	r2,0
80007750:	c1 d0       	breq	8000778a <__d2b+0x62>
80007752:	fa cc ff f8 	sub	r12,sp,-8
80007756:	18 d2       	st.w	--r12,r2
80007758:	c3 5f       	rcall	800075c2 <__lo0bits>
8000775a:	40 18       	lddsp	r8,sp[0x4]
8000775c:	c0 d0       	breq	80007776 <__d2b+0x4e>
8000775e:	40 09       	lddsp	r9,sp[0x0]
80007760:	f8 0a 11 20 	rsub	r10,r12,32
80007764:	f2 0a 09 4a 	lsl	r10,r9,r10
80007768:	f5 e8 10 08 	or	r8,r10,r8
8000776c:	89 58       	st.w	r4[0x14],r8
8000776e:	f2 0c 0a 49 	lsr	r9,r9,r12
80007772:	50 09       	stdsp	sp[0x0],r9
80007774:	c0 28       	rjmp	80007778 <__d2b+0x50>
80007776:	89 58       	st.w	r4[0x14],r8
80007778:	40 08       	lddsp	r8,sp[0x0]
8000777a:	58 08       	cp.w	r8,0
8000777c:	f9 b3 01 02 	movne	r3,2
80007780:	f9 b3 00 01 	moveq	r3,1
80007784:	89 68       	st.w	r4[0x18],r8
80007786:	89 43       	st.w	r4[0x10],r3
80007788:	c0 88       	rjmp	80007798 <__d2b+0x70>
8000778a:	1a 9c       	mov	r12,sp
8000778c:	c1 bf       	rcall	800075c2 <__lo0bits>
8000778e:	30 13       	mov	r3,1
80007790:	40 08       	lddsp	r8,sp[0x0]
80007792:	2e 0c       	sub	r12,-32
80007794:	89 43       	st.w	r4[0x10],r3
80007796:	89 58       	st.w	r4[0x14],r8
80007798:	58 01       	cp.w	r1,0
8000779a:	c0 90       	breq	800077ac <__d2b+0x84>
8000779c:	e2 c1 04 33 	sub	r1,r1,1075
800077a0:	18 01       	add	r1,r12
800077a2:	8d 01       	st.w	r6[0x0],r1
800077a4:	f8 0c 11 35 	rsub	r12,r12,53
800077a8:	8b 0c       	st.w	r5[0x0],r12
800077aa:	c0 c8       	rjmp	800077c2 <__d2b+0x9a>
800077ac:	e6 c8 ff fc 	sub	r8,r3,-4
800077b0:	f8 cc 04 32 	sub	r12,r12,1074
800077b4:	a5 73       	lsl	r3,0x5
800077b6:	8d 0c       	st.w	r6[0x0],r12
800077b8:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800077bc:	cd 3e       	rcall	80007562 <__hi0bits>
800077be:	18 13       	sub	r3,r12
800077c0:	8b 03       	st.w	r5[0x0],r3
800077c2:	08 9c       	mov	r12,r4
800077c4:	2f ed       	sub	sp,-8
800077c6:	d8 32       	popm	r0-r7,pc

800077c8 <__mdiff>:
800077c8:	d4 31       	pushm	r0-r7,lr
800077ca:	74 48       	ld.w	r8,r10[0x10]
800077cc:	76 45       	ld.w	r5,r11[0x10]
800077ce:	16 97       	mov	r7,r11
800077d0:	14 96       	mov	r6,r10
800077d2:	10 15       	sub	r5,r8
800077d4:	c1 31       	brne	800077fa <__mdiff+0x32>
800077d6:	2f b8       	sub	r8,-5
800077d8:	ee ce ff ec 	sub	lr,r7,-20
800077dc:	a3 68       	lsl	r8,0x2
800077de:	f4 08 00 0b 	add	r11,r10,r8
800077e2:	ee 08 00 08 	add	r8,r7,r8
800077e6:	11 4a       	ld.w	r10,--r8
800077e8:	17 49       	ld.w	r9,--r11
800077ea:	12 3a       	cp.w	r10,r9
800077ec:	c0 30       	breq	800077f2 <__mdiff+0x2a>
800077ee:	c0 e2       	brcc	8000780a <__mdiff+0x42>
800077f0:	c0 78       	rjmp	800077fe <__mdiff+0x36>
800077f2:	1c 38       	cp.w	r8,lr
800077f4:	fe 9b ff f9 	brhi	800077e6 <__mdiff+0x1e>
800077f8:	c4 98       	rjmp	8000788a <__mdiff+0xc2>
800077fa:	58 05       	cp.w	r5,0
800077fc:	c0 64       	brge	80007808 <__mdiff+0x40>
800077fe:	0e 98       	mov	r8,r7
80007800:	30 15       	mov	r5,1
80007802:	0c 97       	mov	r7,r6
80007804:	10 96       	mov	r6,r8
80007806:	c0 28       	rjmp	8000780a <__mdiff+0x42>
80007808:	30 05       	mov	r5,0
8000780a:	6e 1b       	ld.w	r11,r7[0x4]
8000780c:	c5 6f       	rcall	800076b8 <_Balloc>
8000780e:	6e 49       	ld.w	r9,r7[0x10]
80007810:	6c 44       	ld.w	r4,r6[0x10]
80007812:	99 35       	st.w	r12[0xc],r5
80007814:	2f b4       	sub	r4,-5
80007816:	f2 c5 ff fb 	sub	r5,r9,-5
8000781a:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000781e:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007822:	2e c6       	sub	r6,-20
80007824:	2e c7       	sub	r7,-20
80007826:	f8 c8 ff ec 	sub	r8,r12,-20
8000782a:	30 0a       	mov	r10,0
8000782c:	0f 0e       	ld.w	lr,r7++
8000782e:	0d 0b       	ld.w	r11,r6++
80007830:	fc 02 16 10 	lsr	r2,lr,0x10
80007834:	f6 03 16 10 	lsr	r3,r11,0x10
80007838:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000783c:	e4 03 01 03 	sub	r3,r2,r3
80007840:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007844:	fc 0b 01 0b 	sub	r11,lr,r11
80007848:	f6 0a 00 0a 	add	r10,r11,r10
8000784c:	b0 1a       	st.h	r8[0x2],r10
8000784e:	b1 4a       	asr	r10,0x10
80007850:	e6 0a 00 0a 	add	r10,r3,r10
80007854:	b0 0a       	st.h	r8[0x0],r10
80007856:	2f c8       	sub	r8,-4
80007858:	b1 4a       	asr	r10,0x10
8000785a:	08 36       	cp.w	r6,r4
8000785c:	ce 83       	brcs	8000782c <__mdiff+0x64>
8000785e:	c0 d8       	rjmp	80007878 <__mdiff+0xb0>
80007860:	0f 0b       	ld.w	r11,r7++
80007862:	f6 0e 16 10 	lsr	lr,r11,0x10
80007866:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000786a:	16 0a       	add	r10,r11
8000786c:	b0 1a       	st.h	r8[0x2],r10
8000786e:	b1 4a       	asr	r10,0x10
80007870:	1c 0a       	add	r10,lr
80007872:	b0 0a       	st.h	r8[0x0],r10
80007874:	2f c8       	sub	r8,-4
80007876:	b1 4a       	asr	r10,0x10
80007878:	0a 37       	cp.w	r7,r5
8000787a:	cf 33       	brcs	80007860 <__mdiff+0x98>
8000787c:	c0 28       	rjmp	80007880 <__mdiff+0xb8>
8000787e:	20 19       	sub	r9,1
80007880:	11 4a       	ld.w	r10,--r8
80007882:	58 0a       	cp.w	r10,0
80007884:	cf d0       	breq	8000787e <__mdiff+0xb6>
80007886:	99 49       	st.w	r12[0x10],r9
80007888:	d8 32       	popm	r0-r7,pc
8000788a:	30 0b       	mov	r11,0
8000788c:	c1 6f       	rcall	800076b8 <_Balloc>
8000788e:	30 18       	mov	r8,1
80007890:	99 48       	st.w	r12[0x10],r8
80007892:	30 08       	mov	r8,0
80007894:	99 58       	st.w	r12[0x14],r8
80007896:	d8 32       	popm	r0-r7,pc

80007898 <__lshift>:
80007898:	d4 31       	pushm	r0-r7,lr
8000789a:	16 97       	mov	r7,r11
8000789c:	76 46       	ld.w	r6,r11[0x10]
8000789e:	f4 02 14 05 	asr	r2,r10,0x5
800078a2:	2f f6       	sub	r6,-1
800078a4:	14 93       	mov	r3,r10
800078a6:	18 94       	mov	r4,r12
800078a8:	04 06       	add	r6,r2
800078aa:	76 1b       	ld.w	r11,r11[0x4]
800078ac:	6e 28       	ld.w	r8,r7[0x8]
800078ae:	c0 38       	rjmp	800078b4 <__lshift+0x1c>
800078b0:	2f fb       	sub	r11,-1
800078b2:	a1 78       	lsl	r8,0x1
800078b4:	10 36       	cp.w	r6,r8
800078b6:	fe 99 ff fd 	brgt	800078b0 <__lshift+0x18>
800078ba:	08 9c       	mov	r12,r4
800078bc:	cf ee       	rcall	800076b8 <_Balloc>
800078be:	30 09       	mov	r9,0
800078c0:	18 95       	mov	r5,r12
800078c2:	f8 c8 ff ec 	sub	r8,r12,-20
800078c6:	12 9a       	mov	r10,r9
800078c8:	c0 38       	rjmp	800078ce <__lshift+0x36>
800078ca:	10 aa       	st.w	r8++,r10
800078cc:	2f f9       	sub	r9,-1
800078ce:	04 39       	cp.w	r9,r2
800078d0:	cf d5       	brlt	800078ca <__lshift+0x32>
800078d2:	6e 4b       	ld.w	r11,r7[0x10]
800078d4:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800078d8:	2f bb       	sub	r11,-5
800078da:	ee c9 ff ec 	sub	r9,r7,-20
800078de:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800078e2:	58 03       	cp.w	r3,0
800078e4:	c1 30       	breq	8000790a <__lshift+0x72>
800078e6:	e6 0c 11 20 	rsub	r12,r3,32
800078ea:	30 0a       	mov	r10,0
800078ec:	72 02       	ld.w	r2,r9[0x0]
800078ee:	e4 03 09 42 	lsl	r2,r2,r3
800078f2:	04 4a       	or	r10,r2
800078f4:	10 aa       	st.w	r8++,r10
800078f6:	13 0a       	ld.w	r10,r9++
800078f8:	f4 0c 0a 4a 	lsr	r10,r10,r12
800078fc:	16 39       	cp.w	r9,r11
800078fe:	cf 73       	brcs	800078ec <__lshift+0x54>
80007900:	91 0a       	st.w	r8[0x0],r10
80007902:	58 0a       	cp.w	r10,0
80007904:	c0 70       	breq	80007912 <__lshift+0x7a>
80007906:	2f f6       	sub	r6,-1
80007908:	c0 58       	rjmp	80007912 <__lshift+0x7a>
8000790a:	13 0a       	ld.w	r10,r9++
8000790c:	10 aa       	st.w	r8++,r10
8000790e:	16 39       	cp.w	r9,r11
80007910:	cf d3       	brcs	8000790a <__lshift+0x72>
80007912:	08 9c       	mov	r12,r4
80007914:	20 16       	sub	r6,1
80007916:	0e 9b       	mov	r11,r7
80007918:	8b 46       	st.w	r5[0x10],r6
8000791a:	cb 5e       	rcall	80007684 <_Bfree>
8000791c:	0a 9c       	mov	r12,r5
8000791e:	d8 32       	popm	r0-r7,pc

80007920 <__multiply>:
80007920:	d4 31       	pushm	r0-r7,lr
80007922:	20 2d       	sub	sp,8
80007924:	76 49       	ld.w	r9,r11[0x10]
80007926:	74 48       	ld.w	r8,r10[0x10]
80007928:	16 96       	mov	r6,r11
8000792a:	14 95       	mov	r5,r10
8000792c:	10 39       	cp.w	r9,r8
8000792e:	ec 08 17 50 	movlt	r8,r6
80007932:	ea 06 17 50 	movlt	r6,r5
80007936:	f0 05 17 50 	movlt	r5,r8
8000793a:	6c 28       	ld.w	r8,r6[0x8]
8000793c:	76 43       	ld.w	r3,r11[0x10]
8000793e:	74 42       	ld.w	r2,r10[0x10]
80007940:	76 1b       	ld.w	r11,r11[0x4]
80007942:	e4 03 00 07 	add	r7,r2,r3
80007946:	10 37       	cp.w	r7,r8
80007948:	f7 bb 09 ff 	subgt	r11,-1
8000794c:	cb 6e       	rcall	800076b8 <_Balloc>
8000794e:	ee c4 ff fb 	sub	r4,r7,-5
80007952:	f8 c9 ff ec 	sub	r9,r12,-20
80007956:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000795a:	30 0a       	mov	r10,0
8000795c:	12 98       	mov	r8,r9
8000795e:	c0 28       	rjmp	80007962 <__multiply+0x42>
80007960:	10 aa       	st.w	r8++,r10
80007962:	08 38       	cp.w	r8,r4
80007964:	cf e3       	brcs	80007960 <__multiply+0x40>
80007966:	2f b3       	sub	r3,-5
80007968:	2f b2       	sub	r2,-5
8000796a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000796e:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007972:	ec cb ff ec 	sub	r11,r6,-20
80007976:	50 12       	stdsp	sp[0x4],r2
80007978:	ea ca ff ec 	sub	r10,r5,-20
8000797c:	c4 48       	rjmp	80007a04 <__multiply+0xe4>
8000797e:	94 95       	ld.uh	r5,r10[0x2]
80007980:	58 05       	cp.w	r5,0
80007982:	c2 00       	breq	800079c2 <__multiply+0xa2>
80007984:	12 98       	mov	r8,r9
80007986:	16 96       	mov	r6,r11
80007988:	30 0e       	mov	lr,0
8000798a:	50 09       	stdsp	sp[0x0],r9
8000798c:	0d 02       	ld.w	r2,r6++
8000798e:	e4 00 16 10 	lsr	r0,r2,0x10
80007992:	70 01       	ld.w	r1,r8[0x0]
80007994:	70 09       	ld.w	r9,r8[0x0]
80007996:	b1 81       	lsr	r1,0x10
80007998:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000799c:	e0 05 03 41 	mac	r1,r0,r5
800079a0:	ab 32       	mul	r2,r5
800079a2:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800079a6:	00 02       	add	r2,r0
800079a8:	e4 0e 00 0e 	add	lr,r2,lr
800079ac:	b0 1e       	st.h	r8[0x2],lr
800079ae:	b1 8e       	lsr	lr,0x10
800079b0:	1c 01       	add	r1,lr
800079b2:	b0 01       	st.h	r8[0x0],r1
800079b4:	e2 0e 16 10 	lsr	lr,r1,0x10
800079b8:	2f c8       	sub	r8,-4
800079ba:	06 36       	cp.w	r6,r3
800079bc:	ce 83       	brcs	8000798c <__multiply+0x6c>
800079be:	40 09       	lddsp	r9,sp[0x0]
800079c0:	91 0e       	st.w	r8[0x0],lr
800079c2:	94 86       	ld.uh	r6,r10[0x0]
800079c4:	58 06       	cp.w	r6,0
800079c6:	c1 d0       	breq	80007a00 <__multiply+0xe0>
800079c8:	72 02       	ld.w	r2,r9[0x0]
800079ca:	12 98       	mov	r8,r9
800079cc:	16 9e       	mov	lr,r11
800079ce:	30 05       	mov	r5,0
800079d0:	b0 12       	st.h	r8[0x2],r2
800079d2:	1d 01       	ld.w	r1,lr++
800079d4:	90 82       	ld.uh	r2,r8[0x0]
800079d6:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800079da:	ad 30       	mul	r0,r6
800079dc:	e0 02 00 02 	add	r2,r0,r2
800079e0:	e4 05 00 05 	add	r5,r2,r5
800079e4:	b0 05       	st.h	r8[0x0],r5
800079e6:	b1 85       	lsr	r5,0x10
800079e8:	b1 81       	lsr	r1,0x10
800079ea:	2f c8       	sub	r8,-4
800079ec:	ad 31       	mul	r1,r6
800079ee:	90 92       	ld.uh	r2,r8[0x2]
800079f0:	e2 02 00 02 	add	r2,r1,r2
800079f4:	0a 02       	add	r2,r5
800079f6:	e4 05 16 10 	lsr	r5,r2,0x10
800079fa:	06 3e       	cp.w	lr,r3
800079fc:	ce a3       	brcs	800079d0 <__multiply+0xb0>
800079fe:	91 02       	st.w	r8[0x0],r2
80007a00:	2f ca       	sub	r10,-4
80007a02:	2f c9       	sub	r9,-4
80007a04:	40 18       	lddsp	r8,sp[0x4]
80007a06:	10 3a       	cp.w	r10,r8
80007a08:	cb b3       	brcs	8000797e <__multiply+0x5e>
80007a0a:	c0 28       	rjmp	80007a0e <__multiply+0xee>
80007a0c:	20 17       	sub	r7,1
80007a0e:	58 07       	cp.w	r7,0
80007a10:	e0 8a 00 05 	brle	80007a1a <__multiply+0xfa>
80007a14:	09 48       	ld.w	r8,--r4
80007a16:	58 08       	cp.w	r8,0
80007a18:	cf a0       	breq	80007a0c <__multiply+0xec>
80007a1a:	99 47       	st.w	r12[0x10],r7
80007a1c:	2f ed       	sub	sp,-8
80007a1e:	d8 32       	popm	r0-r7,pc

80007a20 <__i2b>:
80007a20:	d4 21       	pushm	r4-r7,lr
80007a22:	16 97       	mov	r7,r11
80007a24:	30 1b       	mov	r11,1
80007a26:	c4 9e       	rcall	800076b8 <_Balloc>
80007a28:	30 19       	mov	r9,1
80007a2a:	99 57       	st.w	r12[0x14],r7
80007a2c:	99 49       	st.w	r12[0x10],r9
80007a2e:	d8 22       	popm	r4-r7,pc

80007a30 <__multadd>:
80007a30:	d4 31       	pushm	r0-r7,lr
80007a32:	30 08       	mov	r8,0
80007a34:	12 95       	mov	r5,r9
80007a36:	16 97       	mov	r7,r11
80007a38:	18 96       	mov	r6,r12
80007a3a:	76 44       	ld.w	r4,r11[0x10]
80007a3c:	f6 c9 ff ec 	sub	r9,r11,-20
80007a40:	72 0b       	ld.w	r11,r9[0x0]
80007a42:	f6 0c 16 10 	lsr	r12,r11,0x10
80007a46:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007a4a:	f4 0c 02 4c 	mul	r12,r10,r12
80007a4e:	f4 0b 03 45 	mac	r5,r10,r11
80007a52:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007a56:	b1 85       	lsr	r5,0x10
80007a58:	18 05       	add	r5,r12
80007a5a:	ea 0c 15 10 	lsl	r12,r5,0x10
80007a5e:	f8 0b 00 0b 	add	r11,r12,r11
80007a62:	12 ab       	st.w	r9++,r11
80007a64:	2f f8       	sub	r8,-1
80007a66:	b1 85       	lsr	r5,0x10
80007a68:	08 38       	cp.w	r8,r4
80007a6a:	ce b5       	brlt	80007a40 <__multadd+0x10>
80007a6c:	58 05       	cp.w	r5,0
80007a6e:	c1 c0       	breq	80007aa6 <__multadd+0x76>
80007a70:	6e 28       	ld.w	r8,r7[0x8]
80007a72:	10 34       	cp.w	r4,r8
80007a74:	c1 35       	brlt	80007a9a <__multadd+0x6a>
80007a76:	6e 1b       	ld.w	r11,r7[0x4]
80007a78:	0c 9c       	mov	r12,r6
80007a7a:	2f fb       	sub	r11,-1
80007a7c:	c1 ee       	rcall	800076b8 <_Balloc>
80007a7e:	6e 4a       	ld.w	r10,r7[0x10]
80007a80:	ee cb ff f4 	sub	r11,r7,-12
80007a84:	18 93       	mov	r3,r12
80007a86:	2f ea       	sub	r10,-2
80007a88:	2f 4c       	sub	r12,-12
80007a8a:	a3 6a       	lsl	r10,0x2
80007a8c:	fe b0 de 36 	rcall	800036f8 <memcpy>
80007a90:	0e 9b       	mov	r11,r7
80007a92:	0c 9c       	mov	r12,r6
80007a94:	fe b0 fd f8 	rcall	80007684 <_Bfree>
80007a98:	06 97       	mov	r7,r3
80007a9a:	e8 c8 ff ff 	sub	r8,r4,-1
80007a9e:	2f b4       	sub	r4,-5
80007aa0:	8f 48       	st.w	r7[0x10],r8
80007aa2:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007aa6:	0e 9c       	mov	r12,r7
80007aa8:	d8 32       	popm	r0-r7,pc
80007aaa:	d7 03       	nop

80007aac <__pow5mult>:
80007aac:	d4 31       	pushm	r0-r7,lr
80007aae:	14 96       	mov	r6,r10
80007ab0:	18 97       	mov	r7,r12
80007ab2:	16 94       	mov	r4,r11
80007ab4:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007ab8:	c0 90       	breq	80007aca <__pow5mult+0x1e>
80007aba:	20 18       	sub	r8,1
80007abc:	fe c9 e2 64 	sub	r9,pc,-7580
80007ac0:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007ac4:	30 09       	mov	r9,0
80007ac6:	cb 5f       	rcall	80007a30 <__multadd>
80007ac8:	18 94       	mov	r4,r12
80007aca:	a3 46       	asr	r6,0x2
80007acc:	c3 40       	breq	80007b34 <__pow5mult+0x88>
80007ace:	6e 95       	ld.w	r5,r7[0x24]
80007ad0:	58 05       	cp.w	r5,0
80007ad2:	c0 91       	brne	80007ae4 <__pow5mult+0x38>
80007ad4:	31 0c       	mov	r12,16
80007ad6:	fe b0 fa f3 	rcall	800070bc <malloc>
80007ada:	99 35       	st.w	r12[0xc],r5
80007adc:	8f 9c       	st.w	r7[0x24],r12
80007ade:	99 15       	st.w	r12[0x4],r5
80007ae0:	99 25       	st.w	r12[0x8],r5
80007ae2:	99 05       	st.w	r12[0x0],r5
80007ae4:	6e 93       	ld.w	r3,r7[0x24]
80007ae6:	66 25       	ld.w	r5,r3[0x8]
80007ae8:	58 05       	cp.w	r5,0
80007aea:	c0 c1       	brne	80007b02 <__pow5mult+0x56>
80007aec:	e0 6b 02 71 	mov	r11,625
80007af0:	0e 9c       	mov	r12,r7
80007af2:	c9 7f       	rcall	80007a20 <__i2b>
80007af4:	87 2c       	st.w	r3[0x8],r12
80007af6:	30 08       	mov	r8,0
80007af8:	18 95       	mov	r5,r12
80007afa:	99 08       	st.w	r12[0x0],r8
80007afc:	c0 38       	rjmp	80007b02 <__pow5mult+0x56>
80007afe:	06 9c       	mov	r12,r3
80007b00:	18 95       	mov	r5,r12
80007b02:	ed b6 00 00 	bld	r6,0x0
80007b06:	c0 b1       	brne	80007b1c <__pow5mult+0x70>
80007b08:	08 9b       	mov	r11,r4
80007b0a:	0a 9a       	mov	r10,r5
80007b0c:	0e 9c       	mov	r12,r7
80007b0e:	c0 9f       	rcall	80007920 <__multiply>
80007b10:	08 9b       	mov	r11,r4
80007b12:	18 93       	mov	r3,r12
80007b14:	0e 9c       	mov	r12,r7
80007b16:	06 94       	mov	r4,r3
80007b18:	fe b0 fd b6 	rcall	80007684 <_Bfree>
80007b1c:	a1 56       	asr	r6,0x1
80007b1e:	c0 b0       	breq	80007b34 <__pow5mult+0x88>
80007b20:	6a 03       	ld.w	r3,r5[0x0]
80007b22:	58 03       	cp.w	r3,0
80007b24:	ce d1       	brne	80007afe <__pow5mult+0x52>
80007b26:	0a 9a       	mov	r10,r5
80007b28:	0a 9b       	mov	r11,r5
80007b2a:	0e 9c       	mov	r12,r7
80007b2c:	cf ae       	rcall	80007920 <__multiply>
80007b2e:	8b 0c       	st.w	r5[0x0],r12
80007b30:	99 03       	st.w	r12[0x0],r3
80007b32:	ce 7b       	rjmp	80007b00 <__pow5mult+0x54>
80007b34:	08 9c       	mov	r12,r4
80007b36:	d8 32       	popm	r0-r7,pc

80007b38 <_realloc_r>:
80007b38:	d4 31       	pushm	r0-r7,lr
80007b3a:	20 1d       	sub	sp,4
80007b3c:	16 94       	mov	r4,r11
80007b3e:	18 92       	mov	r2,r12
80007b40:	14 9b       	mov	r11,r10
80007b42:	58 04       	cp.w	r4,0
80007b44:	c0 51       	brne	80007b4e <_realloc_r+0x16>
80007b46:	fe b0 fa c3 	rcall	800070cc <_malloc_r>
80007b4a:	18 95       	mov	r5,r12
80007b4c:	c5 39       	rjmp	80007df2 <_realloc_r+0x2ba>
80007b4e:	50 0a       	stdsp	sp[0x0],r10
80007b50:	fe b0 fd 07 	rcall	8000755e <__malloc_lock>
80007b54:	40 0b       	lddsp	r11,sp[0x0]
80007b56:	f6 c8 ff f5 	sub	r8,r11,-11
80007b5a:	e8 c1 00 08 	sub	r1,r4,8
80007b5e:	10 96       	mov	r6,r8
80007b60:	62 1c       	ld.w	r12,r1[0x4]
80007b62:	e0 16 ff f8 	andl	r6,0xfff8
80007b66:	59 68       	cp.w	r8,22
80007b68:	f9 b6 08 10 	movls	r6,16
80007b6c:	16 36       	cp.w	r6,r11
80007b6e:	5f 38       	srlo	r8
80007b70:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007b74:	c0 50       	breq	80007b7e <_realloc_r+0x46>
80007b76:	30 c8       	mov	r8,12
80007b78:	30 05       	mov	r5,0
80007b7a:	85 38       	st.w	r2[0xc],r8
80007b7c:	c3 b9       	rjmp	80007df2 <_realloc_r+0x2ba>
80007b7e:	18 90       	mov	r0,r12
80007b80:	e0 10 ff fc 	andl	r0,0xfffc
80007b84:	0c 30       	cp.w	r0,r6
80007b86:	e0 84 01 0b 	brge	80007d9c <_realloc_r+0x264>
80007b8a:	e0 68 01 04 	mov	r8,260
80007b8e:	e2 00 00 09 	add	r9,r1,r0
80007b92:	70 25       	ld.w	r5,r8[0x8]
80007b94:	0a 39       	cp.w	r9,r5
80007b96:	c0 90       	breq	80007ba8 <_realloc_r+0x70>
80007b98:	72 1a       	ld.w	r10,r9[0x4]
80007b9a:	a1 ca       	cbr	r10,0x0
80007b9c:	f2 0a 00 0a 	add	r10,r9,r10
80007ba0:	74 1a       	ld.w	r10,r10[0x4]
80007ba2:	ed ba 00 00 	bld	r10,0x0
80007ba6:	c2 20       	breq	80007bea <_realloc_r+0xb2>
80007ba8:	72 1a       	ld.w	r10,r9[0x4]
80007baa:	e0 1a ff fc 	andl	r10,0xfffc
80007bae:	f4 00 00 03 	add	r3,r10,r0
80007bb2:	0a 39       	cp.w	r9,r5
80007bb4:	c1 31       	brne	80007bda <_realloc_r+0xa2>
80007bb6:	ec c7 ff f0 	sub	r7,r6,-16
80007bba:	0e 33       	cp.w	r3,r7
80007bbc:	c1 95       	brlt	80007bee <_realloc_r+0xb6>
80007bbe:	e2 06 00 09 	add	r9,r1,r6
80007bc2:	0c 13       	sub	r3,r6
80007bc4:	a1 a3       	sbr	r3,0x0
80007bc6:	93 13       	st.w	r9[0x4],r3
80007bc8:	91 29       	st.w	r8[0x8],r9
80007bca:	04 9c       	mov	r12,r2
80007bcc:	62 18       	ld.w	r8,r1[0x4]
80007bce:	08 95       	mov	r5,r4
80007bd0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007bd4:	10 46       	or	r6,r8
80007bd6:	83 16       	st.w	r1[0x4],r6
80007bd8:	c0 b9       	rjmp	80007dee <_realloc_r+0x2b6>
80007bda:	0c 33       	cp.w	r3,r6
80007bdc:	c0 95       	brlt	80007bee <_realloc_r+0xb6>
80007bde:	72 28       	ld.w	r8,r9[0x8]
80007be0:	02 97       	mov	r7,r1
80007be2:	72 39       	ld.w	r9,r9[0xc]
80007be4:	93 28       	st.w	r9[0x8],r8
80007be6:	91 39       	st.w	r8[0xc],r9
80007be8:	cd c8       	rjmp	80007da0 <_realloc_r+0x268>
80007bea:	30 0a       	mov	r10,0
80007bec:	14 99       	mov	r9,r10
80007bee:	ed bc 00 00 	bld	r12,0x0
80007bf2:	e0 80 00 95 	breq	80007d1c <_realloc_r+0x1e4>
80007bf6:	62 07       	ld.w	r7,r1[0x0]
80007bf8:	e2 07 01 07 	sub	r7,r1,r7
80007bfc:	6e 1c       	ld.w	r12,r7[0x4]
80007bfe:	e0 1c ff fc 	andl	r12,0xfffc
80007c02:	58 09       	cp.w	r9,0
80007c04:	c5 60       	breq	80007cb0 <_realloc_r+0x178>
80007c06:	f8 00 00 03 	add	r3,r12,r0
80007c0a:	0a 39       	cp.w	r9,r5
80007c0c:	c4 81       	brne	80007c9c <_realloc_r+0x164>
80007c0e:	14 03       	add	r3,r10
80007c10:	ec c9 ff f0 	sub	r9,r6,-16
80007c14:	12 33       	cp.w	r3,r9
80007c16:	c4 d5       	brlt	80007cb0 <_realloc_r+0x178>
80007c18:	6e 3a       	ld.w	r10,r7[0xc]
80007c1a:	6e 29       	ld.w	r9,r7[0x8]
80007c1c:	95 29       	st.w	r10[0x8],r9
80007c1e:	93 3a       	st.w	r9[0xc],r10
80007c20:	ee c5 ff f8 	sub	r5,r7,-8
80007c24:	e0 ca 00 04 	sub	r10,r0,4
80007c28:	e0 4a 00 24 	cp.w	r10,36
80007c2c:	e0 8b 00 25 	brhi	80007c76 <_realloc_r+0x13e>
80007c30:	0a 99       	mov	r9,r5
80007c32:	59 3a       	cp.w	r10,19
80007c34:	e0 88 00 1a 	brls	80007c68 <_realloc_r+0x130>
80007c38:	09 09       	ld.w	r9,r4++
80007c3a:	8b 09       	st.w	r5[0x0],r9
80007c3c:	09 09       	ld.w	r9,r4++
80007c3e:	8f 39       	st.w	r7[0xc],r9
80007c40:	ee c9 ff f0 	sub	r9,r7,-16
80007c44:	59 ba       	cp.w	r10,27
80007c46:	e0 88 00 11 	brls	80007c68 <_realloc_r+0x130>
80007c4a:	09 0b       	ld.w	r11,r4++
80007c4c:	93 0b       	st.w	r9[0x0],r11
80007c4e:	09 09       	ld.w	r9,r4++
80007c50:	8f 59       	st.w	r7[0x14],r9
80007c52:	ee c9 ff e8 	sub	r9,r7,-24
80007c56:	e0 4a 00 24 	cp.w	r10,36
80007c5a:	c0 71       	brne	80007c68 <_realloc_r+0x130>
80007c5c:	09 0a       	ld.w	r10,r4++
80007c5e:	93 0a       	st.w	r9[0x0],r10
80007c60:	ee c9 ff e0 	sub	r9,r7,-32
80007c64:	09 0a       	ld.w	r10,r4++
80007c66:	8f 7a       	st.w	r7[0x1c],r10
80007c68:	09 0a       	ld.w	r10,r4++
80007c6a:	12 aa       	st.w	r9++,r10
80007c6c:	68 0a       	ld.w	r10,r4[0x0]
80007c6e:	93 0a       	st.w	r9[0x0],r10
80007c70:	68 1a       	ld.w	r10,r4[0x4]
80007c72:	93 1a       	st.w	r9[0x4],r10
80007c74:	c0 78       	rjmp	80007c82 <_realloc_r+0x14a>
80007c76:	50 08       	stdsp	sp[0x0],r8
80007c78:	08 9b       	mov	r11,r4
80007c7a:	0a 9c       	mov	r12,r5
80007c7c:	fe b0 fc 4b 	rcall	80007512 <memmove>
80007c80:	40 08       	lddsp	r8,sp[0x0]
80007c82:	ee 06 00 09 	add	r9,r7,r6
80007c86:	0c 13       	sub	r3,r6
80007c88:	a1 a3       	sbr	r3,0x0
80007c8a:	93 13       	st.w	r9[0x4],r3
80007c8c:	91 29       	st.w	r8[0x8],r9
80007c8e:	04 9c       	mov	r12,r2
80007c90:	6e 18       	ld.w	r8,r7[0x4]
80007c92:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007c96:	10 46       	or	r6,r8
80007c98:	8f 16       	st.w	r7[0x4],r6
80007c9a:	ca a8       	rjmp	80007dee <_realloc_r+0x2b6>
80007c9c:	14 03       	add	r3,r10
80007c9e:	0c 33       	cp.w	r3,r6
80007ca0:	c0 85       	brlt	80007cb0 <_realloc_r+0x178>
80007ca2:	72 28       	ld.w	r8,r9[0x8]
80007ca4:	72 39       	ld.w	r9,r9[0xc]
80007ca6:	93 28       	st.w	r9[0x8],r8
80007ca8:	91 39       	st.w	r8[0xc],r9
80007caa:	6e 28       	ld.w	r8,r7[0x8]
80007cac:	6e 39       	ld.w	r9,r7[0xc]
80007cae:	c0 78       	rjmp	80007cbc <_realloc_r+0x184>
80007cb0:	f8 00 00 03 	add	r3,r12,r0
80007cb4:	0c 33       	cp.w	r3,r6
80007cb6:	c3 35       	brlt	80007d1c <_realloc_r+0x1e4>
80007cb8:	6e 39       	ld.w	r9,r7[0xc]
80007cba:	6e 28       	ld.w	r8,r7[0x8]
80007cbc:	93 28       	st.w	r9[0x8],r8
80007cbe:	91 39       	st.w	r8[0xc],r9
80007cc0:	e0 ca 00 04 	sub	r10,r0,4
80007cc4:	ee cc ff f8 	sub	r12,r7,-8
80007cc8:	e0 4a 00 24 	cp.w	r10,36
80007ccc:	e0 8b 00 24 	brhi	80007d14 <_realloc_r+0x1dc>
80007cd0:	59 3a       	cp.w	r10,19
80007cd2:	e0 88 00 1a 	brls	80007d06 <_realloc_r+0x1ce>
80007cd6:	09 08       	ld.w	r8,r4++
80007cd8:	99 08       	st.w	r12[0x0],r8
80007cda:	09 08       	ld.w	r8,r4++
80007cdc:	8f 38       	st.w	r7[0xc],r8
80007cde:	ee cc ff f0 	sub	r12,r7,-16
80007ce2:	59 ba       	cp.w	r10,27
80007ce4:	e0 88 00 11 	brls	80007d06 <_realloc_r+0x1ce>
80007ce8:	09 08       	ld.w	r8,r4++
80007cea:	99 08       	st.w	r12[0x0],r8
80007cec:	09 08       	ld.w	r8,r4++
80007cee:	8f 58       	st.w	r7[0x14],r8
80007cf0:	ee cc ff e8 	sub	r12,r7,-24
80007cf4:	e0 4a 00 24 	cp.w	r10,36
80007cf8:	c0 71       	brne	80007d06 <_realloc_r+0x1ce>
80007cfa:	09 08       	ld.w	r8,r4++
80007cfc:	99 08       	st.w	r12[0x0],r8
80007cfe:	ee cc ff e0 	sub	r12,r7,-32
80007d02:	09 08       	ld.w	r8,r4++
80007d04:	8f 78       	st.w	r7[0x1c],r8
80007d06:	09 08       	ld.w	r8,r4++
80007d08:	18 a8       	st.w	r12++,r8
80007d0a:	68 08       	ld.w	r8,r4[0x0]
80007d0c:	99 08       	st.w	r12[0x0],r8
80007d0e:	68 18       	ld.w	r8,r4[0x4]
80007d10:	99 18       	st.w	r12[0x4],r8
80007d12:	c4 78       	rjmp	80007da0 <_realloc_r+0x268>
80007d14:	08 9b       	mov	r11,r4
80007d16:	fe b0 fb fe 	rcall	80007512 <memmove>
80007d1a:	c4 38       	rjmp	80007da0 <_realloc_r+0x268>
80007d1c:	04 9c       	mov	r12,r2
80007d1e:	fe b0 f9 d7 	rcall	800070cc <_malloc_r>
80007d22:	18 95       	mov	r5,r12
80007d24:	c3 a0       	breq	80007d98 <_realloc_r+0x260>
80007d26:	62 18       	ld.w	r8,r1[0x4]
80007d28:	f8 c9 00 08 	sub	r9,r12,8
80007d2c:	a1 c8       	cbr	r8,0x0
80007d2e:	e2 08 00 08 	add	r8,r1,r8
80007d32:	10 39       	cp.w	r9,r8
80007d34:	c0 71       	brne	80007d42 <_realloc_r+0x20a>
80007d36:	72 13       	ld.w	r3,r9[0x4]
80007d38:	02 97       	mov	r7,r1
80007d3a:	e0 13 ff fc 	andl	r3,0xfffc
80007d3e:	00 03       	add	r3,r0
80007d40:	c3 08       	rjmp	80007da0 <_realloc_r+0x268>
80007d42:	e0 ca 00 04 	sub	r10,r0,4
80007d46:	e0 4a 00 24 	cp.w	r10,36
80007d4a:	e0 8b 00 20 	brhi	80007d8a <_realloc_r+0x252>
80007d4e:	08 99       	mov	r9,r4
80007d50:	18 98       	mov	r8,r12
80007d52:	59 3a       	cp.w	r10,19
80007d54:	e0 88 00 14 	brls	80007d7c <_realloc_r+0x244>
80007d58:	13 0b       	ld.w	r11,r9++
80007d5a:	10 ab       	st.w	r8++,r11
80007d5c:	13 0b       	ld.w	r11,r9++
80007d5e:	10 ab       	st.w	r8++,r11
80007d60:	59 ba       	cp.w	r10,27
80007d62:	e0 88 00 0d 	brls	80007d7c <_realloc_r+0x244>
80007d66:	13 0b       	ld.w	r11,r9++
80007d68:	10 ab       	st.w	r8++,r11
80007d6a:	13 0b       	ld.w	r11,r9++
80007d6c:	10 ab       	st.w	r8++,r11
80007d6e:	e0 4a 00 24 	cp.w	r10,36
80007d72:	c0 51       	brne	80007d7c <_realloc_r+0x244>
80007d74:	13 0a       	ld.w	r10,r9++
80007d76:	10 aa       	st.w	r8++,r10
80007d78:	13 0a       	ld.w	r10,r9++
80007d7a:	10 aa       	st.w	r8++,r10
80007d7c:	13 0a       	ld.w	r10,r9++
80007d7e:	10 aa       	st.w	r8++,r10
80007d80:	72 0a       	ld.w	r10,r9[0x0]
80007d82:	91 0a       	st.w	r8[0x0],r10
80007d84:	72 19       	ld.w	r9,r9[0x4]
80007d86:	91 19       	st.w	r8[0x4],r9
80007d88:	c0 48       	rjmp	80007d90 <_realloc_r+0x258>
80007d8a:	08 9b       	mov	r11,r4
80007d8c:	fe b0 fb c3 	rcall	80007512 <memmove>
80007d90:	08 9b       	mov	r11,r4
80007d92:	04 9c       	mov	r12,r2
80007d94:	fe b0 f6 f6 	rcall	80006b80 <_free_r>
80007d98:	04 9c       	mov	r12,r2
80007d9a:	c2 a8       	rjmp	80007dee <_realloc_r+0x2b6>
80007d9c:	00 93       	mov	r3,r0
80007d9e:	02 97       	mov	r7,r1
80007da0:	e6 06 01 09 	sub	r9,r3,r6
80007da4:	6e 18       	ld.w	r8,r7[0x4]
80007da6:	58 f9       	cp.w	r9,15
80007da8:	e0 88 00 16 	brls	80007dd4 <_realloc_r+0x29c>
80007dac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007db0:	ed e8 10 08 	or	r8,r6,r8
80007db4:	8f 18       	st.w	r7[0x4],r8
80007db6:	12 98       	mov	r8,r9
80007db8:	a1 a8       	sbr	r8,0x0
80007dba:	ee 06 00 0b 	add	r11,r7,r6
80007dbe:	f6 09 00 09 	add	r9,r11,r9
80007dc2:	97 18       	st.w	r11[0x4],r8
80007dc4:	72 18       	ld.w	r8,r9[0x4]
80007dc6:	a1 a8       	sbr	r8,0x0
80007dc8:	2f 8b       	sub	r11,-8
80007dca:	93 18       	st.w	r9[0x4],r8
80007dcc:	04 9c       	mov	r12,r2
80007dce:	fe b0 f6 d9 	rcall	80006b80 <_free_r>
80007dd2:	c0 b8       	rjmp	80007de8 <_realloc_r+0x2b0>
80007dd4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007dd8:	e7 e8 10 08 	or	r8,r3,r8
80007ddc:	8f 18       	st.w	r7[0x4],r8
80007dde:	ee 03 00 03 	add	r3,r7,r3
80007de2:	66 18       	ld.w	r8,r3[0x4]
80007de4:	a1 a8       	sbr	r8,0x0
80007de6:	87 18       	st.w	r3[0x4],r8
80007de8:	04 9c       	mov	r12,r2
80007dea:	ee c5 ff f8 	sub	r5,r7,-8
80007dee:	fe b0 fb b9 	rcall	80007560 <__malloc_unlock>
80007df2:	0a 9c       	mov	r12,r5
80007df4:	2f fd       	sub	sp,-4
80007df6:	d8 32       	popm	r0-r7,pc

80007df8 <__isinfd>:
80007df8:	14 98       	mov	r8,r10
80007dfa:	fc 19 7f f0 	movh	r9,0x7ff0
80007dfe:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007e02:	f0 0b 11 00 	rsub	r11,r8,0
80007e06:	f7 e8 10 08 	or	r8,r11,r8
80007e0a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007e0e:	f2 08 01 08 	sub	r8,r9,r8
80007e12:	f0 0c 11 00 	rsub	r12,r8,0
80007e16:	f9 e8 10 08 	or	r8,r12,r8
80007e1a:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007e1e:	2f fc       	sub	r12,-1
80007e20:	5e fc       	retal	r12

80007e22 <__isnand>:
80007e22:	14 98       	mov	r8,r10
80007e24:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007e28:	f0 0c 11 00 	rsub	r12,r8,0
80007e2c:	10 4c       	or	r12,r8
80007e2e:	fc 18 7f f0 	movh	r8,0x7ff0
80007e32:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007e36:	f0 0c 01 0c 	sub	r12,r8,r12
80007e3a:	bf 9c       	lsr	r12,0x1f
80007e3c:	5e fc       	retal	r12
80007e3e:	d7 03       	nop

80007e40 <_sbrk_r>:
80007e40:	d4 21       	pushm	r4-r7,lr
80007e42:	30 08       	mov	r8,0
80007e44:	18 97       	mov	r7,r12
80007e46:	e0 66 06 70 	mov	r6,1648
80007e4a:	16 9c       	mov	r12,r11
80007e4c:	8d 08       	st.w	r6[0x0],r8
80007e4e:	ca fc       	rcall	80007fac <_sbrk>
80007e50:	5b fc       	cp.w	r12,-1
80007e52:	c0 51       	brne	80007e5c <_sbrk_r+0x1c>
80007e54:	6c 08       	ld.w	r8,r6[0x0]
80007e56:	58 08       	cp.w	r8,0
80007e58:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e5c:	d8 22       	popm	r4-r7,pc
80007e5e:	d7 03       	nop

80007e60 <__sclose>:
80007e60:	d4 01       	pushm	lr
80007e62:	96 7b       	ld.sh	r11,r11[0xe]
80007e64:	cf ec       	rcall	80008060 <_close_r>
80007e66:	d8 02       	popm	pc

80007e68 <__sseek>:
80007e68:	d4 21       	pushm	r4-r7,lr
80007e6a:	16 97       	mov	r7,r11
80007e6c:	96 7b       	ld.sh	r11,r11[0xe]
80007e6e:	c8 5d       	rcall	80008178 <_lseek_r>
80007e70:	8e 68       	ld.sh	r8,r7[0xc]
80007e72:	10 99       	mov	r9,r8
80007e74:	ad c8       	cbr	r8,0xc
80007e76:	ad a9       	sbr	r9,0xc
80007e78:	5b fc       	cp.w	r12,-1
80007e7a:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007e7e:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007e82:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007e86:	d8 22       	popm	r4-r7,pc

80007e88 <__swrite>:
80007e88:	d4 21       	pushm	r4-r7,lr
80007e8a:	96 68       	ld.sh	r8,r11[0xc]
80007e8c:	16 97       	mov	r7,r11
80007e8e:	14 95       	mov	r5,r10
80007e90:	12 94       	mov	r4,r9
80007e92:	e2 18 01 00 	andl	r8,0x100,COH
80007e96:	18 96       	mov	r6,r12
80007e98:	c0 50       	breq	80007ea2 <__swrite+0x1a>
80007e9a:	30 29       	mov	r9,2
80007e9c:	30 0a       	mov	r10,0
80007e9e:	96 7b       	ld.sh	r11,r11[0xe]
80007ea0:	c6 cd       	rcall	80008178 <_lseek_r>
80007ea2:	8e 68       	ld.sh	r8,r7[0xc]
80007ea4:	ad c8       	cbr	r8,0xc
80007ea6:	08 99       	mov	r9,r4
80007ea8:	0a 9a       	mov	r10,r5
80007eaa:	8e 7b       	ld.sh	r11,r7[0xe]
80007eac:	0c 9c       	mov	r12,r6
80007eae:	ae 68       	st.h	r7[0xc],r8
80007eb0:	c9 ac       	rcall	80007fe4 <_write_r>
80007eb2:	d8 22       	popm	r4-r7,pc

80007eb4 <__sread>:
80007eb4:	d4 21       	pushm	r4-r7,lr
80007eb6:	16 97       	mov	r7,r11
80007eb8:	96 7b       	ld.sh	r11,r11[0xe]
80007eba:	c7 1d       	rcall	8000819c <_read_r>
80007ebc:	c0 65       	brlt	80007ec8 <__sread+0x14>
80007ebe:	6f 58       	ld.w	r8,r7[0x54]
80007ec0:	18 08       	add	r8,r12
80007ec2:	ef 48 00 54 	st.w	r7[84],r8
80007ec6:	d8 22       	popm	r4-r7,pc
80007ec8:	8e 68       	ld.sh	r8,r7[0xc]
80007eca:	ad c8       	cbr	r8,0xc
80007ecc:	ae 68       	st.h	r7[0xc],r8
80007ece:	d8 22       	popm	r4-r7,pc

80007ed0 <strlen>:
80007ed0:	30 09       	mov	r9,0
80007ed2:	18 98       	mov	r8,r12
80007ed4:	c0 28       	rjmp	80007ed8 <strlen+0x8>
80007ed6:	2f f8       	sub	r8,-1
80007ed8:	11 8a       	ld.ub	r10,r8[0x0]
80007eda:	f2 0a 18 00 	cp.b	r10,r9
80007ede:	cf c1       	brne	80007ed6 <strlen+0x6>
80007ee0:	f0 0c 01 0c 	sub	r12,r8,r12
80007ee4:	5e fc       	retal	r12
80007ee6:	d7 03       	nop

80007ee8 <_close>:
80007ee8:	30 28       	mov	r8,2
80007eea:	d6 73       	breakpoint
80007eec:	3f fc       	mov	r12,-1
80007eee:	35 8b       	mov	r11,88
80007ef0:	58 0c       	cp.w	r12,0
80007ef2:	5e 4c       	retge	r12
80007ef4:	e0 6a 06 70 	mov	r10,1648
80007ef8:	95 0b       	st.w	r10[0x0],r11
80007efa:	5e fc       	retal	r12

80007efc <_lseek>:
80007efc:	30 58       	mov	r8,5
80007efe:	d6 73       	breakpoint
80007f00:	3f fc       	mov	r12,-1
80007f02:	35 8b       	mov	r11,88
80007f04:	58 0c       	cp.w	r12,0
80007f06:	5e 4c       	retge	r12
80007f08:	e0 6a 06 70 	mov	r10,1648
80007f0c:	95 0b       	st.w	r10[0x0],r11
80007f0e:	5e fc       	retal	r12

80007f10 <_read>:
80007f10:	30 38       	mov	r8,3
80007f12:	d6 73       	breakpoint
80007f14:	3f fc       	mov	r12,-1
80007f16:	35 8b       	mov	r11,88
80007f18:	58 0c       	cp.w	r12,0
80007f1a:	5e 4c       	retge	r12
80007f1c:	e0 6a 06 70 	mov	r10,1648
80007f20:	95 0b       	st.w	r10[0x0],r11
80007f22:	5e fc       	retal	r12

80007f24 <_write>:
80007f24:	30 48       	mov	r8,4
80007f26:	d6 73       	breakpoint
80007f28:	3f fc       	mov	r12,-1
80007f2a:	35 8b       	mov	r11,88
80007f2c:	58 0c       	cp.w	r12,0
80007f2e:	5e 4c       	retge	r12
80007f30:	e0 6a 06 70 	mov	r10,1648
80007f34:	95 0b       	st.w	r10[0x0],r11
80007f36:	5e fc       	retal	r12

80007f38 <isatty>:
80007f38:	30 b8       	mov	r8,11
80007f3a:	d6 73       	breakpoint
80007f3c:	3f fc       	mov	r12,-1
80007f3e:	35 8b       	mov	r11,88
80007f40:	58 0c       	cp.w	r12,0
80007f42:	5e 4c       	retge	r12
80007f44:	e0 6a 06 70 	mov	r10,1648
80007f48:	95 0b       	st.w	r10[0x0],r11
80007f4a:	5e fc       	retal	r12

80007f4c <_fstat_host>:
80007f4c:	30 98       	mov	r8,9
80007f4e:	d6 73       	breakpoint
80007f50:	3f fc       	mov	r12,-1
80007f52:	35 8b       	mov	r11,88
80007f54:	58 0c       	cp.w	r12,0
80007f56:	5e 4c       	retge	r12
80007f58:	e0 6a 06 70 	mov	r10,1648
80007f5c:	95 0b       	st.w	r10[0x0],r11
80007f5e:	5e fc       	retal	r12

80007f60 <_fstat>:
80007f60:	d4 21       	pushm	r4-r7,lr
80007f62:	21 0d       	sub	sp,64
80007f64:	16 97       	mov	r7,r11
80007f66:	1a 9b       	mov	r11,sp
80007f68:	cf 2f       	rcall	80007f4c <_fstat_host>
80007f6a:	c0 34       	brge	80007f70 <_fstat+0x10>
80007f6c:	3f fc       	mov	r12,-1
80007f6e:	c1 c8       	rjmp	80007fa6 <_fstat+0x46>
80007f70:	40 08       	lddsp	r8,sp[0x0]
80007f72:	ae 08       	st.h	r7[0x0],r8
80007f74:	40 18       	lddsp	r8,sp[0x4]
80007f76:	ae 18       	st.h	r7[0x2],r8
80007f78:	40 28       	lddsp	r8,sp[0x8]
80007f7a:	8f 18       	st.w	r7[0x4],r8
80007f7c:	40 38       	lddsp	r8,sp[0xc]
80007f7e:	ae 48       	st.h	r7[0x8],r8
80007f80:	40 48       	lddsp	r8,sp[0x10]
80007f82:	ae 58       	st.h	r7[0xa],r8
80007f84:	40 58       	lddsp	r8,sp[0x14]
80007f86:	ae 68       	st.h	r7[0xc],r8
80007f88:	40 68       	lddsp	r8,sp[0x18]
80007f8a:	ae 78       	st.h	r7[0xe],r8
80007f8c:	40 88       	lddsp	r8,sp[0x20]
80007f8e:	8f 48       	st.w	r7[0x10],r8
80007f90:	40 a8       	lddsp	r8,sp[0x28]
80007f92:	8f b8       	st.w	r7[0x2c],r8
80007f94:	40 c8       	lddsp	r8,sp[0x30]
80007f96:	8f c8       	st.w	r7[0x30],r8
80007f98:	40 d8       	lddsp	r8,sp[0x34]
80007f9a:	8f 58       	st.w	r7[0x14],r8
80007f9c:	40 e8       	lddsp	r8,sp[0x38]
80007f9e:	30 0c       	mov	r12,0
80007fa0:	8f 78       	st.w	r7[0x1c],r8
80007fa2:	40 f8       	lddsp	r8,sp[0x3c]
80007fa4:	8f 98       	st.w	r7[0x24],r8
80007fa6:	2f 0d       	sub	sp,-64
80007fa8:	d8 22       	popm	r4-r7,pc
80007faa:	d7 03       	nop

80007fac <_sbrk>:
80007fac:	d4 01       	pushm	lr
80007fae:	e0 68 06 5c 	mov	r8,1628
80007fb2:	70 09       	ld.w	r9,r8[0x0]
80007fb4:	58 09       	cp.w	r9,0
80007fb6:	c0 41       	brne	80007fbe <_sbrk+0x12>
80007fb8:	e0 69 06 78 	mov	r9,1656
80007fbc:	91 09       	st.w	r8[0x0],r9
80007fbe:	e0 69 06 5c 	mov	r9,1628
80007fc2:	e0 6a f0 00 	mov	r10,61440
80007fc6:	72 08       	ld.w	r8,r9[0x0]
80007fc8:	f0 0c 00 0c 	add	r12,r8,r12
80007fcc:	14 3c       	cp.w	r12,r10
80007fce:	e0 8b 00 04 	brhi	80007fd6 <_sbrk+0x2a>
80007fd2:	93 0c       	st.w	r9[0x0],r12
80007fd4:	c0 58       	rjmp	80007fde <_sbrk+0x32>
80007fd6:	c5 5c       	rcall	80008080 <__errno>
80007fd8:	30 c8       	mov	r8,12
80007fda:	99 08       	st.w	r12[0x0],r8
80007fdc:	3f f8       	mov	r8,-1
80007fde:	10 9c       	mov	r12,r8
80007fe0:	d8 02       	popm	pc
80007fe2:	d7 03       	nop

80007fe4 <_write_r>:
80007fe4:	d4 21       	pushm	r4-r7,lr
80007fe6:	16 98       	mov	r8,r11
80007fe8:	18 97       	mov	r7,r12
80007fea:	10 9c       	mov	r12,r8
80007fec:	30 08       	mov	r8,0
80007fee:	14 9b       	mov	r11,r10
80007ff0:	e0 66 06 70 	mov	r6,1648
80007ff4:	12 9a       	mov	r10,r9
80007ff6:	8d 08       	st.w	r6[0x0],r8
80007ff8:	c9 6f       	rcall	80007f24 <_write>
80007ffa:	5b fc       	cp.w	r12,-1
80007ffc:	c0 51       	brne	80008006 <_write_r+0x22>
80007ffe:	6c 08       	ld.w	r8,r6[0x0]
80008000:	58 08       	cp.w	r8,0
80008002:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008006:	d8 22       	popm	r4-r7,pc

80008008 <_calloc_r>:
80008008:	d4 21       	pushm	r4-r7,lr
8000800a:	f4 0b 02 4b 	mul	r11,r10,r11
8000800e:	fe b0 f8 5f 	rcall	800070cc <_malloc_r>
80008012:	18 97       	mov	r7,r12
80008014:	c2 30       	breq	8000805a <_calloc_r+0x52>
80008016:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000801a:	e0 1a ff fc 	andl	r10,0xfffc
8000801e:	20 4a       	sub	r10,4
80008020:	e0 4a 00 24 	cp.w	r10,36
80008024:	e0 8b 00 18 	brhi	80008054 <_calloc_r+0x4c>
80008028:	18 98       	mov	r8,r12
8000802a:	59 3a       	cp.w	r10,19
8000802c:	e0 88 00 0f 	brls	8000804a <_calloc_r+0x42>
80008030:	30 09       	mov	r9,0
80008032:	10 a9       	st.w	r8++,r9
80008034:	10 a9       	st.w	r8++,r9
80008036:	59 ba       	cp.w	r10,27
80008038:	e0 88 00 09 	brls	8000804a <_calloc_r+0x42>
8000803c:	10 a9       	st.w	r8++,r9
8000803e:	10 a9       	st.w	r8++,r9
80008040:	e0 4a 00 24 	cp.w	r10,36
80008044:	c0 31       	brne	8000804a <_calloc_r+0x42>
80008046:	10 a9       	st.w	r8++,r9
80008048:	10 a9       	st.w	r8++,r9
8000804a:	30 09       	mov	r9,0
8000804c:	10 a9       	st.w	r8++,r9
8000804e:	91 19       	st.w	r8[0x4],r9
80008050:	91 09       	st.w	r8[0x0],r9
80008052:	c0 48       	rjmp	8000805a <_calloc_r+0x52>
80008054:	30 0b       	mov	r11,0
80008056:	fe b0 fa 7d 	rcall	80007550 <memset>
8000805a:	0e 9c       	mov	r12,r7
8000805c:	d8 22       	popm	r4-r7,pc
8000805e:	d7 03       	nop

80008060 <_close_r>:
80008060:	d4 21       	pushm	r4-r7,lr
80008062:	30 08       	mov	r8,0
80008064:	18 97       	mov	r7,r12
80008066:	e0 66 06 70 	mov	r6,1648
8000806a:	16 9c       	mov	r12,r11
8000806c:	8d 08       	st.w	r6[0x0],r8
8000806e:	c3 df       	rcall	80007ee8 <_close>
80008070:	5b fc       	cp.w	r12,-1
80008072:	c0 51       	brne	8000807c <_close_r+0x1c>
80008074:	6c 08       	ld.w	r8,r6[0x0]
80008076:	58 08       	cp.w	r8,0
80008078:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000807c:	d8 22       	popm	r4-r7,pc
8000807e:	d7 03       	nop

80008080 <__errno>:
80008080:	e0 68 01 00 	mov	r8,256
80008084:	70 0c       	ld.w	r12,r8[0x0]
80008086:	2f 4c       	sub	r12,-12
80008088:	5e fc       	retal	r12
8000808a:	d7 03       	nop

8000808c <_fclose_r>:
8000808c:	d4 21       	pushm	r4-r7,lr
8000808e:	18 96       	mov	r6,r12
80008090:	16 97       	mov	r7,r11
80008092:	58 0b       	cp.w	r11,0
80008094:	c0 31       	brne	8000809a <_fclose_r+0xe>
80008096:	16 95       	mov	r5,r11
80008098:	c5 38       	rjmp	8000813e <_fclose_r+0xb2>
8000809a:	fe b0 f4 87 	rcall	800069a8 <__sfp_lock_acquire>
8000809e:	58 06       	cp.w	r6,0
800080a0:	c0 70       	breq	800080ae <_fclose_r+0x22>
800080a2:	6c 68       	ld.w	r8,r6[0x18]
800080a4:	58 08       	cp.w	r8,0
800080a6:	c0 41       	brne	800080ae <_fclose_r+0x22>
800080a8:	0c 9c       	mov	r12,r6
800080aa:	fe b0 f4 d1 	rcall	80006a4c <__sinit>
800080ae:	fe c8 e8 f6 	sub	r8,pc,-5898
800080b2:	10 37       	cp.w	r7,r8
800080b4:	c0 31       	brne	800080ba <_fclose_r+0x2e>
800080b6:	6c 07       	ld.w	r7,r6[0x0]
800080b8:	c0 c8       	rjmp	800080d0 <_fclose_r+0x44>
800080ba:	fe c8 e8 e2 	sub	r8,pc,-5918
800080be:	10 37       	cp.w	r7,r8
800080c0:	c0 31       	brne	800080c6 <_fclose_r+0x3a>
800080c2:	6c 17       	ld.w	r7,r6[0x4]
800080c4:	c0 68       	rjmp	800080d0 <_fclose_r+0x44>
800080c6:	fe c8 e8 ce 	sub	r8,pc,-5938
800080ca:	10 37       	cp.w	r7,r8
800080cc:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800080d0:	8e 69       	ld.sh	r9,r7[0xc]
800080d2:	30 08       	mov	r8,0
800080d4:	f0 09 19 00 	cp.h	r9,r8
800080d8:	c0 51       	brne	800080e2 <_fclose_r+0x56>
800080da:	fe b0 f4 68 	rcall	800069aa <__sfp_lock_release>
800080de:	30 05       	mov	r5,0
800080e0:	c2 f8       	rjmp	8000813e <_fclose_r+0xb2>
800080e2:	0e 9b       	mov	r11,r7
800080e4:	0c 9c       	mov	r12,r6
800080e6:	fe b0 f3 db 	rcall	8000689c <_fflush_r>
800080ea:	6e c8       	ld.w	r8,r7[0x30]
800080ec:	18 95       	mov	r5,r12
800080ee:	58 08       	cp.w	r8,0
800080f0:	c0 60       	breq	800080fc <_fclose_r+0x70>
800080f2:	6e 8b       	ld.w	r11,r7[0x20]
800080f4:	0c 9c       	mov	r12,r6
800080f6:	5d 18       	icall	r8
800080f8:	f9 b5 05 ff 	movlt	r5,-1
800080fc:	8e 68       	ld.sh	r8,r7[0xc]
800080fe:	ed b8 00 07 	bld	r8,0x7
80008102:	c0 51       	brne	8000810c <_fclose_r+0x80>
80008104:	6e 4b       	ld.w	r11,r7[0x10]
80008106:	0c 9c       	mov	r12,r6
80008108:	fe b0 f5 3c 	rcall	80006b80 <_free_r>
8000810c:	6e db       	ld.w	r11,r7[0x34]
8000810e:	58 0b       	cp.w	r11,0
80008110:	c0 a0       	breq	80008124 <_fclose_r+0x98>
80008112:	ee c8 ff bc 	sub	r8,r7,-68
80008116:	10 3b       	cp.w	r11,r8
80008118:	c0 40       	breq	80008120 <_fclose_r+0x94>
8000811a:	0c 9c       	mov	r12,r6
8000811c:	fe b0 f5 32 	rcall	80006b80 <_free_r>
80008120:	30 08       	mov	r8,0
80008122:	8f d8       	st.w	r7[0x34],r8
80008124:	6f 2b       	ld.w	r11,r7[0x48]
80008126:	58 0b       	cp.w	r11,0
80008128:	c0 70       	breq	80008136 <_fclose_r+0xaa>
8000812a:	0c 9c       	mov	r12,r6
8000812c:	fe b0 f5 2a 	rcall	80006b80 <_free_r>
80008130:	30 08       	mov	r8,0
80008132:	ef 48 00 48 	st.w	r7[72],r8
80008136:	30 08       	mov	r8,0
80008138:	ae 68       	st.h	r7[0xc],r8
8000813a:	fe b0 f4 38 	rcall	800069aa <__sfp_lock_release>
8000813e:	0a 9c       	mov	r12,r5
80008140:	d8 22       	popm	r4-r7,pc
80008142:	d7 03       	nop

80008144 <fclose>:
80008144:	d4 01       	pushm	lr
80008146:	e0 68 01 00 	mov	r8,256
8000814a:	18 9b       	mov	r11,r12
8000814c:	70 0c       	ld.w	r12,r8[0x0]
8000814e:	c9 ff       	rcall	8000808c <_fclose_r>
80008150:	d8 02       	popm	pc
80008152:	d7 03       	nop

80008154 <_fstat_r>:
80008154:	d4 21       	pushm	r4-r7,lr
80008156:	16 98       	mov	r8,r11
80008158:	18 97       	mov	r7,r12
8000815a:	10 9c       	mov	r12,r8
8000815c:	30 08       	mov	r8,0
8000815e:	e0 66 06 70 	mov	r6,1648
80008162:	14 9b       	mov	r11,r10
80008164:	8d 08       	st.w	r6[0x0],r8
80008166:	cf de       	rcall	80007f60 <_fstat>
80008168:	5b fc       	cp.w	r12,-1
8000816a:	c0 51       	brne	80008174 <_fstat_r+0x20>
8000816c:	6c 08       	ld.w	r8,r6[0x0]
8000816e:	58 08       	cp.w	r8,0
80008170:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008174:	d8 22       	popm	r4-r7,pc
80008176:	d7 03       	nop

80008178 <_lseek_r>:
80008178:	d4 21       	pushm	r4-r7,lr
8000817a:	16 98       	mov	r8,r11
8000817c:	18 97       	mov	r7,r12
8000817e:	10 9c       	mov	r12,r8
80008180:	30 08       	mov	r8,0
80008182:	14 9b       	mov	r11,r10
80008184:	e0 66 06 70 	mov	r6,1648
80008188:	12 9a       	mov	r10,r9
8000818a:	8d 08       	st.w	r6[0x0],r8
8000818c:	cb 8e       	rcall	80007efc <_lseek>
8000818e:	5b fc       	cp.w	r12,-1
80008190:	c0 51       	brne	8000819a <_lseek_r+0x22>
80008192:	6c 08       	ld.w	r8,r6[0x0]
80008194:	58 08       	cp.w	r8,0
80008196:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000819a:	d8 22       	popm	r4-r7,pc

8000819c <_read_r>:
8000819c:	d4 21       	pushm	r4-r7,lr
8000819e:	16 98       	mov	r8,r11
800081a0:	18 97       	mov	r7,r12
800081a2:	10 9c       	mov	r12,r8
800081a4:	30 08       	mov	r8,0
800081a6:	14 9b       	mov	r11,r10
800081a8:	e0 66 06 70 	mov	r6,1648
800081ac:	12 9a       	mov	r10,r9
800081ae:	8d 08       	st.w	r6[0x0],r8
800081b0:	cb 0e       	rcall	80007f10 <_read>
800081b2:	5b fc       	cp.w	r12,-1
800081b4:	c0 51       	brne	800081be <_read_r+0x22>
800081b6:	6c 08       	ld.w	r8,r6[0x0]
800081b8:	58 08       	cp.w	r8,0
800081ba:	ef f8 1a 03 	st.wne	r7[0xc],r8
800081be:	d8 22       	popm	r4-r7,pc

800081c0 <__avr32_f64_mul>:
800081c0:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800081c4:	e0 80 00 dc 	breq	8000837c <__avr32_f64_mul_op1_zero>
800081c8:	d4 21       	pushm	r4-r7,lr
800081ca:	f7 e9 20 0e 	eor	lr,r11,r9
800081ce:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800081d2:	30 15       	mov	r5,1
800081d4:	c4 30       	breq	8000825a <__avr32_f64_mul_op1_subnormal>
800081d6:	ab 6b       	lsl	r11,0xa
800081d8:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800081dc:	ab 6a       	lsl	r10,0xa
800081de:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800081e2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800081e6:	c5 c0       	breq	8000829e <__avr32_f64_mul_op2_subnormal>
800081e8:	a1 78       	lsl	r8,0x1
800081ea:	5c f9       	rol	r9
800081ec:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800081f0:	e0 47 07 ff 	cp.w	r7,2047
800081f4:	c7 70       	breq	800082e2 <__avr32_f64_mul_op_nan_or_inf>
800081f6:	e0 46 07 ff 	cp.w	r6,2047
800081fa:	c7 40       	breq	800082e2 <__avr32_f64_mul_op_nan_or_inf>
800081fc:	ee 06 00 0c 	add	r12,r7,r6
80008200:	e0 2c 03 fe 	sub	r12,1022
80008204:	f6 08 06 44 	mulu.d	r4,r11,r8
80008208:	f4 09 07 44 	macu.d	r4,r10,r9
8000820c:	f4 08 06 46 	mulu.d	r6,r10,r8
80008210:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008214:	08 07       	add	r7,r4
80008216:	f4 05 00 4a 	adc	r10,r10,r5
8000821a:	5c 0b       	acr	r11
8000821c:	ed bb 00 14 	bld	r11,0x14
80008220:	c0 50       	breq	8000822a <__avr32_f64_mul+0x6a>
80008222:	a1 77       	lsl	r7,0x1
80008224:	5c fa       	rol	r10
80008226:	5c fb       	rol	r11
80008228:	20 1c       	sub	r12,1
8000822a:	58 0c       	cp.w	r12,0
8000822c:	e0 8a 00 6f 	brle	8000830a <__avr32_f64_mul_res_subnormal>
80008230:	e0 4c 07 ff 	cp.w	r12,2047
80008234:	e0 84 00 9c 	brge	8000836c <__avr32_f64_mul_res_inf>
80008238:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000823c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80008240:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008244:	ee 17 80 00 	eorh	r7,0x8000
80008248:	f1 b7 04 20 	satu	r7,0x1
8000824c:	0e 0a       	add	r10,r7
8000824e:	5c 0b       	acr	r11
80008250:	ed be 00 1f 	bld	lr,0x1f
80008254:	ef bb 00 1f 	bst	r11,0x1f
80008258:	d8 22       	popm	r4-r7,pc

8000825a <__avr32_f64_mul_op1_subnormal>:
8000825a:	e4 1b 00 0f 	andh	r11,0xf
8000825e:	f4 0c 12 00 	clz	r12,r10
80008262:	f6 06 12 00 	clz	r6,r11
80008266:	f7 bc 03 e1 	sublo	r12,-31
8000826a:	f8 06 17 30 	movlo	r6,r12
8000826e:	f7 b6 02 01 	subhs	r6,1
80008272:	e0 46 00 20 	cp.w	r6,32
80008276:	c0 d4       	brge	80008290 <__avr32_f64_mul_op1_subnormal+0x36>
80008278:	ec 0c 11 20 	rsub	r12,r6,32
8000827c:	f6 06 09 4b 	lsl	r11,r11,r6
80008280:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008284:	18 4b       	or	r11,r12
80008286:	f4 06 09 4a 	lsl	r10,r10,r6
8000828a:	20 b6       	sub	r6,11
8000828c:	0c 17       	sub	r7,r6
8000828e:	ca ab       	rjmp	800081e2 <__avr32_f64_mul+0x22>
80008290:	f4 06 09 4b 	lsl	r11,r10,r6
80008294:	c6 40       	breq	8000835c <__avr32_f64_mul_res_zero>
80008296:	30 0a       	mov	r10,0
80008298:	20 b6       	sub	r6,11
8000829a:	0c 17       	sub	r7,r6
8000829c:	ca 3b       	rjmp	800081e2 <__avr32_f64_mul+0x22>

8000829e <__avr32_f64_mul_op2_subnormal>:
8000829e:	e4 19 00 0f 	andh	r9,0xf
800082a2:	f0 0c 12 00 	clz	r12,r8
800082a6:	f2 05 12 00 	clz	r5,r9
800082aa:	f7 bc 03 ea 	sublo	r12,-22
800082ae:	f8 05 17 30 	movlo	r5,r12
800082b2:	f7 b5 02 0a 	subhs	r5,10
800082b6:	e0 45 00 20 	cp.w	r5,32
800082ba:	c0 d4       	brge	800082d4 <__avr32_f64_mul_op2_subnormal+0x36>
800082bc:	ea 0c 11 20 	rsub	r12,r5,32
800082c0:	f2 05 09 49 	lsl	r9,r9,r5
800082c4:	f0 0c 0a 4c 	lsr	r12,r8,r12
800082c8:	18 49       	or	r9,r12
800082ca:	f0 05 09 48 	lsl	r8,r8,r5
800082ce:	20 25       	sub	r5,2
800082d0:	0a 16       	sub	r6,r5
800082d2:	c8 fb       	rjmp	800081f0 <__avr32_f64_mul+0x30>
800082d4:	f0 05 09 49 	lsl	r9,r8,r5
800082d8:	c4 20       	breq	8000835c <__avr32_f64_mul_res_zero>
800082da:	30 08       	mov	r8,0
800082dc:	20 25       	sub	r5,2
800082de:	0a 16       	sub	r6,r5
800082e0:	c8 8b       	rjmp	800081f0 <__avr32_f64_mul+0x30>

800082e2 <__avr32_f64_mul_op_nan_or_inf>:
800082e2:	e4 19 00 0f 	andh	r9,0xf
800082e6:	e4 1b 00 0f 	andh	r11,0xf
800082ea:	14 4b       	or	r11,r10
800082ec:	10 49       	or	r9,r8
800082ee:	e0 47 07 ff 	cp.w	r7,2047
800082f2:	c0 91       	brne	80008304 <__avr32_f64_mul_op1_not_naninf>
800082f4:	58 0b       	cp.w	r11,0
800082f6:	c3 81       	brne	80008366 <__avr32_f64_mul_res_nan>
800082f8:	e0 46 07 ff 	cp.w	r6,2047
800082fc:	c3 81       	brne	8000836c <__avr32_f64_mul_res_inf>
800082fe:	58 09       	cp.w	r9,0
80008300:	c3 60       	breq	8000836c <__avr32_f64_mul_res_inf>
80008302:	c3 28       	rjmp	80008366 <__avr32_f64_mul_res_nan>

80008304 <__avr32_f64_mul_op1_not_naninf>:
80008304:	58 09       	cp.w	r9,0
80008306:	c3 30       	breq	8000836c <__avr32_f64_mul_res_inf>
80008308:	c2 f8       	rjmp	80008366 <__avr32_f64_mul_res_nan>

8000830a <__avr32_f64_mul_res_subnormal>:
8000830a:	5c 3c       	neg	r12
8000830c:	2f fc       	sub	r12,-1
8000830e:	f1 bc 04 c0 	satu	r12,0x6
80008312:	e0 4c 00 20 	cp.w	r12,32
80008316:	c1 14       	brge	80008338 <__avr32_f64_mul_res_subnormal+0x2e>
80008318:	f8 08 11 20 	rsub	r8,r12,32
8000831c:	0e 46       	or	r6,r7
8000831e:	ee 0c 0a 47 	lsr	r7,r7,r12
80008322:	f4 08 09 49 	lsl	r9,r10,r8
80008326:	12 47       	or	r7,r9
80008328:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000832c:	f6 08 09 49 	lsl	r9,r11,r8
80008330:	12 4a       	or	r10,r9
80008332:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008336:	c8 3b       	rjmp	8000823c <__avr32_f64_mul+0x7c>
80008338:	f8 08 11 20 	rsub	r8,r12,32
8000833c:	f9 b9 00 00 	moveq	r9,0
80008340:	c0 30       	breq	80008346 <__avr32_f64_mul_res_subnormal+0x3c>
80008342:	f6 08 09 49 	lsl	r9,r11,r8
80008346:	0e 46       	or	r6,r7
80008348:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000834c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008350:	f3 ea 10 07 	or	r7,r9,r10
80008354:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008358:	30 0b       	mov	r11,0
8000835a:	c7 1b       	rjmp	8000823c <__avr32_f64_mul+0x7c>

8000835c <__avr32_f64_mul_res_zero>:
8000835c:	1c 9b       	mov	r11,lr
8000835e:	e6 1b 80 00 	andh	r11,0x8000,COH
80008362:	30 0a       	mov	r10,0
80008364:	d8 22       	popm	r4-r7,pc

80008366 <__avr32_f64_mul_res_nan>:
80008366:	3f fb       	mov	r11,-1
80008368:	3f fa       	mov	r10,-1
8000836a:	d8 22       	popm	r4-r7,pc

8000836c <__avr32_f64_mul_res_inf>:
8000836c:	f0 6b 00 00 	mov	r11,-1048576
80008370:	ed be 00 1f 	bld	lr,0x1f
80008374:	ef bb 00 1f 	bst	r11,0x1f
80008378:	30 0a       	mov	r10,0
8000837a:	d8 22       	popm	r4-r7,pc

8000837c <__avr32_f64_mul_op1_zero>:
8000837c:	f7 e9 20 0b 	eor	r11,r11,r9
80008380:	e6 1b 80 00 	andh	r11,0x8000,COH
80008384:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008388:	e0 4c 07 ff 	cp.w	r12,2047
8000838c:	5e 1c       	retne	r12
8000838e:	3f fa       	mov	r10,-1
80008390:	3f fb       	mov	r11,-1
80008392:	5e fc       	retal	r12

80008394 <__avr32_f64_sub_from_add>:
80008394:	ee 19 80 00 	eorh	r9,0x8000

80008398 <__avr32_f64_sub>:
80008398:	f7 e9 20 0c 	eor	r12,r11,r9
8000839c:	e0 86 00 ca 	brmi	80008530 <__avr32_f64_add_from_sub>
800083a0:	eb cd 40 e0 	pushm	r5-r7,lr
800083a4:	16 9c       	mov	r12,r11
800083a6:	e6 1c 80 00 	andh	r12,0x8000,COH
800083aa:	bf db       	cbr	r11,0x1f
800083ac:	bf d9       	cbr	r9,0x1f
800083ae:	10 3a       	cp.w	r10,r8
800083b0:	f2 0b 13 00 	cpc	r11,r9
800083b4:	c0 92       	brcc	800083c6 <__avr32_f64_sub+0x2e>
800083b6:	16 97       	mov	r7,r11
800083b8:	12 9b       	mov	r11,r9
800083ba:	0e 99       	mov	r9,r7
800083bc:	14 97       	mov	r7,r10
800083be:	10 9a       	mov	r10,r8
800083c0:	0e 98       	mov	r8,r7
800083c2:	ee 1c 80 00 	eorh	r12,0x8000
800083c6:	f6 07 16 14 	lsr	r7,r11,0x14
800083ca:	ab 7b       	lsl	r11,0xb
800083cc:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800083d0:	ab 7a       	lsl	r10,0xb
800083d2:	bf bb       	sbr	r11,0x1f
800083d4:	f2 06 16 14 	lsr	r6,r9,0x14
800083d8:	c4 40       	breq	80008460 <__avr32_f64_sub_opL_subnormal>
800083da:	ab 79       	lsl	r9,0xb
800083dc:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800083e0:	ab 78       	lsl	r8,0xb
800083e2:	bf b9       	sbr	r9,0x1f

800083e4 <__avr32_f64_sub_opL_subnormal_done>:
800083e4:	e0 47 07 ff 	cp.w	r7,2047
800083e8:	c4 f0       	breq	80008486 <__avr32_f64_sub_opH_nan_or_inf>
800083ea:	0e 26       	rsub	r6,r7
800083ec:	c1 20       	breq	80008410 <__avr32_f64_sub_shift_done>
800083ee:	ec 05 11 20 	rsub	r5,r6,32
800083f2:	e0 46 00 20 	cp.w	r6,32
800083f6:	c7 c2       	brcc	800084ee <__avr32_f64_sub_longshift>
800083f8:	f0 05 09 4e 	lsl	lr,r8,r5
800083fc:	f2 05 09 45 	lsl	r5,r9,r5
80008400:	f0 06 0a 48 	lsr	r8,r8,r6
80008404:	f2 06 0a 49 	lsr	r9,r9,r6
80008408:	0a 48       	or	r8,r5
8000840a:	58 0e       	cp.w	lr,0
8000840c:	5f 1e       	srne	lr
8000840e:	1c 48       	or	r8,lr

80008410 <__avr32_f64_sub_shift_done>:
80008410:	10 1a       	sub	r10,r8
80008412:	f6 09 01 4b 	sbc	r11,r11,r9
80008416:	f6 06 12 00 	clz	r6,r11
8000841a:	c0 e0       	breq	80008436 <__avr32_f64_sub_longnormalize_done>
8000841c:	c7 83       	brcs	8000850c <__avr32_f64_sub_longnormalize>
8000841e:	ec 0e 11 20 	rsub	lr,r6,32
80008422:	f6 06 09 4b 	lsl	r11,r11,r6
80008426:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000842a:	1c 4b       	or	r11,lr
8000842c:	f4 06 09 4a 	lsl	r10,r10,r6
80008430:	0c 17       	sub	r7,r6
80008432:	e0 8a 00 39 	brle	800084a4 <__avr32_f64_sub_subnormal_result>

80008436 <__avr32_f64_sub_longnormalize_done>:
80008436:	f4 09 15 15 	lsl	r9,r10,0x15
8000843a:	ab 9a       	lsr	r10,0xb
8000843c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008440:	ab 9b       	lsr	r11,0xb
80008442:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008446:	18 4b       	or	r11,r12

80008448 <__avr32_f64_sub_round>:
80008448:	fc 17 80 00 	movh	r7,0x8000
8000844c:	ed ba 00 00 	bld	r10,0x0
80008450:	f7 b7 01 ff 	subne	r7,-1
80008454:	0e 39       	cp.w	r9,r7
80008456:	5f 29       	srhs	r9
80008458:	12 0a       	add	r10,r9
8000845a:	5c 0b       	acr	r11
8000845c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008460 <__avr32_f64_sub_opL_subnormal>:
80008460:	ab 79       	lsl	r9,0xb
80008462:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008466:	ab 78       	lsl	r8,0xb
80008468:	f3 e8 10 0e 	or	lr,r9,r8
8000846c:	f9 b6 01 01 	movne	r6,1
80008470:	ee 0e 11 00 	rsub	lr,r7,0
80008474:	f9 b7 00 01 	moveq	r7,1
80008478:	ef bb 00 1f 	bst	r11,0x1f
8000847c:	f7 ea 10 0e 	or	lr,r11,r10
80008480:	f9 b7 00 00 	moveq	r7,0
80008484:	cb 0b       	rjmp	800083e4 <__avr32_f64_sub_opL_subnormal_done>

80008486 <__avr32_f64_sub_opH_nan_or_inf>:
80008486:	bf db       	cbr	r11,0x1f
80008488:	f7 ea 10 0e 	or	lr,r11,r10
8000848c:	c0 81       	brne	8000849c <__avr32_f64_sub_return_nan>
8000848e:	e0 46 07 ff 	cp.w	r6,2047
80008492:	c0 50       	breq	8000849c <__avr32_f64_sub_return_nan>
80008494:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008498:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000849c <__avr32_f64_sub_return_nan>:
8000849c:	3f fa       	mov	r10,-1
8000849e:	3f fb       	mov	r11,-1
800084a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800084a4 <__avr32_f64_sub_subnormal_result>:
800084a4:	5c 37       	neg	r7
800084a6:	2f f7       	sub	r7,-1
800084a8:	f1 b7 04 c0 	satu	r7,0x6
800084ac:	e0 47 00 20 	cp.w	r7,32
800084b0:	c1 14       	brge	800084d2 <__avr32_f64_sub_subnormal_result+0x2e>
800084b2:	ee 08 11 20 	rsub	r8,r7,32
800084b6:	f4 08 09 49 	lsl	r9,r10,r8
800084ba:	5f 16       	srne	r6
800084bc:	f4 07 0a 4a 	lsr	r10,r10,r7
800084c0:	0c 4a       	or	r10,r6
800084c2:	f6 08 09 49 	lsl	r9,r11,r8
800084c6:	f5 e9 10 0a 	or	r10,r10,r9
800084ca:	f4 07 0a 4b 	lsr	r11,r10,r7
800084ce:	30 07       	mov	r7,0
800084d0:	cb 3b       	rjmp	80008436 <__avr32_f64_sub_longnormalize_done>
800084d2:	ee 08 11 40 	rsub	r8,r7,64
800084d6:	f6 08 09 49 	lsl	r9,r11,r8
800084da:	14 49       	or	r9,r10
800084dc:	5f 16       	srne	r6
800084de:	f6 07 0a 4a 	lsr	r10,r11,r7
800084e2:	0c 4a       	or	r10,r6
800084e4:	30 0b       	mov	r11,0
800084e6:	30 07       	mov	r7,0
800084e8:	ca 7b       	rjmp	80008436 <__avr32_f64_sub_longnormalize_done>
800084ea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800084ee <__avr32_f64_sub_longshift>:
800084ee:	f1 b6 04 c0 	satu	r6,0x6
800084f2:	f0 0e 17 00 	moveq	lr,r8
800084f6:	c0 40       	breq	800084fe <__avr32_f64_sub_longshift+0x10>
800084f8:	f2 05 09 4e 	lsl	lr,r9,r5
800084fc:	10 4e       	or	lr,r8
800084fe:	f2 06 0a 48 	lsr	r8,r9,r6
80008502:	30 09       	mov	r9,0
80008504:	58 0e       	cp.w	lr,0
80008506:	5f 1e       	srne	lr
80008508:	1c 48       	or	r8,lr
8000850a:	c8 3b       	rjmp	80008410 <__avr32_f64_sub_shift_done>

8000850c <__avr32_f64_sub_longnormalize>:
8000850c:	f4 06 12 00 	clz	r6,r10
80008510:	f9 b7 03 00 	movlo	r7,0
80008514:	f9 b6 03 00 	movlo	r6,0
80008518:	f9 bc 03 00 	movlo	r12,0
8000851c:	f7 b6 02 e0 	subhs	r6,-32
80008520:	f4 06 09 4b 	lsl	r11,r10,r6
80008524:	30 0a       	mov	r10,0
80008526:	0c 17       	sub	r7,r6
80008528:	fe 9a ff be 	brle	800084a4 <__avr32_f64_sub_subnormal_result>
8000852c:	c8 5b       	rjmp	80008436 <__avr32_f64_sub_longnormalize_done>
8000852e:	d7 03       	nop

80008530 <__avr32_f64_add_from_sub>:
80008530:	ee 19 80 00 	eorh	r9,0x8000

80008534 <__avr32_f64_add>:
80008534:	f7 e9 20 0c 	eor	r12,r11,r9
80008538:	fe 96 ff 2e 	brmi	80008394 <__avr32_f64_sub_from_add>
8000853c:	eb cd 40 e0 	pushm	r5-r7,lr
80008540:	16 9c       	mov	r12,r11
80008542:	e6 1c 80 00 	andh	r12,0x8000,COH
80008546:	bf db       	cbr	r11,0x1f
80008548:	bf d9       	cbr	r9,0x1f
8000854a:	12 3b       	cp.w	r11,r9
8000854c:	c0 72       	brcc	8000855a <__avr32_f64_add+0x26>
8000854e:	16 97       	mov	r7,r11
80008550:	12 9b       	mov	r11,r9
80008552:	0e 99       	mov	r9,r7
80008554:	14 97       	mov	r7,r10
80008556:	10 9a       	mov	r10,r8
80008558:	0e 98       	mov	r8,r7
8000855a:	30 0e       	mov	lr,0
8000855c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008560:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008564:	b5 ab       	sbr	r11,0x14
80008566:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000856a:	c6 20       	breq	8000862e <__avr32_f64_add_op2_subnormal>
8000856c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008570:	b5 a9       	sbr	r9,0x14
80008572:	e0 47 07 ff 	cp.w	r7,2047
80008576:	c2 80       	breq	800085c6 <__avr32_f64_add_opH_nan_or_inf>
80008578:	0e 26       	rsub	r6,r7
8000857a:	c1 20       	breq	8000859e <__avr32_f64_add_shift_done>
8000857c:	e0 46 00 36 	cp.w	r6,54
80008580:	c1 52       	brcc	800085aa <__avr32_f64_add_res_of_done>
80008582:	ec 05 11 20 	rsub	r5,r6,32
80008586:	e0 46 00 20 	cp.w	r6,32
8000858a:	c3 52       	brcc	800085f4 <__avr32_f64_add_longshift>
8000858c:	f0 05 09 4e 	lsl	lr,r8,r5
80008590:	f2 05 09 45 	lsl	r5,r9,r5
80008594:	f0 06 0a 48 	lsr	r8,r8,r6
80008598:	f2 06 0a 49 	lsr	r9,r9,r6
8000859c:	0a 48       	or	r8,r5

8000859e <__avr32_f64_add_shift_done>:
8000859e:	10 0a       	add	r10,r8
800085a0:	f6 09 00 4b 	adc	r11,r11,r9
800085a4:	ed bb 00 15 	bld	r11,0x15
800085a8:	c3 40       	breq	80008610 <__avr32_f64_add_res_of>

800085aa <__avr32_f64_add_res_of_done>:
800085aa:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800085ae:	18 4b       	or	r11,r12

800085b0 <__avr32_f64_add_round>:
800085b0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800085b4:	18 4e       	or	lr,r12
800085b6:	ee 1e 80 00 	eorh	lr,0x8000
800085ba:	f1 be 04 20 	satu	lr,0x1
800085be:	1c 0a       	add	r10,lr
800085c0:	5c 0b       	acr	r11
800085c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085c6 <__avr32_f64_add_opH_nan_or_inf>:
800085c6:	b5 cb       	cbr	r11,0x14
800085c8:	f7 ea 10 0e 	or	lr,r11,r10
800085cc:	c1 01       	brne	800085ec <__avr32_f64_add_return_nan>
800085ce:	e0 46 07 ff 	cp.w	r6,2047
800085d2:	c0 30       	breq	800085d8 <__avr32_f64_add_opL_nan_or_inf>
800085d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085d8 <__avr32_f64_add_opL_nan_or_inf>:
800085d8:	b5 c9       	cbr	r9,0x14
800085da:	f3 e8 10 0e 	or	lr,r9,r8
800085de:	c0 71       	brne	800085ec <__avr32_f64_add_return_nan>
800085e0:	30 0a       	mov	r10,0
800085e2:	fc 1b 7f f0 	movh	r11,0x7ff0
800085e6:	18 4b       	or	r11,r12
800085e8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085ec <__avr32_f64_add_return_nan>:
800085ec:	3f fa       	mov	r10,-1
800085ee:	3f fb       	mov	r11,-1
800085f0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085f4 <__avr32_f64_add_longshift>:
800085f4:	f1 b6 04 c0 	satu	r6,0x6
800085f8:	f0 0e 17 00 	moveq	lr,r8
800085fc:	c0 60       	breq	80008608 <__avr32_f64_add_longshift+0x14>
800085fe:	f2 05 09 4e 	lsl	lr,r9,r5
80008602:	58 08       	cp.w	r8,0
80008604:	5f 18       	srne	r8
80008606:	10 4e       	or	lr,r8
80008608:	f2 06 0a 48 	lsr	r8,r9,r6
8000860c:	30 09       	mov	r9,0
8000860e:	cc 8b       	rjmp	8000859e <__avr32_f64_add_shift_done>

80008610 <__avr32_f64_add_res_of>:
80008610:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008614:	a1 9b       	lsr	r11,0x1
80008616:	5d 0a       	ror	r10
80008618:	5d 0e       	ror	lr
8000861a:	2f f7       	sub	r7,-1
8000861c:	e0 47 07 ff 	cp.w	r7,2047
80008620:	f9 ba 00 00 	moveq	r10,0
80008624:	f9 bb 00 00 	moveq	r11,0
80008628:	f9 be 00 00 	moveq	lr,0
8000862c:	cb fb       	rjmp	800085aa <__avr32_f64_add_res_of_done>

8000862e <__avr32_f64_add_op2_subnormal>:
8000862e:	30 16       	mov	r6,1
80008630:	58 07       	cp.w	r7,0
80008632:	ca 01       	brne	80008572 <__avr32_f64_add+0x3e>
80008634:	b5 cb       	cbr	r11,0x14
80008636:	10 0a       	add	r10,r8
80008638:	f6 09 00 4b 	adc	r11,r11,r9
8000863c:	18 4b       	or	r11,r12
8000863e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008642:	d7 03       	nop

80008644 <__avr32_f64_to_u32>:
80008644:	58 0b       	cp.w	r11,0
80008646:	5e 6d       	retmi	0

80008648 <__avr32_f64_to_s32>:
80008648:	f6 0c 15 01 	lsl	r12,r11,0x1
8000864c:	b5 9c       	lsr	r12,0x15
8000864e:	e0 2c 03 ff 	sub	r12,1023
80008652:	5e 3d       	retlo	0
80008654:	f8 0c 11 1f 	rsub	r12,r12,31
80008658:	16 99       	mov	r9,r11
8000865a:	ab 7b       	lsl	r11,0xb
8000865c:	bf bb       	sbr	r11,0x1f
8000865e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008662:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008666:	a1 79       	lsl	r9,0x1
80008668:	5e 2b       	reths	r11
8000866a:	5c 3b       	neg	r11
8000866c:	5e fb       	retal	r11

8000866e <__avr32_u32_to_f64>:
8000866e:	f8 cb 00 00 	sub	r11,r12,0
80008672:	30 0c       	mov	r12,0
80008674:	c0 38       	rjmp	8000867a <__avr32_s32_to_f64+0x4>

80008676 <__avr32_s32_to_f64>:
80008676:	18 9b       	mov	r11,r12
80008678:	5c 4b       	abs	r11
8000867a:	30 0a       	mov	r10,0
8000867c:	5e 0b       	reteq	r11
8000867e:	d4 01       	pushm	lr
80008680:	e0 69 04 1e 	mov	r9,1054
80008684:	f6 08 12 00 	clz	r8,r11
80008688:	c1 70       	breq	800086b6 <__avr32_s32_to_f64+0x40>
8000868a:	c0 c3       	brcs	800086a2 <__avr32_s32_to_f64+0x2c>
8000868c:	f0 0e 11 20 	rsub	lr,r8,32
80008690:	f6 08 09 4b 	lsl	r11,r11,r8
80008694:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008698:	1c 4b       	or	r11,lr
8000869a:	f4 08 09 4a 	lsl	r10,r10,r8
8000869e:	10 19       	sub	r9,r8
800086a0:	c0 b8       	rjmp	800086b6 <__avr32_s32_to_f64+0x40>
800086a2:	f4 08 12 00 	clz	r8,r10
800086a6:	f9 b8 03 00 	movlo	r8,0
800086aa:	f7 b8 02 e0 	subhs	r8,-32
800086ae:	f4 08 09 4b 	lsl	r11,r10,r8
800086b2:	30 0a       	mov	r10,0
800086b4:	10 19       	sub	r9,r8
800086b6:	58 09       	cp.w	r9,0
800086b8:	e0 89 00 30 	brgt	80008718 <__avr32_s32_to_f64+0xa2>
800086bc:	5c 39       	neg	r9
800086be:	2f f9       	sub	r9,-1
800086c0:	e0 49 00 36 	cp.w	r9,54
800086c4:	c0 43       	brcs	800086cc <__avr32_s32_to_f64+0x56>
800086c6:	30 0b       	mov	r11,0
800086c8:	30 0a       	mov	r10,0
800086ca:	c2 68       	rjmp	80008716 <__avr32_s32_to_f64+0xa0>
800086cc:	2f 69       	sub	r9,-10
800086ce:	f2 08 11 20 	rsub	r8,r9,32
800086d2:	e0 49 00 20 	cp.w	r9,32
800086d6:	c0 b2       	brcc	800086ec <__avr32_s32_to_f64+0x76>
800086d8:	f4 08 09 4e 	lsl	lr,r10,r8
800086dc:	f6 08 09 48 	lsl	r8,r11,r8
800086e0:	f4 09 0a 4a 	lsr	r10,r10,r9
800086e4:	f6 09 0a 4b 	lsr	r11,r11,r9
800086e8:	10 4b       	or	r11,r8
800086ea:	c0 88       	rjmp	800086fa <__avr32_s32_to_f64+0x84>
800086ec:	f6 08 09 4e 	lsl	lr,r11,r8
800086f0:	14 4e       	or	lr,r10
800086f2:	16 9a       	mov	r10,r11
800086f4:	30 0b       	mov	r11,0
800086f6:	f4 09 0a 4a 	lsr	r10,r10,r9
800086fa:	ed ba 00 00 	bld	r10,0x0
800086fe:	c0 92       	brcc	80008710 <__avr32_s32_to_f64+0x9a>
80008700:	1c 7e       	tst	lr,lr
80008702:	c0 41       	brne	8000870a <__avr32_s32_to_f64+0x94>
80008704:	ed ba 00 01 	bld	r10,0x1
80008708:	c0 42       	brcc	80008710 <__avr32_s32_to_f64+0x9a>
8000870a:	2f fa       	sub	r10,-1
8000870c:	f7 bb 02 ff 	subhs	r11,-1
80008710:	5c fc       	rol	r12
80008712:	5d 0b       	ror	r11
80008714:	5d 0a       	ror	r10
80008716:	d8 02       	popm	pc
80008718:	e0 68 03 ff 	mov	r8,1023
8000871c:	ed ba 00 0b 	bld	r10,0xb
80008720:	f7 b8 00 ff 	subeq	r8,-1
80008724:	10 0a       	add	r10,r8
80008726:	5c 0b       	acr	r11
80008728:	f7 b9 03 fe 	sublo	r9,-2
8000872c:	e0 49 07 ff 	cp.w	r9,2047
80008730:	c0 55       	brlt	8000873a <__avr32_s32_to_f64+0xc4>
80008732:	30 0a       	mov	r10,0
80008734:	fc 1b ff e0 	movh	r11,0xffe0
80008738:	c0 c8       	rjmp	80008750 <__floatsidf_return_op1>
8000873a:	ed bb 00 1f 	bld	r11,0x1f
8000873e:	f7 b9 01 01 	subne	r9,1
80008742:	ab 9a       	lsr	r10,0xb
80008744:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008748:	a1 7b       	lsl	r11,0x1
8000874a:	ab 9b       	lsr	r11,0xb
8000874c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80008750 <__floatsidf_return_op1>:
80008750:	a1 7c       	lsl	r12,0x1
80008752:	5d 0b       	ror	r11
80008754:	d8 02       	popm	pc

80008756 <__avr32_f64_cmp_eq>:
80008756:	10 3a       	cp.w	r10,r8
80008758:	f2 0b 13 00 	cpc	r11,r9
8000875c:	c0 80       	breq	8000876c <__avr32_f64_cmp_eq+0x16>
8000875e:	a1 7b       	lsl	r11,0x1
80008760:	a1 79       	lsl	r9,0x1
80008762:	14 4b       	or	r11,r10
80008764:	12 4b       	or	r11,r9
80008766:	10 4b       	or	r11,r8
80008768:	5e 0f       	reteq	1
8000876a:	5e fd       	retal	0
8000876c:	a1 7b       	lsl	r11,0x1
8000876e:	fc 1c ff e0 	movh	r12,0xffe0
80008772:	58 0a       	cp.w	r10,0
80008774:	f8 0b 13 00 	cpc	r11,r12
80008778:	5e 8f       	retls	1
8000877a:	5e fd       	retal	0

8000877c <__avr32_f64_cmp_ge>:
8000877c:	1a de       	st.w	--sp,lr
8000877e:	1a d7       	st.w	--sp,r7
80008780:	a1 7b       	lsl	r11,0x1
80008782:	5f 3c       	srlo	r12
80008784:	a1 79       	lsl	r9,0x1
80008786:	5f 37       	srlo	r7
80008788:	5c fc       	rol	r12
8000878a:	fc 1e ff e0 	movh	lr,0xffe0
8000878e:	58 0a       	cp.w	r10,0
80008790:	fc 0b 13 00 	cpc	r11,lr
80008794:	e0 8b 00 1d 	brhi	800087ce <__avr32_f64_cmp_ge+0x52>
80008798:	58 08       	cp.w	r8,0
8000879a:	fc 09 13 00 	cpc	r9,lr
8000879e:	e0 8b 00 18 	brhi	800087ce <__avr32_f64_cmp_ge+0x52>
800087a2:	58 0b       	cp.w	r11,0
800087a4:	f5 ba 00 00 	subfeq	r10,0
800087a8:	c1 50       	breq	800087d2 <__avr32_f64_cmp_ge+0x56>
800087aa:	1b 07       	ld.w	r7,sp++
800087ac:	1b 0e       	ld.w	lr,sp++
800087ae:	58 3c       	cp.w	r12,3
800087b0:	c0 a0       	breq	800087c4 <__avr32_f64_cmp_ge+0x48>
800087b2:	58 1c       	cp.w	r12,1
800087b4:	c0 33       	brcs	800087ba <__avr32_f64_cmp_ge+0x3e>
800087b6:	5e 0f       	reteq	1
800087b8:	5e 1d       	retne	0
800087ba:	10 3a       	cp.w	r10,r8
800087bc:	f2 0b 13 00 	cpc	r11,r9
800087c0:	5e 2f       	reths	1
800087c2:	5e 3d       	retlo	0
800087c4:	14 38       	cp.w	r8,r10
800087c6:	f6 09 13 00 	cpc	r9,r11
800087ca:	5e 2f       	reths	1
800087cc:	5e 3d       	retlo	0
800087ce:	1b 07       	ld.w	r7,sp++
800087d0:	d8 0a       	popm	pc,r12=0
800087d2:	58 17       	cp.w	r7,1
800087d4:	5f 0c       	sreq	r12
800087d6:	58 09       	cp.w	r9,0
800087d8:	f5 b8 00 00 	subfeq	r8,0
800087dc:	1b 07       	ld.w	r7,sp++
800087de:	1b 0e       	ld.w	lr,sp++
800087e0:	5e 0f       	reteq	1
800087e2:	5e fc       	retal	r12

800087e4 <__avr32_f64_cmp_lt>:
800087e4:	1a de       	st.w	--sp,lr
800087e6:	1a d7       	st.w	--sp,r7
800087e8:	a1 7b       	lsl	r11,0x1
800087ea:	5f 3c       	srlo	r12
800087ec:	a1 79       	lsl	r9,0x1
800087ee:	5f 37       	srlo	r7
800087f0:	5c fc       	rol	r12
800087f2:	fc 1e ff e0 	movh	lr,0xffe0
800087f6:	58 0a       	cp.w	r10,0
800087f8:	fc 0b 13 00 	cpc	r11,lr
800087fc:	e0 8b 00 1d 	brhi	80008836 <__avr32_f64_cmp_lt+0x52>
80008800:	58 08       	cp.w	r8,0
80008802:	fc 09 13 00 	cpc	r9,lr
80008806:	e0 8b 00 18 	brhi	80008836 <__avr32_f64_cmp_lt+0x52>
8000880a:	58 0b       	cp.w	r11,0
8000880c:	f5 ba 00 00 	subfeq	r10,0
80008810:	c1 50       	breq	8000883a <__avr32_f64_cmp_lt+0x56>
80008812:	1b 07       	ld.w	r7,sp++
80008814:	1b 0e       	ld.w	lr,sp++
80008816:	58 3c       	cp.w	r12,3
80008818:	c0 a0       	breq	8000882c <__avr32_f64_cmp_lt+0x48>
8000881a:	58 1c       	cp.w	r12,1
8000881c:	c0 33       	brcs	80008822 <__avr32_f64_cmp_lt+0x3e>
8000881e:	5e 0d       	reteq	0
80008820:	5e 1f       	retne	1
80008822:	10 3a       	cp.w	r10,r8
80008824:	f2 0b 13 00 	cpc	r11,r9
80008828:	5e 2d       	reths	0
8000882a:	5e 3f       	retlo	1
8000882c:	14 38       	cp.w	r8,r10
8000882e:	f6 09 13 00 	cpc	r9,r11
80008832:	5e 2d       	reths	0
80008834:	5e 3f       	retlo	1
80008836:	1b 07       	ld.w	r7,sp++
80008838:	d8 0a       	popm	pc,r12=0
8000883a:	58 17       	cp.w	r7,1
8000883c:	5f 1c       	srne	r12
8000883e:	58 09       	cp.w	r9,0
80008840:	f5 b8 00 00 	subfeq	r8,0
80008844:	1b 07       	ld.w	r7,sp++
80008846:	1b 0e       	ld.w	lr,sp++
80008848:	5e 0d       	reteq	0
8000884a:	5e fc       	retal	r12

8000884c <__avr32_f64_div>:
8000884c:	eb cd 40 ff 	pushm	r0-r7,lr
80008850:	f7 e9 20 0e 	eor	lr,r11,r9
80008854:	f6 07 16 14 	lsr	r7,r11,0x14
80008858:	a9 7b       	lsl	r11,0x9
8000885a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000885e:	a9 7a       	lsl	r10,0x9
80008860:	bd bb       	sbr	r11,0x1d
80008862:	e4 1b 3f ff 	andh	r11,0x3fff
80008866:	ab d7       	cbr	r7,0xb
80008868:	e0 80 00 cc 	breq	80008a00 <__avr32_f64_div_round_subnormal+0x54>
8000886c:	e0 47 07 ff 	cp.w	r7,2047
80008870:	e0 84 00 b5 	brge	800089da <__avr32_f64_div_round_subnormal+0x2e>
80008874:	f2 06 16 14 	lsr	r6,r9,0x14
80008878:	a9 79       	lsl	r9,0x9
8000887a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000887e:	a9 78       	lsl	r8,0x9
80008880:	bd b9       	sbr	r9,0x1d
80008882:	e4 19 3f ff 	andh	r9,0x3fff
80008886:	ab d6       	cbr	r6,0xb
80008888:	e0 80 00 e2 	breq	80008a4c <__avr32_f64_div_round_subnormal+0xa0>
8000888c:	e0 46 07 ff 	cp.w	r6,2047
80008890:	e0 84 00 b2 	brge	800089f4 <__avr32_f64_div_round_subnormal+0x48>
80008894:	0c 17       	sub	r7,r6
80008896:	fe 37 fc 01 	sub	r7,-1023
8000889a:	fc 1c 80 00 	movh	r12,0x8000
8000889e:	f8 03 16 01 	lsr	r3,r12,0x1
800088a2:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800088a6:	5c d4       	com	r4
800088a8:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800088ac:	e6 09 06 44 	mulu.d	r4,r3,r9
800088b0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800088b4:	e6 05 06 44 	mulu.d	r4,r3,r5
800088b8:	ea 03 15 02 	lsl	r3,r5,0x2
800088bc:	e6 09 06 44 	mulu.d	r4,r3,r9
800088c0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800088c4:	e6 05 06 44 	mulu.d	r4,r3,r5
800088c8:	ea 03 15 02 	lsl	r3,r5,0x2
800088cc:	e6 09 06 44 	mulu.d	r4,r3,r9
800088d0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800088d4:	e6 05 06 44 	mulu.d	r4,r3,r5
800088d8:	ea 03 15 02 	lsl	r3,r5,0x2
800088dc:	e6 08 06 40 	mulu.d	r0,r3,r8
800088e0:	e4 09 07 40 	macu.d	r0,r2,r9
800088e4:	e6 09 06 44 	mulu.d	r4,r3,r9
800088e8:	02 04       	add	r4,r1
800088ea:	5c 05       	acr	r5
800088ec:	a3 65       	lsl	r5,0x2
800088ee:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800088f2:	a3 64       	lsl	r4,0x2
800088f4:	5c 34       	neg	r4
800088f6:	f8 05 01 45 	sbc	r5,r12,r5
800088fa:	e6 04 06 40 	mulu.d	r0,r3,r4
800088fe:	e4 05 07 40 	macu.d	r0,r2,r5
80008902:	e6 05 06 44 	mulu.d	r4,r3,r5
80008906:	02 04       	add	r4,r1
80008908:	5c 05       	acr	r5
8000890a:	ea 03 15 02 	lsl	r3,r5,0x2
8000890e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008912:	e8 02 15 02 	lsl	r2,r4,0x2
80008916:	e6 08 06 40 	mulu.d	r0,r3,r8
8000891a:	e4 09 07 40 	macu.d	r0,r2,r9
8000891e:	e6 09 06 44 	mulu.d	r4,r3,r9
80008922:	02 04       	add	r4,r1
80008924:	5c 05       	acr	r5
80008926:	a3 65       	lsl	r5,0x2
80008928:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000892c:	a3 64       	lsl	r4,0x2
8000892e:	5c 34       	neg	r4
80008930:	f8 05 01 45 	sbc	r5,r12,r5
80008934:	e6 04 06 40 	mulu.d	r0,r3,r4
80008938:	e4 05 07 40 	macu.d	r0,r2,r5
8000893c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008940:	02 04       	add	r4,r1
80008942:	5c 05       	acr	r5
80008944:	ea 03 15 02 	lsl	r3,r5,0x2
80008948:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000894c:	e8 02 15 02 	lsl	r2,r4,0x2
80008950:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008954:	e4 0b 07 40 	macu.d	r0,r2,r11
80008958:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000895c:	02 02       	add	r2,r1
8000895e:	5c 03       	acr	r3
80008960:	ed b3 00 1c 	bld	r3,0x1c
80008964:	c0 90       	breq	80008976 <__avr32_f64_div+0x12a>
80008966:	a1 72       	lsl	r2,0x1
80008968:	5c f3       	rol	r3
8000896a:	20 17       	sub	r7,1
8000896c:	a3 9a       	lsr	r10,0x3
8000896e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008972:	a3 9b       	lsr	r11,0x3
80008974:	c0 58       	rjmp	8000897e <__avr32_f64_div+0x132>
80008976:	a5 8a       	lsr	r10,0x4
80008978:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000897c:	a5 8b       	lsr	r11,0x4
8000897e:	58 07       	cp.w	r7,0
80008980:	e0 8a 00 8b 	brle	80008a96 <__avr32_f64_div_res_subnormal>
80008984:	e0 12 ff 00 	andl	r2,0xff00
80008988:	e8 12 00 80 	orl	r2,0x80
8000898c:	e6 08 06 40 	mulu.d	r0,r3,r8
80008990:	e4 09 07 40 	macu.d	r0,r2,r9
80008994:	e4 08 06 44 	mulu.d	r4,r2,r8
80008998:	e6 09 06 48 	mulu.d	r8,r3,r9
8000899c:	00 05       	add	r5,r0
8000899e:	f0 01 00 48 	adc	r8,r8,r1
800089a2:	5c 09       	acr	r9
800089a4:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800089a8:	58 04       	cp.w	r4,0
800089aa:	5c 25       	cpc	r5

800089ac <__avr32_f64_div_round_subnormal>:
800089ac:	f4 08 13 00 	cpc	r8,r10
800089b0:	f6 09 13 00 	cpc	r9,r11
800089b4:	5f 36       	srlo	r6
800089b6:	f8 06 17 00 	moveq	r6,r12
800089ba:	e4 0a 16 08 	lsr	r10,r2,0x8
800089be:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800089c2:	e6 0b 16 08 	lsr	r11,r3,0x8
800089c6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800089ca:	ed be 00 1f 	bld	lr,0x1f
800089ce:	ef bb 00 1f 	bst	r11,0x1f
800089d2:	0c 0a       	add	r10,r6
800089d4:	5c 0b       	acr	r11
800089d6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800089da:	e4 1b 00 0f 	andh	r11,0xf
800089de:	14 4b       	or	r11,r10
800089e0:	e0 81 00 a7 	brne	80008b2e <__avr32_f64_div_res_subnormal+0x98>
800089e4:	f2 06 16 14 	lsr	r6,r9,0x14
800089e8:	ab d6       	cbr	r6,0xb
800089ea:	e0 46 07 ff 	cp.w	r6,2047
800089ee:	e0 81 00 a4 	brne	80008b36 <__avr32_f64_div_res_subnormal+0xa0>
800089f2:	c9 e8       	rjmp	80008b2e <__avr32_f64_div_res_subnormal+0x98>
800089f4:	e4 19 00 0f 	andh	r9,0xf
800089f8:	10 49       	or	r9,r8
800089fa:	e0 81 00 9a 	brne	80008b2e <__avr32_f64_div_res_subnormal+0x98>
800089fe:	c9 28       	rjmp	80008b22 <__avr32_f64_div_res_subnormal+0x8c>
80008a00:	a3 7b       	lsl	r11,0x3
80008a02:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008a06:	a3 7a       	lsl	r10,0x3
80008a08:	f5 eb 10 04 	or	r4,r10,r11
80008a0c:	e0 80 00 a0 	breq	80008b4c <__avr32_f64_div_op1_zero>
80008a10:	f6 04 12 00 	clz	r4,r11
80008a14:	c1 70       	breq	80008a42 <__avr32_f64_div_round_subnormal+0x96>
80008a16:	c0 c3       	brcs	80008a2e <__avr32_f64_div_round_subnormal+0x82>
80008a18:	e8 05 11 20 	rsub	r5,r4,32
80008a1c:	f6 04 09 4b 	lsl	r11,r11,r4
80008a20:	f4 05 0a 45 	lsr	r5,r10,r5
80008a24:	0a 4b       	or	r11,r5
80008a26:	f4 04 09 4a 	lsl	r10,r10,r4
80008a2a:	08 17       	sub	r7,r4
80008a2c:	c0 b8       	rjmp	80008a42 <__avr32_f64_div_round_subnormal+0x96>
80008a2e:	f4 04 12 00 	clz	r4,r10
80008a32:	f9 b4 03 00 	movlo	r4,0
80008a36:	f7 b4 02 e0 	subhs	r4,-32
80008a3a:	f4 04 09 4b 	lsl	r11,r10,r4
80008a3e:	30 0a       	mov	r10,0
80008a40:	08 17       	sub	r7,r4
80008a42:	a3 8a       	lsr	r10,0x2
80008a44:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008a48:	a3 8b       	lsr	r11,0x2
80008a4a:	c1 1b       	rjmp	8000886c <__avr32_f64_div+0x20>
80008a4c:	a3 79       	lsl	r9,0x3
80008a4e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008a52:	a3 78       	lsl	r8,0x3
80008a54:	f3 e8 10 04 	or	r4,r9,r8
80008a58:	c6 f0       	breq	80008b36 <__avr32_f64_div_res_subnormal+0xa0>
80008a5a:	f2 04 12 00 	clz	r4,r9
80008a5e:	c1 70       	breq	80008a8c <__avr32_f64_div_round_subnormal+0xe0>
80008a60:	c0 c3       	brcs	80008a78 <__avr32_f64_div_round_subnormal+0xcc>
80008a62:	e8 05 11 20 	rsub	r5,r4,32
80008a66:	f2 04 09 49 	lsl	r9,r9,r4
80008a6a:	f0 05 0a 45 	lsr	r5,r8,r5
80008a6e:	0a 49       	or	r9,r5
80008a70:	f0 04 09 48 	lsl	r8,r8,r4
80008a74:	08 16       	sub	r6,r4
80008a76:	c0 b8       	rjmp	80008a8c <__avr32_f64_div_round_subnormal+0xe0>
80008a78:	f0 04 12 00 	clz	r4,r8
80008a7c:	f9 b4 03 00 	movlo	r4,0
80008a80:	f7 b4 02 e0 	subhs	r4,-32
80008a84:	f0 04 09 49 	lsl	r9,r8,r4
80008a88:	30 08       	mov	r8,0
80008a8a:	08 16       	sub	r6,r4
80008a8c:	a3 88       	lsr	r8,0x2
80008a8e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008a92:	a3 89       	lsr	r9,0x2
80008a94:	cf ca       	rjmp	8000888c <__avr32_f64_div+0x40>

80008a96 <__avr32_f64_div_res_subnormal>:
80008a96:	5c 37       	neg	r7
80008a98:	2f f7       	sub	r7,-1
80008a9a:	f1 b7 04 c0 	satu	r7,0x6
80008a9e:	e0 47 00 20 	cp.w	r7,32
80008aa2:	c1 54       	brge	80008acc <__avr32_f64_div_res_subnormal+0x36>
80008aa4:	ee 06 11 20 	rsub	r6,r7,32
80008aa8:	e4 07 0a 42 	lsr	r2,r2,r7
80008aac:	e6 06 09 4c 	lsl	r12,r3,r6
80008ab0:	18 42       	or	r2,r12
80008ab2:	e6 07 0a 43 	lsr	r3,r3,r7
80008ab6:	f4 06 09 41 	lsl	r1,r10,r6
80008aba:	f4 07 0a 4a 	lsr	r10,r10,r7
80008abe:	f6 06 09 4c 	lsl	r12,r11,r6
80008ac2:	18 4a       	or	r10,r12
80008ac4:	f6 07 0a 4b 	lsr	r11,r11,r7
80008ac8:	30 00       	mov	r0,0
80008aca:	c1 58       	rjmp	80008af4 <__avr32_f64_div_res_subnormal+0x5e>
80008acc:	ee 06 11 20 	rsub	r6,r7,32
80008ad0:	f9 b0 00 00 	moveq	r0,0
80008ad4:	f9 bc 00 00 	moveq	r12,0
80008ad8:	c0 50       	breq	80008ae2 <__avr32_f64_div_res_subnormal+0x4c>
80008ada:	f4 06 09 40 	lsl	r0,r10,r6
80008ade:	f6 06 09 4c 	lsl	r12,r11,r6
80008ae2:	e6 07 0a 42 	lsr	r2,r3,r7
80008ae6:	30 03       	mov	r3,0
80008ae8:	f4 07 0a 41 	lsr	r1,r10,r7
80008aec:	18 41       	or	r1,r12
80008aee:	f6 07 0a 4a 	lsr	r10,r11,r7
80008af2:	30 0b       	mov	r11,0
80008af4:	e0 12 ff 00 	andl	r2,0xff00
80008af8:	e8 12 00 80 	orl	r2,0x80
80008afc:	e6 08 06 46 	mulu.d	r6,r3,r8
80008b00:	e4 09 07 46 	macu.d	r6,r2,r9
80008b04:	e4 08 06 44 	mulu.d	r4,r2,r8
80008b08:	e6 09 06 48 	mulu.d	r8,r3,r9
80008b0c:	0c 05       	add	r5,r6
80008b0e:	f0 07 00 48 	adc	r8,r8,r7
80008b12:	5c 09       	acr	r9
80008b14:	30 07       	mov	r7,0
80008b16:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008b1a:	00 34       	cp.w	r4,r0
80008b1c:	e2 05 13 00 	cpc	r5,r1
80008b20:	c4 6b       	rjmp	800089ac <__avr32_f64_div_round_subnormal>
80008b22:	1c 9b       	mov	r11,lr
80008b24:	e6 1b 80 00 	andh	r11,0x8000,COH
80008b28:	30 0a       	mov	r10,0
80008b2a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008b2e:	3f fb       	mov	r11,-1
80008b30:	30 0a       	mov	r10,0
80008b32:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008b36:	f5 eb 10 04 	or	r4,r10,r11
80008b3a:	c0 90       	breq	80008b4c <__avr32_f64_div_op1_zero>
80008b3c:	1c 9b       	mov	r11,lr
80008b3e:	e6 1b 80 00 	andh	r11,0x8000,COH
80008b42:	ea 1b 7f f0 	orh	r11,0x7ff0
80008b46:	30 0a       	mov	r10,0
80008b48:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008b4c <__avr32_f64_div_op1_zero>:
80008b4c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008b50:	ce f0       	breq	80008b2e <__avr32_f64_div_res_subnormal+0x98>
80008b52:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008b56:	e0 44 07 ff 	cp.w	r4,2047
80008b5a:	ce 41       	brne	80008b22 <__avr32_f64_div_res_subnormal+0x8c>
80008b5c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008b60:	ce 10       	breq	80008b22 <__avr32_f64_div_res_subnormal+0x8c>
80008b62:	ce 6b       	rjmp	80008b2e <__avr32_f64_div_res_subnormal+0x98>

80008b64 <__avr32_udiv64>:
80008b64:	d4 31       	pushm	r0-r7,lr
80008b66:	1a 97       	mov	r7,sp
80008b68:	20 3d       	sub	sp,12
80008b6a:	10 9c       	mov	r12,r8
80008b6c:	12 9e       	mov	lr,r9
80008b6e:	14 93       	mov	r3,r10
80008b70:	58 09       	cp.w	r9,0
80008b72:	e0 81 00 bd 	brne	80008cec <__avr32_udiv64+0x188>
80008b76:	16 38       	cp.w	r8,r11
80008b78:	e0 88 00 40 	brls	80008bf8 <__avr32_udiv64+0x94>
80008b7c:	f0 08 12 00 	clz	r8,r8
80008b80:	c0 d0       	breq	80008b9a <__avr32_udiv64+0x36>
80008b82:	f6 08 09 4b 	lsl	r11,r11,r8
80008b86:	f0 09 11 20 	rsub	r9,r8,32
80008b8a:	f8 08 09 4c 	lsl	r12,r12,r8
80008b8e:	f4 09 0a 49 	lsr	r9,r10,r9
80008b92:	f4 08 09 43 	lsl	r3,r10,r8
80008b96:	f3 eb 10 0b 	or	r11,r9,r11
80008b9a:	f8 0e 16 10 	lsr	lr,r12,0x10
80008b9e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008ba2:	f6 0e 0d 00 	divu	r0,r11,lr
80008ba6:	e6 0b 16 10 	lsr	r11,r3,0x10
80008baa:	00 99       	mov	r9,r0
80008bac:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008bb0:	e0 0a 02 48 	mul	r8,r0,r10
80008bb4:	10 3b       	cp.w	r11,r8
80008bb6:	c0 a2       	brcc	80008bca <__avr32_udiv64+0x66>
80008bb8:	20 19       	sub	r9,1
80008bba:	18 0b       	add	r11,r12
80008bbc:	18 3b       	cp.w	r11,r12
80008bbe:	c0 63       	brcs	80008bca <__avr32_udiv64+0x66>
80008bc0:	10 3b       	cp.w	r11,r8
80008bc2:	f7 b9 03 01 	sublo	r9,1
80008bc6:	f7 dc e3 0b 	addcs	r11,r11,r12
80008bca:	f6 08 01 01 	sub	r1,r11,r8
80008bce:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008bd2:	e2 0e 0d 00 	divu	r0,r1,lr
80008bd6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008bda:	00 98       	mov	r8,r0
80008bdc:	e0 0a 02 4a 	mul	r10,r0,r10
80008be0:	14 33       	cp.w	r3,r10
80008be2:	c0 82       	brcc	80008bf2 <__avr32_udiv64+0x8e>
80008be4:	20 18       	sub	r8,1
80008be6:	18 03       	add	r3,r12
80008be8:	18 33       	cp.w	r3,r12
80008bea:	c0 43       	brcs	80008bf2 <__avr32_udiv64+0x8e>
80008bec:	14 33       	cp.w	r3,r10
80008bee:	f7 b8 03 01 	sublo	r8,1
80008bf2:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008bf6:	cd f8       	rjmp	80008db4 <__avr32_udiv64+0x250>
80008bf8:	58 08       	cp.w	r8,0
80008bfa:	c0 51       	brne	80008c04 <__avr32_udiv64+0xa0>
80008bfc:	30 19       	mov	r9,1
80008bfe:	f2 08 0d 08 	divu	r8,r9,r8
80008c02:	10 9c       	mov	r12,r8
80008c04:	f8 06 12 00 	clz	r6,r12
80008c08:	c0 41       	brne	80008c10 <__avr32_udiv64+0xac>
80008c0a:	18 1b       	sub	r11,r12
80008c0c:	30 19       	mov	r9,1
80008c0e:	c4 08       	rjmp	80008c8e <__avr32_udiv64+0x12a>
80008c10:	ec 01 11 20 	rsub	r1,r6,32
80008c14:	f4 01 0a 49 	lsr	r9,r10,r1
80008c18:	f8 06 09 4c 	lsl	r12,r12,r6
80008c1c:	f6 06 09 48 	lsl	r8,r11,r6
80008c20:	f6 01 0a 41 	lsr	r1,r11,r1
80008c24:	f3 e8 10 08 	or	r8,r9,r8
80008c28:	f8 03 16 10 	lsr	r3,r12,0x10
80008c2c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008c30:	e2 03 0d 00 	divu	r0,r1,r3
80008c34:	f0 0b 16 10 	lsr	r11,r8,0x10
80008c38:	00 9e       	mov	lr,r0
80008c3a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c3e:	e0 05 02 49 	mul	r9,r0,r5
80008c42:	12 3b       	cp.w	r11,r9
80008c44:	c0 a2       	brcc	80008c58 <__avr32_udiv64+0xf4>
80008c46:	20 1e       	sub	lr,1
80008c48:	18 0b       	add	r11,r12
80008c4a:	18 3b       	cp.w	r11,r12
80008c4c:	c0 63       	brcs	80008c58 <__avr32_udiv64+0xf4>
80008c4e:	12 3b       	cp.w	r11,r9
80008c50:	f7 be 03 01 	sublo	lr,1
80008c54:	f7 dc e3 0b 	addcs	r11,r11,r12
80008c58:	12 1b       	sub	r11,r9
80008c5a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008c5e:	f6 03 0d 02 	divu	r2,r11,r3
80008c62:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008c66:	04 99       	mov	r9,r2
80008c68:	e4 05 02 4b 	mul	r11,r2,r5
80008c6c:	16 38       	cp.w	r8,r11
80008c6e:	c0 a2       	brcc	80008c82 <__avr32_udiv64+0x11e>
80008c70:	20 19       	sub	r9,1
80008c72:	18 08       	add	r8,r12
80008c74:	18 38       	cp.w	r8,r12
80008c76:	c0 63       	brcs	80008c82 <__avr32_udiv64+0x11e>
80008c78:	16 38       	cp.w	r8,r11
80008c7a:	f7 b9 03 01 	sublo	r9,1
80008c7e:	f1 dc e3 08 	addcs	r8,r8,r12
80008c82:	f4 06 09 43 	lsl	r3,r10,r6
80008c86:	f0 0b 01 0b 	sub	r11,r8,r11
80008c8a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008c8e:	f8 06 16 10 	lsr	r6,r12,0x10
80008c92:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008c96:	f6 06 0d 00 	divu	r0,r11,r6
80008c9a:	e6 0b 16 10 	lsr	r11,r3,0x10
80008c9e:	00 9a       	mov	r10,r0
80008ca0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008ca4:	e0 0e 02 48 	mul	r8,r0,lr
80008ca8:	10 3b       	cp.w	r11,r8
80008caa:	c0 a2       	brcc	80008cbe <__avr32_udiv64+0x15a>
80008cac:	20 1a       	sub	r10,1
80008cae:	18 0b       	add	r11,r12
80008cb0:	18 3b       	cp.w	r11,r12
80008cb2:	c0 63       	brcs	80008cbe <__avr32_udiv64+0x15a>
80008cb4:	10 3b       	cp.w	r11,r8
80008cb6:	f7 ba 03 01 	sublo	r10,1
80008cba:	f7 dc e3 0b 	addcs	r11,r11,r12
80008cbe:	f6 08 01 01 	sub	r1,r11,r8
80008cc2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008cc6:	e2 06 0d 00 	divu	r0,r1,r6
80008cca:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008cce:	00 98       	mov	r8,r0
80008cd0:	e0 0e 02 4b 	mul	r11,r0,lr
80008cd4:	16 33       	cp.w	r3,r11
80008cd6:	c0 82       	brcc	80008ce6 <__avr32_udiv64+0x182>
80008cd8:	20 18       	sub	r8,1
80008cda:	18 03       	add	r3,r12
80008cdc:	18 33       	cp.w	r3,r12
80008cde:	c0 43       	brcs	80008ce6 <__avr32_udiv64+0x182>
80008ce0:	16 33       	cp.w	r3,r11
80008ce2:	f7 b8 03 01 	sublo	r8,1
80008ce6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008cea:	c6 98       	rjmp	80008dbc <__avr32_udiv64+0x258>
80008cec:	16 39       	cp.w	r9,r11
80008cee:	e0 8b 00 65 	brhi	80008db8 <__avr32_udiv64+0x254>
80008cf2:	f2 09 12 00 	clz	r9,r9
80008cf6:	c0 b1       	brne	80008d0c <__avr32_udiv64+0x1a8>
80008cf8:	10 3a       	cp.w	r10,r8
80008cfa:	5f 2a       	srhs	r10
80008cfc:	1c 3b       	cp.w	r11,lr
80008cfe:	5f b8       	srhi	r8
80008d00:	10 4a       	or	r10,r8
80008d02:	f2 0a 18 00 	cp.b	r10,r9
80008d06:	c5 90       	breq	80008db8 <__avr32_udiv64+0x254>
80008d08:	30 18       	mov	r8,1
80008d0a:	c5 98       	rjmp	80008dbc <__avr32_udiv64+0x258>
80008d0c:	f0 09 09 46 	lsl	r6,r8,r9
80008d10:	f2 03 11 20 	rsub	r3,r9,32
80008d14:	fc 09 09 4e 	lsl	lr,lr,r9
80008d18:	f0 03 0a 48 	lsr	r8,r8,r3
80008d1c:	f6 09 09 4c 	lsl	r12,r11,r9
80008d20:	f4 03 0a 42 	lsr	r2,r10,r3
80008d24:	ef 46 ff f4 	st.w	r7[-12],r6
80008d28:	f6 03 0a 43 	lsr	r3,r11,r3
80008d2c:	18 42       	or	r2,r12
80008d2e:	f1 ee 10 0c 	or	r12,r8,lr
80008d32:	f8 01 16 10 	lsr	r1,r12,0x10
80008d36:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008d3a:	e6 01 0d 04 	divu	r4,r3,r1
80008d3e:	e4 03 16 10 	lsr	r3,r2,0x10
80008d42:	08 9e       	mov	lr,r4
80008d44:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008d48:	e8 06 02 48 	mul	r8,r4,r6
80008d4c:	10 33       	cp.w	r3,r8
80008d4e:	c0 a2       	brcc	80008d62 <__avr32_udiv64+0x1fe>
80008d50:	20 1e       	sub	lr,1
80008d52:	18 03       	add	r3,r12
80008d54:	18 33       	cp.w	r3,r12
80008d56:	c0 63       	brcs	80008d62 <__avr32_udiv64+0x1fe>
80008d58:	10 33       	cp.w	r3,r8
80008d5a:	f7 be 03 01 	sublo	lr,1
80008d5e:	e7 dc e3 03 	addcs	r3,r3,r12
80008d62:	10 13       	sub	r3,r8
80008d64:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008d68:	e6 01 0d 00 	divu	r0,r3,r1
80008d6c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008d70:	00 98       	mov	r8,r0
80008d72:	e0 06 02 46 	mul	r6,r0,r6
80008d76:	0c 3b       	cp.w	r11,r6
80008d78:	c0 a2       	brcc	80008d8c <__avr32_udiv64+0x228>
80008d7a:	20 18       	sub	r8,1
80008d7c:	18 0b       	add	r11,r12
80008d7e:	18 3b       	cp.w	r11,r12
80008d80:	c0 63       	brcs	80008d8c <__avr32_udiv64+0x228>
80008d82:	0c 3b       	cp.w	r11,r6
80008d84:	f7 dc e3 0b 	addcs	r11,r11,r12
80008d88:	f7 b8 03 01 	sublo	r8,1
80008d8c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008d90:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008d94:	0c 1b       	sub	r11,r6
80008d96:	f0 04 06 42 	mulu.d	r2,r8,r4
80008d9a:	06 95       	mov	r5,r3
80008d9c:	16 35       	cp.w	r5,r11
80008d9e:	e0 8b 00 0a 	brhi	80008db2 <__avr32_udiv64+0x24e>
80008da2:	5f 0b       	sreq	r11
80008da4:	f4 09 09 49 	lsl	r9,r10,r9
80008da8:	12 32       	cp.w	r2,r9
80008daa:	5f b9       	srhi	r9
80008dac:	f7 e9 00 09 	and	r9,r11,r9
80008db0:	c0 60       	breq	80008dbc <__avr32_udiv64+0x258>
80008db2:	20 18       	sub	r8,1
80008db4:	30 09       	mov	r9,0
80008db6:	c0 38       	rjmp	80008dbc <__avr32_udiv64+0x258>
80008db8:	30 09       	mov	r9,0
80008dba:	12 98       	mov	r8,r9
80008dbc:	10 9a       	mov	r10,r8
80008dbe:	12 93       	mov	r3,r9
80008dc0:	10 92       	mov	r2,r8
80008dc2:	12 9b       	mov	r11,r9
80008dc4:	2f dd       	sub	sp,-12
80008dc6:	d8 32       	popm	r0-r7,pc

80008dc8 <__avr32_umod64>:
80008dc8:	d4 31       	pushm	r0-r7,lr
80008dca:	1a 97       	mov	r7,sp
80008dcc:	20 3d       	sub	sp,12
80008dce:	10 9c       	mov	r12,r8
80008dd0:	12 95       	mov	r5,r9
80008dd2:	14 9e       	mov	lr,r10
80008dd4:	16 91       	mov	r1,r11
80008dd6:	16 96       	mov	r6,r11
80008dd8:	58 09       	cp.w	r9,0
80008dda:	e0 81 00 81 	brne	80008edc <__avr32_umod64+0x114>
80008dde:	16 38       	cp.w	r8,r11
80008de0:	e0 88 00 12 	brls	80008e04 <__avr32_umod64+0x3c>
80008de4:	f0 08 12 00 	clz	r8,r8
80008de8:	c4 e0       	breq	80008e84 <__avr32_umod64+0xbc>
80008dea:	f6 08 09 46 	lsl	r6,r11,r8
80008dee:	f8 08 09 4c 	lsl	r12,r12,r8
80008df2:	f0 0b 11 20 	rsub	r11,r8,32
80008df6:	f4 08 09 4e 	lsl	lr,r10,r8
80008dfa:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008dfe:	f7 e6 10 06 	or	r6,r11,r6
80008e02:	c4 18       	rjmp	80008e84 <__avr32_umod64+0xbc>
80008e04:	58 08       	cp.w	r8,0
80008e06:	c0 51       	brne	80008e10 <__avr32_umod64+0x48>
80008e08:	30 19       	mov	r9,1
80008e0a:	f2 08 0d 08 	divu	r8,r9,r8
80008e0e:	10 9c       	mov	r12,r8
80008e10:	f8 08 12 00 	clz	r8,r12
80008e14:	c0 31       	brne	80008e1a <__avr32_umod64+0x52>
80008e16:	18 16       	sub	r6,r12
80008e18:	c3 68       	rjmp	80008e84 <__avr32_umod64+0xbc>
80008e1a:	f0 03 11 20 	rsub	r3,r8,32
80008e1e:	f4 03 0a 4b 	lsr	r11,r10,r3
80008e22:	f8 08 09 4c 	lsl	r12,r12,r8
80008e26:	ec 08 09 49 	lsl	r9,r6,r8
80008e2a:	ec 03 0a 43 	lsr	r3,r6,r3
80008e2e:	f7 e9 10 09 	or	r9,r11,r9
80008e32:	f8 05 16 10 	lsr	r5,r12,0x10
80008e36:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008e3a:	e6 05 0d 02 	divu	r2,r3,r5
80008e3e:	f2 0e 16 10 	lsr	lr,r9,0x10
80008e42:	ec 02 02 4b 	mul	r11,r6,r2
80008e46:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008e4a:	16 3e       	cp.w	lr,r11
80008e4c:	c0 72       	brcc	80008e5a <__avr32_umod64+0x92>
80008e4e:	18 0e       	add	lr,r12
80008e50:	18 3e       	cp.w	lr,r12
80008e52:	c0 43       	brcs	80008e5a <__avr32_umod64+0x92>
80008e54:	16 3e       	cp.w	lr,r11
80008e56:	fd dc e3 0e 	addcs	lr,lr,r12
80008e5a:	fc 0b 01 03 	sub	r3,lr,r11
80008e5e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008e62:	e6 05 0d 02 	divu	r2,r3,r5
80008e66:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e6a:	a5 36       	mul	r6,r2
80008e6c:	0c 39       	cp.w	r9,r6
80008e6e:	c0 72       	brcc	80008e7c <__avr32_umod64+0xb4>
80008e70:	18 09       	add	r9,r12
80008e72:	18 39       	cp.w	r9,r12
80008e74:	c0 43       	brcs	80008e7c <__avr32_umod64+0xb4>
80008e76:	0c 39       	cp.w	r9,r6
80008e78:	f3 dc e3 09 	addcs	r9,r9,r12
80008e7c:	f2 06 01 06 	sub	r6,r9,r6
80008e80:	f4 08 09 4e 	lsl	lr,r10,r8
80008e84:	f8 0a 16 10 	lsr	r10,r12,0x10
80008e88:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008e8c:	ec 0a 0d 02 	divu	r2,r6,r10
80008e90:	fc 09 16 10 	lsr	r9,lr,0x10
80008e94:	ea 02 02 4b 	mul	r11,r5,r2
80008e98:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e9c:	16 39       	cp.w	r9,r11
80008e9e:	c0 72       	brcc	80008eac <__avr32_umod64+0xe4>
80008ea0:	18 09       	add	r9,r12
80008ea2:	18 39       	cp.w	r9,r12
80008ea4:	c0 43       	brcs	80008eac <__avr32_umod64+0xe4>
80008ea6:	16 39       	cp.w	r9,r11
80008ea8:	f3 dc e3 09 	addcs	r9,r9,r12
80008eac:	f2 0b 01 0b 	sub	r11,r9,r11
80008eb0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008eb4:	f6 0a 0d 0a 	divu	r10,r11,r10
80008eb8:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008ebc:	ea 0a 02 4a 	mul	r10,r5,r10
80008ec0:	14 3e       	cp.w	lr,r10
80008ec2:	c0 72       	brcc	80008ed0 <__avr32_umod64+0x108>
80008ec4:	18 0e       	add	lr,r12
80008ec6:	18 3e       	cp.w	lr,r12
80008ec8:	c0 43       	brcs	80008ed0 <__avr32_umod64+0x108>
80008eca:	14 3e       	cp.w	lr,r10
80008ecc:	fd dc e3 0e 	addcs	lr,lr,r12
80008ed0:	fc 0a 01 0a 	sub	r10,lr,r10
80008ed4:	30 0b       	mov	r11,0
80008ed6:	f4 08 0a 4a 	lsr	r10,r10,r8
80008eda:	c7 b8       	rjmp	80008fd0 <__avr32_umod64+0x208>
80008edc:	16 39       	cp.w	r9,r11
80008ede:	e0 8b 00 79 	brhi	80008fd0 <__avr32_umod64+0x208>
80008ee2:	f2 09 12 00 	clz	r9,r9
80008ee6:	c1 21       	brne	80008f0a <__avr32_umod64+0x142>
80008ee8:	10 3a       	cp.w	r10,r8
80008eea:	5f 2b       	srhs	r11
80008eec:	0a 31       	cp.w	r1,r5
80008eee:	5f ba       	srhi	r10
80008ef0:	f7 ea 10 0a 	or	r10,r11,r10
80008ef4:	f2 0a 18 00 	cp.b	r10,r9
80008ef8:	c0 60       	breq	80008f04 <__avr32_umod64+0x13c>
80008efa:	fc 08 01 0c 	sub	r12,lr,r8
80008efe:	e2 05 01 46 	sbc	r6,r1,r5
80008f02:	18 9e       	mov	lr,r12
80008f04:	0c 9b       	mov	r11,r6
80008f06:	1c 9a       	mov	r10,lr
80008f08:	c6 48       	rjmp	80008fd0 <__avr32_umod64+0x208>
80008f0a:	ea 09 09 4c 	lsl	r12,r5,r9
80008f0e:	f2 06 11 20 	rsub	r6,r9,32
80008f12:	f6 09 09 4b 	lsl	r11,r11,r9
80008f16:	f0 09 09 42 	lsl	r2,r8,r9
80008f1a:	ef 46 ff f4 	st.w	r7[-12],r6
80008f1e:	f0 06 0a 48 	lsr	r8,r8,r6
80008f22:	18 48       	or	r8,r12
80008f24:	e2 06 0a 4c 	lsr	r12,r1,r6
80008f28:	f4 09 09 43 	lsl	r3,r10,r9
80008f2c:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008f30:	f4 06 0a 4a 	lsr	r10,r10,r6
80008f34:	16 4a       	or	r10,r11
80008f36:	f0 0b 16 10 	lsr	r11,r8,0x10
80008f3a:	f8 0b 0d 04 	divu	r4,r12,r11
80008f3e:	f4 0c 16 10 	lsr	r12,r10,0x10
80008f42:	08 91       	mov	r1,r4
80008f44:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008f48:	e8 0e 02 46 	mul	r6,r4,lr
80008f4c:	0c 3c       	cp.w	r12,r6
80008f4e:	c0 a2       	brcc	80008f62 <__avr32_umod64+0x19a>
80008f50:	20 11       	sub	r1,1
80008f52:	10 0c       	add	r12,r8
80008f54:	10 3c       	cp.w	r12,r8
80008f56:	c0 63       	brcs	80008f62 <__avr32_umod64+0x19a>
80008f58:	0c 3c       	cp.w	r12,r6
80008f5a:	f7 b1 03 01 	sublo	r1,1
80008f5e:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008f62:	0c 1c       	sub	r12,r6
80008f64:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008f68:	f8 0b 0d 04 	divu	r4,r12,r11
80008f6c:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008f70:	08 96       	mov	r6,r4
80008f72:	e8 0e 02 4e 	mul	lr,r4,lr
80008f76:	1c 3b       	cp.w	r11,lr
80008f78:	c0 a2       	brcc	80008f8c <__avr32_umod64+0x1c4>
80008f7a:	20 16       	sub	r6,1
80008f7c:	10 0b       	add	r11,r8
80008f7e:	10 3b       	cp.w	r11,r8
80008f80:	c0 63       	brcs	80008f8c <__avr32_umod64+0x1c4>
80008f82:	1c 3b       	cp.w	r11,lr
80008f84:	f7 b6 03 01 	sublo	r6,1
80008f88:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008f8c:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008f90:	1c 1b       	sub	r11,lr
80008f92:	e2 02 06 40 	mulu.d	r0,r1,r2
80008f96:	00 9e       	mov	lr,r0
80008f98:	02 9c       	mov	r12,r1
80008f9a:	16 3c       	cp.w	r12,r11
80008f9c:	e0 8b 00 08 	brhi	80008fac <__avr32_umod64+0x1e4>
80008fa0:	5f 06       	sreq	r6
80008fa2:	06 30       	cp.w	r0,r3
80008fa4:	5f ba       	srhi	r10
80008fa6:	ed ea 00 0a 	and	r10,r6,r10
80008faa:	c0 60       	breq	80008fb6 <__avr32_umod64+0x1ee>
80008fac:	fc 02 01 04 	sub	r4,lr,r2
80008fb0:	f8 08 01 4c 	sbc	r12,r12,r8
80008fb4:	08 9e       	mov	lr,r4
80008fb6:	e6 0e 01 0a 	sub	r10,r3,lr
80008fba:	f6 0c 01 4c 	sbc	r12,r11,r12
80008fbe:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008fc2:	f8 09 0a 4b 	lsr	r11,r12,r9
80008fc6:	f4 09 0a 4a 	lsr	r10,r10,r9
80008fca:	f8 01 09 4c 	lsl	r12,r12,r1
80008fce:	18 4a       	or	r10,r12
80008fd0:	2f dd       	sub	sp,-12
80008fd2:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 cf 83 	rcall	8000300c <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009110:	d6 03       	rete

80009112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 cf 7c 	rcall	8000300c <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000911e:	d6 03       	rete

80009120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 cf 75 	rcall	8000300c <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000912c:	d6 03       	rete

8000912e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 cf 6e 	rcall	8000300c <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
